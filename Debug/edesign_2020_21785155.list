
edesign_2020_21785155.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005930  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08005af4  08005af4  00015af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f44  08005f44  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005f44  08005f44  00015f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f4c  08005f4c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f4c  08005f4c  00015f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f50  08005f50  00015f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014a4  20000010  08005f64  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014b4  08005f64  000214b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebf7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000229b  00000000  00000000  0002ec37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb8  00000000  00000000  00030ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  00031d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000228d1  00000000  00000000  00032b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b7e4  00000000  00000000  00055401  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4ecb  00000000  00000000  00060be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00135ab0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f44  00000000  00000000  00135b2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005adc 	.word	0x08005adc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08005adc 	.word	0x08005adc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_ADC_ConvCpltCallback>:
int32_t accumulator;
int32_t numavg;
float smooth_sample;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	huart2.gState = HAL_UART_STATE_READY;
 800050c:	4b3f      	ldr	r3, [pc, #252]	; (800060c <HAL_ADC_ConvCpltCallback+0x108>)
 800050e:	2220      	movs	r2, #32
 8000510:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	for (int i=512;i<1024;i++)
 8000514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	e04d      	b.n	80005b8 <HAL_ADC_ConvCpltCallback+0xb4>
	{
		accumulator += rec_buffer[i];
 800051c:	4a3c      	ldr	r2, [pc, #240]	; (8000610 <HAL_ADC_ConvCpltCallback+0x10c>)
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	4413      	add	r3, r2
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	461a      	mov	r2, r3
 8000526:	4b3b      	ldr	r3, [pc, #236]	; (8000614 <HAL_ADC_ConvCpltCallback+0x110>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4413      	add	r3, r2
 800052c:	4a39      	ldr	r2, [pc, #228]	; (8000614 <HAL_ADC_ConvCpltCallback+0x110>)
 800052e:	6013      	str	r3, [r2, #0]
		temp_sample = (int32_t)rec_buffer[i] - avg;
 8000530:	4a37      	ldr	r2, [pc, #220]	; (8000610 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	4413      	add	r3, r2
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	461a      	mov	r2, r3
 800053a:	4b37      	ldr	r3, [pc, #220]	; (8000618 <HAL_ADC_ConvCpltCallback+0x114>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	4a36      	ldr	r2, [pc, #216]	; (800061c <HAL_ADC_ConvCpltCallback+0x118>)
 8000542:	6013      	str	r3, [r2, #0]
		smooth_sample = 0.125f * temp_sample + 0.875f * smooth_sample;
 8000544:	4b35      	ldr	r3, [pc, #212]	; (800061c <HAL_ADC_ConvCpltCallback+0x118>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	ee07 3a90 	vmov	s15, r3
 800054c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000550:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8000554:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000558:	4b31      	ldr	r3, [pc, #196]	; (8000620 <HAL_ADC_ConvCpltCallback+0x11c>)
 800055a:	edd3 7a00 	vldr	s15, [r3]
 800055e:	eef6 6a0c 	vmov.f32	s13, #108	; 0x3f600000  0.875
 8000562:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800056a:	4b2d      	ldr	r3, [pc, #180]	; (8000620 <HAL_ADC_ConvCpltCallback+0x11c>)
 800056c:	edc3 7a00 	vstr	s15, [r3]
		temp_sample = (int32_t)smooth_sample;
 8000570:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000572:	edd3 7a00 	vldr	s15, [r3]
 8000576:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800057a:	ee17 2a90 	vmov	r2, s15
 800057e:	4b27      	ldr	r3, [pc, #156]	; (800061c <HAL_ADC_ConvCpltCallback+0x118>)
 8000580:	601a      	str	r2, [r3, #0]
		if (temp_sample > 127) temp_sample = 127;
 8000582:	4b26      	ldr	r3, [pc, #152]	; (800061c <HAL_ADC_ConvCpltCallback+0x118>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b7f      	cmp	r3, #127	; 0x7f
 8000588:	dd02      	ble.n	8000590 <HAL_ADC_ConvCpltCallback+0x8c>
 800058a:	4b24      	ldr	r3, [pc, #144]	; (800061c <HAL_ADC_ConvCpltCallback+0x118>)
 800058c:	227f      	movs	r2, #127	; 0x7f
 800058e:	601a      	str	r2, [r3, #0]
		if (temp_sample < -128) temp_sample = -128;
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <HAL_ADC_ConvCpltCallback+0x118>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8000598:	da03      	bge.n	80005a2 <HAL_ADC_ConvCpltCallback+0x9e>
 800059a:	4b20      	ldr	r3, [pc, #128]	; (800061c <HAL_ADC_ConvCpltCallback+0x118>)
 800059c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80005a0:	601a      	str	r2, [r3, #0]
		out_buffer[i] = (int8_t)temp_sample;
 80005a2:	4b1e      	ldr	r3, [pc, #120]	; (800061c <HAL_ADC_ConvCpltCallback+0x118>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	b259      	sxtb	r1, r3
 80005a8:	4a1e      	ldr	r2, [pc, #120]	; (8000624 <HAL_ADC_ConvCpltCallback+0x120>)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4413      	add	r3, r2
 80005ae:	460a      	mov	r2, r1
 80005b0:	701a      	strb	r2, [r3, #0]
	for (int i=512;i<1024;i++)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	3301      	adds	r3, #1
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005be:	dbad      	blt.n	800051c <HAL_ADC_ConvCpltCallback+0x18>
	}
	numavg += 512;
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <HAL_ADC_ConvCpltCallback+0x124>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_ADC_ConvCpltCallback+0x124>)
 80005ca:	6013      	str	r3, [r2, #0]
	if (numavg >= 20480)
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <HAL_ADC_ConvCpltCallback+0x124>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80005d4:	db0f      	blt.n	80005f6 <HAL_ADC_ConvCpltCallback+0xf2>
	{
		avg = accumulator /20480;
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_ADC_ConvCpltCallback+0x110>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a14      	ldr	r2, [pc, #80]	; (800062c <HAL_ADC_ConvCpltCallback+0x128>)
 80005dc:	fb82 1203 	smull	r1, r2, r2, r3
 80005e0:	1352      	asrs	r2, r2, #13
 80005e2:	17db      	asrs	r3, r3, #31
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <HAL_ADC_ConvCpltCallback+0x114>)
 80005e8:	6013      	str	r3, [r2, #0]
		accumulator = 0;
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <HAL_ADC_ConvCpltCallback+0x110>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
		numavg = 0;
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <HAL_ADC_ConvCpltCallback+0x124>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
	}

	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)out_buffer+512, 512);
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <HAL_ADC_ConvCpltCallback+0x12c>)
 80005f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005fc:	4619      	mov	r1, r3
 80005fe:	4803      	ldr	r0, [pc, #12]	; (800060c <HAL_ADC_ConvCpltCallback+0x108>)
 8000600:	f003 ffee 	bl	80045e0 <HAL_UART_Transmit_DMA>
}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20001204 	.word	0x20001204
 8000610:	20000088 	.word	0x20000088
 8000614:	20000888 	.word	0x20000888
 8000618:	20000000 	.word	0x20000000
 800061c:	2000088c 	.word	0x2000088c
 8000620:	200012a4 	.word	0x200012a4
 8000624:	20000488 	.word	0x20000488
 8000628:	20000038 	.word	0x20000038
 800062c:	66666667 	.word	0x66666667
 8000630:	20000688 	.word	0x20000688

08000634 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	huart2.gState = HAL_UART_STATE_READY;
 800063c:	4b3e      	ldr	r3, [pc, #248]	; (8000738 <HAL_ADC_ConvHalfCpltCallback+0x104>)
 800063e:	2220      	movs	r2, #32
 8000640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	for (int i=0;i<512;i++)
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	e04d      	b.n	80006e6 <HAL_ADC_ConvHalfCpltCallback+0xb2>
	{
		accumulator += rec_buffer[i];
 800064a:	4a3c      	ldr	r2, [pc, #240]	; (800073c <HAL_ADC_ConvHalfCpltCallback+0x108>)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	4413      	add	r3, r2
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	461a      	mov	r2, r3
 8000654:	4b3a      	ldr	r3, [pc, #232]	; (8000740 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4413      	add	r3, r2
 800065a:	4a39      	ldr	r2, [pc, #228]	; (8000740 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 800065c:	6013      	str	r3, [r2, #0]
		temp_sample = (int32_t)rec_buffer[i] - avg;
 800065e:	4a37      	ldr	r2, [pc, #220]	; (800073c <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4413      	add	r3, r2
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	461a      	mov	r2, r3
 8000668:	4b36      	ldr	r3, [pc, #216]	; (8000744 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	4a36      	ldr	r2, [pc, #216]	; (8000748 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8000670:	6013      	str	r3, [r2, #0]
		smooth_sample = 0.125f * temp_sample + 0.875f * smooth_sample;
 8000672:	4b35      	ldr	r3, [pc, #212]	; (8000748 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	ee07 3a90 	vmov	s15, r3
 800067a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800067e:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8000682:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000686:	4b31      	ldr	r3, [pc, #196]	; (800074c <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8000688:	edd3 7a00 	vldr	s15, [r3]
 800068c:	eef6 6a0c 	vmov.f32	s13, #108	; 0x3f600000  0.875
 8000690:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000698:	4b2c      	ldr	r3, [pc, #176]	; (800074c <HAL_ADC_ConvHalfCpltCallback+0x118>)
 800069a:	edc3 7a00 	vstr	s15, [r3]
		temp_sample = (int32_t)smooth_sample;
 800069e:	4b2b      	ldr	r3, [pc, #172]	; (800074c <HAL_ADC_ConvHalfCpltCallback+0x118>)
 80006a0:	edd3 7a00 	vldr	s15, [r3]
 80006a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006a8:	ee17 2a90 	vmov	r2, s15
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 80006ae:	601a      	str	r2, [r3, #0]
		if (temp_sample > 127) temp_sample = 127;
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b7f      	cmp	r3, #127	; 0x7f
 80006b6:	dd02      	ble.n	80006be <HAL_ADC_ConvHalfCpltCallback+0x8a>
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 80006ba:	227f      	movs	r2, #127	; 0x7f
 80006bc:	601a      	str	r2, [r3, #0]
		if (temp_sample < -128) temp_sample = -128;
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80006c6:	da03      	bge.n	80006d0 <HAL_ADC_ConvHalfCpltCallback+0x9c>
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 80006ca:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80006ce:	601a      	str	r2, [r3, #0]
		out_buffer[i] = (int8_t)temp_sample;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	b259      	sxtb	r1, r3
 80006d6:	4a1e      	ldr	r2, [pc, #120]	; (8000750 <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4413      	add	r3, r2
 80006dc:	460a      	mov	r2, r1
 80006de:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<512;i++)
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3301      	adds	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006ec:	dbad      	blt.n	800064a <HAL_ADC_ConvHalfCpltCallback+0x16>
	}
	numavg += 512;
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <HAL_ADC_ConvHalfCpltCallback+0x120>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <HAL_ADC_ConvHalfCpltCallback+0x120>)
 80006f8:	6013      	str	r3, [r2, #0]
	if (numavg >= 20480)
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <HAL_ADC_ConvHalfCpltCallback+0x120>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000702:	db0f      	blt.n	8000724 <HAL_ADC_ConvHalfCpltCallback+0xf0>
	{
		avg = accumulator /20480;
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a13      	ldr	r2, [pc, #76]	; (8000758 <HAL_ADC_ConvHalfCpltCallback+0x124>)
 800070a:	fb82 1203 	smull	r1, r2, r2, r3
 800070e:	1352      	asrs	r2, r2, #13
 8000710:	17db      	asrs	r3, r3, #31
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8000716:	6013      	str	r3, [r2, #0]
		accumulator = 0;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
		numavg = 0;
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <HAL_ADC_ConvHalfCpltCallback+0x120>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
	}

	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)out_buffer, 512);
 8000724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000728:	4909      	ldr	r1, [pc, #36]	; (8000750 <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 800072a:	4803      	ldr	r0, [pc, #12]	; (8000738 <HAL_ADC_ConvHalfCpltCallback+0x104>)
 800072c:	f003 ff58 	bl	80045e0 <HAL_UART_Transmit_DMA>
}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20001204 	.word	0x20001204
 800073c:	20000088 	.word	0x20000088
 8000740:	20000888 	.word	0x20000888
 8000744:	20000000 	.word	0x20000000
 8000748:	2000088c 	.word	0x2000088c
 800074c:	200012a4 	.word	0x200012a4
 8000750:	20000488 	.word	0x20000488
 8000754:	20000038 	.word	0x20000038
 8000758:	66666667 	.word	0x66666667

0800075c <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af02      	add	r7, sp, #8
 8000762:	6078      	str	r0, [r7, #4]
	HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 8000764:	2300      	movs	r3, #0
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800076c:	4a08      	ldr	r2, [pc, #32]	; (8000790 <HAL_DAC_ConvCpltCallbackCh1+0x34>)
 800076e:	2100      	movs	r1, #0
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f001 fee9 	bl	8002548 <HAL_DAC_Start_DMA>
	wave_fillbuffer(dac_buffer+512, wave, 512);
 8000776:	4807      	ldr	r0, [pc, #28]	; (8000794 <HAL_DAC_ConvCpltCallbackCh1+0x38>)
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <HAL_DAC_ConvCpltCallbackCh1+0x3c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000782:	4619      	mov	r1, r3
 8000784:	f000 fe54 	bl	8001430 <wave_fillbuffer>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2000097c 	.word	0x2000097c
 8000794:	20000d7c 	.word	0x20000d7c
 8000798:	20000890 	.word	0x20000890

0800079c <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	wave_fillbuffer(dac_buffer, wave, 512);
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x24>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ae:	4619      	mov	r1, r3
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x28>)
 80007b2:	f000 fe3d 	bl	8001430 <wave_fillbuffer>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000890 	.word	0x20000890
 80007c4:	2000097c 	.word	0x2000097c

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b09a      	sub	sp, #104	; 0x68
 80007cc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	state = Idle;
 80007ce:	4ba4      	ldr	r3, [pc, #656]	; (8000a60 <main+0x298>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
	state_start = off;
 80007d4:	4ba3      	ldr	r3, [pc, #652]	; (8000a64 <main+0x29c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
	exti = off;
 80007da:	4ba3      	ldr	r3, [pc, #652]	; (8000a68 <main+0x2a0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
	exti_start = off;
 80007e0:	4ba2      	ldr	r3, [pc, #648]	; (8000a6c <main+0x2a4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
	buttOne = off;
 80007e6:	4ba2      	ldr	r3, [pc, #648]	; (8000a70 <main+0x2a8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
	buttTwo	= off;
 80007ec:	4ba1      	ldr	r3, [pc, #644]	; (8000a74 <main+0x2ac>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
	buttThree = off;
 80007f2:	4ba1      	ldr	r3, [pc, #644]	; (8000a78 <main+0x2b0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
	buttRec = off;
 80007f8:	4ba0      	ldr	r3, [pc, #640]	; (8000a7c <main+0x2b4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
	buttStop = off;
 80007fe:	4ba0      	ldr	r3, [pc, #640]	; (8000a80 <main+0x2b8>)
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
	wave_init();
 8000804:	f000 fdd8 	bl	80013b8 <wave_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f001 f908 	bl	8001a1c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 fb42 	bl	8000e94 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f000 fd16 	bl	8001240 <MX_GPIO_Init>
  MX_DMA_Init();
 8000814:	f000 fcd6 	bl	80011c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000818:	f000 fcaa 	bl	8001170 <MX_USART2_UART_Init>
  MX_DAC_Init();
 800081c:	f000 fbfc 	bl	8001018 <MX_DAC_Init>
  MX_TIM6_Init();
 8000820:	f000 fc70 	bl	8001104 <MX_TIM6_Init>
  MX_ADC2_Init();
 8000824:	f000 fba4 	bl	8000f70 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000828:	f000 fc20 	bl	800106c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t msg[10] = {127, 128, '2','1','7','8','5','1','5','5'};
 800082c:	4a95      	ldr	r2, [pc, #596]	; (8000a84 <main+0x2bc>)
 800082e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000832:	ca07      	ldmia	r2, {r0, r1, r2}
 8000834:	c303      	stmia	r3!, {r0, r1}
 8000836:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000838:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800083c:	2364      	movs	r3, #100	; 0x64
 800083e:	220a      	movs	r2, #10
 8000840:	4891      	ldr	r0, [pc, #580]	; (8000a88 <main+0x2c0>)
 8000842:	f003 fe34 	bl	80044ae <HAL_UART_Transmit>
  HAL_TIM_Base_Start(&htim6);
 8000846:	4891      	ldr	r0, [pc, #580]	; (8000a8c <main+0x2c4>)
 8000848:	f003 fb53 	bl	8003ef2 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 800084c:	4890      	ldr	r0, [pc, #576]	; (8000a90 <main+0x2c8>)
 800084e:	f003 fb50 	bl	8003ef2 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)rec_buffer, 1024);
 8000852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000856:	498f      	ldr	r1, [pc, #572]	; (8000a94 <main+0x2cc>)
 8000858:	488f      	ldr	r0, [pc, #572]	; (8000a98 <main+0x2d0>)
 800085a:	f001 f995 	bl	8001b88 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /////////////////////////////////////////////////////////////////////
	    if (exti){
 800085e:	4b82      	ldr	r3, [pc, #520]	; (8000a68 <main+0x2a0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d06b      	beq.n	800093e <main+0x176>

		  if (!exti_start) Ri = HAL_GetTick();
 8000866:	4b81      	ldr	r3, [pc, #516]	; (8000a6c <main+0x2a4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d105      	bne.n	800087a <main+0xb2>
 800086e:	f001 f93b 	bl	8001ae8 <HAL_GetTick>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	4b89      	ldr	r3, [pc, #548]	; (8000a9c <main+0x2d4>)
 8000878:	601a      	str	r2, [r3, #0]
		  exti_start = on;
 800087a:	4b7c      	ldr	r3, [pc, #496]	; (8000a6c <main+0x2a4>)
 800087c:	2201      	movs	r2, #1
 800087e:	601a      	str	r2, [r3, #0]
		  Rf = HAL_GetTick();
 8000880:	f001 f932 	bl	8001ae8 <HAL_GetTick>
 8000884:	4603      	mov	r3, r0
 8000886:	461a      	mov	r2, r3
 8000888:	4b85      	ldr	r3, [pc, #532]	; (8000aa0 <main+0x2d8>)
 800088a:	601a      	str	r2, [r3, #0]

		  	if (Rf - Ri > 10){
 800088c:	4b84      	ldr	r3, [pc, #528]	; (8000aa0 <main+0x2d8>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b82      	ldr	r3, [pc, #520]	; (8000a9c <main+0x2d4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	2b0a      	cmp	r3, #10
 8000898:	dd51      	ble.n	800093e <main+0x176>
		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) buttOne = on;
 800089a:	2140      	movs	r1, #64	; 0x40
 800089c:	4881      	ldr	r0, [pc, #516]	; (8000aa4 <main+0x2dc>)
 800089e:	f002 fd93 	bl	80033c8 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d003      	beq.n	80008b0 <main+0xe8>
 80008a8:	4b71      	ldr	r3, [pc, #452]	; (8000a70 <main+0x2a8>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	e002      	b.n	80008b6 <main+0xee>
		  		else buttOne = off;
 80008b0:	4b6f      	ldr	r3, [pc, #444]	; (8000a70 <main+0x2a8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]

			  	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) buttTwo = on;
 80008b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ba:	487a      	ldr	r0, [pc, #488]	; (8000aa4 <main+0x2dc>)
 80008bc:	f002 fd84 	bl	80033c8 <HAL_GPIO_ReadPin>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d003      	beq.n	80008ce <main+0x106>
 80008c6:	4b6b      	ldr	r3, [pc, #428]	; (8000a74 <main+0x2ac>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	e002      	b.n	80008d4 <main+0x10c>
			  	else buttTwo = off;
 80008ce:	4b69      	ldr	r3, [pc, #420]	; (8000a74 <main+0x2ac>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)) buttThree = on;
 80008d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d8:	4872      	ldr	r0, [pc, #456]	; (8000aa4 <main+0x2dc>)
 80008da:	f002 fd75 	bl	80033c8 <HAL_GPIO_ReadPin>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d003      	beq.n	80008ec <main+0x124>
 80008e4:	4b64      	ldr	r3, [pc, #400]	; (8000a78 <main+0x2b0>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	e002      	b.n	80008f2 <main+0x12a>
		  		else buttThree = off;
 80008ec:	4b62      	ldr	r3, [pc, #392]	; (8000a78 <main+0x2b0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) buttRec = on;
 80008f2:	2180      	movs	r1, #128	; 0x80
 80008f4:	486b      	ldr	r0, [pc, #428]	; (8000aa4 <main+0x2dc>)
 80008f6:	f002 fd67 	bl	80033c8 <HAL_GPIO_ReadPin>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d003      	beq.n	8000908 <main+0x140>
 8000900:	4b5e      	ldr	r3, [pc, #376]	; (8000a7c <main+0x2b4>)
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	e002      	b.n	800090e <main+0x146>
		  		else buttRec = off;
 8000908:	4b5c      	ldr	r3, [pc, #368]	; (8000a7c <main+0x2b4>)
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) buttStop = on;
 800090e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000912:	4865      	ldr	r0, [pc, #404]	; (8000aa8 <main+0x2e0>)
 8000914:	f002 fd58 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d003      	beq.n	8000926 <main+0x15e>
 800091e:	4b58      	ldr	r3, [pc, #352]	; (8000a80 <main+0x2b8>)
 8000920:	2201      	movs	r2, #1
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	e002      	b.n	800092c <main+0x164>
		  		else buttStop = off;
 8000926:	4b56      	ldr	r3, [pc, #344]	; (8000a80 <main+0x2b8>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]

		  		exti = off;
 800092c:	4b4e      	ldr	r3, [pc, #312]	; (8000a68 <main+0x2a0>)
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
		  		state_start = off;
 8000932:	4b4c      	ldr	r3, [pc, #304]	; (8000a64 <main+0x29c>)
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
		  		exti_start = off;
 8000938:	4b4c      	ldr	r3, [pc, #304]	; (8000a6c <main+0x2a4>)
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
		  	}
	  }
	  /////////////////////////////////////////////////////////////////////

	  if (!state_start && !(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))){
 800093e:	4b49      	ldr	r3, [pc, #292]	; (8000a64 <main+0x29c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	f040 8155 	bne.w	8000bf2 <main+0x42a>
 8000948:	2140      	movs	r1, #64	; 0x40
 800094a:	4856      	ldr	r0, [pc, #344]	; (8000aa4 <main+0x2dc>)
 800094c:	f002 fd3c 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	f040 814d 	bne.w	8000bf2 <main+0x42a>
 8000958:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800095c:	4851      	ldr	r0, [pc, #324]	; (8000aa4 <main+0x2dc>)
 800095e:	f002 fd33 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	f040 8144 	bne.w	8000bf2 <main+0x42a>
 800096a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800096e:	484d      	ldr	r0, [pc, #308]	; (8000aa4 <main+0x2dc>)
 8000970:	f002 fd2a 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	f040 813b 	bne.w	8000bf2 <main+0x42a>
 800097c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000980:	4849      	ldr	r0, [pc, #292]	; (8000aa8 <main+0x2e0>)
 8000982:	f002 fd21 	bl	80033c8 <HAL_GPIO_ReadPin>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	f040 8132 	bne.w	8000bf2 <main+0x42a>
			  if (buttOne || buttTwo || buttThree || buttStop) state_start = on;
 800098e:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <main+0x2a8>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d10b      	bne.n	80009ae <main+0x1e6>
 8000996:	4b37      	ldr	r3, [pc, #220]	; (8000a74 <main+0x2ac>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d107      	bne.n	80009ae <main+0x1e6>
 800099e:	4b36      	ldr	r3, [pc, #216]	; (8000a78 <main+0x2b0>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d103      	bne.n	80009ae <main+0x1e6>
 80009a6:	4b36      	ldr	r3, [pc, #216]	; (8000a80 <main+0x2b8>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d002      	beq.n	80009b4 <main+0x1ec>
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <main+0x29c>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	601a      	str	r2, [r3, #0]
			  if (!buttRec && buttOne){
 80009b4:	4b31      	ldr	r3, [pc, #196]	; (8000a7c <main+0x2b4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d126      	bne.n	8000a0a <main+0x242>
 80009bc:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <main+0x2a8>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d022      	beq.n	8000a0a <main+0x242>
				  state = PlayOne;
 80009c4:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <main+0x298>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	701a      	strb	r2, [r3, #0]
				  wave = 1;
 80009ca:	4b38      	ldr	r3, [pc, #224]	; (8000aac <main+0x2e4>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	601a      	str	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'P','l','a','y','_','_','_','1'};
 80009d0:	4a37      	ldr	r2, [pc, #220]	; (8000ab0 <main+0x2e8>)
 80009d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80009d8:	c303      	stmia	r3!, {r0, r1}
 80009da:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80009dc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80009e0:	2364      	movs	r3, #100	; 0x64
 80009e2:	220a      	movs	r2, #10
 80009e4:	4828      	ldr	r0, [pc, #160]	; (8000a88 <main+0x2c0>)
 80009e6:	f003 fd62 	bl	80044ae <HAL_UART_Transmit>
		  		  wave_fillbuffer(dac_buffer, 1, 1024);
 80009ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ee:	2101      	movs	r1, #1
 80009f0:	4830      	ldr	r0, [pc, #192]	; (8000ab4 <main+0x2ec>)
 80009f2:	f000 fd1d 	bl	8001430 <wave_fillbuffer>
		  		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 80009f6:	2300      	movs	r3, #0
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009fe:	4a2d      	ldr	r2, [pc, #180]	; (8000ab4 <main+0x2ec>)
 8000a00:	2100      	movs	r1, #0
 8000a02:	482d      	ldr	r0, [pc, #180]	; (8000ab8 <main+0x2f0>)
 8000a04:	f001 fda0 	bl	8002548 <HAL_DAC_Start_DMA>
			  if (!buttRec && buttOne){
 8000a08:	e0f3      	b.n	8000bf2 <main+0x42a>
			  }
			  else if (!buttRec && buttTwo){
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <main+0x2b4>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d156      	bne.n	8000ac0 <main+0x2f8>
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <main+0x2ac>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d052      	beq.n	8000ac0 <main+0x2f8>
				  state = PlayTwo;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <main+0x298>)
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	701a      	strb	r2, [r3, #0]
				  wave = 2;
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <main+0x2e4>)
 8000a22:	2202      	movs	r2, #2
 8000a24:	601a      	str	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'P','l','a','y','_','_','_','2'};
 8000a26:	4a25      	ldr	r2, [pc, #148]	; (8000abc <main+0x2f4>)
 8000a28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a2e:	c303      	stmia	r3!, {r0, r1}
 8000a30:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000a32:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000a36:	2364      	movs	r3, #100	; 0x64
 8000a38:	220a      	movs	r2, #10
 8000a3a:	4813      	ldr	r0, [pc, #76]	; (8000a88 <main+0x2c0>)
 8000a3c:	f003 fd37 	bl	80044ae <HAL_UART_Transmit>
		  		  wave_fillbuffer(dac_buffer, 2, 1024);
 8000a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a44:	2102      	movs	r1, #2
 8000a46:	481b      	ldr	r0, [pc, #108]	; (8000ab4 <main+0x2ec>)
 8000a48:	f000 fcf2 	bl	8001430 <wave_fillbuffer>
		  		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a54:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <main+0x2ec>)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4817      	ldr	r0, [pc, #92]	; (8000ab8 <main+0x2f0>)
 8000a5a:	f001 fd75 	bl	8002548 <HAL_DAC_Start_DMA>
			  else if (!buttRec && buttTwo){
 8000a5e:	e0c8      	b.n	8000bf2 <main+0x42a>
 8000a60:	20000898 	.word	0x20000898
 8000a64:	200011c0 	.word	0x200011c0
 8000a68:	200008fc 	.word	0x200008fc
 8000a6c:	20000904 	.word	0x20000904
 8000a70:	2000003c 	.word	0x2000003c
 8000a74:	2000002c 	.word	0x2000002c
 8000a78:	20000900 	.word	0x20000900
 8000a7c:	200012a8 	.word	0x200012a8
 8000a80:	20000894 	.word	0x20000894
 8000a84:	08005af4 	.word	0x08005af4
 8000a88:	20001204 	.word	0x20001204
 8000a8c:	2000117c 	.word	0x2000117c
 8000a90:	200011c4 	.word	0x200011c4
 8000a94:	20000088 	.word	0x20000088
 8000a98:	20000040 	.word	0x20000040
 8000a9c:	200011bc 	.word	0x200011bc
 8000aa0:	20000034 	.word	0x20000034
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	20000890 	.word	0x20000890
 8000ab0:	08005b00 	.word	0x08005b00
 8000ab4:	2000097c 	.word	0x2000097c
 8000ab8:	20000968 	.word	0x20000968
 8000abc:	08005b0c 	.word	0x08005b0c
			  }
			  else if (!buttRec && buttThree){
 8000ac0:	4baf      	ldr	r3, [pc, #700]	; (8000d80 <main+0x5b8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d126      	bne.n	8000b16 <main+0x34e>
 8000ac8:	4bae      	ldr	r3, [pc, #696]	; (8000d84 <main+0x5bc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d022      	beq.n	8000b16 <main+0x34e>
				  state = PlayThree;
 8000ad0:	4bad      	ldr	r3, [pc, #692]	; (8000d88 <main+0x5c0>)
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	701a      	strb	r2, [r3, #0]
				  wave = 3;
 8000ad6:	4bad      	ldr	r3, [pc, #692]	; (8000d8c <main+0x5c4>)
 8000ad8:	2203      	movs	r2, #3
 8000ada:	601a      	str	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'P','l','a','y','_','_','_','3'};
 8000adc:	4aac      	ldr	r2, [pc, #688]	; (8000d90 <main+0x5c8>)
 8000ade:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ae2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ae4:	c303      	stmia	r3!, {r0, r1}
 8000ae6:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000ae8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000aec:	2364      	movs	r3, #100	; 0x64
 8000aee:	220a      	movs	r2, #10
 8000af0:	48a8      	ldr	r0, [pc, #672]	; (8000d94 <main+0x5cc>)
 8000af2:	f003 fcdc 	bl	80044ae <HAL_UART_Transmit>
		  		  wave_fillbuffer(dac_buffer, 3, 1024);
 8000af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000afa:	2103      	movs	r1, #3
 8000afc:	48a6      	ldr	r0, [pc, #664]	; (8000d98 <main+0x5d0>)
 8000afe:	f000 fc97 	bl	8001430 <wave_fillbuffer>
		  		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 8000b02:	2300      	movs	r3, #0
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0a:	4aa3      	ldr	r2, [pc, #652]	; (8000d98 <main+0x5d0>)
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	48a3      	ldr	r0, [pc, #652]	; (8000d9c <main+0x5d4>)
 8000b10:	f001 fd1a 	bl	8002548 <HAL_DAC_Start_DMA>
			  else if (!buttRec && buttThree){
 8000b14:	e06d      	b.n	8000bf2 <main+0x42a>
			  }
			  else if (buttRec && buttOne){
 8000b16:	4b9a      	ldr	r3, [pc, #616]	; (8000d80 <main+0x5b8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d018      	beq.n	8000b50 <main+0x388>
 8000b1e:	4ba0      	ldr	r3, [pc, #640]	; (8000da0 <main+0x5d8>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d014      	beq.n	8000b50 <main+0x388>
				  state = RecOne;
 8000b26:	4b98      	ldr	r3, [pc, #608]	; (8000d88 <main+0x5c0>)
 8000b28:	2204      	movs	r2, #4
 8000b2a:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'R','e','c','o','r','d','_','1'};
 8000b2c:	4a9d      	ldr	r2, [pc, #628]	; (8000da4 <main+0x5dc>)
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b34:	c303      	stmia	r3!, {r0, r1}
 8000b36:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000b38:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000b3c:	2364      	movs	r3, #100	; 0x64
 8000b3e:	220a      	movs	r2, #10
 8000b40:	4894      	ldr	r0, [pc, #592]	; (8000d94 <main+0x5cc>)
 8000b42:	f003 fcb4 	bl	80044ae <HAL_UART_Transmit>
		  		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000b46:	2100      	movs	r1, #0
 8000b48:	4894      	ldr	r0, [pc, #592]	; (8000d9c <main+0x5d4>)
 8000b4a:	f001 fdab 	bl	80026a4 <HAL_DAC_Stop_DMA>
			  else if (buttRec && buttOne){
 8000b4e:	e050      	b.n	8000bf2 <main+0x42a>
			  }
			  else if (buttRec && buttTwo){
 8000b50:	4b8b      	ldr	r3, [pc, #556]	; (8000d80 <main+0x5b8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d018      	beq.n	8000b8a <main+0x3c2>
 8000b58:	4b93      	ldr	r3, [pc, #588]	; (8000da8 <main+0x5e0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d014      	beq.n	8000b8a <main+0x3c2>
				  state = RecTwo;
 8000b60:	4b89      	ldr	r3, [pc, #548]	; (8000d88 <main+0x5c0>)
 8000b62:	2205      	movs	r2, #5
 8000b64:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'R','e','c','o','r','d','_','2'};
 8000b66:	4a91      	ldr	r2, [pc, #580]	; (8000dac <main+0x5e4>)
 8000b68:	f107 0318 	add.w	r3, r7, #24
 8000b6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b6e:	c303      	stmia	r3!, {r0, r1}
 8000b70:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000b72:	f107 0118 	add.w	r1, r7, #24
 8000b76:	2364      	movs	r3, #100	; 0x64
 8000b78:	220a      	movs	r2, #10
 8000b7a:	4886      	ldr	r0, [pc, #536]	; (8000d94 <main+0x5cc>)
 8000b7c:	f003 fc97 	bl	80044ae <HAL_UART_Transmit>
		  		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000b80:	2100      	movs	r1, #0
 8000b82:	4886      	ldr	r0, [pc, #536]	; (8000d9c <main+0x5d4>)
 8000b84:	f001 fd8e 	bl	80026a4 <HAL_DAC_Stop_DMA>
			  else if (buttRec && buttTwo){
 8000b88:	e033      	b.n	8000bf2 <main+0x42a>
			  }
			  else if (buttRec && buttThree){
 8000b8a:	4b7d      	ldr	r3, [pc, #500]	; (8000d80 <main+0x5b8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d018      	beq.n	8000bc4 <main+0x3fc>
 8000b92:	4b7c      	ldr	r3, [pc, #496]	; (8000d84 <main+0x5bc>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d014      	beq.n	8000bc4 <main+0x3fc>
				  state = RecThree;
 8000b9a:	4b7b      	ldr	r3, [pc, #492]	; (8000d88 <main+0x5c0>)
 8000b9c:	2206      	movs	r2, #6
 8000b9e:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'R','e','c','o','r','d','_','3'};
 8000ba0:	4a83      	ldr	r2, [pc, #524]	; (8000db0 <main+0x5e8>)
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ba8:	c303      	stmia	r3!, {r0, r1}
 8000baa:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000bac:	f107 010c 	add.w	r1, r7, #12
 8000bb0:	2364      	movs	r3, #100	; 0x64
 8000bb2:	220a      	movs	r2, #10
 8000bb4:	4877      	ldr	r0, [pc, #476]	; (8000d94 <main+0x5cc>)
 8000bb6:	f003 fc7a 	bl	80044ae <HAL_UART_Transmit>
		  		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4877      	ldr	r0, [pc, #476]	; (8000d9c <main+0x5d4>)
 8000bbe:	f001 fd71 	bl	80026a4 <HAL_DAC_Stop_DMA>
			  else if (buttRec && buttThree){
 8000bc2:	e016      	b.n	8000bf2 <main+0x42a>
			  }
			  else if (buttStop){
 8000bc4:	4b7b      	ldr	r3, [pc, #492]	; (8000db4 <main+0x5ec>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d012      	beq.n	8000bf2 <main+0x42a>
				  state = Idle;
 8000bcc:	4b6e      	ldr	r3, [pc, #440]	; (8000d88 <main+0x5c0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'S','t','o','p','_','_','_','_'};
 8000bd2:	4a79      	ldr	r2, [pc, #484]	; (8000db8 <main+0x5f0>)
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bd8:	c303      	stmia	r3!, {r0, r1}
 8000bda:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 1000);
 8000bdc:	4639      	mov	r1, r7
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	220a      	movs	r2, #10
 8000be4:	486b      	ldr	r0, [pc, #428]	; (8000d94 <main+0x5cc>)
 8000be6:	f003 fc62 	bl	80044ae <HAL_UART_Transmit>
		  		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000bea:	2100      	movs	r1, #0
 8000bec:	486b      	ldr	r0, [pc, #428]	; (8000d9c <main+0x5d4>)
 8000bee:	f001 fd59 	bl	80026a4 <HAL_DAC_Stop_DMA>
			  }
	  }

	  ticky = HAL_GetTick();
 8000bf2:	f000 ff79 	bl	8001ae8 <HAL_GetTick>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b70      	ldr	r3, [pc, #448]	; (8000dbc <main+0x5f4>)
 8000bfc:	601a      	str	r2, [r3, #0]
	  ///////////////////////////////////////////////////////////////////////////////////
	  if (state == PlayOne || state == PlayTwo || state == PlayThree || state == Idle){
 8000bfe:	4b62      	ldr	r3, [pc, #392]	; (8000d88 <main+0x5c0>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d00e      	beq.n	8000c26 <main+0x45e>
 8000c08:	4b5f      	ldr	r3, [pc, #380]	; (8000d88 <main+0x5c0>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d009      	beq.n	8000c26 <main+0x45e>
 8000c12:	4b5d      	ldr	r3, [pc, #372]	; (8000d88 <main+0x5c0>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	d004      	beq.n	8000c26 <main+0x45e>
 8000c1c:	4b5a      	ldr	r3, [pc, #360]	; (8000d88 <main+0x5c0>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d174      	bne.n	8000d10 <main+0x548>
	  	  if (state == PlayOne){
 8000c26:	4b58      	ldr	r3, [pc, #352]	; (8000d88 <main+0x5c0>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d11c      	bne.n	8000c6a <main+0x4a2>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, on);
 8000c30:	4b62      	ldr	r3, [pc, #392]	; (8000dbc <main+0x5f4>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b62      	ldr	r3, [pc, #392]	; (8000dc0 <main+0x5f8>)
 8000c36:	fb83 1302 	smull	r1, r3, r3, r2
 8000c3a:	1159      	asrs	r1, r3, #5
 8000c3c:	17d3      	asrs	r3, r2, #31
 8000c3e:	1acb      	subs	r3, r1, r3
 8000c40:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c44:	fb01 f303 	mul.w	r3, r1, r3
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2bf9      	cmp	r3, #249	; 0xf9
 8000c4c:	dc06      	bgt.n	8000c5c <main+0x494>
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c54:	485b      	ldr	r0, [pc, #364]	; (8000dc4 <main+0x5fc>)
 8000c56:	f002 fbcf 	bl	80033f8 <HAL_GPIO_WritePin>
 8000c5a:	e00c      	b.n	8000c76 <main+0x4ae>
	  		  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c62:	4858      	ldr	r0, [pc, #352]	; (8000dc4 <main+0x5fc>)
 8000c64:	f002 fbc8 	bl	80033f8 <HAL_GPIO_WritePin>
 8000c68:	e005      	b.n	8000c76 <main+0x4ae>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c70:	4854      	ldr	r0, [pc, #336]	; (8000dc4 <main+0x5fc>)
 8000c72:	f002 fbc1 	bl	80033f8 <HAL_GPIO_WritePin>

	  	  if (state == PlayTwo){
 8000c76:	4b44      	ldr	r3, [pc, #272]	; (8000d88 <main+0x5c0>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d11c      	bne.n	8000cba <main+0x4f2>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, on);
 8000c80:	4b4e      	ldr	r3, [pc, #312]	; (8000dbc <main+0x5f4>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b4e      	ldr	r3, [pc, #312]	; (8000dc0 <main+0x5f8>)
 8000c86:	fb83 1302 	smull	r1, r3, r3, r2
 8000c8a:	1159      	asrs	r1, r3, #5
 8000c8c:	17d3      	asrs	r3, r2, #31
 8000c8e:	1acb      	subs	r3, r1, r3
 8000c90:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c94:	fb01 f303 	mul.w	r3, r1, r3
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2bf9      	cmp	r3, #249	; 0xf9
 8000c9c:	dc06      	bgt.n	8000cac <main+0x4e4>
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca4:	4848      	ldr	r0, [pc, #288]	; (8000dc8 <main+0x600>)
 8000ca6:	f002 fba7 	bl	80033f8 <HAL_GPIO_WritePin>
 8000caa:	e00c      	b.n	8000cc6 <main+0x4fe>
	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb2:	4845      	ldr	r0, [pc, #276]	; (8000dc8 <main+0x600>)
 8000cb4:	f002 fba0 	bl	80033f8 <HAL_GPIO_WritePin>
 8000cb8:	e005      	b.n	8000cc6 <main+0x4fe>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cc0:	4841      	ldr	r0, [pc, #260]	; (8000dc8 <main+0x600>)
 8000cc2:	f002 fb99 	bl	80033f8 <HAL_GPIO_WritePin>

	  	  if (state == PlayThree){
 8000cc6:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <main+0x5c0>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d11a      	bne.n	8000d06 <main+0x53e>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, on);
 8000cd0:	4b3a      	ldr	r3, [pc, #232]	; (8000dbc <main+0x5f4>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <main+0x5f8>)
 8000cd6:	fb83 1302 	smull	r1, r3, r3, r2
 8000cda:	1159      	asrs	r1, r3, #5
 8000cdc:	17d3      	asrs	r3, r2, #31
 8000cde:	1acb      	subs	r3, r1, r3
 8000ce0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ce4:	fb01 f303 	mul.w	r3, r1, r3
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2bf9      	cmp	r3, #249	; 0xf9
 8000cec:	dc05      	bgt.n	8000cfa <main+0x532>
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	4835      	ldr	r0, [pc, #212]	; (8000dc8 <main+0x600>)
 8000cf4:	f002 fb80 	bl	80033f8 <HAL_GPIO_WritePin>
 8000cf8:	e00a      	b.n	8000d10 <main+0x548>
	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2110      	movs	r1, #16
 8000cfe:	4832      	ldr	r0, [pc, #200]	; (8000dc8 <main+0x600>)
 8000d00:	f002 fb7a 	bl	80033f8 <HAL_GPIO_WritePin>
 8000d04:	e004      	b.n	8000d10 <main+0x548>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2110      	movs	r1, #16
 8000d0a:	482f      	ldr	r0, [pc, #188]	; (8000dc8 <main+0x600>)
 8000d0c:	f002 fb74 	bl	80033f8 <HAL_GPIO_WritePin>
	  }
	  ///////////////////////////////////////////////////////////////////////////////////
  	  if (state == RecOne || state == RecTwo || state == RecThree){
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <main+0x5c0>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	d00a      	beq.n	8000d30 <main+0x568>
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <main+0x5c0>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b05      	cmp	r3, #5
 8000d22:	d005      	beq.n	8000d30 <main+0x568>
 8000d24:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <main+0x5c0>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	f040 80a2 	bne.w	8000e74 <main+0x6ac>
  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, on);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2120      	movs	r1, #32
 8000d34:	4824      	ldr	r0, [pc, #144]	; (8000dc8 <main+0x600>)
 8000d36:	f002 fb5f 	bl	80033f8 <HAL_GPIO_WritePin>

  	  	  if (state == RecOne){
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <main+0x5c0>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d143      	bne.n	8000dcc <main+0x604>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, on);
 8000d44:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <main+0x5f4>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <main+0x5f8>)
 8000d4a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d4e:	1159      	asrs	r1, r3, #5
 8000d50:	17d3      	asrs	r3, r2, #31
 8000d52:	1acb      	subs	r3, r1, r3
 8000d54:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d58:	fb01 f303 	mul.w	r3, r1, r3
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2bf9      	cmp	r3, #249	; 0xf9
 8000d60:	dc06      	bgt.n	8000d70 <main+0x5a8>
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d68:	4816      	ldr	r0, [pc, #88]	; (8000dc4 <main+0x5fc>)
 8000d6a:	f002 fb45 	bl	80033f8 <HAL_GPIO_WritePin>
 8000d6e:	e033      	b.n	8000dd8 <main+0x610>
  	  		  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d76:	4813      	ldr	r0, [pc, #76]	; (8000dc4 <main+0x5fc>)
 8000d78:	f002 fb3e 	bl	80033f8 <HAL_GPIO_WritePin>
 8000d7c:	e02c      	b.n	8000dd8 <main+0x610>
 8000d7e:	bf00      	nop
 8000d80:	200012a8 	.word	0x200012a8
 8000d84:	20000900 	.word	0x20000900
 8000d88:	20000898 	.word	0x20000898
 8000d8c:	20000890 	.word	0x20000890
 8000d90:	08005b18 	.word	0x08005b18
 8000d94:	20001204 	.word	0x20001204
 8000d98:	2000097c 	.word	0x2000097c
 8000d9c:	20000968 	.word	0x20000968
 8000da0:	2000003c 	.word	0x2000003c
 8000da4:	08005b24 	.word	0x08005b24
 8000da8:	2000002c 	.word	0x2000002c
 8000dac:	08005b30 	.word	0x08005b30
 8000db0:	08005b3c 	.word	0x08005b3c
 8000db4:	20000894 	.word	0x20000894
 8000db8:	08005b48 	.word	0x08005b48
 8000dbc:	20000030 	.word	0x20000030
 8000dc0:	10624dd3 	.word	0x10624dd3
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	40020400 	.word	0x40020400
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd2:	482b      	ldr	r0, [pc, #172]	; (8000e80 <main+0x6b8>)
 8000dd4:	f002 fb10 	bl	80033f8 <HAL_GPIO_WritePin>

  	  	  if (state == RecTwo){
 8000dd8:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <main+0x6bc>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b05      	cmp	r3, #5
 8000de0:	d11c      	bne.n	8000e1c <main+0x654>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, on);
 8000de2:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <main+0x6c0>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <main+0x6c4>)
 8000de8:	fb83 1302 	smull	r1, r3, r3, r2
 8000dec:	1159      	asrs	r1, r3, #5
 8000dee:	17d3      	asrs	r3, r2, #31
 8000df0:	1acb      	subs	r3, r1, r3
 8000df2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000df6:	fb01 f303 	mul.w	r3, r1, r3
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2bf9      	cmp	r3, #249	; 0xf9
 8000dfe:	dc06      	bgt.n	8000e0e <main+0x646>
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e06:	4822      	ldr	r0, [pc, #136]	; (8000e90 <main+0x6c8>)
 8000e08:	f002 faf6 	bl	80033f8 <HAL_GPIO_WritePin>
 8000e0c:	e00c      	b.n	8000e28 <main+0x660>
  	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e14:	481e      	ldr	r0, [pc, #120]	; (8000e90 <main+0x6c8>)
 8000e16:	f002 faef 	bl	80033f8 <HAL_GPIO_WritePin>
 8000e1a:	e005      	b.n	8000e28 <main+0x660>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e22:	481b      	ldr	r0, [pc, #108]	; (8000e90 <main+0x6c8>)
 8000e24:	f002 fae8 	bl	80033f8 <HAL_GPIO_WritePin>

  	  	  if (state == RecThree){
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <main+0x6bc>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d11a      	bne.n	8000e68 <main+0x6a0>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, on);
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <main+0x6c0>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <main+0x6c4>)
 8000e38:	fb83 1302 	smull	r1, r3, r3, r2
 8000e3c:	1159      	asrs	r1, r3, #5
 8000e3e:	17d3      	asrs	r3, r2, #31
 8000e40:	1acb      	subs	r3, r1, r3
 8000e42:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e46:	fb01 f303 	mul.w	r3, r1, r3
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2bf9      	cmp	r3, #249	; 0xf9
 8000e4e:	dc05      	bgt.n	8000e5c <main+0x694>
 8000e50:	2201      	movs	r2, #1
 8000e52:	2110      	movs	r1, #16
 8000e54:	480e      	ldr	r0, [pc, #56]	; (8000e90 <main+0x6c8>)
 8000e56:	f002 facf 	bl	80033f8 <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8000e5a:	e010      	b.n	8000e7e <main+0x6b6>
  	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2110      	movs	r1, #16
 8000e60:	480b      	ldr	r0, [pc, #44]	; (8000e90 <main+0x6c8>)
 8000e62:	f002 fac9 	bl	80033f8 <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8000e66:	e00a      	b.n	8000e7e <main+0x6b6>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	4808      	ldr	r0, [pc, #32]	; (8000e90 <main+0x6c8>)
 8000e6e:	f002 fac3 	bl	80033f8 <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8000e72:	e004      	b.n	8000e7e <main+0x6b6>
  	  }
  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, off);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2120      	movs	r1, #32
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <main+0x6c8>)
 8000e7a:	f002 fabd 	bl	80033f8 <HAL_GPIO_WritePin>
	    if (exti){
 8000e7e:	e4ee      	b.n	800085e <main+0x96>
 8000e80:	40020000 	.word	0x40020000
 8000e84:	20000898 	.word	0x20000898
 8000e88:	20000030 	.word	0x20000030
 8000e8c:	10624dd3 	.word	0x10624dd3
 8000e90:	40020400 	.word	0x40020400

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b094      	sub	sp, #80	; 0x50
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	2234      	movs	r2, #52	; 0x34
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f004 f8c6 	bl	8005034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <SystemClock_Config+0xd4>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	4a29      	ldr	r2, [pc, #164]	; (8000f68 <SystemClock_Config+0xd4>)
 8000ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec8:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <SystemClock_Config+0xd4>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <SystemClock_Config+0xd8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ee0:	4a22      	ldr	r2, [pc, #136]	; (8000f6c <SystemClock_Config+0xd8>)
 8000ee2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <SystemClock_Config+0xd8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000efc:	2310      	movs	r3, #16
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f00:	2302      	movs	r3, #2
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f04:	2300      	movs	r3, #0
 8000f06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f08:	2310      	movs	r3, #16
 8000f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f0c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f12:	2304      	movs	r3, #4
 8000f14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f16:	2302      	movs	r3, #2
 8000f18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	4618      	mov	r0, r3
 8000f24:	f002 fd60 	bl	80039e8 <HAL_RCC_OscConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f2e:	f000 fa3b 	bl	80013a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f32:	230f      	movs	r3, #15
 8000f34:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f36:	2302      	movs	r3, #2
 8000f38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f48:	f107 0308 	add.w	r3, r7, #8
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 fa90 	bl	8003474 <HAL_RCC_ClockConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f5a:	f000 fa25 	bl	80013a8 <Error_Handler>
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3750      	adds	r7, #80	; 0x50
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40007000 	.word	0x40007000

08000f70 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f76:	463b      	mov	r3, r7
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <MX_ADC2_Init+0xa0>)
 8000f84:	4a23      	ldr	r2, [pc, #140]	; (8001014 <MX_ADC2_Init+0xa4>)
 8000f86:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <MX_ADC2_Init+0xa0>)
 8000f8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f8e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <MX_ADC2_Init+0xa0>)
 8000f92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f96:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <MX_ADC2_Init+0xa0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <MX_ADC2_Init+0xa0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_ADC2_Init+0xa0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_ADC2_Init+0xa0>)
 8000fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <MX_ADC2_Init+0xa0>)
 8000fb6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MX_ADC2_Init+0xa0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <MX_ADC2_Init+0xa0>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_ADC2_Init+0xa0>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <MX_ADC2_Init+0xa0>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fd6:	480e      	ldr	r0, [pc, #56]	; (8001010 <MX_ADC2_Init+0xa0>)
 8000fd8:	f000 fd92 	bl	8001b00 <HAL_ADC_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_ADC2_Init+0x76>
  {
    Error_Handler();
 8000fe2:	f000 f9e1 	bl	80013a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000fe6:	230e      	movs	r3, #14
 8000fe8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <MX_ADC2_Init+0xa0>)
 8000ff8:	f000 fec2 	bl	8001d80 <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC2_Init+0x96>
  {
    Error_Handler();
 8001002:	f000 f9d1 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000040 	.word	0x20000040
 8001014:	40012100 	.word	0x40012100

08001018 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800101e:	463b      	mov	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_DAC_Init+0x4c>)
 8001028:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <MX_DAC_Init+0x50>)
 800102a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <MX_DAC_Init+0x4c>)
 800102e:	f001 fa68 	bl	8002502 <HAL_DAC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001038:	f000 f9b6 	bl	80013a8 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800103c:	2304      	movs	r3, #4
 800103e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <MX_DAC_Init+0x4c>)
 800104c:	f001 fb75 	bl	800273a <HAL_DAC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001056:	f000 f9a7 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000968 	.word	0x20000968
 8001068:	40007400 	.word	0x40007400

0800106c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_TIM2_Init+0x94>)
 800108a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_TIM2_Init+0x94>)
 8001092:	2200      	movs	r2, #0
 8001094:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_TIM2_Init+0x94>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1905;
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_TIM2_Init+0x94>)
 800109e:	f240 7271 	movw	r2, #1905	; 0x771
 80010a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <MX_TIM2_Init+0x94>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <MX_TIM2_Init+0x94>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010b0:	4813      	ldr	r0, [pc, #76]	; (8001100 <MX_TIM2_Init+0x94>)
 80010b2:	f002 fef3 	bl	8003e9c <HAL_TIM_Base_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010bc:	f000 f974 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	4619      	mov	r1, r3
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <MX_TIM2_Init+0x94>)
 80010ce:	f002 ff34 	bl	8003f3a <HAL_TIM_ConfigClockSource>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010d8:	f000 f966 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010dc:	2320      	movs	r3, #32
 80010de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_TIM2_Init+0x94>)
 80010ea:	f003 f917 	bl	800431c <HAL_TIMEx_MasterConfigSynchronization>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010f4:	f000 f958 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200011c4 	.word	0x200011c4

08001104 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_TIM6_Init+0x64>)
 8001114:	4a15      	ldr	r2, [pc, #84]	; (800116c <MX_TIM6_Init+0x68>)
 8001116:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_TIM6_Init+0x64>)
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_TIM6_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1905;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_TIM6_Init+0x64>)
 8001126:	f240 7271 	movw	r2, #1905	; 0x771
 800112a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_TIM6_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <MX_TIM6_Init+0x64>)
 8001134:	f002 feb2 	bl	8003e9c <HAL_TIM_Base_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800113e:	f000 f933 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001142:	2320      	movs	r3, #32
 8001144:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800114a:	463b      	mov	r3, r7
 800114c:	4619      	mov	r1, r3
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <MX_TIM6_Init+0x64>)
 8001150:	f003 f8e4 	bl	800431c <HAL_TIMEx_MasterConfigSynchronization>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800115a:	f000 f925 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000117c 	.word	0x2000117c
 800116c:	40001000 	.word	0x40001000

08001170 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_USART2_UART_Init+0x48>)
 8001176:	4a11      	ldr	r2, [pc, #68]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001178:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_USART2_UART_Init+0x48>)
 800117c:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <MX_USART2_UART_Init+0x50>)
 800117e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <MX_USART2_UART_Init+0x48>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_USART2_UART_Init+0x48>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_USART2_UART_Init+0x48>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_USART2_UART_Init+0x48>)
 8001194:	220c      	movs	r2, #12
 8001196:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <MX_USART2_UART_Init+0x48>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_USART2_UART_Init+0x48>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_USART2_UART_Init+0x48>)
 80011a6:	f003 f935 	bl	8004414 <HAL_UART_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 80011b0:	f000 f8fa 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20001204 	.word	0x20001204
 80011bc:	40004400 	.word	0x40004400
 80011c0:	0007a120 	.word	0x0007a120

080011c4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b1b      	ldr	r3, [pc, #108]	; (800123c <MX_DMA_Init+0x78>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a1a      	ldr	r2, [pc, #104]	; (800123c <MX_DMA_Init+0x78>)
 80011d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_DMA_Init+0x78>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_DMA_Init+0x78>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a13      	ldr	r2, [pc, #76]	; (800123c <MX_DMA_Init+0x78>)
 80011f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_DMA_Init+0x78>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2010      	movs	r0, #16
 8001208:	f001 f945 	bl	8002496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800120c:	2010      	movs	r0, #16
 800120e:	f001 f95e 	bl	80024ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2011      	movs	r0, #17
 8001218:	f001 f93d 	bl	8002496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800121c:	2011      	movs	r0, #17
 800121e:	f001 f956 	bl	80024ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	203a      	movs	r0, #58	; 0x3a
 8001228:	f001 f935 	bl	8002496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800122c:	203a      	movs	r0, #58	; 0x3a
 800122e:	f001 f94e 	bl	80024ce <HAL_NVIC_EnableIRQ>

}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b4d      	ldr	r3, [pc, #308]	; (8001390 <MX_GPIO_Init+0x150>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a4c      	ldr	r2, [pc, #304]	; (8001390 <MX_GPIO_Init+0x150>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <MX_GPIO_Init+0x150>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b46      	ldr	r3, [pc, #280]	; (8001390 <MX_GPIO_Init+0x150>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a45      	ldr	r2, [pc, #276]	; (8001390 <MX_GPIO_Init+0x150>)
 800127c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b43      	ldr	r3, [pc, #268]	; (8001390 <MX_GPIO_Init+0x150>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	4b3f      	ldr	r3, [pc, #252]	; (8001390 <MX_GPIO_Init+0x150>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a3e      	ldr	r2, [pc, #248]	; (8001390 <MX_GPIO_Init+0x150>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <MX_GPIO_Init+0x150>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b38      	ldr	r3, [pc, #224]	; (8001390 <MX_GPIO_Init+0x150>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a37      	ldr	r2, [pc, #220]	; (8001390 <MX_GPIO_Init+0x150>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <MX_GPIO_Init+0x150>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 7190 	mov.w	r1, #288	; 0x120
 80012cc:	4831      	ldr	r0, [pc, #196]	; (8001394 <MX_GPIO_Init+0x154>)
 80012ce:	f002 f893 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80012d8:	482f      	ldr	r0, [pc, #188]	; (8001398 <MX_GPIO_Init+0x158>)
 80012da:	f002 f88d 	bl	80033f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012e4:	4b2d      	ldr	r3, [pc, #180]	; (800139c <MX_GPIO_Init+0x15c>)
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	482b      	ldr	r0, [pc, #172]	; (80013a0 <MX_GPIO_Init+0x160>)
 80012f4:	f001 fed6 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80012f8:	f44f 7390 	mov.w	r3, #288	; 0x120
 80012fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2301      	movs	r3, #1
 8001300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	4820      	ldr	r0, [pc, #128]	; (8001394 <MX_GPIO_Init+0x154>)
 8001312:	f001 fec7 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 8001316:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800131c:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <MX_GPIO_Init+0x164>)
 800131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001320:	2302      	movs	r3, #2
 8001322:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	481a      	ldr	r0, [pc, #104]	; (8001394 <MX_GPIO_Init+0x154>)
 800132c:	f001 feba 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8001330:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	4813      	ldr	r0, [pc, #76]	; (8001398 <MX_GPIO_Init+0x158>)
 800134a:	f001 feab 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800134e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <MX_GPIO_Init+0x164>)
 8001356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001358:	2302      	movs	r3, #2
 800135a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	480d      	ldr	r0, [pc, #52]	; (8001398 <MX_GPIO_Init+0x158>)
 8001364:	f001 fe9e 	bl	80030a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	2017      	movs	r0, #23
 800136e:	f001 f892 	bl	8002496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001372:	2017      	movs	r0, #23
 8001374:	f001 f8ab 	bl	80024ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	2028      	movs	r0, #40	; 0x28
 800137e:	f001 f88a 	bl	8002496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001382:	2028      	movs	r0, #40	; 0x28
 8001384:	f001 f8a3 	bl	80024ce <HAL_NVIC_EnableIRQ>

}
 8001388:	bf00      	nop
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	40020000 	.word	0x40020000
 8001398:	40020400 	.word	0x40020400
 800139c:	10210000 	.word	0x10210000
 80013a0:	40020800 	.word	0x40020800
 80013a4:	10110000 	.word	0x10110000

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <wave_init>:
int16_t sintab[256];
uint16_t offset_440hz;
uint16_t offset_523hz;

void wave_init()
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 256; i++)
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	e01e      	b.n	8001402 <wave_init+0x4a>
		sintab[i] = (int) (900.0f * sinf(i * 0.02454369261f));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ce:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800141c <wave_init+0x64>
 80013d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d6:	eeb0 0a67 	vmov.f32	s0, s15
 80013da:	f003 fe33 	bl	8005044 <sinf>
 80013de:	eeb0 7a40 	vmov.f32	s14, s0
 80013e2:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001420 <wave_init+0x68>
 80013e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ee:	ee17 3a90 	vmov	r3, s15
 80013f2:	b219      	sxth	r1, r3
 80013f4:	4a0b      	ldr	r2, [pc, #44]	; (8001424 <wave_init+0x6c>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 256; i++)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3301      	adds	r3, #1
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2bff      	cmp	r3, #255	; 0xff
 8001406:	dddd      	ble.n	80013c4 <wave_init+0xc>

	offset_440hz = 0;
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <wave_init+0x70>)
 800140a:	2200      	movs	r2, #0
 800140c:	801a      	strh	r2, [r3, #0]
	offset_523hz = 0;
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <wave_init+0x74>)
 8001410:	2200      	movs	r2, #0
 8001412:	801a      	strh	r2, [r3, #0]
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	3cc90fdb 	.word	0x3cc90fdb
 8001420:	44610000 	.word	0x44610000
 8001424:	200012b0 	.word	0x200012b0
 8001428:	200012ae 	.word	0x200012ae
 800142c:	200012ac 	.word	0x200012ac

08001430 <wave_fillbuffer>:


void wave_fillbuffer(uint16_t* buffer, uint8_t type, uint16_t len)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	70fb      	strb	r3, [r7, #3]
 800143c:	4613      	mov	r3, r2
 800143e:	803b      	strh	r3, [r7, #0]
	for (int i = 0; i < len; i++)
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	e05e      	b.n	8001504 <wave_fillbuffer+0xd4>
	{
		int16_t sample = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	817b      	strh	r3, [r7, #10]
		switch (type)
 800144a:	78fb      	ldrb	r3, [r7, #3]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d014      	beq.n	800147a <wave_fillbuffer+0x4a>
 8001450:	2b03      	cmp	r3, #3
 8001452:	d023      	beq.n	800149c <wave_fillbuffer+0x6c>
 8001454:	2b01      	cmp	r3, #1
 8001456:	d149      	bne.n	80014ec <wave_fillbuffer+0xbc>
		{
			case 1:
				sample = sintab[offset_440hz >> 8];
 8001458:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <wave_fillbuffer+0xe8>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	b29b      	uxth	r3, r3
 8001460:	461a      	mov	r2, r3
 8001462:	4b2e      	ldr	r3, [pc, #184]	; (800151c <wave_fillbuffer+0xec>)
 8001464:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001468:	817b      	strh	r3, [r7, #10]
				offset_440hz += 654;
 800146a:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <wave_fillbuffer+0xe8>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	f203 238e 	addw	r3, r3, #654	; 0x28e
 8001472:	b29a      	uxth	r2, r3
 8001474:	4b28      	ldr	r3, [pc, #160]	; (8001518 <wave_fillbuffer+0xe8>)
 8001476:	801a      	strh	r2, [r3, #0]
				break;
 8001478:	e038      	b.n	80014ec <wave_fillbuffer+0xbc>
			case 2:
				sample = sintab[offset_523hz >> 8];
 800147a:	4b29      	ldr	r3, [pc, #164]	; (8001520 <wave_fillbuffer+0xf0>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	0a1b      	lsrs	r3, r3, #8
 8001480:	b29b      	uxth	r3, r3
 8001482:	461a      	mov	r2, r3
 8001484:	4b25      	ldr	r3, [pc, #148]	; (800151c <wave_fillbuffer+0xec>)
 8001486:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800148a:	817b      	strh	r3, [r7, #10]
				offset_523hz += 777;
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <wave_fillbuffer+0xf0>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	f203 3309 	addw	r3, r3, #777	; 0x309
 8001494:	b29a      	uxth	r2, r3
 8001496:	4b22      	ldr	r3, [pc, #136]	; (8001520 <wave_fillbuffer+0xf0>)
 8001498:	801a      	strh	r2, [r3, #0]
				break;
 800149a:	e027      	b.n	80014ec <wave_fillbuffer+0xbc>
			case 3:
				sample = (sintab[offset_440hz >> 8] >> 1) + (sintab[offset_523hz >> 8] >> 1);
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <wave_fillbuffer+0xe8>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b1d      	ldr	r3, [pc, #116]	; (800151c <wave_fillbuffer+0xec>)
 80014a8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80014ac:	105b      	asrs	r3, r3, #1
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <wave_fillbuffer+0xf0>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4619      	mov	r1, r3
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <wave_fillbuffer+0xec>)
 80014be:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80014c2:	105b      	asrs	r3, r3, #1
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4413      	add	r3, r2
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	817b      	strh	r3, [r7, #10]
				offset_440hz += 654;
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <wave_fillbuffer+0xe8>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	f203 238e 	addw	r3, r3, #654	; 0x28e
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <wave_fillbuffer+0xe8>)
 80014da:	801a      	strh	r2, [r3, #0]
				offset_523hz += 777;
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <wave_fillbuffer+0xf0>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	f203 3309 	addw	r3, r3, #777	; 0x309
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <wave_fillbuffer+0xf0>)
 80014e8:	801a      	strh	r2, [r3, #0]
				break;
 80014ea:	bf00      	nop
		}
		buffer[i] = (uint16_t)(sample + 2048);
 80014ec:	897a      	ldrh	r2, [r7, #10]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	440b      	add	r3, r1
 80014f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014fa:	b292      	uxth	r2, r2
 80014fc:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3301      	adds	r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	883b      	ldrh	r3, [r7, #0]
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	db9c      	blt.n	8001446 <wave_fillbuffer+0x16>
	}
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	200012ae 	.word	0x200012ae
 800151c:	200012b0 	.word	0x200012b0
 8001520:	200012ac 	.word	0x200012ac

08001524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <HAL_MspInit+0x4c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <HAL_MspInit+0x4c>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <HAL_MspInit+0x4c>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_MspInit+0x4c>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_MspInit+0x4c>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_MspInit+0x4c>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001562:	2007      	movs	r0, #7
 8001564:	f000 ff8c 	bl	8002480 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40023800 	.word	0x40023800

08001574 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a2e      	ldr	r2, [pc, #184]	; (800164c <HAL_ADC_MspInit+0xd8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d156      	bne.n	8001644 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_ADC_MspInit+0xdc>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	4a2c      	ldr	r2, [pc, #176]	; (8001650 <HAL_ADC_MspInit+0xdc>)
 80015a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a4:	6453      	str	r3, [r2, #68]	; 0x44
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <HAL_ADC_MspInit+0xdc>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <HAL_ADC_MspInit+0xdc>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a25      	ldr	r2, [pc, #148]	; (8001650 <HAL_ADC_MspInit+0xdc>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <HAL_ADC_MspInit+0xdc>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PC4     ------> ADC2_IN14 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015ce:	2310      	movs	r3, #16
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d2:	2303      	movs	r3, #3
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	481c      	ldr	r0, [pc, #112]	; (8001654 <HAL_ADC_MspInit+0xe0>)
 80015e2:	f001 fd5f 	bl	80030a4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <HAL_ADC_MspInit+0xe4>)
 80015e8:	4a1c      	ldr	r2, [pc, #112]	; (800165c <HAL_ADC_MspInit+0xe8>)
 80015ea:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <HAL_ADC_MspInit+0xe4>)
 80015ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015f2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_ADC_MspInit+0xe4>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_ADC_MspInit+0xe4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_ADC_MspInit+0xe4>)
 8001602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001606:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <HAL_ADC_MspInit+0xe4>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_ADC_MspInit+0xe4>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_ADC_MspInit+0xe4>)
 8001616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800161a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <HAL_ADC_MspInit+0xe4>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <HAL_ADC_MspInit+0xe4>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001628:	480b      	ldr	r0, [pc, #44]	; (8001658 <HAL_ADC_MspInit+0xe4>)
 800162a:	f001 f95d 	bl	80028e8 <HAL_DMA_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001634:	f7ff feb8 	bl	80013a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a07      	ldr	r2, [pc, #28]	; (8001658 <HAL_ADC_MspInit+0xe4>)
 800163c:	639a      	str	r2, [r3, #56]	; 0x38
 800163e:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_ADC_MspInit+0xe4>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40012100 	.word	0x40012100
 8001650:	40023800 	.word	0x40023800
 8001654:	40020800 	.word	0x40020800
 8001658:	20001244 	.word	0x20001244
 800165c:	40026440 	.word	0x40026440

08001660 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a2f      	ldr	r2, [pc, #188]	; (800173c <HAL_DAC_MspInit+0xdc>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d157      	bne.n	8001732 <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <HAL_DAC_MspInit+0xe0>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a2d      	ldr	r2, [pc, #180]	; (8001740 <HAL_DAC_MspInit+0xe0>)
 800168c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <HAL_DAC_MspInit+0xe0>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b27      	ldr	r3, [pc, #156]	; (8001740 <HAL_DAC_MspInit+0xe0>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a26      	ldr	r2, [pc, #152]	; (8001740 <HAL_DAC_MspInit+0xe0>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b24      	ldr	r3, [pc, #144]	; (8001740 <HAL_DAC_MspInit+0xe0>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016ba:	2310      	movs	r3, #16
 80016bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016be:	2303      	movs	r3, #3
 80016c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	481d      	ldr	r0, [pc, #116]	; (8001744 <HAL_DAC_MspInit+0xe4>)
 80016ce:	f001 fce9 	bl	80030a4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <HAL_DAC_MspInit+0xe8>)
 80016d4:	4a1d      	ldr	r2, [pc, #116]	; (800174c <HAL_DAC_MspInit+0xec>)
 80016d6:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_DAC_MspInit+0xe8>)
 80016da:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80016de:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_DAC_MspInit+0xe8>)
 80016e2:	2240      	movs	r2, #64	; 0x40
 80016e4:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_DAC_MspInit+0xe8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <HAL_DAC_MspInit+0xe8>)
 80016ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_DAC_MspInit+0xe8>)
 80016f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016fa:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_DAC_MspInit+0xe8>)
 80016fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001702:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_DAC_MspInit+0xe8>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_DAC_MspInit+0xe8>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <HAL_DAC_MspInit+0xe8>)
 8001712:	2200      	movs	r2, #0
 8001714:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001716:	480c      	ldr	r0, [pc, #48]	; (8001748 <HAL_DAC_MspInit+0xe8>)
 8001718:	f001 f8e6 	bl	80028e8 <HAL_DMA_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 8001722:	f7ff fe41 	bl	80013a8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a07      	ldr	r2, [pc, #28]	; (8001748 <HAL_DAC_MspInit+0xe8>)
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <HAL_DAC_MspInit+0xe8>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	; 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40007400 	.word	0x40007400
 8001740:	40023800 	.word	0x40023800
 8001744:	40020000 	.word	0x40020000
 8001748:	2000089c 	.word	0x2000089c
 800174c:	40026088 	.word	0x40026088

08001750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001760:	d10e      	bne.n	8001780 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <HAL_TIM_Base_MspInit+0x64>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <HAL_TIM_Base_MspInit+0x64>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_TIM_Base_MspInit+0x64>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800177e:	e012      	b.n	80017a6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0c      	ldr	r2, [pc, #48]	; (80017b8 <HAL_TIM_Base_MspInit+0x68>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d10d      	bne.n	80017a6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_TIM_Base_MspInit+0x64>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_TIM_Base_MspInit+0x64>)
 8001794:	f043 0310 	orr.w	r3, r3, #16
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_TIM_Base_MspInit+0x64>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
}
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40001000 	.word	0x40001000

080017bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a30      	ldr	r2, [pc, #192]	; (800189c <HAL_UART_MspInit+0xe0>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d159      	bne.n	8001892 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <HAL_UART_MspInit+0xe4>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	4a2e      	ldr	r2, [pc, #184]	; (80018a0 <HAL_UART_MspInit+0xe4>)
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ec:	6413      	str	r3, [r2, #64]	; 0x40
 80017ee:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <HAL_UART_MspInit+0xe4>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <HAL_UART_MspInit+0xe4>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a27      	ldr	r2, [pc, #156]	; (80018a0 <HAL_UART_MspInit+0xe4>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <HAL_UART_MspInit+0xe4>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001816:	230c      	movs	r3, #12
 8001818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001826:	2307      	movs	r3, #7
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	481c      	ldr	r0, [pc, #112]	; (80018a4 <HAL_UART_MspInit+0xe8>)
 8001832:	f001 fc37 	bl	80030a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001836:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <HAL_UART_MspInit+0xec>)
 8001838:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <HAL_UART_MspInit+0xf0>)
 800183a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800183c:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <HAL_UART_MspInit+0xec>)
 800183e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001842:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001844:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <HAL_UART_MspInit+0xec>)
 8001846:	2240      	movs	r2, #64	; 0x40
 8001848:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <HAL_UART_MspInit+0xec>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_UART_MspInit+0xec>)
 8001852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001856:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_UART_MspInit+0xec>)
 800185a:	2200      	movs	r2, #0
 800185c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_UART_MspInit+0xec>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001864:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_UART_MspInit+0xec>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_UART_MspInit+0xec>)
 800186c:	2200      	movs	r2, #0
 800186e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001870:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_UART_MspInit+0xec>)
 8001872:	2200      	movs	r2, #0
 8001874:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001876:	480c      	ldr	r0, [pc, #48]	; (80018a8 <HAL_UART_MspInit+0xec>)
 8001878:	f001 f836 	bl	80028e8 <HAL_DMA_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001882:	f7ff fd91 	bl	80013a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <HAL_UART_MspInit+0xec>)
 800188a:	631a      	str	r2, [r3, #48]	; 0x30
 800188c:	4a06      	ldr	r2, [pc, #24]	; (80018a8 <HAL_UART_MspInit+0xec>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3728      	adds	r7, #40	; 0x28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40004400 	.word	0x40004400
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020000 	.word	0x40020000
 80018a8:	20000908 	.word	0x20000908
 80018ac:	400260a0 	.word	0x400260a0

080018b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <HardFault_Handler+0x4>

080018c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <MemManage_Handler+0x4>

080018ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <BusFault_Handler+0x4>

080018d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <UsageFault_Handler+0x4>

080018d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001904:	f000 f8dc 	bl	8001ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <DMA1_Stream5_IRQHandler+0x10>)
 8001912:	f001 f95f 	bl	8002bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	2000089c 	.word	0x2000089c

08001920 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <DMA1_Stream6_IRQHandler+0x10>)
 8001926:	f001 f955 	bl	8002bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000908 	.word	0x20000908

08001934 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	exti = on;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <EXTI9_5_IRQHandler+0x2c>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800193e:	2040      	movs	r0, #64	; 0x40
 8001940:	f001 fd74 	bl	800342c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001944:	2080      	movs	r0, #128	; 0x80
 8001946:	f001 fd71 	bl	800342c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800194a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800194e:	f001 fd6d 	bl	800342c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001952:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001956:	f001 fd69 	bl	800342c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200008fc 	.word	0x200008fc

08001964 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	exti = on;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <EXTI15_10_IRQHandler+0x20>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800196e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001972:	f001 fd5b 	bl	800342c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001976:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800197a:	f001 fd57 	bl	800342c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200008fc 	.word	0x200008fc

08001988 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <DMA2_Stream2_IRQHandler+0x10>)
 800198e:	f001 f921 	bl	8002bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20001244 	.word	0x20001244

0800199c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <SystemInit+0x28>)
 80019a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019a6:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <SystemInit+0x28>)
 80019a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <SystemInit+0x28>)
 80019b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019b6:	609a      	str	r2, [r3, #8]
#endif
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019ce:	e003      	b.n	80019d8 <LoopCopyDataInit>

080019d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019d6:	3104      	adds	r1, #4

080019d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019d8:	480b      	ldr	r0, [pc, #44]	; (8001a08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019e0:	d3f6      	bcc.n	80019d0 <CopyDataInit>
  ldr  r2, =_sbss
 80019e2:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019e4:	e002      	b.n	80019ec <LoopFillZerobss>

080019e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019e8:	f842 3b04 	str.w	r3, [r2], #4

080019ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019f0:	d3f9      	bcc.n	80019e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019f2:	f7ff ffd3 	bl	800199c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019f6:	f003 faf9 	bl	8004fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fa:	f7fe fee5 	bl	80007c8 <main>
  bx  lr    
 80019fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a04:	08005f54 	.word	0x08005f54
  ldr  r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a0c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001a10:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001a14:	200014b4 	.word	0x200014b4

08001a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC_IRQHandler>
	...

08001a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <HAL_Init+0x40>)
 8001a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <HAL_Init+0x40>)
 8001a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_Init+0x40>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <HAL_Init+0x40>)
 8001a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a44:	2003      	movs	r0, #3
 8001a46:	f000 fd1b 	bl	8002480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f000 f808 	bl	8001a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a50:	f7ff fd68 	bl	8001524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023c00 	.word	0x40023c00

08001a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_InitTick+0x54>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_InitTick+0x58>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 fd33 	bl	80024ea <HAL_SYSTICK_Config>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00e      	b.n	8001aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b0f      	cmp	r3, #15
 8001a92:	d80a      	bhi.n	8001aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a94:	2200      	movs	r2, #0
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f000 fcfb 	bl	8002496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa0:	4a06      	ldr	r2, [pc, #24]	; (8001abc <HAL_InitTick+0x5c>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e000      	b.n	8001aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000004 	.word	0x20000004
 8001ab8:	2000000c 	.word	0x2000000c
 8001abc:	20000008 	.word	0x20000008

08001ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_IncTick+0x20>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_IncTick+0x24>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <HAL_IncTick+0x24>)
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	2000000c 	.word	0x2000000c
 8001ae4:	200014b0 	.word	0x200014b0

08001ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return uwTick;
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <HAL_GetTick+0x14>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	200014b0 	.word	0x200014b0

08001b00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e033      	b.n	8001b7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fd28 	bl	8001574 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d118      	bne.n	8001b70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b46:	f023 0302 	bic.w	r3, r3, #2
 8001b4a:	f043 0202 	orr.w	r2, r3, #2
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 fa46 	bl	8001fe4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f023 0303 	bic.w	r3, r3, #3
 8001b66:	f043 0201 	orr.w	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b6e:	e001      	b.n	8001b74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d101      	bne.n	8001ba6 <HAL_ADC_Start_DMA+0x1e>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e0cc      	b.n	8001d40 <HAL_ADC_Start_DMA+0x1b8>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d018      	beq.n	8001bee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bcc:	4b5e      	ldr	r3, [pc, #376]	; (8001d48 <HAL_ADC_Start_DMA+0x1c0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a5e      	ldr	r2, [pc, #376]	; (8001d4c <HAL_ADC_Start_DMA+0x1c4>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	0c9a      	lsrs	r2, r3, #18
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001be0:	e002      	b.n	8001be8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f9      	bne.n	8001be2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	f040 80a0 	bne.w	8001d3e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c06:	f023 0301 	bic.w	r3, r3, #1
 8001c0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c3c:	d106      	bne.n	8001c4c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f023 0206 	bic.w	r2, r3, #6
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	645a      	str	r2, [r3, #68]	; 0x44
 8001c4a:	e002      	b.n	8001c52 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c5a:	4b3d      	ldr	r3, [pc, #244]	; (8001d50 <HAL_ADC_Start_DMA+0x1c8>)
 8001c5c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c62:	4a3c      	ldr	r2, [pc, #240]	; (8001d54 <HAL_ADC_Start_DMA+0x1cc>)
 8001c64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6a:	4a3b      	ldr	r2, [pc, #236]	; (8001d58 <HAL_ADC_Start_DMA+0x1d0>)
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c72:	4a3a      	ldr	r2, [pc, #232]	; (8001d5c <HAL_ADC_Start_DMA+0x1d4>)
 8001c74:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c7e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c8e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c9e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	334c      	adds	r3, #76	; 0x4c
 8001caa:	4619      	mov	r1, r3
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f000 fec8 	bl	8002a44 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d12a      	bne.n	8001d16 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a26      	ldr	r2, [pc, #152]	; (8001d60 <HAL_ADC_Start_DMA+0x1d8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d015      	beq.n	8001cf6 <HAL_ADC_Start_DMA+0x16e>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a25      	ldr	r2, [pc, #148]	; (8001d64 <HAL_ADC_Start_DMA+0x1dc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d105      	bne.n	8001ce0 <HAL_ADC_Start_DMA+0x158>
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <HAL_ADC_Start_DMA+0x1c8>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 031f 	and.w	r3, r3, #31
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00a      	beq.n	8001cf6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a20      	ldr	r2, [pc, #128]	; (8001d68 <HAL_ADC_Start_DMA+0x1e0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d129      	bne.n	8001d3e <HAL_ADC_Start_DMA+0x1b6>
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_ADC_Start_DMA+0x1c8>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	2b0f      	cmp	r3, #15
 8001cf4:	d823      	bhi.n	8001d3e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d11c      	bne.n	8001d3e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	e013      	b.n	8001d3e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <HAL_ADC_Start_DMA+0x1d8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d10e      	bne.n	8001d3e <HAL_ADC_Start_DMA+0x1b6>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d107      	bne.n	8001d3e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d3c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000004 	.word	0x20000004
 8001d4c:	431bde83 	.word	0x431bde83
 8001d50:	40012300 	.word	0x40012300
 8001d54:	080021dd 	.word	0x080021dd
 8001d58:	08002297 	.word	0x08002297
 8001d5c:	080022b3 	.word	0x080022b3
 8001d60:	40012000 	.word	0x40012000
 8001d64:	40012100 	.word	0x40012100
 8001d68:	40012200 	.word	0x40012200

08001d6c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x1c>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e113      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x244>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b09      	cmp	r3, #9
 8001daa:	d925      	bls.n	8001df8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68d9      	ldr	r1, [r3, #12]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b1e      	subs	r3, #30
 8001dc2:	2207      	movs	r2, #7
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43da      	mvns	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	400a      	ands	r2, r1
 8001dd0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68d9      	ldr	r1, [r3, #12]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	4603      	mov	r3, r0
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4403      	add	r3, r0
 8001dea:	3b1e      	subs	r3, #30
 8001dec:	409a      	lsls	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	e022      	b.n	8001e3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6919      	ldr	r1, [r3, #16]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	400a      	ands	r2, r1
 8001e1a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6919      	ldr	r1, [r3, #16]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	4603      	mov	r3, r0
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4403      	add	r3, r0
 8001e34:	409a      	lsls	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d824      	bhi.n	8001e90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	3b05      	subs	r3, #5
 8001e58:	221f      	movs	r2, #31
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	400a      	ands	r2, r1
 8001e66:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	3b05      	subs	r3, #5
 8001e82:	fa00 f203 	lsl.w	r2, r0, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e8e:	e04c      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b0c      	cmp	r3, #12
 8001e96:	d824      	bhi.n	8001ee2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3b23      	subs	r3, #35	; 0x23
 8001eaa:	221f      	movs	r2, #31
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43da      	mvns	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	400a      	ands	r2, r1
 8001eb8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3b23      	subs	r3, #35	; 0x23
 8001ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	631a      	str	r2, [r3, #48]	; 0x30
 8001ee0:	e023      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3b41      	subs	r3, #65	; 0x41
 8001ef4:	221f      	movs	r2, #31
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	400a      	ands	r2, r1
 8001f02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4618      	mov	r0, r3
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3b41      	subs	r3, #65	; 0x41
 8001f1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f2a:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <HAL_ADC_ConfigChannel+0x250>)
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a28      	ldr	r2, [pc, #160]	; (8001fd4 <HAL_ADC_ConfigChannel+0x254>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d10f      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1d8>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b12      	cmp	r3, #18
 8001f3e:	d10b      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1d      	ldr	r2, [pc, #116]	; (8001fd4 <HAL_ADC_ConfigChannel+0x254>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d12b      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x23a>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <HAL_ADC_ConfigChannel+0x258>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d003      	beq.n	8001f74 <HAL_ADC_ConfigChannel+0x1f4>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b11      	cmp	r3, #17
 8001f72:	d122      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a11      	ldr	r2, [pc, #68]	; (8001fd8 <HAL_ADC_ConfigChannel+0x258>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d111      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_ADC_ConfigChannel+0x25c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a11      	ldr	r2, [pc, #68]	; (8001fe0 <HAL_ADC_ConfigChannel+0x260>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	0c9a      	lsrs	r2, r3, #18
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fac:	e002      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f9      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40012300 	.word	0x40012300
 8001fd4:	40012000 	.word	0x40012000
 8001fd8:	10000012 	.word	0x10000012
 8001fdc:	20000004 	.word	0x20000004
 8001fe0:	431bde83 	.word	0x431bde83

08001fe4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fec:	4b79      	ldr	r3, [pc, #484]	; (80021d4 <ADC_Init+0x1f0>)
 8001fee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	431a      	orrs	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002018:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	021a      	lsls	r2, r3, #8
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800203c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800205e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6899      	ldr	r1, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	4a58      	ldr	r2, [pc, #352]	; (80021d8 <ADC_Init+0x1f4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d022      	beq.n	80020c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800208a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6899      	ldr	r1, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6899      	ldr	r1, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	e00f      	b.n	80020e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0202 	bic.w	r2, r2, #2
 80020f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6899      	ldr	r1, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7e1b      	ldrb	r3, [r3, #24]
 80020fc:	005a      	lsls	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3020 	ldrb.w	r3, [r3, #32]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01b      	beq.n	8002148 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800211e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800212e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6859      	ldr	r1, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	3b01      	subs	r3, #1
 800213c:	035a      	lsls	r2, r3, #13
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	e007      	b.n	8002158 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002156:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	3b01      	subs	r3, #1
 8002174:	051a      	lsls	r2, r3, #20
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800218c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6899      	ldr	r1, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800219a:	025a      	lsls	r2, r3, #9
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6899      	ldr	r1, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	029a      	lsls	r2, r3, #10
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	609a      	str	r2, [r3, #8]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40012300 	.word	0x40012300
 80021d8:	0f000001 	.word	0x0f000001

080021dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d13c      	bne.n	8002270 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d12b      	bne.n	8002268 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002214:	2b00      	cmp	r3, #0
 8002216:	d127      	bne.n	8002268 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002230:	2b00      	cmp	r3, #0
 8002232:	d119      	bne.n	8002268 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0220 	bic.w	r2, r2, #32
 8002242:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d105      	bne.n	8002268 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f043 0201 	orr.w	r2, r3, #1
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f7fe f94b 	bl	8000504 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800226e:	e00e      	b.n	800228e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f7ff fd75 	bl	8001d6c <HAL_ADC_ErrorCallback>
}
 8002282:	e004      	b.n	800228e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	4798      	blx	r3
}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f7fe f9c5 	bl	8000634 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2240      	movs	r2, #64	; 0x40
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f043 0204 	orr.w	r2, r3, #4
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f7ff fd4a 	bl	8001d6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <__NVIC_SetPriorityGrouping+0x44>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022fc:	4013      	ands	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800230c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002312:	4a04      	ldr	r2, [pc, #16]	; (8002324 <__NVIC_SetPriorityGrouping+0x44>)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	60d3      	str	r3, [r2, #12]
}
 8002318:	bf00      	nop
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <__NVIC_GetPriorityGrouping+0x18>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	f003 0307 	and.w	r3, r3, #7
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	2b00      	cmp	r3, #0
 8002354:	db0b      	blt.n	800236e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	f003 021f 	and.w	r2, r3, #31
 800235c:	4907      	ldr	r1, [pc, #28]	; (800237c <__NVIC_EnableIRQ+0x38>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	2001      	movs	r0, #1
 8002366:	fa00 f202 	lsl.w	r2, r0, r2
 800236a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000e100 	.word	0xe000e100

08002380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	2b00      	cmp	r3, #0
 8002392:	db0a      	blt.n	80023aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	490c      	ldr	r1, [pc, #48]	; (80023cc <__NVIC_SetPriority+0x4c>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	0112      	lsls	r2, r2, #4
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	440b      	add	r3, r1
 80023a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a8:	e00a      	b.n	80023c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4908      	ldr	r1, [pc, #32]	; (80023d0 <__NVIC_SetPriority+0x50>)
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	3b04      	subs	r3, #4
 80023b8:	0112      	lsls	r2, r2, #4
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	440b      	add	r3, r1
 80023be:	761a      	strb	r2, [r3, #24]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000e100 	.word	0xe000e100
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f1c3 0307 	rsb	r3, r3, #7
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	bf28      	it	cs
 80023f2:	2304      	movcs	r3, #4
 80023f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3304      	adds	r3, #4
 80023fa:	2b06      	cmp	r3, #6
 80023fc:	d902      	bls.n	8002404 <NVIC_EncodePriority+0x30>
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3b03      	subs	r3, #3
 8002402:	e000      	b.n	8002406 <NVIC_EncodePriority+0x32>
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	f04f 32ff 	mov.w	r2, #4294967295
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43da      	mvns	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	401a      	ands	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800241c:	f04f 31ff 	mov.w	r1, #4294967295
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	43d9      	mvns	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	4313      	orrs	r3, r2
         );
}
 800242e:	4618      	mov	r0, r3
 8002430:	3724      	adds	r7, #36	; 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3b01      	subs	r3, #1
 8002448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800244c:	d301      	bcc.n	8002452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800244e:	2301      	movs	r3, #1
 8002450:	e00f      	b.n	8002472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002452:	4a0a      	ldr	r2, [pc, #40]	; (800247c <SysTick_Config+0x40>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3b01      	subs	r3, #1
 8002458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800245a:	210f      	movs	r1, #15
 800245c:	f04f 30ff 	mov.w	r0, #4294967295
 8002460:	f7ff ff8e 	bl	8002380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <SysTick_Config+0x40>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800246a:	4b04      	ldr	r3, [pc, #16]	; (800247c <SysTick_Config+0x40>)
 800246c:	2207      	movs	r2, #7
 800246e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	e000e010 	.word	0xe000e010

08002480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ff29 	bl	80022e0 <__NVIC_SetPriorityGrouping>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002496:	b580      	push	{r7, lr}
 8002498:	b086      	sub	sp, #24
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024a8:	f7ff ff3e 	bl	8002328 <__NVIC_GetPriorityGrouping>
 80024ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	6978      	ldr	r0, [r7, #20]
 80024b4:	f7ff ff8e 	bl	80023d4 <NVIC_EncodePriority>
 80024b8:	4602      	mov	r2, r0
 80024ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ff5d 	bl	8002380 <__NVIC_SetPriority>
}
 80024c6:	bf00      	nop
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff31 	bl	8002344 <__NVIC_EnableIRQ>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff ffa2 	bl	800243c <SysTick_Config>
 80024f8:	4603      	mov	r3, r0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e014      	b.n	800253e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	791b      	ldrb	r3, [r3, #4]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d105      	bne.n	800252a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff f89b 	bl	8001660 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2202      	movs	r2, #2
 800252e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	795b      	ldrb	r3, [r3, #5]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_DAC_Start_DMA+0x1e>
 8002562:	2302      	movs	r3, #2
 8002564:	e08e      	b.n	8002684 <HAL_DAC_Start_DMA+0x13c>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2201      	movs	r2, #1
 800256a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2202      	movs	r2, #2
 8002570:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d12a      	bne.n	80025ce <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a43      	ldr	r2, [pc, #268]	; (800268c <HAL_DAC_Start_DMA+0x144>)
 800257e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4a42      	ldr	r2, [pc, #264]	; (8002690 <HAL_DAC_Start_DMA+0x148>)
 8002586:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4a41      	ldr	r2, [pc, #260]	; (8002694 <HAL_DAC_Start_DMA+0x14c>)
 800258e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800259e:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d009      	beq.n	80025ba <HAL_DAC_Start_DMA+0x72>
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d00c      	beq.n	80025c4 <HAL_DAC_Start_DMA+0x7c>
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d000      	beq.n	80025b0 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80025ae:	e039      	b.n	8002624 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	3308      	adds	r3, #8
 80025b6:	617b      	str	r3, [r7, #20]
        break;
 80025b8:	e034      	b.n	8002624 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	330c      	adds	r3, #12
 80025c0:	617b      	str	r3, [r7, #20]
        break;
 80025c2:	e02f      	b.n	8002624 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	3310      	adds	r3, #16
 80025ca:	617b      	str	r3, [r7, #20]
        break;
 80025cc:	e02a      	b.n	8002624 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	4a31      	ldr	r2, [pc, #196]	; (8002698 <HAL_DAC_Start_DMA+0x150>)
 80025d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	4a30      	ldr	r2, [pc, #192]	; (800269c <HAL_DAC_Start_DMA+0x154>)
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	4a2f      	ldr	r2, [pc, #188]	; (80026a0 <HAL_DAC_Start_DMA+0x158>)
 80025e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025f4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d009      	beq.n	8002610 <HAL_DAC_Start_DMA+0xc8>
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d00c      	beq.n	800261a <HAL_DAC_Start_DMA+0xd2>
 8002600:	2b00      	cmp	r3, #0
 8002602:	d000      	beq.n	8002606 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002604:	e00e      	b.n	8002624 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3314      	adds	r3, #20
 800260c:	617b      	str	r3, [r7, #20]
        break;
 800260e:	e009      	b.n	8002624 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3318      	adds	r3, #24
 8002616:	617b      	str	r3, [r7, #20]
        break;
 8002618:	e004      	b.n	8002624 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	331c      	adds	r3, #28
 8002620:	617b      	str	r3, [r7, #20]
        break;
 8002622:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10f      	bne.n	800264a <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002638:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6898      	ldr	r0, [r3, #8]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	f000 f9fe 	bl	8002a44 <HAL_DMA_Start_IT>
 8002648:	e00e      	b.n	8002668 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002658:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	68d8      	ldr	r0, [r3, #12]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	f000 f9ee 	bl	8002a44 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6819      	ldr	r1, [r3, #0]
 800266e:	2201      	movs	r2, #1
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	409a      	lsls	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	080027d5 	.word	0x080027d5
 8002690:	080027f7 	.word	0x080027f7
 8002694:	08002813 	.word	0x08002813
 8002698:	0800287d 	.word	0x0800287d
 800269c:	0800289f 	.word	0x0800289f
 80026a0:	080028bb 	.word	0x080028bb

080026a4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6819      	ldr	r1, [r3, #0]
 80026b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	400a      	ands	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	2201      	movs	r2, #1
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43da      	mvns	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	400a      	ands	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d107      	bne.n	80026fa <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fa00 	bl	8002af4 <HAL_DMA_Abort>
 80026f4:	4603      	mov	r3, r0
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	e006      	b.n	8002708 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f9f8 	bl	8002af4 <HAL_DMA_Abort>
 8002704:	4603      	mov	r3, r0
 8002706:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2204      	movs	r2, #4
 8002712:	711a      	strb	r2, [r3, #4]
 8002714:	e002      	b.n	800271c <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800273a:	b480      	push	{r7}
 800273c:	b087      	sub	sp, #28
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	795b      	ldrb	r3, [r3, #5]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_DAC_ConfigChannel+0x20>
 8002756:	2302      	movs	r3, #2
 8002758:	e036      	b.n	80027c8 <HAL_DAC_ConfigChannel+0x8e>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2201      	movs	r2, #1
 800275e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2202      	movs	r2, #2
 8002764:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800276e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4013      	ands	r3, r2
 800277e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	4313      	orrs	r3, r2
 8002798:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6819      	ldr	r1, [r3, #0]
 80027a8:	22c0      	movs	r2, #192	; 0xc0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43da      	mvns	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	400a      	ands	r2, r1
 80027b8:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2201      	movs	r2, #1
 80027be:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e0:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f7fd ffba 	bl	800075c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	711a      	strb	r2, [r3, #4]
}
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f7fd ffc9 	bl	800079c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281e:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	f043 0204 	orr.w	r2, r3, #4
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7ff ff7a 	bl	8002726 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	711a      	strb	r2, [r3, #4]
}
 8002838:	bf00      	nop
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f7ff ffd8 	bl	8002840 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2201      	movs	r2, #1
 8002894:	711a      	strb	r2, [r3, #4]
}
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f7ff ffd1 	bl	8002854 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f043 0204 	orr.w	r2, r3, #4
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f7ff ffc7 	bl	8002868 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	711a      	strb	r2, [r3, #4]
}
 80028e0:	bf00      	nop
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028f4:	f7ff f8f8 	bl	8001ae8 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e099      	b.n	8002a38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0201 	bic.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002924:	e00f      	b.n	8002946 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002926:	f7ff f8df 	bl	8001ae8 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b05      	cmp	r3, #5
 8002932:	d908      	bls.n	8002946 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2203      	movs	r2, #3
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e078      	b.n	8002a38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1e8      	bne.n	8002926 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <HAL_DMA_Init+0x158>)
 8002960:	4013      	ands	r3, r2
 8002962:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002972:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800297e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800298a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	2b04      	cmp	r3, #4
 800299e:	d107      	bne.n	80029b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	4313      	orrs	r3, r2
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f023 0307 	bic.w	r3, r3, #7
 80029c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d117      	bne.n	8002a0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00e      	beq.n	8002a0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fadf 	bl	8002fb0 <DMA_CheckFifoParam>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2240      	movs	r2, #64	; 0x40
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a06:	2301      	movs	r3, #1
 8002a08:	e016      	b.n	8002a38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fa96 	bl	8002f44 <DMA_CalcBaseAndBitshift>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a20:	223f      	movs	r2, #63	; 0x3f
 8002a22:	409a      	lsls	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	f010803f 	.word	0xf010803f

08002a44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_DMA_Start_IT+0x26>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e040      	b.n	8002aec <HAL_DMA_Start_IT+0xa8>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d12f      	bne.n	8002ade <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2202      	movs	r2, #2
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fa28 	bl	8002ee8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9c:	223f      	movs	r2, #63	; 0x3f
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0216 	orr.w	r2, r2, #22
 8002ab2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0208 	orr.w	r2, r2, #8
 8002aca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e005      	b.n	8002aea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b02:	f7fe fff1 	bl	8001ae8 <HAL_GetTick>
 8002b06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d008      	beq.n	8002b26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e052      	b.n	8002bcc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0216 	bic.w	r2, r2, #22
 8002b34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d103      	bne.n	8002b56 <HAL_DMA_Abort+0x62>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0208 	bic.w	r2, r2, #8
 8002b64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0201 	bic.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b76:	e013      	b.n	8002ba0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b78:	f7fe ffb6 	bl	8001ae8 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	d90c      	bls.n	8002ba0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2203      	movs	r2, #3
 8002b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e015      	b.n	8002bcc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1e4      	bne.n	8002b78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	223f      	movs	r2, #63	; 0x3f
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002be0:	4b92      	ldr	r3, [pc, #584]	; (8002e2c <HAL_DMA_IRQHandler+0x258>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a92      	ldr	r2, [pc, #584]	; (8002e30 <HAL_DMA_IRQHandler+0x25c>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	0a9b      	lsrs	r3, r3, #10
 8002bec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	2208      	movs	r2, #8
 8002c00:	409a      	lsls	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d01a      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d013      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0204 	bic.w	r2, r2, #4
 8002c26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c44:	2201      	movs	r2, #1
 8002c46:	409a      	lsls	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d012      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c62:	2201      	movs	r2, #1
 8002c64:	409a      	lsls	r2, r3
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6e:	f043 0202 	orr.w	r2, r3, #2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d012      	beq.n	8002cac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00b      	beq.n	8002cac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c98:	2204      	movs	r2, #4
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca4:	f043 0204 	orr.w	r2, r3, #4
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb0:	2210      	movs	r2, #16
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d043      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d03c      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cce:	2210      	movs	r2, #16
 8002cd0:	409a      	lsls	r2, r3
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d018      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d108      	bne.n	8002d04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d024      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	4798      	blx	r3
 8002d02:	e01f      	b.n	8002d44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01b      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	4798      	blx	r3
 8002d14:	e016      	b.n	8002d44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d107      	bne.n	8002d34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0208 	bic.w	r2, r2, #8
 8002d32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d48:	2220      	movs	r2, #32
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 808e 	beq.w	8002e72 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 8086 	beq.w	8002e72 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b05      	cmp	r3, #5
 8002d7c:	d136      	bne.n	8002dec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0216 	bic.w	r2, r2, #22
 8002d8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d103      	bne.n	8002dae <HAL_DMA_IRQHandler+0x1da>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0208 	bic.w	r2, r2, #8
 8002dbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc2:	223f      	movs	r2, #63	; 0x3f
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d07d      	beq.n	8002ede <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	4798      	blx	r3
        }
        return;
 8002dea:	e078      	b.n	8002ede <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01c      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d108      	bne.n	8002e1a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d030      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	4798      	blx	r3
 8002e18:	e02b      	b.n	8002e72 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d027      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4798      	blx	r3
 8002e2a:	e022      	b.n	8002e72 <HAL_DMA_IRQHandler+0x29e>
 8002e2c:	20000004 	.word	0x20000004
 8002e30:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10f      	bne.n	8002e62 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0210 	bic.w	r2, r2, #16
 8002e50:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d032      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d022      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2205      	movs	r2, #5
 8002e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0201 	bic.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d307      	bcc.n	8002eba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f2      	bne.n	8002e9e <HAL_DMA_IRQHandler+0x2ca>
 8002eb8:	e000      	b.n	8002ebc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002eba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	4798      	blx	r3
 8002edc:	e000      	b.n	8002ee0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ede:	bf00      	nop
    }
  }
}
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop

08002ee8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b40      	cmp	r3, #64	; 0x40
 8002f14:	d108      	bne.n	8002f28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f26:	e007      	b.n	8002f38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	60da      	str	r2, [r3, #12]
}
 8002f38:	bf00      	nop
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	3b10      	subs	r3, #16
 8002f54:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <DMA_CalcBaseAndBitshift+0x64>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f5e:	4a13      	ldr	r2, [pc, #76]	; (8002fac <DMA_CalcBaseAndBitshift+0x68>)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4413      	add	r3, r2
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d909      	bls.n	8002f86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f7a:	f023 0303 	bic.w	r3, r3, #3
 8002f7e:	1d1a      	adds	r2, r3, #4
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	659a      	str	r2, [r3, #88]	; 0x58
 8002f84:	e007      	b.n	8002f96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f8e:	f023 0303 	bic.w	r3, r3, #3
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	aaaaaaab 	.word	0xaaaaaaab
 8002fac:	08005b6c 	.word	0x08005b6c

08002fb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d11f      	bne.n	800300a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d855      	bhi.n	800307c <DMA_CheckFifoParam+0xcc>
 8002fd0:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <DMA_CheckFifoParam+0x28>)
 8002fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd6:	bf00      	nop
 8002fd8:	08002fe9 	.word	0x08002fe9
 8002fdc:	08002ffb 	.word	0x08002ffb
 8002fe0:	08002fe9 	.word	0x08002fe9
 8002fe4:	0800307d 	.word	0x0800307d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d045      	beq.n	8003080 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff8:	e042      	b.n	8003080 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003002:	d13f      	bne.n	8003084 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003008:	e03c      	b.n	8003084 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003012:	d121      	bne.n	8003058 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d836      	bhi.n	8003088 <DMA_CheckFifoParam+0xd8>
 800301a:	a201      	add	r2, pc, #4	; (adr r2, 8003020 <DMA_CheckFifoParam+0x70>)
 800301c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003020:	08003031 	.word	0x08003031
 8003024:	08003037 	.word	0x08003037
 8003028:	08003031 	.word	0x08003031
 800302c:	08003049 	.word	0x08003049
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
      break;
 8003034:	e02f      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d024      	beq.n	800308c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003046:	e021      	b.n	800308c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003050:	d11e      	bne.n	8003090 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003056:	e01b      	b.n	8003090 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d902      	bls.n	8003064 <DMA_CheckFifoParam+0xb4>
 800305e:	2b03      	cmp	r3, #3
 8003060:	d003      	beq.n	800306a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003062:	e018      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      break;
 8003068:	e015      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00e      	beq.n	8003094 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
      break;
 800307a:	e00b      	b.n	8003094 <DMA_CheckFifoParam+0xe4>
      break;
 800307c:	bf00      	nop
 800307e:	e00a      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
      break;
 8003080:	bf00      	nop
 8003082:	e008      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
      break;
 8003084:	bf00      	nop
 8003086:	e006      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
      break;
 8003088:	bf00      	nop
 800308a:	e004      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
      break;
 800308c:	bf00      	nop
 800308e:	e002      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
      break;   
 8003090:	bf00      	nop
 8003092:	e000      	b.n	8003096 <DMA_CheckFifoParam+0xe6>
      break;
 8003094:	bf00      	nop
    }
  } 
  
  return status; 
 8003096:	7bfb      	ldrb	r3, [r7, #15]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	; 0x24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	e165      	b.n	800338c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030c0:	2201      	movs	r2, #1
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	429a      	cmp	r2, r3
 80030da:	f040 8154 	bne.w	8003386 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d00b      	beq.n	80030fe <HAL_GPIO_Init+0x5a>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d007      	beq.n	80030fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030f2:	2b11      	cmp	r3, #17
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b12      	cmp	r3, #18
 80030fc:	d130      	bne.n	8003160 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	2203      	movs	r2, #3
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003134:	2201      	movs	r2, #1
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 0201 	and.w	r2, r3, #1
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2203      	movs	r2, #3
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d003      	beq.n	80031a0 <HAL_GPIO_Init+0xfc>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b12      	cmp	r3, #18
 800319e:	d123      	bne.n	80031e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	08da      	lsrs	r2, r3, #3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3208      	adds	r2, #8
 80031a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	220f      	movs	r2, #15
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	08da      	lsrs	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3208      	adds	r2, #8
 80031e2:	69b9      	ldr	r1, [r7, #24]
 80031e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	2203      	movs	r2, #3
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 0203 	and.w	r2, r3, #3
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80ae 	beq.w	8003386 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	4b5c      	ldr	r3, [pc, #368]	; (80033a0 <HAL_GPIO_Init+0x2fc>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	4a5b      	ldr	r2, [pc, #364]	; (80033a0 <HAL_GPIO_Init+0x2fc>)
 8003234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003238:	6453      	str	r3, [r2, #68]	; 0x44
 800323a:	4b59      	ldr	r3, [pc, #356]	; (80033a0 <HAL_GPIO_Init+0x2fc>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003246:	4a57      	ldr	r2, [pc, #348]	; (80033a4 <HAL_GPIO_Init+0x300>)
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	089b      	lsrs	r3, r3, #2
 800324c:	3302      	adds	r3, #2
 800324e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	220f      	movs	r2, #15
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a4e      	ldr	r2, [pc, #312]	; (80033a8 <HAL_GPIO_Init+0x304>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d025      	beq.n	80032be <HAL_GPIO_Init+0x21a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4d      	ldr	r2, [pc, #308]	; (80033ac <HAL_GPIO_Init+0x308>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01f      	beq.n	80032ba <HAL_GPIO_Init+0x216>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4c      	ldr	r2, [pc, #304]	; (80033b0 <HAL_GPIO_Init+0x30c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d019      	beq.n	80032b6 <HAL_GPIO_Init+0x212>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4b      	ldr	r2, [pc, #300]	; (80033b4 <HAL_GPIO_Init+0x310>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_GPIO_Init+0x20e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a4a      	ldr	r2, [pc, #296]	; (80033b8 <HAL_GPIO_Init+0x314>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00d      	beq.n	80032ae <HAL_GPIO_Init+0x20a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a49      	ldr	r2, [pc, #292]	; (80033bc <HAL_GPIO_Init+0x318>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d007      	beq.n	80032aa <HAL_GPIO_Init+0x206>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a48      	ldr	r2, [pc, #288]	; (80033c0 <HAL_GPIO_Init+0x31c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d101      	bne.n	80032a6 <HAL_GPIO_Init+0x202>
 80032a2:	2306      	movs	r3, #6
 80032a4:	e00c      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032a6:	2307      	movs	r3, #7
 80032a8:	e00a      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032aa:	2305      	movs	r3, #5
 80032ac:	e008      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032ae:	2304      	movs	r3, #4
 80032b0:	e006      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032b2:	2303      	movs	r3, #3
 80032b4:	e004      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e002      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <HAL_GPIO_Init+0x21c>
 80032be:	2300      	movs	r3, #0
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	f002 0203 	and.w	r2, r2, #3
 80032c6:	0092      	lsls	r2, r2, #2
 80032c8:	4093      	lsls	r3, r2
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032d0:	4934      	ldr	r1, [pc, #208]	; (80033a4 <HAL_GPIO_Init+0x300>)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	3302      	adds	r3, #2
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032de:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <HAL_GPIO_Init+0x320>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003302:	4a30      	ldr	r2, [pc, #192]	; (80033c4 <HAL_GPIO_Init+0x320>)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003308:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <HAL_GPIO_Init+0x320>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800332c:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <HAL_GPIO_Init+0x320>)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003332:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <HAL_GPIO_Init+0x320>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003356:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <HAL_GPIO_Init+0x320>)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800335c:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <HAL_GPIO_Init+0x320>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	43db      	mvns	r3, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003380:	4a10      	ldr	r2, [pc, #64]	; (80033c4 <HAL_GPIO_Init+0x320>)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	3301      	adds	r3, #1
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	2b0f      	cmp	r3, #15
 8003390:	f67f ae96 	bls.w	80030c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003394:	bf00      	nop
 8003396:	3724      	adds	r7, #36	; 0x24
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	40023800 	.word	0x40023800
 80033a4:	40013800 	.word	0x40013800
 80033a8:	40020000 	.word	0x40020000
 80033ac:	40020400 	.word	0x40020400
 80033b0:	40020800 	.word	0x40020800
 80033b4:	40020c00 	.word	0x40020c00
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40021400 	.word	0x40021400
 80033c0:	40021800 	.word	0x40021800
 80033c4:	40013c00 	.word	0x40013c00

080033c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
 80033e4:	e001      	b.n	80033ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	807b      	strh	r3, [r7, #2]
 8003404:	4613      	mov	r3, r2
 8003406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003408:	787b      	ldrb	r3, [r7, #1]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800340e:	887a      	ldrh	r2, [r7, #2]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003414:	e003      	b.n	800341e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003416:	887b      	ldrh	r3, [r7, #2]
 8003418:	041a      	lsls	r2, r3, #16
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	619a      	str	r2, [r3, #24]
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003436:	4b08      	ldr	r3, [pc, #32]	; (8003458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003438:	695a      	ldr	r2, [r3, #20]
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	4013      	ands	r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d006      	beq.n	8003450 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003442:	4a05      	ldr	r2, [pc, #20]	; (8003458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003448:	88fb      	ldrh	r3, [r7, #6]
 800344a:	4618      	mov	r0, r3
 800344c:	f000 f806 	bl	800345c <HAL_GPIO_EXTI_Callback>
  }
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40013c00 	.word	0x40013c00

0800345c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0cc      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003488:	4b68      	ldr	r3, [pc, #416]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d90c      	bls.n	80034b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b65      	ldr	r3, [pc, #404]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b63      	ldr	r3, [pc, #396]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0b8      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c8:	4b59      	ldr	r3, [pc, #356]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a58      	ldr	r2, [pc, #352]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e0:	4b53      	ldr	r3, [pc, #332]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a52      	ldr	r2, [pc, #328]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ec:	4b50      	ldr	r3, [pc, #320]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	494d      	ldr	r1, [pc, #308]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d044      	beq.n	8003594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	4b47      	ldr	r3, [pc, #284]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d119      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e07f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d003      	beq.n	8003532 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800352e:	2b03      	cmp	r3, #3
 8003530:	d107      	bne.n	8003542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003532:	4b3f      	ldr	r3, [pc, #252]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e06f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003542:	4b3b      	ldr	r3, [pc, #236]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e067      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003552:	4b37      	ldr	r3, [pc, #220]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f023 0203 	bic.w	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4934      	ldr	r1, [pc, #208]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	4313      	orrs	r3, r2
 8003562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003564:	f7fe fac0 	bl	8001ae8 <HAL_GetTick>
 8003568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	e00a      	b.n	8003582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800356c:	f7fe fabc 	bl	8001ae8 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e04f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003582:	4b2b      	ldr	r3, [pc, #172]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 020c 	and.w	r2, r3, #12
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	429a      	cmp	r2, r3
 8003592:	d1eb      	bne.n	800356c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003594:	4b25      	ldr	r3, [pc, #148]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d20c      	bcs.n	80035bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b22      	ldr	r3, [pc, #136]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e032      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c8:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4916      	ldr	r1, [pc, #88]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035e6:	4b12      	ldr	r3, [pc, #72]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	490e      	ldr	r1, [pc, #56]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035fa:	f000 f855 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 80035fe:	4601      	mov	r1, r0
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 800360c:	5cd3      	ldrb	r3, [r2, r3]
 800360e:	fa21 f303 	lsr.w	r3, r1, r3
 8003612:	4a09      	ldr	r2, [pc, #36]	; (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_RCC_ClockConfig+0x1c8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe fa20 	bl	8001a60 <HAL_InitTick>

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023c00 	.word	0x40023c00
 8003630:	40023800 	.word	0x40023800
 8003634:	08005b54 	.word	0x08005b54
 8003638:	20000004 	.word	0x20000004
 800363c:	20000008 	.word	0x20000008

08003640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <HAL_RCC_GetHCLKFreq+0x14>)
 8003646:	681b      	ldr	r3, [r3, #0]
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000004 	.word	0x20000004

08003658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800365c:	f7ff fff0 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8003660:	4601      	mov	r1, r0
 8003662:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	0a9b      	lsrs	r3, r3, #10
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	4a03      	ldr	r2, [pc, #12]	; (800367c <HAL_RCC_GetPCLK1Freq+0x24>)
 800366e:	5cd3      	ldrb	r3, [r2, r3]
 8003670:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40023800 	.word	0x40023800
 800367c:	08005b64 	.word	0x08005b64

08003680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003684:	f7ff ffdc 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8003688:	4601      	mov	r1, r0
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	0b5b      	lsrs	r3, r3, #13
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	4a03      	ldr	r2, [pc, #12]	; (80036a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003696:	5cd3      	ldrb	r3, [r2, r3]
 8003698:	fa21 f303 	lsr.w	r3, r1, r3
}
 800369c:	4618      	mov	r0, r3
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40023800 	.word	0x40023800
 80036a4:	08005b64 	.word	0x08005b64

080036a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c2:	4bc6      	ldr	r3, [pc, #792]	; (80039dc <HAL_RCC_GetSysClockFreq+0x334>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b0c      	cmp	r3, #12
 80036cc:	f200 817e 	bhi.w	80039cc <HAL_RCC_GetSysClockFreq+0x324>
 80036d0:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <HAL_RCC_GetSysClockFreq+0x30>)
 80036d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d6:	bf00      	nop
 80036d8:	0800370d 	.word	0x0800370d
 80036dc:	080039cd 	.word	0x080039cd
 80036e0:	080039cd 	.word	0x080039cd
 80036e4:	080039cd 	.word	0x080039cd
 80036e8:	08003713 	.word	0x08003713
 80036ec:	080039cd 	.word	0x080039cd
 80036f0:	080039cd 	.word	0x080039cd
 80036f4:	080039cd 	.word	0x080039cd
 80036f8:	08003719 	.word	0x08003719
 80036fc:	080039cd 	.word	0x080039cd
 8003700:	080039cd 	.word	0x080039cd
 8003704:	080039cd 	.word	0x080039cd
 8003708:	08003875 	.word	0x08003875
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800370c:	4bb4      	ldr	r3, [pc, #720]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x338>)
 800370e:	613b      	str	r3, [r7, #16]
       break;
 8003710:	e15f      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003712:	4bb4      	ldr	r3, [pc, #720]	; (80039e4 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003714:	613b      	str	r3, [r7, #16]
      break;
 8003716:	e15c      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003718:	4bb0      	ldr	r3, [pc, #704]	; (80039dc <HAL_RCC_GetSysClockFreq+0x334>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003720:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003722:	4bae      	ldr	r3, [pc, #696]	; (80039dc <HAL_RCC_GetSysClockFreq+0x334>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d04a      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372e:	4bab      	ldr	r3, [pc, #684]	; (80039dc <HAL_RCC_GetSysClockFreq+0x334>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	099b      	lsrs	r3, r3, #6
 8003734:	f04f 0400 	mov.w	r4, #0
 8003738:	f240 11ff 	movw	r1, #511	; 0x1ff
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	ea03 0501 	and.w	r5, r3, r1
 8003744:	ea04 0602 	and.w	r6, r4, r2
 8003748:	4629      	mov	r1, r5
 800374a:	4632      	mov	r2, r6
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	f04f 0400 	mov.w	r4, #0
 8003754:	0154      	lsls	r4, r2, #5
 8003756:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800375a:	014b      	lsls	r3, r1, #5
 800375c:	4619      	mov	r1, r3
 800375e:	4622      	mov	r2, r4
 8003760:	1b49      	subs	r1, r1, r5
 8003762:	eb62 0206 	sbc.w	r2, r2, r6
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	f04f 0400 	mov.w	r4, #0
 800376e:	0194      	lsls	r4, r2, #6
 8003770:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003774:	018b      	lsls	r3, r1, #6
 8003776:	1a5b      	subs	r3, r3, r1
 8003778:	eb64 0402 	sbc.w	r4, r4, r2
 800377c:	f04f 0100 	mov.w	r1, #0
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	00e2      	lsls	r2, r4, #3
 8003786:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800378a:	00d9      	lsls	r1, r3, #3
 800378c:	460b      	mov	r3, r1
 800378e:	4614      	mov	r4, r2
 8003790:	195b      	adds	r3, r3, r5
 8003792:	eb44 0406 	adc.w	r4, r4, r6
 8003796:	f04f 0100 	mov.w	r1, #0
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	0262      	lsls	r2, r4, #9
 80037a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037a4:	0259      	lsls	r1, r3, #9
 80037a6:	460b      	mov	r3, r1
 80037a8:	4614      	mov	r4, r2
 80037aa:	4618      	mov	r0, r3
 80037ac:	4621      	mov	r1, r4
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f04f 0400 	mov.w	r4, #0
 80037b4:	461a      	mov	r2, r3
 80037b6:	4623      	mov	r3, r4
 80037b8:	f7fc fd24 	bl	8000204 <__aeabi_uldivmod>
 80037bc:	4603      	mov	r3, r0
 80037be:	460c      	mov	r4, r1
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	e049      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c4:	4b85      	ldr	r3, [pc, #532]	; (80039dc <HAL_RCC_GetSysClockFreq+0x334>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	099b      	lsrs	r3, r3, #6
 80037ca:	f04f 0400 	mov.w	r4, #0
 80037ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	ea03 0501 	and.w	r5, r3, r1
 80037da:	ea04 0602 	and.w	r6, r4, r2
 80037de:	4629      	mov	r1, r5
 80037e0:	4632      	mov	r2, r6
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	f04f 0400 	mov.w	r4, #0
 80037ea:	0154      	lsls	r4, r2, #5
 80037ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037f0:	014b      	lsls	r3, r1, #5
 80037f2:	4619      	mov	r1, r3
 80037f4:	4622      	mov	r2, r4
 80037f6:	1b49      	subs	r1, r1, r5
 80037f8:	eb62 0206 	sbc.w	r2, r2, r6
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	f04f 0400 	mov.w	r4, #0
 8003804:	0194      	lsls	r4, r2, #6
 8003806:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800380a:	018b      	lsls	r3, r1, #6
 800380c:	1a5b      	subs	r3, r3, r1
 800380e:	eb64 0402 	sbc.w	r4, r4, r2
 8003812:	f04f 0100 	mov.w	r1, #0
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	00e2      	lsls	r2, r4, #3
 800381c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003820:	00d9      	lsls	r1, r3, #3
 8003822:	460b      	mov	r3, r1
 8003824:	4614      	mov	r4, r2
 8003826:	195b      	adds	r3, r3, r5
 8003828:	eb44 0406 	adc.w	r4, r4, r6
 800382c:	f04f 0100 	mov.w	r1, #0
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	02a2      	lsls	r2, r4, #10
 8003836:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800383a:	0299      	lsls	r1, r3, #10
 800383c:	460b      	mov	r3, r1
 800383e:	4614      	mov	r4, r2
 8003840:	4618      	mov	r0, r3
 8003842:	4621      	mov	r1, r4
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f04f 0400 	mov.w	r4, #0
 800384a:	461a      	mov	r2, r3
 800384c:	4623      	mov	r3, r4
 800384e:	f7fc fcd9 	bl	8000204 <__aeabi_uldivmod>
 8003852:	4603      	mov	r3, r0
 8003854:	460c      	mov	r4, r1
 8003856:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003858:	4b60      	ldr	r3, [pc, #384]	; (80039dc <HAL_RCC_GetSysClockFreq+0x334>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	0c1b      	lsrs	r3, r3, #16
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	3301      	adds	r3, #1
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	613b      	str	r3, [r7, #16]
      break;
 8003872:	e0ae      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003874:	4b59      	ldr	r3, [pc, #356]	; (80039dc <HAL_RCC_GetSysClockFreq+0x334>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800387c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800387e:	4b57      	ldr	r3, [pc, #348]	; (80039dc <HAL_RCC_GetSysClockFreq+0x334>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d04a      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388a:	4b54      	ldr	r3, [pc, #336]	; (80039dc <HAL_RCC_GetSysClockFreq+0x334>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	099b      	lsrs	r3, r3, #6
 8003890:	f04f 0400 	mov.w	r4, #0
 8003894:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	ea03 0501 	and.w	r5, r3, r1
 80038a0:	ea04 0602 	and.w	r6, r4, r2
 80038a4:	4629      	mov	r1, r5
 80038a6:	4632      	mov	r2, r6
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	f04f 0400 	mov.w	r4, #0
 80038b0:	0154      	lsls	r4, r2, #5
 80038b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038b6:	014b      	lsls	r3, r1, #5
 80038b8:	4619      	mov	r1, r3
 80038ba:	4622      	mov	r2, r4
 80038bc:	1b49      	subs	r1, r1, r5
 80038be:	eb62 0206 	sbc.w	r2, r2, r6
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	f04f 0400 	mov.w	r4, #0
 80038ca:	0194      	lsls	r4, r2, #6
 80038cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038d0:	018b      	lsls	r3, r1, #6
 80038d2:	1a5b      	subs	r3, r3, r1
 80038d4:	eb64 0402 	sbc.w	r4, r4, r2
 80038d8:	f04f 0100 	mov.w	r1, #0
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	00e2      	lsls	r2, r4, #3
 80038e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038e6:	00d9      	lsls	r1, r3, #3
 80038e8:	460b      	mov	r3, r1
 80038ea:	4614      	mov	r4, r2
 80038ec:	195b      	adds	r3, r3, r5
 80038ee:	eb44 0406 	adc.w	r4, r4, r6
 80038f2:	f04f 0100 	mov.w	r1, #0
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	0262      	lsls	r2, r4, #9
 80038fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003900:	0259      	lsls	r1, r3, #9
 8003902:	460b      	mov	r3, r1
 8003904:	4614      	mov	r4, r2
 8003906:	4618      	mov	r0, r3
 8003908:	4621      	mov	r1, r4
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f04f 0400 	mov.w	r4, #0
 8003910:	461a      	mov	r2, r3
 8003912:	4623      	mov	r3, r4
 8003914:	f7fc fc76 	bl	8000204 <__aeabi_uldivmod>
 8003918:	4603      	mov	r3, r0
 800391a:	460c      	mov	r4, r1
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	e049      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003920:	4b2e      	ldr	r3, [pc, #184]	; (80039dc <HAL_RCC_GetSysClockFreq+0x334>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	099b      	lsrs	r3, r3, #6
 8003926:	f04f 0400 	mov.w	r4, #0
 800392a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	ea03 0501 	and.w	r5, r3, r1
 8003936:	ea04 0602 	and.w	r6, r4, r2
 800393a:	4629      	mov	r1, r5
 800393c:	4632      	mov	r2, r6
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	f04f 0400 	mov.w	r4, #0
 8003946:	0154      	lsls	r4, r2, #5
 8003948:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800394c:	014b      	lsls	r3, r1, #5
 800394e:	4619      	mov	r1, r3
 8003950:	4622      	mov	r2, r4
 8003952:	1b49      	subs	r1, r1, r5
 8003954:	eb62 0206 	sbc.w	r2, r2, r6
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	f04f 0400 	mov.w	r4, #0
 8003960:	0194      	lsls	r4, r2, #6
 8003962:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003966:	018b      	lsls	r3, r1, #6
 8003968:	1a5b      	subs	r3, r3, r1
 800396a:	eb64 0402 	sbc.w	r4, r4, r2
 800396e:	f04f 0100 	mov.w	r1, #0
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	00e2      	lsls	r2, r4, #3
 8003978:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800397c:	00d9      	lsls	r1, r3, #3
 800397e:	460b      	mov	r3, r1
 8003980:	4614      	mov	r4, r2
 8003982:	195b      	adds	r3, r3, r5
 8003984:	eb44 0406 	adc.w	r4, r4, r6
 8003988:	f04f 0100 	mov.w	r1, #0
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	02a2      	lsls	r2, r4, #10
 8003992:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003996:	0299      	lsls	r1, r3, #10
 8003998:	460b      	mov	r3, r1
 800399a:	4614      	mov	r4, r2
 800399c:	4618      	mov	r0, r3
 800399e:	4621      	mov	r1, r4
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f04f 0400 	mov.w	r4, #0
 80039a6:	461a      	mov	r2, r3
 80039a8:	4623      	mov	r3, r4
 80039aa:	f7fc fc2b 	bl	8000204 <__aeabi_uldivmod>
 80039ae:	4603      	mov	r3, r0
 80039b0:	460c      	mov	r4, r1
 80039b2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <HAL_RCC_GetSysClockFreq+0x334>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	0f1b      	lsrs	r3, r3, #28
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	613b      	str	r3, [r7, #16]
      break;
 80039ca:	e002      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039cc:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <HAL_RCC_GetSysClockFreq+0x338>)
 80039ce:	613b      	str	r3, [r7, #16]
      break;
 80039d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039d2:	693b      	ldr	r3, [r7, #16]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	371c      	adds	r7, #28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039dc:	40023800 	.word	0x40023800
 80039e0:	00f42400 	.word	0x00f42400
 80039e4:	007a1200 	.word	0x007a1200

080039e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8083 	beq.w	8003b08 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a02:	4b95      	ldr	r3, [pc, #596]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d019      	beq.n	8003a42 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a0e:	4b92      	ldr	r3, [pc, #584]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d106      	bne.n	8003a28 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a1a:	4b8f      	ldr	r3, [pc, #572]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a26:	d00c      	beq.n	8003a42 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a28:	4b8b      	ldr	r3, [pc, #556]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003a30:	2b0c      	cmp	r3, #12
 8003a32:	d112      	bne.n	8003a5a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a34:	4b88      	ldr	r3, [pc, #544]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a40:	d10b      	bne.n	8003a5a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a42:	4b85      	ldr	r3, [pc, #532]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d05b      	beq.n	8003b06 <HAL_RCC_OscConfig+0x11e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d157      	bne.n	8003b06 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e216      	b.n	8003e88 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a62:	d106      	bne.n	8003a72 <HAL_RCC_OscConfig+0x8a>
 8003a64:	4b7c      	ldr	r3, [pc, #496]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a7b      	ldr	r2, [pc, #492]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	e01d      	b.n	8003aae <HAL_RCC_OscConfig+0xc6>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a7a:	d10c      	bne.n	8003a96 <HAL_RCC_OscConfig+0xae>
 8003a7c:	4b76      	ldr	r3, [pc, #472]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a75      	ldr	r2, [pc, #468]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	4b73      	ldr	r3, [pc, #460]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a72      	ldr	r2, [pc, #456]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	e00b      	b.n	8003aae <HAL_RCC_OscConfig+0xc6>
 8003a96:	4b70      	ldr	r3, [pc, #448]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a6f      	ldr	r2, [pc, #444]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	4b6d      	ldr	r3, [pc, #436]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a6c      	ldr	r2, [pc, #432]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d013      	beq.n	8003ade <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab6:	f7fe f817 	bl	8001ae8 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003abe:	f7fe f813 	bl	8001ae8 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b64      	cmp	r3, #100	; 0x64
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e1db      	b.n	8003e88 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad0:	4b61      	ldr	r3, [pc, #388]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCC_OscConfig+0xd6>
 8003adc:	e014      	b.n	8003b08 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fe f803 	bl	8001ae8 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ae6:	f7fd ffff 	bl	8001ae8 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b64      	cmp	r3, #100	; 0x64
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e1c7      	b.n	8003e88 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af8:	4b57      	ldr	r3, [pc, #348]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0xfe>
 8003b04:	e000      	b.n	8003b08 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b06:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d06f      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b14:	4b50      	ldr	r3, [pc, #320]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d017      	beq.n	8003b50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b20:	4b4d      	ldr	r3, [pc, #308]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d105      	bne.n	8003b38 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b2c:	4b4a      	ldr	r3, [pc, #296]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00b      	beq.n	8003b50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b38:	4b47      	ldr	r3, [pc, #284]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003b40:	2b0c      	cmp	r3, #12
 8003b42:	d11c      	bne.n	8003b7e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b44:	4b44      	ldr	r3, [pc, #272]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d116      	bne.n	8003b7e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b50:	4b41      	ldr	r3, [pc, #260]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <HAL_RCC_OscConfig+0x180>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e18f      	b.n	8003e88 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b68:	4b3b      	ldr	r3, [pc, #236]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4938      	ldr	r1, [pc, #224]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7c:	e03a      	b.n	8003bf4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d020      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b86:	4b35      	ldr	r3, [pc, #212]	; (8003c5c <HAL_RCC_OscConfig+0x274>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fd ffac 	bl	8001ae8 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b94:	f7fd ffa8 	bl	8001ae8 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e170      	b.n	8003e88 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba6:	4b2c      	ldr	r3, [pc, #176]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb2:	4b29      	ldr	r3, [pc, #164]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4925      	ldr	r1, [pc, #148]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	600b      	str	r3, [r1, #0]
 8003bc6:	e015      	b.n	8003bf4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bc8:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <HAL_RCC_OscConfig+0x274>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bce:	f7fd ff8b 	bl	8001ae8 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd6:	f7fd ff87 	bl	8001ae8 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e14f      	b.n	8003e88 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003be8:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f0      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d037      	beq.n	8003c70 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d016      	beq.n	8003c36 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c08:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <HAL_RCC_OscConfig+0x278>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0e:	f7fd ff6b 	bl	8001ae8 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c16:	f7fd ff67 	bl	8001ae8 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e12f      	b.n	8003e88 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x22e>
 8003c34:	e01c      	b.n	8003c70 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c36:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <HAL_RCC_OscConfig+0x278>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3c:	f7fd ff54 	bl	8001ae8 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c42:	e00f      	b.n	8003c64 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c44:	f7fd ff50 	bl	8001ae8 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d908      	bls.n	8003c64 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e118      	b.n	8003e88 <HAL_RCC_OscConfig+0x4a0>
 8003c56:	bf00      	nop
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	42470000 	.word	0x42470000
 8003c60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c64:	4b8a      	ldr	r3, [pc, #552]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e9      	bne.n	8003c44 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8097 	beq.w	8003dac <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c82:	4b83      	ldr	r3, [pc, #524]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10f      	bne.n	8003cae <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	4b7f      	ldr	r3, [pc, #508]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	4a7e      	ldr	r2, [pc, #504]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9e:	4b7c      	ldr	r3, [pc, #496]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003caa:	2301      	movs	r3, #1
 8003cac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cae:	4b79      	ldr	r3, [pc, #484]	; (8003e94 <HAL_RCC_OscConfig+0x4ac>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d118      	bne.n	8003cec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cba:	4b76      	ldr	r3, [pc, #472]	; (8003e94 <HAL_RCC_OscConfig+0x4ac>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a75      	ldr	r2, [pc, #468]	; (8003e94 <HAL_RCC_OscConfig+0x4ac>)
 8003cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc6:	f7fd ff0f 	bl	8001ae8 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cce:	f7fd ff0b 	bl	8001ae8 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e0d3      	b.n	8003e88 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce0:	4b6c      	ldr	r3, [pc, #432]	; (8003e94 <HAL_RCC_OscConfig+0x4ac>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0f0      	beq.n	8003cce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d106      	bne.n	8003d02 <HAL_RCC_OscConfig+0x31a>
 8003cf4:	4b66      	ldr	r3, [pc, #408]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	4a65      	ldr	r2, [pc, #404]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003d00:	e01c      	b.n	8003d3c <HAL_RCC_OscConfig+0x354>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b05      	cmp	r3, #5
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCC_OscConfig+0x33c>
 8003d0a:	4b61      	ldr	r3, [pc, #388]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	4a60      	ldr	r2, [pc, #384]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003d10:	f043 0304 	orr.w	r3, r3, #4
 8003d14:	6713      	str	r3, [r2, #112]	; 0x70
 8003d16:	4b5e      	ldr	r3, [pc, #376]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a5d      	ldr	r2, [pc, #372]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6713      	str	r3, [r2, #112]	; 0x70
 8003d22:	e00b      	b.n	8003d3c <HAL_RCC_OscConfig+0x354>
 8003d24:	4b5a      	ldr	r3, [pc, #360]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d28:	4a59      	ldr	r2, [pc, #356]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d30:	4b57      	ldr	r3, [pc, #348]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	4a56      	ldr	r2, [pc, #344]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003d36:	f023 0304 	bic.w	r3, r3, #4
 8003d3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d015      	beq.n	8003d70 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d44:	f7fd fed0 	bl	8001ae8 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d4c:	f7fd fecc 	bl	8001ae8 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e092      	b.n	8003e88 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d62:	4b4b      	ldr	r3, [pc, #300]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0ee      	beq.n	8003d4c <HAL_RCC_OscConfig+0x364>
 8003d6e:	e014      	b.n	8003d9a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7fd feba 	bl	8001ae8 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f7fd feb6 	bl	8001ae8 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e07c      	b.n	8003e88 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d8e:	4b40      	ldr	r3, [pc, #256]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1ee      	bne.n	8003d78 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d105      	bne.n	8003dac <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da0:	4b3b      	ldr	r3, [pc, #236]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	4a3a      	ldr	r2, [pc, #232]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003daa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d068      	beq.n	8003e86 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003db4:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d060      	beq.n	8003e82 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d145      	bne.n	8003e54 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc8:	4b33      	ldr	r3, [pc, #204]	; (8003e98 <HAL_RCC_OscConfig+0x4b0>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dce:	f7fd fe8b 	bl	8001ae8 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd6:	f7fd fe87 	bl	8001ae8 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e04f      	b.n	8003e88 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de8:	4b29      	ldr	r3, [pc, #164]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f0      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	019b      	lsls	r3, r3, #6
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	085b      	lsrs	r3, r3, #1
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	041b      	lsls	r3, r3, #16
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	061b      	lsls	r3, r3, #24
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	071b      	lsls	r3, r3, #28
 8003e20:	491b      	ldr	r1, [pc, #108]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e26:	4b1c      	ldr	r3, [pc, #112]	; (8003e98 <HAL_RCC_OscConfig+0x4b0>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fd fe5c 	bl	8001ae8 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e34:	f7fd fe58 	bl	8001ae8 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e020      	b.n	8003e88 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e46:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0x44c>
 8003e52:	e018      	b.n	8003e86 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e54:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <HAL_RCC_OscConfig+0x4b0>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5a:	f7fd fe45 	bl	8001ae8 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e62:	f7fd fe41 	bl	8001ae8 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e009      	b.n	8003e88 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_RCC_OscConfig+0x4a8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f0      	bne.n	8003e62 <HAL_RCC_OscConfig+0x47a>
 8003e80:	e001      	b.n	8003e86 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40007000 	.word	0x40007000
 8003e98:	42470060 	.word	0x42470060

08003e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e01d      	b.n	8003eea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fd fc44 	bl	8001750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4610      	mov	r0, r2
 8003edc:	f000 f8e4 	bl	80040a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2202      	movs	r2, #2
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b06      	cmp	r3, #6
 8003f12:	d007      	beq.n	8003f24 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <HAL_TIM_ConfigClockSource+0x18>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e0a6      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x166>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f70:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f78:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b40      	cmp	r3, #64	; 0x40
 8003f88:	d067      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x120>
 8003f8a:	2b40      	cmp	r3, #64	; 0x40
 8003f8c:	d80b      	bhi.n	8003fa6 <HAL_TIM_ConfigClockSource+0x6c>
 8003f8e:	2b10      	cmp	r3, #16
 8003f90:	d073      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x140>
 8003f92:	2b10      	cmp	r3, #16
 8003f94:	d802      	bhi.n	8003f9c <HAL_TIM_ConfigClockSource+0x62>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d06f      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003f9a:	e078      	b.n	800408e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d06c      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x140>
 8003fa0:	2b30      	cmp	r3, #48	; 0x30
 8003fa2:	d06a      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003fa4:	e073      	b.n	800408e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fa6:	2b70      	cmp	r3, #112	; 0x70
 8003fa8:	d00d      	beq.n	8003fc6 <HAL_TIM_ConfigClockSource+0x8c>
 8003faa:	2b70      	cmp	r3, #112	; 0x70
 8003fac:	d804      	bhi.n	8003fb8 <HAL_TIM_ConfigClockSource+0x7e>
 8003fae:	2b50      	cmp	r3, #80	; 0x50
 8003fb0:	d033      	beq.n	800401a <HAL_TIM_ConfigClockSource+0xe0>
 8003fb2:	2b60      	cmp	r3, #96	; 0x60
 8003fb4:	d041      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003fb6:	e06a      	b.n	800408e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fbc:	d066      	beq.n	800408c <HAL_TIM_ConfigClockSource+0x152>
 8003fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc2:	d017      	beq.n	8003ff4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003fc4:	e063      	b.n	800408e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6899      	ldr	r1, [r3, #8]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f000 f981 	bl	80042dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fe8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	609a      	str	r2, [r3, #8]
      break;
 8003ff2:	e04c      	b.n	800408e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	6899      	ldr	r1, [r3, #8]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f000 f96a 	bl	80042dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004016:	609a      	str	r2, [r3, #8]
      break;
 8004018:	e039      	b.n	800408e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6859      	ldr	r1, [r3, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	461a      	mov	r2, r3
 8004028:	f000 f8de 	bl	80041e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2150      	movs	r1, #80	; 0x50
 8004032:	4618      	mov	r0, r3
 8004034:	f000 f937 	bl	80042a6 <TIM_ITRx_SetConfig>
      break;
 8004038:	e029      	b.n	800408e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6859      	ldr	r1, [r3, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	461a      	mov	r2, r3
 8004048:	f000 f8fd 	bl	8004246 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2160      	movs	r1, #96	; 0x60
 8004052:	4618      	mov	r0, r3
 8004054:	f000 f927 	bl	80042a6 <TIM_ITRx_SetConfig>
      break;
 8004058:	e019      	b.n	800408e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6859      	ldr	r1, [r3, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	461a      	mov	r2, r3
 8004068:	f000 f8be 	bl	80041e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2140      	movs	r1, #64	; 0x40
 8004072:	4618      	mov	r0, r3
 8004074:	f000 f917 	bl	80042a6 <TIM_ITRx_SetConfig>
      break;
 8004078:	e009      	b.n	800408e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f000 f90e 	bl	80042a6 <TIM_ITRx_SetConfig>
      break;
 800408a:	e000      	b.n	800408e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800408c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a40      	ldr	r2, [pc, #256]	; (80041bc <TIM_Base_SetConfig+0x114>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d013      	beq.n	80040e8 <TIM_Base_SetConfig+0x40>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c6:	d00f      	beq.n	80040e8 <TIM_Base_SetConfig+0x40>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a3d      	ldr	r2, [pc, #244]	; (80041c0 <TIM_Base_SetConfig+0x118>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00b      	beq.n	80040e8 <TIM_Base_SetConfig+0x40>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a3c      	ldr	r2, [pc, #240]	; (80041c4 <TIM_Base_SetConfig+0x11c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d007      	beq.n	80040e8 <TIM_Base_SetConfig+0x40>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a3b      	ldr	r2, [pc, #236]	; (80041c8 <TIM_Base_SetConfig+0x120>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_Base_SetConfig+0x40>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a3a      	ldr	r2, [pc, #232]	; (80041cc <TIM_Base_SetConfig+0x124>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d108      	bne.n	80040fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a2f      	ldr	r2, [pc, #188]	; (80041bc <TIM_Base_SetConfig+0x114>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d02b      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004108:	d027      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a2c      	ldr	r2, [pc, #176]	; (80041c0 <TIM_Base_SetConfig+0x118>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d023      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a2b      	ldr	r2, [pc, #172]	; (80041c4 <TIM_Base_SetConfig+0x11c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d01f      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a2a      	ldr	r2, [pc, #168]	; (80041c8 <TIM_Base_SetConfig+0x120>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d01b      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a29      	ldr	r2, [pc, #164]	; (80041cc <TIM_Base_SetConfig+0x124>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d017      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a28      	ldr	r2, [pc, #160]	; (80041d0 <TIM_Base_SetConfig+0x128>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d013      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a27      	ldr	r2, [pc, #156]	; (80041d4 <TIM_Base_SetConfig+0x12c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00f      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a26      	ldr	r2, [pc, #152]	; (80041d8 <TIM_Base_SetConfig+0x130>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00b      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a25      	ldr	r2, [pc, #148]	; (80041dc <TIM_Base_SetConfig+0x134>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d007      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a24      	ldr	r2, [pc, #144]	; (80041e0 <TIM_Base_SetConfig+0x138>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d003      	beq.n	800415a <TIM_Base_SetConfig+0xb2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a23      	ldr	r2, [pc, #140]	; (80041e4 <TIM_Base_SetConfig+0x13c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d108      	bne.n	800416c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <TIM_Base_SetConfig+0x114>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d003      	beq.n	80041a0 <TIM_Base_SetConfig+0xf8>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a0c      	ldr	r2, [pc, #48]	; (80041cc <TIM_Base_SetConfig+0x124>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d103      	bne.n	80041a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	615a      	str	r2, [r3, #20]
}
 80041ae:	bf00      	nop
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40010000 	.word	0x40010000
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40000800 	.word	0x40000800
 80041c8:	40000c00 	.word	0x40000c00
 80041cc:	40010400 	.word	0x40010400
 80041d0:	40014000 	.word	0x40014000
 80041d4:	40014400 	.word	0x40014400
 80041d8:	40014800 	.word	0x40014800
 80041dc:	40001800 	.word	0x40001800
 80041e0:	40001c00 	.word	0x40001c00
 80041e4:	40002000 	.word	0x40002000

080041e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	f023 0201 	bic.w	r2, r3, #1
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f023 030a 	bic.w	r3, r3, #10
 8004224:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	621a      	str	r2, [r3, #32]
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004246:	b480      	push	{r7}
 8004248:	b087      	sub	sp, #28
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f023 0210 	bic.w	r2, r3, #16
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004270:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	031b      	lsls	r3, r3, #12
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004282:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	621a      	str	r2, [r3, #32]
}
 800429a:	bf00      	nop
 800429c:	371c      	adds	r7, #28
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b085      	sub	sp, #20
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f043 0307 	orr.w	r3, r3, #7
 80042c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	609a      	str	r2, [r3, #8]
}
 80042d0:	bf00      	nop
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	021a      	lsls	r2, r3, #8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	431a      	orrs	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4313      	orrs	r3, r2
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	609a      	str	r2, [r3, #8]
}
 8004310:	bf00      	nop
 8004312:	371c      	adds	r7, #28
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004330:	2302      	movs	r3, #2
 8004332:	e05a      	b.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a21      	ldr	r2, [pc, #132]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d022      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004380:	d01d      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d018      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1b      	ldr	r2, [pc, #108]	; (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1a      	ldr	r2, [pc, #104]	; (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00e      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a18      	ldr	r2, [pc, #96]	; (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d009      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a17      	ldr	r2, [pc, #92]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d004      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a15      	ldr	r2, [pc, #84]	; (8004410 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d10c      	bne.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40010000 	.word	0x40010000
 80043fc:	40000400 	.word	0x40000400
 8004400:	40000800 	.word	0x40000800
 8004404:	40000c00 	.word	0x40000c00
 8004408:	40010400 	.word	0x40010400
 800440c:	40014000 	.word	0x40014000
 8004410:	40001800 	.word	0x40001800

08004414 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e03f      	b.n	80044a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fd f9be 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2224      	movs	r2, #36	; 0x24
 8004444:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004456:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fa4b 	bl	80048f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800446c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695a      	ldr	r2, [r3, #20]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800447c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800448c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b088      	sub	sp, #32
 80044b2:	af02      	add	r7, sp, #8
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	603b      	str	r3, [r7, #0]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	f040 8083 	bne.w	80045d6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <HAL_UART_Transmit+0x2e>
 80044d6:	88fb      	ldrh	r3, [r7, #6]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e07b      	b.n	80045d8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_UART_Transmit+0x40>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e074      	b.n	80045d8 <HAL_UART_Transmit+0x12a>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2221      	movs	r2, #33	; 0x21
 8004500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004504:	f7fd faf0 	bl	8001ae8 <HAL_GetTick>
 8004508:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	88fa      	ldrh	r2, [r7, #6]
 800450e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	88fa      	ldrh	r2, [r7, #6]
 8004514:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800451e:	e042      	b.n	80045a6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004536:	d122      	bne.n	800457e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2200      	movs	r2, #0
 8004540:	2180      	movs	r1, #128	; 0x80
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f957 	bl	80047f6 <UART_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e042      	b.n	80045d8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004564:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d103      	bne.n	8004576 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	3302      	adds	r3, #2
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	e017      	b.n	80045a6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	3301      	adds	r3, #1
 800457a:	60bb      	str	r3, [r7, #8]
 800457c:	e013      	b.n	80045a6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2200      	movs	r2, #0
 8004586:	2180      	movs	r1, #128	; 0x80
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f934 	bl	80047f6 <UART_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e01f      	b.n	80045d8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	60ba      	str	r2, [r7, #8]
 800459e:	781a      	ldrb	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1b7      	bne.n	8004520 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2200      	movs	r2, #0
 80045b8:	2140      	movs	r1, #64	; 0x40
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f91b 	bl	80047f6 <UART_WaitOnFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e006      	b.n	80045d8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	e000      	b.n	80045d8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80045d6:	2302      	movs	r3, #2
  }
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	4613      	mov	r3, r2
 80045ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d153      	bne.n	80046a2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <HAL_UART_Transmit_DMA+0x26>
 8004600:	88fb      	ldrh	r3, [r7, #6]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e04c      	b.n	80046a4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_UART_Transmit_DMA+0x38>
 8004614:	2302      	movs	r3, #2
 8004616:	e045      	b.n	80046a4 <HAL_UART_Transmit_DMA+0xc4>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	88fa      	ldrh	r2, [r7, #6]
 800462a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	88fa      	ldrh	r2, [r7, #6]
 8004630:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2221      	movs	r2, #33	; 0x21
 800463c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	4a19      	ldr	r2, [pc, #100]	; (80046ac <HAL_UART_Transmit_DMA+0xcc>)
 8004646:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	4a18      	ldr	r2, [pc, #96]	; (80046b0 <HAL_UART_Transmit_DMA+0xd0>)
 800464e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	4a17      	ldr	r2, [pc, #92]	; (80046b4 <HAL_UART_Transmit_DMA+0xd4>)
 8004656:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	2200      	movs	r2, #0
 800465e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8004660:	f107 0308 	add.w	r3, r7, #8
 8004664:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	6819      	ldr	r1, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3304      	adds	r3, #4
 8004674:	461a      	mov	r2, r3
 8004676:	88fb      	ldrh	r3, [r7, #6]
 8004678:	f7fe f9e4 	bl	8002a44 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004684:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695a      	ldr	r2, [r3, #20]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800469c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	e000      	b.n	80046a4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80046a2:	2302      	movs	r3, #2
  }
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	080046f5 	.word	0x080046f5
 80046b0:	08004747 	.word	0x08004747
 80046b4:	08004763 	.word	0x08004763

080046b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d113      	bne.n	8004738 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004724:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004734:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004736:	e002      	b.n	800473e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7ff ffbd 	bl	80046b8 <HAL_UART_TxCpltCallback>
}
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f7ff ffb9 	bl	80046cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800475a:	bf00      	nop
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477e:	2b80      	cmp	r3, #128	; 0x80
 8004780:	bf0c      	ite	eq
 8004782:	2301      	moveq	r3, #1
 8004784:	2300      	movne	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b21      	cmp	r3, #33	; 0x21
 8004794:	d108      	bne.n	80047a8 <UART_DMAError+0x46>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2200      	movs	r2, #0
 80047a0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80047a2:	68b8      	ldr	r0, [r7, #8]
 80047a4:	f000 f871 	bl	800488a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	bf0c      	ite	eq
 80047b6:	2301      	moveq	r3, #1
 80047b8:	2300      	movne	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b22      	cmp	r3, #34	; 0x22
 80047c8:	d108      	bne.n	80047dc <UART_DMAError+0x7a>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2200      	movs	r2, #0
 80047d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80047d6:	68b8      	ldr	r0, [r7, #8]
 80047d8:	f000 f86d 	bl	80048b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e0:	f043 0210 	orr.w	r2, r3, #16
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047e8:	68b8      	ldr	r0, [r7, #8]
 80047ea:	f7ff ff79 	bl	80046e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ee:	bf00      	nop
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	603b      	str	r3, [r7, #0]
 8004802:	4613      	mov	r3, r2
 8004804:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004806:	e02c      	b.n	8004862 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480e:	d028      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d007      	beq.n	8004826 <UART_WaitOnFlagUntilTimeout+0x30>
 8004816:	f7fd f967 	bl	8001ae8 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	429a      	cmp	r2, r3
 8004824:	d21d      	bcs.n	8004862 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004834:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0201 	bic.w	r2, r2, #1
 8004844:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e00f      	b.n	8004882 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4013      	ands	r3, r2
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	429a      	cmp	r2, r3
 8004870:	bf0c      	ite	eq
 8004872:	2301      	moveq	r3, #1
 8004874:	2300      	movne	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	429a      	cmp	r2, r3
 800487e:	d0c3      	beq.n	8004808 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80048a0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048cc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695a      	ldr	r2, [r3, #20]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0201 	bic.w	r2, r2, #1
 80048dc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f8:	b085      	sub	sp, #20
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004936:	f023 030c 	bic.w	r3, r3, #12
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	68f9      	ldr	r1, [r7, #12]
 8004940:	430b      	orrs	r3, r1
 8004942:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699a      	ldr	r2, [r3, #24]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004962:	f040 818b 	bne.w	8004c7c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4ac1      	ldr	r2, [pc, #772]	; (8004c70 <UART_SetConfig+0x37c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d005      	beq.n	800497c <UART_SetConfig+0x88>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4abf      	ldr	r2, [pc, #764]	; (8004c74 <UART_SetConfig+0x380>)
 8004976:	4293      	cmp	r3, r2
 8004978:	f040 80bd 	bne.w	8004af6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800497c:	f7fe fe80 	bl	8003680 <HAL_RCC_GetPCLK2Freq>
 8004980:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	461d      	mov	r5, r3
 8004986:	f04f 0600 	mov.w	r6, #0
 800498a:	46a8      	mov	r8, r5
 800498c:	46b1      	mov	r9, r6
 800498e:	eb18 0308 	adds.w	r3, r8, r8
 8004992:	eb49 0409 	adc.w	r4, r9, r9
 8004996:	4698      	mov	r8, r3
 8004998:	46a1      	mov	r9, r4
 800499a:	eb18 0805 	adds.w	r8, r8, r5
 800499e:	eb49 0906 	adc.w	r9, r9, r6
 80049a2:	f04f 0100 	mov.w	r1, #0
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80049ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80049b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80049b6:	4688      	mov	r8, r1
 80049b8:	4691      	mov	r9, r2
 80049ba:	eb18 0005 	adds.w	r0, r8, r5
 80049be:	eb49 0106 	adc.w	r1, r9, r6
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	461d      	mov	r5, r3
 80049c8:	f04f 0600 	mov.w	r6, #0
 80049cc:	196b      	adds	r3, r5, r5
 80049ce:	eb46 0406 	adc.w	r4, r6, r6
 80049d2:	461a      	mov	r2, r3
 80049d4:	4623      	mov	r3, r4
 80049d6:	f7fb fc15 	bl	8000204 <__aeabi_uldivmod>
 80049da:	4603      	mov	r3, r0
 80049dc:	460c      	mov	r4, r1
 80049de:	461a      	mov	r2, r3
 80049e0:	4ba5      	ldr	r3, [pc, #660]	; (8004c78 <UART_SetConfig+0x384>)
 80049e2:	fba3 2302 	umull	r2, r3, r3, r2
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	461d      	mov	r5, r3
 80049f0:	f04f 0600 	mov.w	r6, #0
 80049f4:	46a9      	mov	r9, r5
 80049f6:	46b2      	mov	sl, r6
 80049f8:	eb19 0309 	adds.w	r3, r9, r9
 80049fc:	eb4a 040a 	adc.w	r4, sl, sl
 8004a00:	4699      	mov	r9, r3
 8004a02:	46a2      	mov	sl, r4
 8004a04:	eb19 0905 	adds.w	r9, r9, r5
 8004a08:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a0c:	f04f 0100 	mov.w	r1, #0
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a20:	4689      	mov	r9, r1
 8004a22:	4692      	mov	sl, r2
 8004a24:	eb19 0005 	adds.w	r0, r9, r5
 8004a28:	eb4a 0106 	adc.w	r1, sl, r6
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	461d      	mov	r5, r3
 8004a32:	f04f 0600 	mov.w	r6, #0
 8004a36:	196b      	adds	r3, r5, r5
 8004a38:	eb46 0406 	adc.w	r4, r6, r6
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4623      	mov	r3, r4
 8004a40:	f7fb fbe0 	bl	8000204 <__aeabi_uldivmod>
 8004a44:	4603      	mov	r3, r0
 8004a46:	460c      	mov	r4, r1
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4b8b      	ldr	r3, [pc, #556]	; (8004c78 <UART_SetConfig+0x384>)
 8004a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	2164      	movs	r1, #100	; 0x64
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	3332      	adds	r3, #50	; 0x32
 8004a5e:	4a86      	ldr	r2, [pc, #536]	; (8004c78 <UART_SetConfig+0x384>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a6c:	4498      	add	r8, r3
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	461d      	mov	r5, r3
 8004a72:	f04f 0600 	mov.w	r6, #0
 8004a76:	46a9      	mov	r9, r5
 8004a78:	46b2      	mov	sl, r6
 8004a7a:	eb19 0309 	adds.w	r3, r9, r9
 8004a7e:	eb4a 040a 	adc.w	r4, sl, sl
 8004a82:	4699      	mov	r9, r3
 8004a84:	46a2      	mov	sl, r4
 8004a86:	eb19 0905 	adds.w	r9, r9, r5
 8004a8a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004aa2:	4689      	mov	r9, r1
 8004aa4:	4692      	mov	sl, r2
 8004aa6:	eb19 0005 	adds.w	r0, r9, r5
 8004aaa:	eb4a 0106 	adc.w	r1, sl, r6
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	461d      	mov	r5, r3
 8004ab4:	f04f 0600 	mov.w	r6, #0
 8004ab8:	196b      	adds	r3, r5, r5
 8004aba:	eb46 0406 	adc.w	r4, r6, r6
 8004abe:	461a      	mov	r2, r3
 8004ac0:	4623      	mov	r3, r4
 8004ac2:	f7fb fb9f 	bl	8000204 <__aeabi_uldivmod>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	460c      	mov	r4, r1
 8004aca:	461a      	mov	r2, r3
 8004acc:	4b6a      	ldr	r3, [pc, #424]	; (8004c78 <UART_SetConfig+0x384>)
 8004ace:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad2:	095b      	lsrs	r3, r3, #5
 8004ad4:	2164      	movs	r1, #100	; 0x64
 8004ad6:	fb01 f303 	mul.w	r3, r1, r3
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	3332      	adds	r3, #50	; 0x32
 8004ae0:	4a65      	ldr	r2, [pc, #404]	; (8004c78 <UART_SetConfig+0x384>)
 8004ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	f003 0207 	and.w	r2, r3, #7
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4442      	add	r2, r8
 8004af2:	609a      	str	r2, [r3, #8]
 8004af4:	e26f      	b.n	8004fd6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004af6:	f7fe fdaf 	bl	8003658 <HAL_RCC_GetPCLK1Freq>
 8004afa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	461d      	mov	r5, r3
 8004b00:	f04f 0600 	mov.w	r6, #0
 8004b04:	46a8      	mov	r8, r5
 8004b06:	46b1      	mov	r9, r6
 8004b08:	eb18 0308 	adds.w	r3, r8, r8
 8004b0c:	eb49 0409 	adc.w	r4, r9, r9
 8004b10:	4698      	mov	r8, r3
 8004b12:	46a1      	mov	r9, r4
 8004b14:	eb18 0805 	adds.w	r8, r8, r5
 8004b18:	eb49 0906 	adc.w	r9, r9, r6
 8004b1c:	f04f 0100 	mov.w	r1, #0
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b28:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b2c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b30:	4688      	mov	r8, r1
 8004b32:	4691      	mov	r9, r2
 8004b34:	eb18 0005 	adds.w	r0, r8, r5
 8004b38:	eb49 0106 	adc.w	r1, r9, r6
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	461d      	mov	r5, r3
 8004b42:	f04f 0600 	mov.w	r6, #0
 8004b46:	196b      	adds	r3, r5, r5
 8004b48:	eb46 0406 	adc.w	r4, r6, r6
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4623      	mov	r3, r4
 8004b50:	f7fb fb58 	bl	8000204 <__aeabi_uldivmod>
 8004b54:	4603      	mov	r3, r0
 8004b56:	460c      	mov	r4, r1
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4b47      	ldr	r3, [pc, #284]	; (8004c78 <UART_SetConfig+0x384>)
 8004b5c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	461d      	mov	r5, r3
 8004b6a:	f04f 0600 	mov.w	r6, #0
 8004b6e:	46a9      	mov	r9, r5
 8004b70:	46b2      	mov	sl, r6
 8004b72:	eb19 0309 	adds.w	r3, r9, r9
 8004b76:	eb4a 040a 	adc.w	r4, sl, sl
 8004b7a:	4699      	mov	r9, r3
 8004b7c:	46a2      	mov	sl, r4
 8004b7e:	eb19 0905 	adds.w	r9, r9, r5
 8004b82:	eb4a 0a06 	adc.w	sl, sl, r6
 8004b86:	f04f 0100 	mov.w	r1, #0
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b9a:	4689      	mov	r9, r1
 8004b9c:	4692      	mov	sl, r2
 8004b9e:	eb19 0005 	adds.w	r0, r9, r5
 8004ba2:	eb4a 0106 	adc.w	r1, sl, r6
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	461d      	mov	r5, r3
 8004bac:	f04f 0600 	mov.w	r6, #0
 8004bb0:	196b      	adds	r3, r5, r5
 8004bb2:	eb46 0406 	adc.w	r4, r6, r6
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	4623      	mov	r3, r4
 8004bba:	f7fb fb23 	bl	8000204 <__aeabi_uldivmod>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	4b2c      	ldr	r3, [pc, #176]	; (8004c78 <UART_SetConfig+0x384>)
 8004bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	2164      	movs	r1, #100	; 0x64
 8004bce:	fb01 f303 	mul.w	r3, r1, r3
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	3332      	adds	r3, #50	; 0x32
 8004bd8:	4a27      	ldr	r2, [pc, #156]	; (8004c78 <UART_SetConfig+0x384>)
 8004bda:	fba2 2303 	umull	r2, r3, r2, r3
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004be6:	4498      	add	r8, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	461d      	mov	r5, r3
 8004bec:	f04f 0600 	mov.w	r6, #0
 8004bf0:	46a9      	mov	r9, r5
 8004bf2:	46b2      	mov	sl, r6
 8004bf4:	eb19 0309 	adds.w	r3, r9, r9
 8004bf8:	eb4a 040a 	adc.w	r4, sl, sl
 8004bfc:	4699      	mov	r9, r3
 8004bfe:	46a2      	mov	sl, r4
 8004c00:	eb19 0905 	adds.w	r9, r9, r5
 8004c04:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c08:	f04f 0100 	mov.w	r1, #0
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c1c:	4689      	mov	r9, r1
 8004c1e:	4692      	mov	sl, r2
 8004c20:	eb19 0005 	adds.w	r0, r9, r5
 8004c24:	eb4a 0106 	adc.w	r1, sl, r6
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	461d      	mov	r5, r3
 8004c2e:	f04f 0600 	mov.w	r6, #0
 8004c32:	196b      	adds	r3, r5, r5
 8004c34:	eb46 0406 	adc.w	r4, r6, r6
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4623      	mov	r3, r4
 8004c3c:	f7fb fae2 	bl	8000204 <__aeabi_uldivmod>
 8004c40:	4603      	mov	r3, r0
 8004c42:	460c      	mov	r4, r1
 8004c44:	461a      	mov	r2, r3
 8004c46:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <UART_SetConfig+0x384>)
 8004c48:	fba3 1302 	umull	r1, r3, r3, r2
 8004c4c:	095b      	lsrs	r3, r3, #5
 8004c4e:	2164      	movs	r1, #100	; 0x64
 8004c50:	fb01 f303 	mul.w	r3, r1, r3
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	3332      	adds	r3, #50	; 0x32
 8004c5a:	4a07      	ldr	r2, [pc, #28]	; (8004c78 <UART_SetConfig+0x384>)
 8004c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c60:	095b      	lsrs	r3, r3, #5
 8004c62:	f003 0207 	and.w	r2, r3, #7
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4442      	add	r2, r8
 8004c6c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004c6e:	e1b2      	b.n	8004fd6 <UART_SetConfig+0x6e2>
 8004c70:	40011000 	.word	0x40011000
 8004c74:	40011400 	.word	0x40011400
 8004c78:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4ad7      	ldr	r2, [pc, #860]	; (8004fe0 <UART_SetConfig+0x6ec>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d005      	beq.n	8004c92 <UART_SetConfig+0x39e>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4ad6      	ldr	r2, [pc, #856]	; (8004fe4 <UART_SetConfig+0x6f0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	f040 80d1 	bne.w	8004e34 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c92:	f7fe fcf5 	bl	8003680 <HAL_RCC_GetPCLK2Freq>
 8004c96:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	469a      	mov	sl, r3
 8004c9c:	f04f 0b00 	mov.w	fp, #0
 8004ca0:	46d0      	mov	r8, sl
 8004ca2:	46d9      	mov	r9, fp
 8004ca4:	eb18 0308 	adds.w	r3, r8, r8
 8004ca8:	eb49 0409 	adc.w	r4, r9, r9
 8004cac:	4698      	mov	r8, r3
 8004cae:	46a1      	mov	r9, r4
 8004cb0:	eb18 080a 	adds.w	r8, r8, sl
 8004cb4:	eb49 090b 	adc.w	r9, r9, fp
 8004cb8:	f04f 0100 	mov.w	r1, #0
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004cc4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004cc8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ccc:	4688      	mov	r8, r1
 8004cce:	4691      	mov	r9, r2
 8004cd0:	eb1a 0508 	adds.w	r5, sl, r8
 8004cd4:	eb4b 0609 	adc.w	r6, fp, r9
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	4619      	mov	r1, r3
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	f04f 0400 	mov.w	r4, #0
 8004cea:	0094      	lsls	r4, r2, #2
 8004cec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cf0:	008b      	lsls	r3, r1, #2
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	4623      	mov	r3, r4
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	4631      	mov	r1, r6
 8004cfa:	f7fb fa83 	bl	8000204 <__aeabi_uldivmod>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	460c      	mov	r4, r1
 8004d02:	461a      	mov	r2, r3
 8004d04:	4bb8      	ldr	r3, [pc, #736]	; (8004fe8 <UART_SetConfig+0x6f4>)
 8004d06:	fba3 2302 	umull	r2, r3, r3, r2
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	469b      	mov	fp, r3
 8004d14:	f04f 0c00 	mov.w	ip, #0
 8004d18:	46d9      	mov	r9, fp
 8004d1a:	46e2      	mov	sl, ip
 8004d1c:	eb19 0309 	adds.w	r3, r9, r9
 8004d20:	eb4a 040a 	adc.w	r4, sl, sl
 8004d24:	4699      	mov	r9, r3
 8004d26:	46a2      	mov	sl, r4
 8004d28:	eb19 090b 	adds.w	r9, r9, fp
 8004d2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d30:	f04f 0100 	mov.w	r1, #0
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d44:	4689      	mov	r9, r1
 8004d46:	4692      	mov	sl, r2
 8004d48:	eb1b 0509 	adds.w	r5, fp, r9
 8004d4c:	eb4c 060a 	adc.w	r6, ip, sl
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	4619      	mov	r1, r3
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	f04f 0400 	mov.w	r4, #0
 8004d62:	0094      	lsls	r4, r2, #2
 8004d64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d68:	008b      	lsls	r3, r1, #2
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	4623      	mov	r3, r4
 8004d6e:	4628      	mov	r0, r5
 8004d70:	4631      	mov	r1, r6
 8004d72:	f7fb fa47 	bl	8000204 <__aeabi_uldivmod>
 8004d76:	4603      	mov	r3, r0
 8004d78:	460c      	mov	r4, r1
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	4b9a      	ldr	r3, [pc, #616]	; (8004fe8 <UART_SetConfig+0x6f4>)
 8004d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	2164      	movs	r1, #100	; 0x64
 8004d86:	fb01 f303 	mul.w	r3, r1, r3
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	3332      	adds	r3, #50	; 0x32
 8004d90:	4a95      	ldr	r2, [pc, #596]	; (8004fe8 <UART_SetConfig+0x6f4>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d9c:	4498      	add	r8, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	469b      	mov	fp, r3
 8004da2:	f04f 0c00 	mov.w	ip, #0
 8004da6:	46d9      	mov	r9, fp
 8004da8:	46e2      	mov	sl, ip
 8004daa:	eb19 0309 	adds.w	r3, r9, r9
 8004dae:	eb4a 040a 	adc.w	r4, sl, sl
 8004db2:	4699      	mov	r9, r3
 8004db4:	46a2      	mov	sl, r4
 8004db6:	eb19 090b 	adds.w	r9, r9, fp
 8004dba:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004dbe:	f04f 0100 	mov.w	r1, #0
 8004dc2:	f04f 0200 	mov.w	r2, #0
 8004dc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004dce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dd2:	4689      	mov	r9, r1
 8004dd4:	4692      	mov	sl, r2
 8004dd6:	eb1b 0509 	adds.w	r5, fp, r9
 8004dda:	eb4c 060a 	adc.w	r6, ip, sl
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	4619      	mov	r1, r3
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	f04f 0400 	mov.w	r4, #0
 8004df0:	0094      	lsls	r4, r2, #2
 8004df2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004df6:	008b      	lsls	r3, r1, #2
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4623      	mov	r3, r4
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	4631      	mov	r1, r6
 8004e00:	f7fb fa00 	bl	8000204 <__aeabi_uldivmod>
 8004e04:	4603      	mov	r3, r0
 8004e06:	460c      	mov	r4, r1
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4b77      	ldr	r3, [pc, #476]	; (8004fe8 <UART_SetConfig+0x6f4>)
 8004e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	2164      	movs	r1, #100	; 0x64
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	3332      	adds	r3, #50	; 0x32
 8004e1e:	4a72      	ldr	r2, [pc, #456]	; (8004fe8 <UART_SetConfig+0x6f4>)
 8004e20:	fba2 2303 	umull	r2, r3, r2, r3
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	f003 020f 	and.w	r2, r3, #15
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4442      	add	r2, r8
 8004e30:	609a      	str	r2, [r3, #8]
 8004e32:	e0d0      	b.n	8004fd6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e34:	f7fe fc10 	bl	8003658 <HAL_RCC_GetPCLK1Freq>
 8004e38:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	469a      	mov	sl, r3
 8004e3e:	f04f 0b00 	mov.w	fp, #0
 8004e42:	46d0      	mov	r8, sl
 8004e44:	46d9      	mov	r9, fp
 8004e46:	eb18 0308 	adds.w	r3, r8, r8
 8004e4a:	eb49 0409 	adc.w	r4, r9, r9
 8004e4e:	4698      	mov	r8, r3
 8004e50:	46a1      	mov	r9, r4
 8004e52:	eb18 080a 	adds.w	r8, r8, sl
 8004e56:	eb49 090b 	adc.w	r9, r9, fp
 8004e5a:	f04f 0100 	mov.w	r1, #0
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e66:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e6a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e6e:	4688      	mov	r8, r1
 8004e70:	4691      	mov	r9, r2
 8004e72:	eb1a 0508 	adds.w	r5, sl, r8
 8004e76:	eb4b 0609 	adc.w	r6, fp, r9
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	f04f 0400 	mov.w	r4, #0
 8004e8c:	0094      	lsls	r4, r2, #2
 8004e8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e92:	008b      	lsls	r3, r1, #2
 8004e94:	461a      	mov	r2, r3
 8004e96:	4623      	mov	r3, r4
 8004e98:	4628      	mov	r0, r5
 8004e9a:	4631      	mov	r1, r6
 8004e9c:	f7fb f9b2 	bl	8000204 <__aeabi_uldivmod>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4b50      	ldr	r3, [pc, #320]	; (8004fe8 <UART_SetConfig+0x6f4>)
 8004ea8:	fba3 2302 	umull	r2, r3, r3, r2
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	469b      	mov	fp, r3
 8004eb6:	f04f 0c00 	mov.w	ip, #0
 8004eba:	46d9      	mov	r9, fp
 8004ebc:	46e2      	mov	sl, ip
 8004ebe:	eb19 0309 	adds.w	r3, r9, r9
 8004ec2:	eb4a 040a 	adc.w	r4, sl, sl
 8004ec6:	4699      	mov	r9, r3
 8004ec8:	46a2      	mov	sl, r4
 8004eca:	eb19 090b 	adds.w	r9, r9, fp
 8004ece:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ed2:	f04f 0100 	mov.w	r1, #0
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ede:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ee2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ee6:	4689      	mov	r9, r1
 8004ee8:	4692      	mov	sl, r2
 8004eea:	eb1b 0509 	adds.w	r5, fp, r9
 8004eee:	eb4c 060a 	adc.w	r6, ip, sl
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	f04f 0400 	mov.w	r4, #0
 8004f04:	0094      	lsls	r4, r2, #2
 8004f06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f0a:	008b      	lsls	r3, r1, #2
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	4623      	mov	r3, r4
 8004f10:	4628      	mov	r0, r5
 8004f12:	4631      	mov	r1, r6
 8004f14:	f7fb f976 	bl	8000204 <__aeabi_uldivmod>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4b32      	ldr	r3, [pc, #200]	; (8004fe8 <UART_SetConfig+0x6f4>)
 8004f20:	fba3 1302 	umull	r1, r3, r3, r2
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	2164      	movs	r1, #100	; 0x64
 8004f28:	fb01 f303 	mul.w	r3, r1, r3
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	3332      	adds	r3, #50	; 0x32
 8004f32:	4a2d      	ldr	r2, [pc, #180]	; (8004fe8 <UART_SetConfig+0x6f4>)
 8004f34:	fba2 2303 	umull	r2, r3, r2, r3
 8004f38:	095b      	lsrs	r3, r3, #5
 8004f3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f3e:	4498      	add	r8, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	469b      	mov	fp, r3
 8004f44:	f04f 0c00 	mov.w	ip, #0
 8004f48:	46d9      	mov	r9, fp
 8004f4a:	46e2      	mov	sl, ip
 8004f4c:	eb19 0309 	adds.w	r3, r9, r9
 8004f50:	eb4a 040a 	adc.w	r4, sl, sl
 8004f54:	4699      	mov	r9, r3
 8004f56:	46a2      	mov	sl, r4
 8004f58:	eb19 090b 	adds.w	r9, r9, fp
 8004f5c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f60:	f04f 0100 	mov.w	r1, #0
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f74:	4689      	mov	r9, r1
 8004f76:	4692      	mov	sl, r2
 8004f78:	eb1b 0509 	adds.w	r5, fp, r9
 8004f7c:	eb4c 060a 	adc.w	r6, ip, sl
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	4619      	mov	r1, r3
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	f04f 0400 	mov.w	r4, #0
 8004f92:	0094      	lsls	r4, r2, #2
 8004f94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f98:	008b      	lsls	r3, r1, #2
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	4623      	mov	r3, r4
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	4631      	mov	r1, r6
 8004fa2:	f7fb f92f 	bl	8000204 <__aeabi_uldivmod>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	460c      	mov	r4, r1
 8004faa:	461a      	mov	r2, r3
 8004fac:	4b0e      	ldr	r3, [pc, #56]	; (8004fe8 <UART_SetConfig+0x6f4>)
 8004fae:	fba3 1302 	umull	r1, r3, r3, r2
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2164      	movs	r1, #100	; 0x64
 8004fb6:	fb01 f303 	mul.w	r3, r1, r3
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	3332      	adds	r3, #50	; 0x32
 8004fc0:	4a09      	ldr	r2, [pc, #36]	; (8004fe8 <UART_SetConfig+0x6f4>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	f003 020f 	and.w	r2, r3, #15
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4442      	add	r2, r8
 8004fd2:	609a      	str	r2, [r3, #8]
}
 8004fd4:	e7ff      	b.n	8004fd6 <UART_SetConfig+0x6e2>
 8004fd6:	bf00      	nop
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe0:	40011000 	.word	0x40011000
 8004fe4:	40011400 	.word	0x40011400
 8004fe8:	51eb851f 	.word	0x51eb851f

08004fec <__libc_init_array>:
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	4e0d      	ldr	r6, [pc, #52]	; (8005024 <__libc_init_array+0x38>)
 8004ff0:	4c0d      	ldr	r4, [pc, #52]	; (8005028 <__libc_init_array+0x3c>)
 8004ff2:	1ba4      	subs	r4, r4, r6
 8004ff4:	10a4      	asrs	r4, r4, #2
 8004ff6:	2500      	movs	r5, #0
 8004ff8:	42a5      	cmp	r5, r4
 8004ffa:	d109      	bne.n	8005010 <__libc_init_array+0x24>
 8004ffc:	4e0b      	ldr	r6, [pc, #44]	; (800502c <__libc_init_array+0x40>)
 8004ffe:	4c0c      	ldr	r4, [pc, #48]	; (8005030 <__libc_init_array+0x44>)
 8005000:	f000 fd6c 	bl	8005adc <_init>
 8005004:	1ba4      	subs	r4, r4, r6
 8005006:	10a4      	asrs	r4, r4, #2
 8005008:	2500      	movs	r5, #0
 800500a:	42a5      	cmp	r5, r4
 800500c:	d105      	bne.n	800501a <__libc_init_array+0x2e>
 800500e:	bd70      	pop	{r4, r5, r6, pc}
 8005010:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005014:	4798      	blx	r3
 8005016:	3501      	adds	r5, #1
 8005018:	e7ee      	b.n	8004ff8 <__libc_init_array+0xc>
 800501a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800501e:	4798      	blx	r3
 8005020:	3501      	adds	r5, #1
 8005022:	e7f2      	b.n	800500a <__libc_init_array+0x1e>
 8005024:	08005f4c 	.word	0x08005f4c
 8005028:	08005f4c 	.word	0x08005f4c
 800502c:	08005f4c 	.word	0x08005f4c
 8005030:	08005f50 	.word	0x08005f50

08005034 <memset>:
 8005034:	4402      	add	r2, r0
 8005036:	4603      	mov	r3, r0
 8005038:	4293      	cmp	r3, r2
 800503a:	d100      	bne.n	800503e <memset+0xa>
 800503c:	4770      	bx	lr
 800503e:	f803 1b01 	strb.w	r1, [r3], #1
 8005042:	e7f9      	b.n	8005038 <memset+0x4>

08005044 <sinf>:
 8005044:	ee10 3a10 	vmov	r3, s0
 8005048:	b507      	push	{r0, r1, r2, lr}
 800504a:	4a1d      	ldr	r2, [pc, #116]	; (80050c0 <sinf+0x7c>)
 800504c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005050:	4293      	cmp	r3, r2
 8005052:	dc05      	bgt.n	8005060 <sinf+0x1c>
 8005054:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80050c4 <sinf+0x80>
 8005058:	2000      	movs	r0, #0
 800505a:	f000 fc41 	bl	80058e0 <__kernel_sinf>
 800505e:	e004      	b.n	800506a <sinf+0x26>
 8005060:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005064:	db04      	blt.n	8005070 <sinf+0x2c>
 8005066:	ee30 0a40 	vsub.f32	s0, s0, s0
 800506a:	b003      	add	sp, #12
 800506c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005070:	4668      	mov	r0, sp
 8005072:	f000 f829 	bl	80050c8 <__ieee754_rem_pio2f>
 8005076:	f000 0003 	and.w	r0, r0, #3
 800507a:	2801      	cmp	r0, #1
 800507c:	d008      	beq.n	8005090 <sinf+0x4c>
 800507e:	2802      	cmp	r0, #2
 8005080:	d00d      	beq.n	800509e <sinf+0x5a>
 8005082:	b9b0      	cbnz	r0, 80050b2 <sinf+0x6e>
 8005084:	2001      	movs	r0, #1
 8005086:	eddd 0a01 	vldr	s1, [sp, #4]
 800508a:	ed9d 0a00 	vldr	s0, [sp]
 800508e:	e7e4      	b.n	800505a <sinf+0x16>
 8005090:	eddd 0a01 	vldr	s1, [sp, #4]
 8005094:	ed9d 0a00 	vldr	s0, [sp]
 8005098:	f000 f942 	bl	8005320 <__kernel_cosf>
 800509c:	e7e5      	b.n	800506a <sinf+0x26>
 800509e:	2001      	movs	r0, #1
 80050a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80050a4:	ed9d 0a00 	vldr	s0, [sp]
 80050a8:	f000 fc1a 	bl	80058e0 <__kernel_sinf>
 80050ac:	eeb1 0a40 	vneg.f32	s0, s0
 80050b0:	e7db      	b.n	800506a <sinf+0x26>
 80050b2:	eddd 0a01 	vldr	s1, [sp, #4]
 80050b6:	ed9d 0a00 	vldr	s0, [sp]
 80050ba:	f000 f931 	bl	8005320 <__kernel_cosf>
 80050be:	e7f5      	b.n	80050ac <sinf+0x68>
 80050c0:	3f490fd8 	.word	0x3f490fd8
 80050c4:	00000000 	.word	0x00000000

080050c8 <__ieee754_rem_pio2f>:
 80050c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ca:	ee10 6a10 	vmov	r6, s0
 80050ce:	4b86      	ldr	r3, [pc, #536]	; (80052e8 <__ieee754_rem_pio2f+0x220>)
 80050d0:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80050d4:	429c      	cmp	r4, r3
 80050d6:	b087      	sub	sp, #28
 80050d8:	4605      	mov	r5, r0
 80050da:	dc05      	bgt.n	80050e8 <__ieee754_rem_pio2f+0x20>
 80050dc:	2300      	movs	r3, #0
 80050de:	ed85 0a00 	vstr	s0, [r5]
 80050e2:	6043      	str	r3, [r0, #4]
 80050e4:	2000      	movs	r0, #0
 80050e6:	e020      	b.n	800512a <__ieee754_rem_pio2f+0x62>
 80050e8:	4b80      	ldr	r3, [pc, #512]	; (80052ec <__ieee754_rem_pio2f+0x224>)
 80050ea:	429c      	cmp	r4, r3
 80050ec:	dc38      	bgt.n	8005160 <__ieee754_rem_pio2f+0x98>
 80050ee:	2e00      	cmp	r6, #0
 80050f0:	f024 040f 	bic.w	r4, r4, #15
 80050f4:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80052f0 <__ieee754_rem_pio2f+0x228>
 80050f8:	4b7e      	ldr	r3, [pc, #504]	; (80052f4 <__ieee754_rem_pio2f+0x22c>)
 80050fa:	dd18      	ble.n	800512e <__ieee754_rem_pio2f+0x66>
 80050fc:	429c      	cmp	r4, r3
 80050fe:	ee70 7a47 	vsub.f32	s15, s0, s14
 8005102:	bf09      	itett	eq
 8005104:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80052f8 <__ieee754_rem_pio2f+0x230>
 8005108:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80052fc <__ieee754_rem_pio2f+0x234>
 800510c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8005110:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8005300 <__ieee754_rem_pio2f+0x238>
 8005114:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005118:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800511c:	edc0 6a00 	vstr	s13, [r0]
 8005120:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005124:	edc0 7a01 	vstr	s15, [r0, #4]
 8005128:	2001      	movs	r0, #1
 800512a:	b007      	add	sp, #28
 800512c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800512e:	429c      	cmp	r4, r3
 8005130:	ee70 7a07 	vadd.f32	s15, s0, s14
 8005134:	bf09      	itett	eq
 8005136:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80052f8 <__ieee754_rem_pio2f+0x230>
 800513a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80052fc <__ieee754_rem_pio2f+0x234>
 800513e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8005142:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8005300 <__ieee754_rem_pio2f+0x238>
 8005146:	ee77 6a87 	vadd.f32	s13, s15, s14
 800514a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800514e:	edc0 6a00 	vstr	s13, [r0]
 8005152:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005156:	edc0 7a01 	vstr	s15, [r0, #4]
 800515a:	f04f 30ff 	mov.w	r0, #4294967295
 800515e:	e7e4      	b.n	800512a <__ieee754_rem_pio2f+0x62>
 8005160:	4b68      	ldr	r3, [pc, #416]	; (8005304 <__ieee754_rem_pio2f+0x23c>)
 8005162:	429c      	cmp	r4, r3
 8005164:	dc71      	bgt.n	800524a <__ieee754_rem_pio2f+0x182>
 8005166:	f000 fc03 	bl	8005970 <fabsf>
 800516a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8005308 <__ieee754_rem_pio2f+0x240>
 800516e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005172:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800517a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800517e:	ee17 0a90 	vmov	r0, s15
 8005182:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80052f0 <__ieee754_rem_pio2f+0x228>
 8005186:	eeb1 7a46 	vneg.f32	s14, s12
 800518a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800518e:	281f      	cmp	r0, #31
 8005190:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80052fc <__ieee754_rem_pio2f+0x234>
 8005194:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005198:	ee70 6a67 	vsub.f32	s13, s0, s15
 800519c:	ee16 3a90 	vmov	r3, s13
 80051a0:	dc1c      	bgt.n	80051dc <__ieee754_rem_pio2f+0x114>
 80051a2:	1e47      	subs	r7, r0, #1
 80051a4:	4959      	ldr	r1, [pc, #356]	; (800530c <__ieee754_rem_pio2f+0x244>)
 80051a6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80051aa:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80051ae:	428a      	cmp	r2, r1
 80051b0:	d014      	beq.n	80051dc <__ieee754_rem_pio2f+0x114>
 80051b2:	602b      	str	r3, [r5, #0]
 80051b4:	ed95 7a00 	vldr	s14, [r5]
 80051b8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80051bc:	2e00      	cmp	r6, #0
 80051be:	ee30 0a67 	vsub.f32	s0, s0, s15
 80051c2:	ed85 0a01 	vstr	s0, [r5, #4]
 80051c6:	dab0      	bge.n	800512a <__ieee754_rem_pio2f+0x62>
 80051c8:	eeb1 7a47 	vneg.f32	s14, s14
 80051cc:	eeb1 0a40 	vneg.f32	s0, s0
 80051d0:	ed85 7a00 	vstr	s14, [r5]
 80051d4:	ed85 0a01 	vstr	s0, [r5, #4]
 80051d8:	4240      	negs	r0, r0
 80051da:	e7a6      	b.n	800512a <__ieee754_rem_pio2f+0x62>
 80051dc:	15e4      	asrs	r4, r4, #23
 80051de:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80051e2:	1aa2      	subs	r2, r4, r2
 80051e4:	2a08      	cmp	r2, #8
 80051e6:	dde4      	ble.n	80051b2 <__ieee754_rem_pio2f+0xea>
 80051e8:	eddf 7a43 	vldr	s15, [pc, #268]	; 80052f8 <__ieee754_rem_pio2f+0x230>
 80051ec:	eef0 6a40 	vmov.f32	s13, s0
 80051f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80051f4:	ee30 0a66 	vsub.f32	s0, s0, s13
 80051f8:	eea7 0a27 	vfma.f32	s0, s14, s15
 80051fc:	eddf 7a40 	vldr	s15, [pc, #256]	; 8005300 <__ieee754_rem_pio2f+0x238>
 8005200:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8005204:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8005208:	eef0 7a40 	vmov.f32	s15, s0
 800520c:	ee15 3a90 	vmov	r3, s11
 8005210:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005214:	1aa4      	subs	r4, r4, r2
 8005216:	2c19      	cmp	r4, #25
 8005218:	dc04      	bgt.n	8005224 <__ieee754_rem_pio2f+0x15c>
 800521a:	edc5 5a00 	vstr	s11, [r5]
 800521e:	eeb0 0a66 	vmov.f32	s0, s13
 8005222:	e7c7      	b.n	80051b4 <__ieee754_rem_pio2f+0xec>
 8005224:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8005310 <__ieee754_rem_pio2f+0x248>
 8005228:	eeb0 0a66 	vmov.f32	s0, s13
 800522c:	eea7 0a25 	vfma.f32	s0, s14, s11
 8005230:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005234:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005238:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005314 <__ieee754_rem_pio2f+0x24c>
 800523c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8005240:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005244:	ed85 7a00 	vstr	s14, [r5]
 8005248:	e7b4      	b.n	80051b4 <__ieee754_rem_pio2f+0xec>
 800524a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800524e:	db06      	blt.n	800525e <__ieee754_rem_pio2f+0x196>
 8005250:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005254:	edc0 7a01 	vstr	s15, [r0, #4]
 8005258:	edc0 7a00 	vstr	s15, [r0]
 800525c:	e742      	b.n	80050e4 <__ieee754_rem_pio2f+0x1c>
 800525e:	15e2      	asrs	r2, r4, #23
 8005260:	3a86      	subs	r2, #134	; 0x86
 8005262:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8005266:	ee07 3a90 	vmov	s15, r3
 800526a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800526e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8005318 <__ieee754_rem_pio2f+0x250>
 8005272:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005276:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800527a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800527e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005282:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005286:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800528a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800528e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005292:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005296:	eef5 7a40 	vcmp.f32	s15, #0.0
 800529a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529e:	edcd 7a05 	vstr	s15, [sp, #20]
 80052a2:	d11e      	bne.n	80052e2 <__ieee754_rem_pio2f+0x21a>
 80052a4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80052a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ac:	bf0c      	ite	eq
 80052ae:	2301      	moveq	r3, #1
 80052b0:	2302      	movne	r3, #2
 80052b2:	491a      	ldr	r1, [pc, #104]	; (800531c <__ieee754_rem_pio2f+0x254>)
 80052b4:	9101      	str	r1, [sp, #4]
 80052b6:	2102      	movs	r1, #2
 80052b8:	9100      	str	r1, [sp, #0]
 80052ba:	a803      	add	r0, sp, #12
 80052bc:	4629      	mov	r1, r5
 80052be:	f000 f88d 	bl	80053dc <__kernel_rem_pio2f>
 80052c2:	2e00      	cmp	r6, #0
 80052c4:	f6bf af31 	bge.w	800512a <__ieee754_rem_pio2f+0x62>
 80052c8:	edd5 7a00 	vldr	s15, [r5]
 80052cc:	eef1 7a67 	vneg.f32	s15, s15
 80052d0:	edc5 7a00 	vstr	s15, [r5]
 80052d4:	edd5 7a01 	vldr	s15, [r5, #4]
 80052d8:	eef1 7a67 	vneg.f32	s15, s15
 80052dc:	edc5 7a01 	vstr	s15, [r5, #4]
 80052e0:	e77a      	b.n	80051d8 <__ieee754_rem_pio2f+0x110>
 80052e2:	2303      	movs	r3, #3
 80052e4:	e7e5      	b.n	80052b2 <__ieee754_rem_pio2f+0x1ea>
 80052e6:	bf00      	nop
 80052e8:	3f490fd8 	.word	0x3f490fd8
 80052ec:	4016cbe3 	.word	0x4016cbe3
 80052f0:	3fc90f80 	.word	0x3fc90f80
 80052f4:	3fc90fd0 	.word	0x3fc90fd0
 80052f8:	37354400 	.word	0x37354400
 80052fc:	37354443 	.word	0x37354443
 8005300:	2e85a308 	.word	0x2e85a308
 8005304:	43490f80 	.word	0x43490f80
 8005308:	3f22f984 	.word	0x3f22f984
 800530c:	08005b74 	.word	0x08005b74
 8005310:	2e85a300 	.word	0x2e85a300
 8005314:	248d3132 	.word	0x248d3132
 8005318:	43800000 	.word	0x43800000
 800531c:	08005bf4 	.word	0x08005bf4

08005320 <__kernel_cosf>:
 8005320:	ee10 3a10 	vmov	r3, s0
 8005324:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005328:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800532c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005330:	da05      	bge.n	800533e <__kernel_cosf+0x1e>
 8005332:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005336:	ee17 2a90 	vmov	r2, s15
 800533a:	2a00      	cmp	r2, #0
 800533c:	d03b      	beq.n	80053b6 <__kernel_cosf+0x96>
 800533e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8005342:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005346:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80053bc <__kernel_cosf+0x9c>
 800534a:	4a1d      	ldr	r2, [pc, #116]	; (80053c0 <__kernel_cosf+0xa0>)
 800534c:	ee66 7a07 	vmul.f32	s15, s12, s14
 8005350:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80053c4 <__kernel_cosf+0xa4>
 8005354:	eea6 7a25 	vfma.f32	s14, s12, s11
 8005358:	4293      	cmp	r3, r2
 800535a:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80053c8 <__kernel_cosf+0xa8>
 800535e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8005362:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80053cc <__kernel_cosf+0xac>
 8005366:	eea5 7a86 	vfma.f32	s14, s11, s12
 800536a:	eddf 5a19 	vldr	s11, [pc, #100]	; 80053d0 <__kernel_cosf+0xb0>
 800536e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8005372:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80053d4 <__kernel_cosf+0xb4>
 8005376:	eea5 7a86 	vfma.f32	s14, s11, s12
 800537a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800537e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8005382:	eee6 0a07 	vfma.f32	s1, s12, s14
 8005386:	dc04      	bgt.n	8005392 <__kernel_cosf+0x72>
 8005388:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800538c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8005390:	4770      	bx	lr
 8005392:	4a11      	ldr	r2, [pc, #68]	; (80053d8 <__kernel_cosf+0xb8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	bfda      	itte	le
 8005398:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800539c:	ee07 3a10 	vmovle	s14, r3
 80053a0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80053a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053a8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80053ac:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80053b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80053b4:	4770      	bx	lr
 80053b6:	eeb0 0a66 	vmov.f32	s0, s13
 80053ba:	4770      	bx	lr
 80053bc:	ad47d74e 	.word	0xad47d74e
 80053c0:	3e999999 	.word	0x3e999999
 80053c4:	310f74f6 	.word	0x310f74f6
 80053c8:	b493f27c 	.word	0xb493f27c
 80053cc:	37d00d01 	.word	0x37d00d01
 80053d0:	bab60b61 	.word	0xbab60b61
 80053d4:	3d2aaaab 	.word	0x3d2aaaab
 80053d8:	3f480000 	.word	0x3f480000

080053dc <__kernel_rem_pio2f>:
 80053dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e0:	ed2d 8b04 	vpush	{d8-d9}
 80053e4:	b0d7      	sub	sp, #348	; 0x15c
 80053e6:	469b      	mov	fp, r3
 80053e8:	460e      	mov	r6, r1
 80053ea:	4bbe      	ldr	r3, [pc, #760]	; (80056e4 <__kernel_rem_pio2f+0x308>)
 80053ec:	9964      	ldr	r1, [sp, #400]	; 0x190
 80053ee:	9002      	str	r0, [sp, #8]
 80053f0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80053f4:	9865      	ldr	r0, [sp, #404]	; 0x194
 80053f6:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80056f4 <__kernel_rem_pio2f+0x318>
 80053fa:	1ed1      	subs	r1, r2, #3
 80053fc:	2308      	movs	r3, #8
 80053fe:	fb91 f1f3 	sdiv	r1, r1, r3
 8005402:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8005406:	f10b 3aff 	add.w	sl, fp, #4294967295
 800540a:	1c4c      	adds	r4, r1, #1
 800540c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8005410:	eba1 050a 	sub.w	r5, r1, sl
 8005414:	aa1a      	add	r2, sp, #104	; 0x68
 8005416:	eb09 070a 	add.w	r7, r9, sl
 800541a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800541e:	4696      	mov	lr, r2
 8005420:	2300      	movs	r3, #0
 8005422:	42bb      	cmp	r3, r7
 8005424:	dd0f      	ble.n	8005446 <__kernel_rem_pio2f+0x6a>
 8005426:	af42      	add	r7, sp, #264	; 0x108
 8005428:	2200      	movs	r2, #0
 800542a:	454a      	cmp	r2, r9
 800542c:	dc27      	bgt.n	800547e <__kernel_rem_pio2f+0xa2>
 800542e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8005432:	eb0b 0302 	add.w	r3, fp, r2
 8005436:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800543a:	9d02      	ldr	r5, [sp, #8]
 800543c:	eddf 7aad 	vldr	s15, [pc, #692]	; 80056f4 <__kernel_rem_pio2f+0x318>
 8005440:	f04f 0c00 	mov.w	ip, #0
 8005444:	e015      	b.n	8005472 <__kernel_rem_pio2f+0x96>
 8005446:	42dd      	cmn	r5, r3
 8005448:	bf5d      	ittte	pl
 800544a:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800544e:	ee07 2a90 	vmovpl	s15, r2
 8005452:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005456:	eef0 7a47 	vmovmi.f32	s15, s14
 800545a:	ecee 7a01 	vstmia	lr!, {s15}
 800545e:	3301      	adds	r3, #1
 8005460:	e7df      	b.n	8005422 <__kernel_rem_pio2f+0x46>
 8005462:	ecf5 6a01 	vldmia	r5!, {s13}
 8005466:	ed33 7a01 	vldmdb	r3!, {s14}
 800546a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800546e:	f10c 0c01 	add.w	ip, ip, #1
 8005472:	45d4      	cmp	ip, sl
 8005474:	ddf5      	ble.n	8005462 <__kernel_rem_pio2f+0x86>
 8005476:	ece7 7a01 	vstmia	r7!, {s15}
 800547a:	3201      	adds	r2, #1
 800547c:	e7d5      	b.n	800542a <__kernel_rem_pio2f+0x4e>
 800547e:	ab06      	add	r3, sp, #24
 8005480:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8005484:	9304      	str	r3, [sp, #16]
 8005486:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80056f0 <__kernel_rem_pio2f+0x314>
 800548a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80056ec <__kernel_rem_pio2f+0x310>
 800548e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8005492:	9303      	str	r3, [sp, #12]
 8005494:	464d      	mov	r5, r9
 8005496:	ab56      	add	r3, sp, #344	; 0x158
 8005498:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800549c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80054a0:	3f01      	subs	r7, #1
 80054a2:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80054a6:	00bf      	lsls	r7, r7, #2
 80054a8:	ab56      	add	r3, sp, #344	; 0x158
 80054aa:	19da      	adds	r2, r3, r7
 80054ac:	3a4c      	subs	r2, #76	; 0x4c
 80054ae:	2300      	movs	r3, #0
 80054b0:	1ae9      	subs	r1, r5, r3
 80054b2:	2900      	cmp	r1, #0
 80054b4:	dc4c      	bgt.n	8005550 <__kernel_rem_pio2f+0x174>
 80054b6:	4620      	mov	r0, r4
 80054b8:	f000 faa4 	bl	8005a04 <scalbnf>
 80054bc:	eeb0 8a40 	vmov.f32	s16, s0
 80054c0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80054c4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80054c8:	f000 fa5a 	bl	8005980 <floorf>
 80054cc:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80054d0:	eea0 8a67 	vfms.f32	s16, s0, s15
 80054d4:	2c00      	cmp	r4, #0
 80054d6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80054da:	edcd 7a01 	vstr	s15, [sp, #4]
 80054de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054e2:	ee38 8a67 	vsub.f32	s16, s16, s15
 80054e6:	dd48      	ble.n	800557a <__kernel_rem_pio2f+0x19e>
 80054e8:	1e69      	subs	r1, r5, #1
 80054ea:	ab06      	add	r3, sp, #24
 80054ec:	f1c4 0008 	rsb	r0, r4, #8
 80054f0:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80054f4:	9a01      	ldr	r2, [sp, #4]
 80054f6:	fa4c f300 	asr.w	r3, ip, r0
 80054fa:	441a      	add	r2, r3
 80054fc:	4083      	lsls	r3, r0
 80054fe:	9201      	str	r2, [sp, #4]
 8005500:	ebac 0203 	sub.w	r2, ip, r3
 8005504:	ab06      	add	r3, sp, #24
 8005506:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800550a:	f1c4 0307 	rsb	r3, r4, #7
 800550e:	fa42 f803 	asr.w	r8, r2, r3
 8005512:	f1b8 0f00 	cmp.w	r8, #0
 8005516:	dd41      	ble.n	800559c <__kernel_rem_pio2f+0x1c0>
 8005518:	9b01      	ldr	r3, [sp, #4]
 800551a:	2000      	movs	r0, #0
 800551c:	3301      	adds	r3, #1
 800551e:	9301      	str	r3, [sp, #4]
 8005520:	4601      	mov	r1, r0
 8005522:	4285      	cmp	r5, r0
 8005524:	dc6d      	bgt.n	8005602 <__kernel_rem_pio2f+0x226>
 8005526:	2c00      	cmp	r4, #0
 8005528:	dd04      	ble.n	8005534 <__kernel_rem_pio2f+0x158>
 800552a:	2c01      	cmp	r4, #1
 800552c:	d07e      	beq.n	800562c <__kernel_rem_pio2f+0x250>
 800552e:	2c02      	cmp	r4, #2
 8005530:	f000 8086 	beq.w	8005640 <__kernel_rem_pio2f+0x264>
 8005534:	f1b8 0f02 	cmp.w	r8, #2
 8005538:	d130      	bne.n	800559c <__kernel_rem_pio2f+0x1c0>
 800553a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800553e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005542:	b359      	cbz	r1, 800559c <__kernel_rem_pio2f+0x1c0>
 8005544:	4620      	mov	r0, r4
 8005546:	f000 fa5d 	bl	8005a04 <scalbnf>
 800554a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800554e:	e025      	b.n	800559c <__kernel_rem_pio2f+0x1c0>
 8005550:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005554:	a806      	add	r0, sp, #24
 8005556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800555a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800555e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005562:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005566:	ee10 1a10 	vmov	r1, s0
 800556a:	ed32 0a01 	vldmdb	r2!, {s0}
 800556e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8005572:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005576:	3301      	adds	r3, #1
 8005578:	e79a      	b.n	80054b0 <__kernel_rem_pio2f+0xd4>
 800557a:	d106      	bne.n	800558a <__kernel_rem_pio2f+0x1ae>
 800557c:	1e6b      	subs	r3, r5, #1
 800557e:	aa06      	add	r2, sp, #24
 8005580:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005584:	ea4f 2822 	mov.w	r8, r2, asr #8
 8005588:	e7c3      	b.n	8005512 <__kernel_rem_pio2f+0x136>
 800558a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800558e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005596:	da31      	bge.n	80055fc <__kernel_rem_pio2f+0x220>
 8005598:	f04f 0800 	mov.w	r8, #0
 800559c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80055a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a4:	f040 80a8 	bne.w	80056f8 <__kernel_rem_pio2f+0x31c>
 80055a8:	1e6b      	subs	r3, r5, #1
 80055aa:	4618      	mov	r0, r3
 80055ac:	2200      	movs	r2, #0
 80055ae:	4548      	cmp	r0, r9
 80055b0:	da4d      	bge.n	800564e <__kernel_rem_pio2f+0x272>
 80055b2:	2a00      	cmp	r2, #0
 80055b4:	f000 8087 	beq.w	80056c6 <__kernel_rem_pio2f+0x2ea>
 80055b8:	aa06      	add	r2, sp, #24
 80055ba:	3c08      	subs	r4, #8
 80055bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80055c0:	2900      	cmp	r1, #0
 80055c2:	f000 808d 	beq.w	80056e0 <__kernel_rem_pio2f+0x304>
 80055c6:	4620      	mov	r0, r4
 80055c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80055cc:	9302      	str	r3, [sp, #8]
 80055ce:	f000 fa19 	bl	8005a04 <scalbnf>
 80055d2:	9b02      	ldr	r3, [sp, #8]
 80055d4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80056f0 <__kernel_rem_pio2f+0x314>
 80055d8:	0099      	lsls	r1, r3, #2
 80055da:	aa42      	add	r2, sp, #264	; 0x108
 80055dc:	1850      	adds	r0, r2, r1
 80055de:	1d05      	adds	r5, r0, #4
 80055e0:	461c      	mov	r4, r3
 80055e2:	2c00      	cmp	r4, #0
 80055e4:	f280 80b8 	bge.w	8005758 <__kernel_rem_pio2f+0x37c>
 80055e8:	2500      	movs	r5, #0
 80055ea:	1b5c      	subs	r4, r3, r5
 80055ec:	2c00      	cmp	r4, #0
 80055ee:	f2c0 80d8 	blt.w	80057a2 <__kernel_rem_pio2f+0x3c6>
 80055f2:	4f3d      	ldr	r7, [pc, #244]	; (80056e8 <__kernel_rem_pio2f+0x30c>)
 80055f4:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80056f4 <__kernel_rem_pio2f+0x318>
 80055f8:	2400      	movs	r4, #0
 80055fa:	e0c6      	b.n	800578a <__kernel_rem_pio2f+0x3ae>
 80055fc:	f04f 0802 	mov.w	r8, #2
 8005600:	e78a      	b.n	8005518 <__kernel_rem_pio2f+0x13c>
 8005602:	ab06      	add	r3, sp, #24
 8005604:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005608:	b949      	cbnz	r1, 800561e <__kernel_rem_pio2f+0x242>
 800560a:	b12b      	cbz	r3, 8005618 <__kernel_rem_pio2f+0x23c>
 800560c:	aa06      	add	r2, sp, #24
 800560e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005612:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8005616:	2301      	movs	r3, #1
 8005618:	3001      	adds	r0, #1
 800561a:	4619      	mov	r1, r3
 800561c:	e781      	b.n	8005522 <__kernel_rem_pio2f+0x146>
 800561e:	aa06      	add	r2, sp, #24
 8005620:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005624:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8005628:	460b      	mov	r3, r1
 800562a:	e7f5      	b.n	8005618 <__kernel_rem_pio2f+0x23c>
 800562c:	1e68      	subs	r0, r5, #1
 800562e:	ab06      	add	r3, sp, #24
 8005630:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005638:	aa06      	add	r2, sp, #24
 800563a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800563e:	e779      	b.n	8005534 <__kernel_rem_pio2f+0x158>
 8005640:	1e68      	subs	r0, r5, #1
 8005642:	ab06      	add	r3, sp, #24
 8005644:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800564c:	e7f4      	b.n	8005638 <__kernel_rem_pio2f+0x25c>
 800564e:	a906      	add	r1, sp, #24
 8005650:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005654:	3801      	subs	r0, #1
 8005656:	430a      	orrs	r2, r1
 8005658:	e7a9      	b.n	80055ae <__kernel_rem_pio2f+0x1d2>
 800565a:	f10c 0c01 	add.w	ip, ip, #1
 800565e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005662:	2a00      	cmp	r2, #0
 8005664:	d0f9      	beq.n	800565a <__kernel_rem_pio2f+0x27e>
 8005666:	eb0b 0305 	add.w	r3, fp, r5
 800566a:	aa1a      	add	r2, sp, #104	; 0x68
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	1898      	adds	r0, r3, r2
 8005670:	3004      	adds	r0, #4
 8005672:	1c69      	adds	r1, r5, #1
 8005674:	3704      	adds	r7, #4
 8005676:	2200      	movs	r2, #0
 8005678:	4465      	add	r5, ip
 800567a:	9005      	str	r0, [sp, #20]
 800567c:	428d      	cmp	r5, r1
 800567e:	f6ff af0a 	blt.w	8005496 <__kernel_rem_pio2f+0xba>
 8005682:	a81a      	add	r0, sp, #104	; 0x68
 8005684:	eb02 0c03 	add.w	ip, r2, r3
 8005688:	4484      	add	ip, r0
 800568a:	9803      	ldr	r0, [sp, #12]
 800568c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005690:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8005694:	9001      	str	r0, [sp, #4]
 8005696:	ee07 0a90 	vmov	s15, r0
 800569a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800569e:	9805      	ldr	r0, [sp, #20]
 80056a0:	edcc 7a00 	vstr	s15, [ip]
 80056a4:	eddf 7a13 	vldr	s15, [pc, #76]	; 80056f4 <__kernel_rem_pio2f+0x318>
 80056a8:	eb00 0802 	add.w	r8, r0, r2
 80056ac:	f04f 0c00 	mov.w	ip, #0
 80056b0:	45d4      	cmp	ip, sl
 80056b2:	dd0c      	ble.n	80056ce <__kernel_rem_pio2f+0x2f2>
 80056b4:	eb02 0c07 	add.w	ip, r2, r7
 80056b8:	a842      	add	r0, sp, #264	; 0x108
 80056ba:	4484      	add	ip, r0
 80056bc:	edcc 7a01 	vstr	s15, [ip, #4]
 80056c0:	3101      	adds	r1, #1
 80056c2:	3204      	adds	r2, #4
 80056c4:	e7da      	b.n	800567c <__kernel_rem_pio2f+0x2a0>
 80056c6:	9b04      	ldr	r3, [sp, #16]
 80056c8:	f04f 0c01 	mov.w	ip, #1
 80056cc:	e7c7      	b.n	800565e <__kernel_rem_pio2f+0x282>
 80056ce:	ecfe 6a01 	vldmia	lr!, {s13}
 80056d2:	ed38 7a01 	vldmdb	r8!, {s14}
 80056d6:	f10c 0c01 	add.w	ip, ip, #1
 80056da:	eee6 7a87 	vfma.f32	s15, s13, s14
 80056de:	e7e7      	b.n	80056b0 <__kernel_rem_pio2f+0x2d4>
 80056e0:	3b01      	subs	r3, #1
 80056e2:	e769      	b.n	80055b8 <__kernel_rem_pio2f+0x1dc>
 80056e4:	08005f38 	.word	0x08005f38
 80056e8:	08005f0c 	.word	0x08005f0c
 80056ec:	43800000 	.word	0x43800000
 80056f0:	3b800000 	.word	0x3b800000
 80056f4:	00000000 	.word	0x00000000
 80056f8:	4260      	negs	r0, r4
 80056fa:	eeb0 0a48 	vmov.f32	s0, s16
 80056fe:	f000 f981 	bl	8005a04 <scalbnf>
 8005702:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80056ec <__kernel_rem_pio2f+0x310>
 8005706:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800570a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570e:	db1a      	blt.n	8005746 <__kernel_rem_pio2f+0x36a>
 8005710:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80056f0 <__kernel_rem_pio2f+0x314>
 8005714:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005718:	aa06      	add	r2, sp, #24
 800571a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800571e:	a906      	add	r1, sp, #24
 8005720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005724:	3408      	adds	r4, #8
 8005726:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800572a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800572e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005732:	ee10 3a10 	vmov	r3, s0
 8005736:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800573a:	1c6b      	adds	r3, r5, #1
 800573c:	ee17 2a90 	vmov	r2, s15
 8005740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005744:	e73f      	b.n	80055c6 <__kernel_rem_pio2f+0x1ea>
 8005746:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800574a:	aa06      	add	r2, sp, #24
 800574c:	ee10 3a10 	vmov	r3, s0
 8005750:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8005754:	462b      	mov	r3, r5
 8005756:	e736      	b.n	80055c6 <__kernel_rem_pio2f+0x1ea>
 8005758:	aa06      	add	r2, sp, #24
 800575a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800575e:	9202      	str	r2, [sp, #8]
 8005760:	ee07 2a90 	vmov	s15, r2
 8005764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005768:	3c01      	subs	r4, #1
 800576a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800576e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005772:	ed65 7a01 	vstmdb	r5!, {s15}
 8005776:	e734      	b.n	80055e2 <__kernel_rem_pio2f+0x206>
 8005778:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800577c:	ecf7 6a01 	vldmia	r7!, {s13}
 8005780:	ed9c 7a00 	vldr	s14, [ip]
 8005784:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005788:	3401      	adds	r4, #1
 800578a:	454c      	cmp	r4, r9
 800578c:	dc01      	bgt.n	8005792 <__kernel_rem_pio2f+0x3b6>
 800578e:	42a5      	cmp	r5, r4
 8005790:	daf2      	bge.n	8005778 <__kernel_rem_pio2f+0x39c>
 8005792:	aa56      	add	r2, sp, #344	; 0x158
 8005794:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8005798:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800579c:	3501      	adds	r5, #1
 800579e:	3804      	subs	r0, #4
 80057a0:	e723      	b.n	80055ea <__kernel_rem_pio2f+0x20e>
 80057a2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80057a4:	2a03      	cmp	r2, #3
 80057a6:	d84d      	bhi.n	8005844 <__kernel_rem_pio2f+0x468>
 80057a8:	e8df f002 	tbb	[pc, r2]
 80057ac:	021f1f3e 	.word	0x021f1f3e
 80057b0:	aa56      	add	r2, sp, #344	; 0x158
 80057b2:	4411      	add	r1, r2
 80057b4:	399c      	subs	r1, #156	; 0x9c
 80057b6:	4608      	mov	r0, r1
 80057b8:	461c      	mov	r4, r3
 80057ba:	2c00      	cmp	r4, #0
 80057bc:	dc5f      	bgt.n	800587e <__kernel_rem_pio2f+0x4a2>
 80057be:	4608      	mov	r0, r1
 80057c0:	461c      	mov	r4, r3
 80057c2:	2c01      	cmp	r4, #1
 80057c4:	dc6b      	bgt.n	800589e <__kernel_rem_pio2f+0x4c2>
 80057c6:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80056f4 <__kernel_rem_pio2f+0x318>
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	dc77      	bgt.n	80058be <__kernel_rem_pio2f+0x4e2>
 80057ce:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80057d2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80057d6:	f1b8 0f00 	cmp.w	r8, #0
 80057da:	d176      	bne.n	80058ca <__kernel_rem_pio2f+0x4ee>
 80057dc:	edc6 6a00 	vstr	s13, [r6]
 80057e0:	ed86 7a01 	vstr	s14, [r6, #4]
 80057e4:	edc6 7a02 	vstr	s15, [r6, #8]
 80057e8:	e02c      	b.n	8005844 <__kernel_rem_pio2f+0x468>
 80057ea:	aa56      	add	r2, sp, #344	; 0x158
 80057ec:	4411      	add	r1, r2
 80057ee:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80056f4 <__kernel_rem_pio2f+0x318>
 80057f2:	399c      	subs	r1, #156	; 0x9c
 80057f4:	4618      	mov	r0, r3
 80057f6:	2800      	cmp	r0, #0
 80057f8:	da32      	bge.n	8005860 <__kernel_rem_pio2f+0x484>
 80057fa:	f1b8 0f00 	cmp.w	r8, #0
 80057fe:	d035      	beq.n	800586c <__kernel_rem_pio2f+0x490>
 8005800:	eef1 7a47 	vneg.f32	s15, s14
 8005804:	edc6 7a00 	vstr	s15, [r6]
 8005808:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800580c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005810:	a82f      	add	r0, sp, #188	; 0xbc
 8005812:	2101      	movs	r1, #1
 8005814:	428b      	cmp	r3, r1
 8005816:	da2c      	bge.n	8005872 <__kernel_rem_pio2f+0x496>
 8005818:	f1b8 0f00 	cmp.w	r8, #0
 800581c:	d001      	beq.n	8005822 <__kernel_rem_pio2f+0x446>
 800581e:	eef1 7a67 	vneg.f32	s15, s15
 8005822:	edc6 7a01 	vstr	s15, [r6, #4]
 8005826:	e00d      	b.n	8005844 <__kernel_rem_pio2f+0x468>
 8005828:	aa56      	add	r2, sp, #344	; 0x158
 800582a:	4411      	add	r1, r2
 800582c:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80056f4 <__kernel_rem_pio2f+0x318>
 8005830:	399c      	subs	r1, #156	; 0x9c
 8005832:	2b00      	cmp	r3, #0
 8005834:	da0e      	bge.n	8005854 <__kernel_rem_pio2f+0x478>
 8005836:	f1b8 0f00 	cmp.w	r8, #0
 800583a:	d001      	beq.n	8005840 <__kernel_rem_pio2f+0x464>
 800583c:	eef1 7a67 	vneg.f32	s15, s15
 8005840:	edc6 7a00 	vstr	s15, [r6]
 8005844:	9b01      	ldr	r3, [sp, #4]
 8005846:	f003 0007 	and.w	r0, r3, #7
 800584a:	b057      	add	sp, #348	; 0x15c
 800584c:	ecbd 8b04 	vpop	{d8-d9}
 8005850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005854:	ed31 7a01 	vldmdb	r1!, {s14}
 8005858:	3b01      	subs	r3, #1
 800585a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800585e:	e7e8      	b.n	8005832 <__kernel_rem_pio2f+0x456>
 8005860:	ed71 7a01 	vldmdb	r1!, {s15}
 8005864:	3801      	subs	r0, #1
 8005866:	ee37 7a27 	vadd.f32	s14, s14, s15
 800586a:	e7c4      	b.n	80057f6 <__kernel_rem_pio2f+0x41a>
 800586c:	eef0 7a47 	vmov.f32	s15, s14
 8005870:	e7c8      	b.n	8005804 <__kernel_rem_pio2f+0x428>
 8005872:	ecb0 7a01 	vldmia	r0!, {s14}
 8005876:	3101      	adds	r1, #1
 8005878:	ee77 7a87 	vadd.f32	s15, s15, s14
 800587c:	e7ca      	b.n	8005814 <__kernel_rem_pio2f+0x438>
 800587e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8005882:	ed70 6a01 	vldmdb	r0!, {s13}
 8005886:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800588a:	3c01      	subs	r4, #1
 800588c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005890:	ed00 7a01 	vstr	s14, [r0, #-4]
 8005894:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005898:	edc0 7a00 	vstr	s15, [r0]
 800589c:	e78d      	b.n	80057ba <__kernel_rem_pio2f+0x3de>
 800589e:	ed50 7a02 	vldr	s15, [r0, #-8]
 80058a2:	ed70 6a01 	vldmdb	r0!, {s13}
 80058a6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80058aa:	3c01      	subs	r4, #1
 80058ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80058b0:	ed00 7a01 	vstr	s14, [r0, #-4]
 80058b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b8:	edc0 7a00 	vstr	s15, [r0]
 80058bc:	e781      	b.n	80057c2 <__kernel_rem_pio2f+0x3e6>
 80058be:	ed31 7a01 	vldmdb	r1!, {s14}
 80058c2:	3b01      	subs	r3, #1
 80058c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058c8:	e77f      	b.n	80057ca <__kernel_rem_pio2f+0x3ee>
 80058ca:	eef1 6a66 	vneg.f32	s13, s13
 80058ce:	eeb1 7a47 	vneg.f32	s14, s14
 80058d2:	edc6 6a00 	vstr	s13, [r6]
 80058d6:	ed86 7a01 	vstr	s14, [r6, #4]
 80058da:	eef1 7a67 	vneg.f32	s15, s15
 80058de:	e781      	b.n	80057e4 <__kernel_rem_pio2f+0x408>

080058e0 <__kernel_sinf>:
 80058e0:	ee10 3a10 	vmov	r3, s0
 80058e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058e8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80058ec:	da04      	bge.n	80058f8 <__kernel_sinf+0x18>
 80058ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80058f2:	ee17 3a90 	vmov	r3, s15
 80058f6:	b35b      	cbz	r3, 8005950 <__kernel_sinf+0x70>
 80058f8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80058fc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005954 <__kernel_sinf+0x74>
 8005900:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005958 <__kernel_sinf+0x78>
 8005904:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005908:	eddf 7a14 	vldr	s15, [pc, #80]	; 800595c <__kernel_sinf+0x7c>
 800590c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005910:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005960 <__kernel_sinf+0x80>
 8005914:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005918:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005964 <__kernel_sinf+0x84>
 800591c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005920:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005924:	b930      	cbnz	r0, 8005934 <__kernel_sinf+0x54>
 8005926:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005968 <__kernel_sinf+0x88>
 800592a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800592e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005932:	4770      	bx	lr
 8005934:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005938:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800593c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005940:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005944:	eddf 7a09 	vldr	s15, [pc, #36]	; 800596c <__kernel_sinf+0x8c>
 8005948:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800594c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	2f2ec9d3 	.word	0x2f2ec9d3
 8005958:	b2d72f34 	.word	0xb2d72f34
 800595c:	3638ef1b 	.word	0x3638ef1b
 8005960:	b9500d01 	.word	0xb9500d01
 8005964:	3c088889 	.word	0x3c088889
 8005968:	be2aaaab 	.word	0xbe2aaaab
 800596c:	3e2aaaab 	.word	0x3e2aaaab

08005970 <fabsf>:
 8005970:	ee10 3a10 	vmov	r3, s0
 8005974:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005978:	ee00 3a10 	vmov	s0, r3
 800597c:	4770      	bx	lr
	...

08005980 <floorf>:
 8005980:	ee10 3a10 	vmov	r3, s0
 8005984:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005988:	0dca      	lsrs	r2, r1, #23
 800598a:	3a7f      	subs	r2, #127	; 0x7f
 800598c:	2a16      	cmp	r2, #22
 800598e:	dc2a      	bgt.n	80059e6 <floorf+0x66>
 8005990:	2a00      	cmp	r2, #0
 8005992:	da11      	bge.n	80059b8 <floorf+0x38>
 8005994:	eddf 7a18 	vldr	s15, [pc, #96]	; 80059f8 <floorf+0x78>
 8005998:	ee30 0a27 	vadd.f32	s0, s0, s15
 800599c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80059a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a4:	dd05      	ble.n	80059b2 <floorf+0x32>
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	da23      	bge.n	80059f2 <floorf+0x72>
 80059aa:	4a14      	ldr	r2, [pc, #80]	; (80059fc <floorf+0x7c>)
 80059ac:	2900      	cmp	r1, #0
 80059ae:	bf18      	it	ne
 80059b0:	4613      	movne	r3, r2
 80059b2:	ee00 3a10 	vmov	s0, r3
 80059b6:	4770      	bx	lr
 80059b8:	4911      	ldr	r1, [pc, #68]	; (8005a00 <floorf+0x80>)
 80059ba:	4111      	asrs	r1, r2
 80059bc:	420b      	tst	r3, r1
 80059be:	d0fa      	beq.n	80059b6 <floorf+0x36>
 80059c0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80059f8 <floorf+0x78>
 80059c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80059c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80059cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d0:	ddef      	ble.n	80059b2 <floorf+0x32>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	bfbe      	ittt	lt
 80059d6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80059da:	fa40 f202 	asrlt.w	r2, r0, r2
 80059de:	189b      	addlt	r3, r3, r2
 80059e0:	ea23 0301 	bic.w	r3, r3, r1
 80059e4:	e7e5      	b.n	80059b2 <floorf+0x32>
 80059e6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80059ea:	d3e4      	bcc.n	80059b6 <floorf+0x36>
 80059ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 80059f0:	4770      	bx	lr
 80059f2:	2300      	movs	r3, #0
 80059f4:	e7dd      	b.n	80059b2 <floorf+0x32>
 80059f6:	bf00      	nop
 80059f8:	7149f2ca 	.word	0x7149f2ca
 80059fc:	bf800000 	.word	0xbf800000
 8005a00:	007fffff 	.word	0x007fffff

08005a04 <scalbnf>:
 8005a04:	b508      	push	{r3, lr}
 8005a06:	ee10 2a10 	vmov	r2, s0
 8005a0a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8005a0e:	ed2d 8b02 	vpush	{d8}
 8005a12:	eef0 0a40 	vmov.f32	s1, s0
 8005a16:	d004      	beq.n	8005a22 <scalbnf+0x1e>
 8005a18:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005a1c:	d306      	bcc.n	8005a2c <scalbnf+0x28>
 8005a1e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8005a22:	ecbd 8b02 	vpop	{d8}
 8005a26:	eeb0 0a60 	vmov.f32	s0, s1
 8005a2a:	bd08      	pop	{r3, pc}
 8005a2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a30:	d21c      	bcs.n	8005a6c <scalbnf+0x68>
 8005a32:	4b1f      	ldr	r3, [pc, #124]	; (8005ab0 <scalbnf+0xac>)
 8005a34:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005ab4 <scalbnf+0xb0>
 8005a38:	4298      	cmp	r0, r3
 8005a3a:	ee60 0a27 	vmul.f32	s1, s0, s15
 8005a3e:	db10      	blt.n	8005a62 <scalbnf+0x5e>
 8005a40:	ee10 2a90 	vmov	r2, s1
 8005a44:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8005a48:	3b19      	subs	r3, #25
 8005a4a:	4403      	add	r3, r0
 8005a4c:	2bfe      	cmp	r3, #254	; 0xfe
 8005a4e:	dd0f      	ble.n	8005a70 <scalbnf+0x6c>
 8005a50:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8005ab8 <scalbnf+0xb4>
 8005a54:	eeb0 0a48 	vmov.f32	s0, s16
 8005a58:	f000 f834 	bl	8005ac4 <copysignf>
 8005a5c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8005a60:	e7df      	b.n	8005a22 <scalbnf+0x1e>
 8005a62:	eddf 7a16 	vldr	s15, [pc, #88]	; 8005abc <scalbnf+0xb8>
 8005a66:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8005a6a:	e7da      	b.n	8005a22 <scalbnf+0x1e>
 8005a6c:	0ddb      	lsrs	r3, r3, #23
 8005a6e:	e7ec      	b.n	8005a4a <scalbnf+0x46>
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	dd06      	ble.n	8005a82 <scalbnf+0x7e>
 8005a74:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005a78:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005a7c:	ee00 3a90 	vmov	s1, r3
 8005a80:	e7cf      	b.n	8005a22 <scalbnf+0x1e>
 8005a82:	f113 0f16 	cmn.w	r3, #22
 8005a86:	da06      	bge.n	8005a96 <scalbnf+0x92>
 8005a88:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005a8c:	4298      	cmp	r0, r3
 8005a8e:	dcdf      	bgt.n	8005a50 <scalbnf+0x4c>
 8005a90:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8005abc <scalbnf+0xb8>
 8005a94:	e7de      	b.n	8005a54 <scalbnf+0x50>
 8005a96:	3319      	adds	r3, #25
 8005a98:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005a9c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005aa0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8005ac0 <scalbnf+0xbc>
 8005aa4:	ee07 3a10 	vmov	s14, r3
 8005aa8:	ee67 0a27 	vmul.f32	s1, s14, s15
 8005aac:	e7b9      	b.n	8005a22 <scalbnf+0x1e>
 8005aae:	bf00      	nop
 8005ab0:	ffff3cb0 	.word	0xffff3cb0
 8005ab4:	4c000000 	.word	0x4c000000
 8005ab8:	7149f2ca 	.word	0x7149f2ca
 8005abc:	0da24260 	.word	0x0da24260
 8005ac0:	33000000 	.word	0x33000000

08005ac4 <copysignf>:
 8005ac4:	ee10 3a10 	vmov	r3, s0
 8005ac8:	ee10 2a90 	vmov	r2, s1
 8005acc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ad0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	ee00 3a10 	vmov	s0, r3
 8005ada:	4770      	bx	lr

08005adc <_init>:
 8005adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ade:	bf00      	nop
 8005ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae2:	bc08      	pop	{r3}
 8005ae4:	469e      	mov	lr, r3
 8005ae6:	4770      	bx	lr

08005ae8 <_fini>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	bf00      	nop
 8005aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aee:	bc08      	pop	{r3}
 8005af0:	469e      	mov	lr, r3
 8005af2:	4770      	bx	lr
