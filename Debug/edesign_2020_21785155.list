
edesign_2020_21785155.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009198  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  0800935c  0800935c  0001935c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a8c  08009a8c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08009a8c  08009a8c  00019a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a94  08009a94  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a94  08009a94  00019a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08009a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e00  20000024  08009ac0  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e24  08009ac0  00021e24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017551  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003229  00000000  00000000  000375a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f8  00000000  00000000  0003a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001270  00000000  00000000  0003bbc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024a56  00000000  00000000  0003ce38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011673  00000000  00000000  0006188e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d87cd  00000000  00000000  00072f01  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b6ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000552c  00000000  00000000  0014b74c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000024 	.word	0x20000024
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009344 	.word	0x08009344

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000028 	.word	0x20000028
 8000200:	08009344 	.word	0x08009344

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_ADC_ConvCpltCallback>:

uint8_t savestart = 0;
uint8_t savemid = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	huart2.gState = HAL_UART_STATE_READY; //remove this, replace with write to SD Card
 800050c:	4b41      	ldr	r3, [pc, #260]	; (8000614 <HAL_ADC_ConvCpltCallback+0x110>)
 800050e:	2220      	movs	r2, #32
 8000510:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	for (int i=512;i<1024;i++)
 8000514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	e04d      	b.n	80005b8 <HAL_ADC_ConvCpltCallback+0xb4>
	{
		accumulator += rec_buffer[i];
 800051c:	4a3e      	ldr	r2, [pc, #248]	; (8000618 <HAL_ADC_ConvCpltCallback+0x114>)
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	4413      	add	r3, r2
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	461a      	mov	r2, r3
 8000526:	4b3d      	ldr	r3, [pc, #244]	; (800061c <HAL_ADC_ConvCpltCallback+0x118>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4413      	add	r3, r2
 800052c:	4a3b      	ldr	r2, [pc, #236]	; (800061c <HAL_ADC_ConvCpltCallback+0x118>)
 800052e:	6013      	str	r3, [r2, #0]
		temp_sample = (int32_t)rec_buffer[i] - avg;
 8000530:	4a39      	ldr	r2, [pc, #228]	; (8000618 <HAL_ADC_ConvCpltCallback+0x114>)
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	4413      	add	r3, r2
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	461a      	mov	r2, r3
 800053a:	4b39      	ldr	r3, [pc, #228]	; (8000620 <HAL_ADC_ConvCpltCallback+0x11c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	4a38      	ldr	r2, [pc, #224]	; (8000624 <HAL_ADC_ConvCpltCallback+0x120>)
 8000542:	6013      	str	r3, [r2, #0]
		smooth_sample = 0.125f * temp_sample + 0.875f * smooth_sample;
 8000544:	4b37      	ldr	r3, [pc, #220]	; (8000624 <HAL_ADC_ConvCpltCallback+0x120>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	ee07 3a90 	vmov	s15, r3
 800054c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000550:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8000554:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000558:	4b33      	ldr	r3, [pc, #204]	; (8000628 <HAL_ADC_ConvCpltCallback+0x124>)
 800055a:	edd3 7a00 	vldr	s15, [r3]
 800055e:	eef6 6a0c 	vmov.f32	s13, #108	; 0x3f600000  0.875
 8000562:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800056a:	4b2f      	ldr	r3, [pc, #188]	; (8000628 <HAL_ADC_ConvCpltCallback+0x124>)
 800056c:	edc3 7a00 	vstr	s15, [r3]
		temp_sample = (int32_t)smooth_sample;
 8000570:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <HAL_ADC_ConvCpltCallback+0x124>)
 8000572:	edd3 7a00 	vldr	s15, [r3]
 8000576:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800057a:	ee17 2a90 	vmov	r2, s15
 800057e:	4b29      	ldr	r3, [pc, #164]	; (8000624 <HAL_ADC_ConvCpltCallback+0x120>)
 8000580:	601a      	str	r2, [r3, #0]
		if (temp_sample > 127) temp_sample = 127;
 8000582:	4b28      	ldr	r3, [pc, #160]	; (8000624 <HAL_ADC_ConvCpltCallback+0x120>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b7f      	cmp	r3, #127	; 0x7f
 8000588:	dd02      	ble.n	8000590 <HAL_ADC_ConvCpltCallback+0x8c>
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <HAL_ADC_ConvCpltCallback+0x120>)
 800058c:	227f      	movs	r2, #127	; 0x7f
 800058e:	601a      	str	r2, [r3, #0]
		if (temp_sample < -128) temp_sample = -128;
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <HAL_ADC_ConvCpltCallback+0x120>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8000598:	da03      	bge.n	80005a2 <HAL_ADC_ConvCpltCallback+0x9e>
 800059a:	4b22      	ldr	r3, [pc, #136]	; (8000624 <HAL_ADC_ConvCpltCallback+0x120>)
 800059c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80005a0:	601a      	str	r2, [r3, #0]
		out_buffer[i] = (int8_t)temp_sample;
 80005a2:	4b20      	ldr	r3, [pc, #128]	; (8000624 <HAL_ADC_ConvCpltCallback+0x120>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	b259      	sxtb	r1, r3
 80005a8:	4a20      	ldr	r2, [pc, #128]	; (800062c <HAL_ADC_ConvCpltCallback+0x128>)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4413      	add	r3, r2
 80005ae:	460a      	mov	r2, r1
 80005b0:	701a      	strb	r2, [r3, #0]
	for (int i=512;i<1024;i++)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	3301      	adds	r3, #1
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005be:	dbad      	blt.n	800051c <HAL_ADC_ConvCpltCallback+0x18>
	}
	numavg += 512;
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <HAL_ADC_ConvCpltCallback+0x12c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80005c8:	4a19      	ldr	r2, [pc, #100]	; (8000630 <HAL_ADC_ConvCpltCallback+0x12c>)
 80005ca:	6013      	str	r3, [r2, #0]
	if (numavg >= 20480)
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <HAL_ADC_ConvCpltCallback+0x12c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80005d4:	db0f      	blt.n	80005f6 <HAL_ADC_ConvCpltCallback+0xf2>
	{
		avg = accumulator /20480;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <HAL_ADC_ConvCpltCallback+0x118>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a16      	ldr	r2, [pc, #88]	; (8000634 <HAL_ADC_ConvCpltCallback+0x130>)
 80005dc:	fb82 1203 	smull	r1, r2, r2, r3
 80005e0:	1352      	asrs	r2, r2, #13
 80005e2:	17db      	asrs	r3, r3, #31
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <HAL_ADC_ConvCpltCallback+0x11c>)
 80005e8:	6013      	str	r3, [r2, #0]
		accumulator = 0;
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HAL_ADC_ConvCpltCallback+0x118>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
		numavg = 0;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <HAL_ADC_ConvCpltCallback+0x12c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
	}

	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)out_buffer+512, 512); //remove this, replace with write to SD Card
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <HAL_ADC_ConvCpltCallback+0x134>)
 80005f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005fc:	4619      	mov	r1, r3
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <HAL_ADC_ConvCpltCallback+0x110>)
 8000600:	f005 f954 	bl	80058ac <HAL_UART_Transmit_DMA>
	savemid = 1;
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <HAL_ADC_ConvCpltCallback+0x138>)
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20001708 	.word	0x20001708
 8000618:	2000035c 	.word	0x2000035c
 800061c:	20000b5c 	.word	0x20000b5c
 8000620:	20000000 	.word	0x20000000
 8000624:	20000b60 	.word	0x20000b60
 8000628:	200017ac 	.word	0x200017ac
 800062c:	2000075c 	.word	0x2000075c
 8000630:	200000dc 	.word	0x200000dc
 8000634:	66666667 	.word	0x66666667
 8000638:	2000095c 	.word	0x2000095c
 800063c:	20000041 	.word	0x20000041

08000640 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	huart2.gState = HAL_UART_STATE_READY; //remove this, replace with write to SD Card
 8000648:	4b40      	ldr	r3, [pc, #256]	; (800074c <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 800064a:	2220      	movs	r2, #32
 800064c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	for (int i=0;i<512;i++)
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	e04d      	b.n	80006f2 <HAL_ADC_ConvHalfCpltCallback+0xb2>
	{
		accumulator += rec_buffer[i];
 8000656:	4a3e      	ldr	r2, [pc, #248]	; (8000750 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4413      	add	r3, r2
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	4b3c      	ldr	r3, [pc, #240]	; (8000754 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4413      	add	r3, r2
 8000666:	4a3b      	ldr	r2, [pc, #236]	; (8000754 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8000668:	6013      	str	r3, [r2, #0]
		temp_sample = (int32_t)rec_buffer[i] - avg;
 800066a:	4a39      	ldr	r2, [pc, #228]	; (8000750 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	4413      	add	r3, r2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	4b38      	ldr	r3, [pc, #224]	; (8000758 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	4a38      	ldr	r2, [pc, #224]	; (800075c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 800067c:	6013      	str	r3, [r2, #0]
		smooth_sample = 0.125f * temp_sample + 0.875f * smooth_sample;
 800067e:	4b37      	ldr	r3, [pc, #220]	; (800075c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	ee07 3a90 	vmov	s15, r3
 8000686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800068a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800068e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000692:	4b33      	ldr	r3, [pc, #204]	; (8000760 <HAL_ADC_ConvHalfCpltCallback+0x120>)
 8000694:	edd3 7a00 	vldr	s15, [r3]
 8000698:	eef6 6a0c 	vmov.f32	s13, #108	; 0x3f600000  0.875
 800069c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80006a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006a4:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <HAL_ADC_ConvHalfCpltCallback+0x120>)
 80006a6:	edc3 7a00 	vstr	s15, [r3]
		temp_sample = (int32_t)smooth_sample;
 80006aa:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <HAL_ADC_ConvHalfCpltCallback+0x120>)
 80006ac:	edd3 7a00 	vldr	s15, [r3]
 80006b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006b4:	ee17 2a90 	vmov	r2, s15
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 80006ba:	601a      	str	r2, [r3, #0]
		if (temp_sample > 127) temp_sample = 127;
 80006bc:	4b27      	ldr	r3, [pc, #156]	; (800075c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b7f      	cmp	r3, #127	; 0x7f
 80006c2:	dd02      	ble.n	80006ca <HAL_ADC_ConvHalfCpltCallback+0x8a>
 80006c4:	4b25      	ldr	r3, [pc, #148]	; (800075c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 80006c6:	227f      	movs	r2, #127	; 0x7f
 80006c8:	601a      	str	r2, [r3, #0]
		if (temp_sample < -128) temp_sample = -128;
 80006ca:	4b24      	ldr	r3, [pc, #144]	; (800075c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80006d2:	da03      	bge.n	80006dc <HAL_ADC_ConvHalfCpltCallback+0x9c>
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 80006d6:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80006da:	601a      	str	r2, [r3, #0]
		out_buffer[i] = (int8_t)temp_sample;
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	b259      	sxtb	r1, r3
 80006e2:	4a20      	ldr	r2, [pc, #128]	; (8000764 <HAL_ADC_ConvHalfCpltCallback+0x124>)
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	4413      	add	r3, r2
 80006e8:	460a      	mov	r2, r1
 80006ea:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<512;i++)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3301      	adds	r3, #1
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006f8:	dbad      	blt.n	8000656 <HAL_ADC_ConvHalfCpltCallback+0x16>
	}
	numavg += 512;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <HAL_ADC_ConvHalfCpltCallback+0x128>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000702:	4a19      	ldr	r2, [pc, #100]	; (8000768 <HAL_ADC_ConvHalfCpltCallback+0x128>)
 8000704:	6013      	str	r3, [r2, #0]
	if (numavg >= 20480)
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <HAL_ADC_ConvHalfCpltCallback+0x128>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800070e:	db0f      	blt.n	8000730 <HAL_ADC_ConvHalfCpltCallback+0xf0>
	{
		avg = accumulator /20480;
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a15      	ldr	r2, [pc, #84]	; (800076c <HAL_ADC_ConvHalfCpltCallback+0x12c>)
 8000716:	fb82 1203 	smull	r1, r2, r2, r3
 800071a:	1352      	asrs	r2, r2, #13
 800071c:	17db      	asrs	r3, r3, #31
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8000722:	6013      	str	r3, [r2, #0]
		accumulator = 0;
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
		numavg = 0;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <HAL_ADC_ConvHalfCpltCallback+0x128>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
	}

	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)out_buffer, 512); //remove this, replace with write to SD Card
 8000730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000734:	490b      	ldr	r1, [pc, #44]	; (8000764 <HAL_ADC_ConvHalfCpltCallback+0x124>)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8000738:	f005 f8b8 	bl	80058ac <HAL_UART_Transmit_DMA>
	savestart = 1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <HAL_ADC_ConvHalfCpltCallback+0x130>)
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20001708 	.word	0x20001708
 8000750:	2000035c 	.word	0x2000035c
 8000754:	20000b5c 	.word	0x20000b5c
 8000758:	20000000 	.word	0x20000000
 800075c:	20000b60 	.word	0x20000b60
 8000760:	200017ac 	.word	0x200017ac
 8000764:	2000075c 	.word	0x2000075c
 8000768:	200000dc 	.word	0x200000dc
 800076c:	66666667 	.word	0x66666667
 8000770:	20000040 	.word	0x20000040

08000774 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af02      	add	r7, sp, #8
 800077a:	6078      	str	r0, [r7, #4]
	HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 800077c:	2300      	movs	r3, #0
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000784:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <HAL_DAC_ConvCpltCallbackCh1+0x34>)
 8000786:	2100      	movs	r1, #0
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f002 faef 	bl	8002d6c <HAL_DAC_Start_DMA>
	wave_fillbuffer(dac_buffer+512, wave, 512);
 800078e:	4807      	ldr	r0, [pc, #28]	; (80007ac <HAL_DAC_ConvCpltCallbackCh1+0x38>)
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <HAL_DAC_ConvCpltCallbackCh1+0x3c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800079a:	4619      	mov	r1, r3
 800079c:	f001 f9c0 	bl	8001b20 <wave_fillbuffer>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000e80 	.word	0x20000e80
 80007ac:	20001280 	.word	0x20001280
 80007b0:	20000b64 	.word	0x20000b64

080007b4 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	wave_fillbuffer(dac_buffer, wave, 512);
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x24>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c6:	4619      	mov	r1, r3
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <HAL_DAC_ConvHalfCpltCallbackCh1+0x28>)
 80007ca:	f001 f9a9 	bl	8001b20 <wave_fillbuffer>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000b64 	.word	0x20000b64
 80007dc:	20000e80 	.word	0x20000e80

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b5b0      	push	{r4, r5, r7, lr}
 80007e2:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 80007e6:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	state = Idle;
 80007e8:	4bc3      	ldr	r3, [pc, #780]	; (8000af8 <main+0x318>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
	state_start = off;
 80007ee:	4bc3      	ldr	r3, [pc, #780]	; (8000afc <main+0x31c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
	exti = off;
 80007f4:	4bc2      	ldr	r3, [pc, #776]	; (8000b00 <main+0x320>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
	exti_start = off;
 80007fa:	4bc2      	ldr	r3, [pc, #776]	; (8000b04 <main+0x324>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
	buttOne = off;
 8000800:	4bc1      	ldr	r3, [pc, #772]	; (8000b08 <main+0x328>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
	buttTwo	= off;
 8000806:	4bc1      	ldr	r3, [pc, #772]	; (8000b0c <main+0x32c>)
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
	buttThree = off;
 800080c:	4bc0      	ldr	r3, [pc, #768]	; (8000b10 <main+0x330>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
	buttRec = off;
 8000812:	4bc0      	ldr	r3, [pc, #768]	; (8000b14 <main+0x334>)
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
	buttStop = off;
 8000818:	4bbf      	ldr	r3, [pc, #764]	; (8000b18 <main+0x338>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
	wave_init();
 800081e:	f001 f943 	bl	8001aa8 <wave_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000822:	f001 fceb 	bl	80021fc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000826:	f000 fc65 	bl	80010f4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082a:	f000 fe6f 	bl	800150c <MX_GPIO_Init>
  MX_DMA_Init();
 800082e:	f000 fe2f 	bl	8001490 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000832:	f000 fe03 	bl	800143c <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000836:	f000 fd1f 	bl	8001278 <MX_DAC_Init>
  MX_TIM6_Init();
 800083a:	f000 fdc9 	bl	80013d0 <MX_TIM6_Init>
  MX_ADC2_Init();
 800083e:	f000 fcc7 	bl	80011d0 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000842:	f000 fd79 	bl	8001338 <MX_TIM2_Init>
  MX_SPI2_Init();
 8000846:	f000 fd41 	bl	80012cc <MX_SPI2_Init>
  MX_FATFS_Init();
 800084a:	f005 fd35 	bl	80062b8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  uint8_t msg[10] = {127, 128, '2','1','7','8','5','1','5','5'};
 800084e:	4ab3      	ldr	r2, [pc, #716]	; (8000b1c <main+0x33c>)
 8000850:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8000854:	ca07      	ldmia	r2, {r0, r1, r2}
 8000856:	c303      	stmia	r3!, {r0, r1}
 8000858:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 800085a:	f207 416c 	addw	r1, r7, #1132	; 0x46c
 800085e:	2364      	movs	r3, #100	; 0x64
 8000860:	220a      	movs	r2, #10
 8000862:	48af      	ldr	r0, [pc, #700]	; (8000b20 <main+0x340>)
 8000864:	f004 ff89 	bl	800577a <HAL_UART_Transmit>
  HAL_TIM_Base_Start(&htim6);
 8000868:	48ae      	ldr	r0, [pc, #696]	; (8000b24 <main+0x344>)
 800086a:	f004 fca8 	bl	80051be <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 800086e:	48ae      	ldr	r0, [pc, #696]	; (8000b28 <main+0x348>)
 8000870:	f004 fca5 	bl	80051be <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)rec_buffer, 1024);
 8000874:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000878:	49ac      	ldr	r1, [pc, #688]	; (8000b2c <main+0x34c>)
 800087a:	48ad      	ldr	r0, [pc, #692]	; (8000b30 <main+0x350>)
 800087c:	f001 fd96 	bl	80023ac <HAL_ADC_Start_DMA>

  //1. SD Card Testing Start---------------------------------------------
  //deselect SD card - chipselect high
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000880:	2201      	movs	r2, #1
 8000882:	2101      	movs	r1, #1
 8000884:	48ab      	ldr	r0, [pc, #684]	; (8000b34 <main+0x354>)
 8000886:	f003 f9c9 	bl	8003c1c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800088a:	2001      	movs	r0, #1
 800088c:	f001 fd28 	bl	80022e0 <HAL_Delay>

  uint8_t dummy = 0xff;
 8000890:	23ff      	movs	r3, #255	; 0xff
 8000892:	f887 346b 	strb.w	r3, [r7, #1131]	; 0x46b
  for (int i=0;i<10;i++)
 8000896:	2300      	movs	r3, #0
 8000898:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 800089c:	e00b      	b.n	80008b6 <main+0xd6>
  {
	  HAL_SPI_Transmit(&hspi2, &dummy, 1, 100);
 800089e:	f207 416b 	addw	r1, r7, #1131	; 0x46b
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	48a4      	ldr	r0, [pc, #656]	; (8000b38 <main+0x358>)
 80008a8:	f003 ff6e 	bl	8004788 <HAL_SPI_Transmit>
  for (int i=0;i<10;i++)
 80008ac:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80008b0:	3301      	adds	r3, #1
 80008b2:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 80008b6:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80008ba:	2b09      	cmp	r3, #9
 80008bc:	ddef      	ble.n	800089e <main+0xbe>
  }

  //select SD card - chipselect low
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2101      	movs	r1, #1
 80008c2:	489c      	ldr	r0, [pc, #624]	; (8000b34 <main+0x354>)
 80008c4:	f003 f9aa 	bl	8003c1c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80008c8:	2001      	movs	r0, #1
 80008ca:	f001 fd09 	bl	80022e0 <HAL_Delay>

  //transmit reset/go to idel command (CMD0) bytes
  uint8_t cmd0bytes[] = {0x40, 0x00, 0x00, 0x00, 0x00, 0x95};
 80008ce:	4a9b      	ldr	r2, [pc, #620]	; (8000b3c <main+0x35c>)
 80008d0:	f207 4364 	addw	r3, r7, #1124	; 0x464
 80008d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008d8:	6018      	str	r0, [r3, #0]
 80008da:	3304      	adds	r3, #4
 80008dc:	8019      	strh	r1, [r3, #0]
  HAL_SPI_Transmit(&hspi2, cmd0bytes, 6, 100);
 80008de:	f207 4164 	addw	r1, r7, #1124	; 0x464
 80008e2:	2364      	movs	r3, #100	; 0x64
 80008e4:	2206      	movs	r2, #6
 80008e6:	4894      	ldr	r0, [pc, #592]	; (8000b38 <main+0x358>)
 80008e8:	f003 ff4e 	bl	8004788 <HAL_SPI_Transmit>

  //read R1 response
  uint8_t r1_resp;
  int cnt = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
  for (cnt=0;cnt<800;cnt++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 80008f8:	bf00      	nop
 80008fa:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80008fe:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000902:	da0a      	bge.n	800091a <main+0x13a>
  {
	  HAL_SPI_Receive(&hspi2, &r1_resp, 1, 100);
 8000904:	f207 4163 	addw	r1, r7, #1123	; 0x463
 8000908:	2364      	movs	r3, #100	; 0x64
 800090a:	2201      	movs	r2, #1
 800090c:	488a      	ldr	r0, [pc, #552]	; (8000b38 <main+0x358>)
 800090e:	f004 f86f 	bl	80049f0 <HAL_SPI_Receive>
	  if (r1_resp = 0x01) break;
 8000912:	2301      	movs	r3, #1
 8000914:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
 8000918:	bf00      	nop
  }

  HAL_UART_Transmit(&huart2, &r1_resp, 1, 1000);
 800091a:	f207 4163 	addw	r1, r7, #1123	; 0x463
 800091e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000922:	2201      	movs	r2, #1
 8000924:	487e      	ldr	r0, [pc, #504]	; (8000b20 <main+0x340>)
 8000926:	f004 ff28 	bl	800577a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t*)&cnt, 1, 1000);
 800092a:	f207 415c 	addw	r1, r7, #1116	; 0x45c
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	2201      	movs	r2, #1
 8000934:	487a      	ldr	r0, [pc, #488]	; (8000b20 <main+0x340>)
 8000936:	f004 ff20 	bl	800577a <HAL_UART_Transmit>
  //1. SD Card Testing End-------------------------------------------------

  //2. SD Card Temporary Code Start----------------------------------------
  uint8_t res = SD_Init();
 800093a:	f000 ff3d 	bl	80017b8 <SD_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	b2db      	uxtb	r3, r3
 8000942:	f887 345b 	strb.w	r3, [r7, #1115]	; 0x45b
  HAL_UART_Transmit(&huart2, &res, 1, 100);
 8000946:	f207 415b 	addw	r1, r7, #1115	; 0x45b
 800094a:	2364      	movs	r3, #100	; 0x64
 800094c:	2201      	movs	r2, #1
 800094e:	4874      	ldr	r0, [pc, #464]	; (8000b20 <main+0x340>)
 8000950:	f004 ff13 	bl	800577a <HAL_UART_Transmit>
  if (res == 1) HAL_UART_Transmit(&huart2, "OK!", 4, 1000);
 8000954:	f897 345b 	ldrb.w	r3, [r7, #1115]	; 0x45b
 8000958:	2b01      	cmp	r3, #1
 800095a:	d106      	bne.n	800096a <main+0x18a>
 800095c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000960:	2204      	movs	r2, #4
 8000962:	4977      	ldr	r1, [pc, #476]	; (8000b40 <main+0x360>)
 8000964:	486e      	ldr	r0, [pc, #440]	; (8000b20 <main+0x340>)
 8000966:	f004 ff08 	bl	800577a <HAL_UART_Transmit>

  uint8_t rxbuffer[512];
  uint8_t txbuffer[512] = "Hello World!";
 800096a:	f107 0558 	add.w	r5, r7, #88	; 0x58
 800096e:	4b75      	ldr	r3, [pc, #468]	; (8000b44 <main+0x364>)
 8000970:	462c      	mov	r4, r5
 8000972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000974:	c407      	stmia	r4!, {r0, r1, r2}
 8000976:	7023      	strb	r3, [r4, #0]
 8000978:	f105 030d 	add.w	r3, r5, #13
 800097c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f007 ff8a 	bl	800889c <memset>

  SD_Read(rxbuffer, 0, 1);
 8000988:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800098c:	2201      	movs	r2, #1
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f000 ffb1 	bl	80018f8 <SD_Read>
  HAL_UART_Transmit(&huart2, rxbuffer, 512, 1000);
 8000996:	f507 7116 	add.w	r1, r7, #600	; 0x258
 800099a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a2:	485f      	ldr	r0, [pc, #380]	; (8000b20 <main+0x340>)
 80009a4:	f004 fee9 	bl	800577a <HAL_UART_Transmit>

  SD_Write(txbuffer, 0, 1);
 80009a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009ac:	2201      	movs	r2, #1
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 f82f 	bl	8001a14 <SD_Write>
  SD_Read(rxbuffer, 0, 1);
 80009b6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80009ba:	2201      	movs	r2, #1
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 ff9a 	bl	80018f8 <SD_Read>
  HAL_UART_Transmit(&huart2, rxbuffer, 512, 1000);
 80009c4:	f507 7116 	add.w	r1, r7, #600	; 0x258
 80009c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d0:	4853      	ldr	r0, [pc, #332]	; (8000b20 <main+0x340>)
 80009d2:	f004 fed2 	bl	800577a <HAL_UART_Transmit>
  //2. SD Card Temporary Code End------------------------------------------

  //3. SD Card Final Code Start (to be moved to the buttons)---------------
  //mount file system (SD Card)
  fres = f_mount(&fs, "", 1);
 80009d6:	2201      	movs	r2, #1
 80009d8:	495b      	ldr	r1, [pc, #364]	; (8000b48 <main+0x368>)
 80009da:	485c      	ldr	r0, [pc, #368]	; (8000b4c <main+0x36c>)
 80009dc:	f007 fabc 	bl	8007f58 <f_mount>
 80009e0:	4603      	mov	r3, r0
 80009e2:	461a      	mov	r2, r3
 80009e4:	4b5a      	ldr	r3, [pc, #360]	; (8000b50 <main+0x370>)
 80009e6:	701a      	strb	r2, [r3, #0]

  //create a file
  fres = f_open(&sdfile, "record1.bin", FA_CREATE_ALWAYS | FA_WRITE);
 80009e8:	220a      	movs	r2, #10
 80009ea:	495a      	ldr	r1, [pc, #360]	; (8000b54 <main+0x374>)
 80009ec:	485a      	ldr	r0, [pc, #360]	; (8000b58 <main+0x378>)
 80009ee:	f007 faf9 	bl	8007fe4 <f_open>
 80009f2:	4603      	mov	r3, r0
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b56      	ldr	r3, [pc, #344]	; (8000b50 <main+0x370>)
 80009f8:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //SD Card variables------------------------------------------------------
  UINT num;
  int count = 430;
 80009fa:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 80009fe:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
  uint8_t recording = 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
  while (1)
  {


	  //SD Card while loop code start (move to the right places)-----------
	  if (recording)
 8000a08:	f897 3477 	ldrb.w	r3, [r7, #1143]	; 0x477
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d039      	beq.n	8000a84 <main+0x2a4>
	  {
		  if (savestart)
 8000a10:	4b52      	ldr	r3, [pc, #328]	; (8000b5c <main+0x37c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d013      	beq.n	8000a40 <main+0x260>
		  {
			  fres = f_write(&sdfile, out_buffer, 512, &num);
 8000a18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a20:	494f      	ldr	r1, [pc, #316]	; (8000b60 <main+0x380>)
 8000a22:	484d      	ldr	r0, [pc, #308]	; (8000b58 <main+0x378>)
 8000a24:	f007 fc9c 	bl	8008360 <f_write>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4b48      	ldr	r3, [pc, #288]	; (8000b50 <main+0x370>)
 8000a2e:	701a      	strb	r2, [r3, #0]
			  savestart = 0;
 8000a30:	4b4a      	ldr	r3, [pc, #296]	; (8000b5c <main+0x37c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
			  count--;
 8000a36:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
		  }
		  if (savemid)
 8000a40:	4b48      	ldr	r3, [pc, #288]	; (8000b64 <main+0x384>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d013      	beq.n	8000a70 <main+0x290>
		  {
			  fres = f_write(&sdfile, out_buffer+512, 512, &num);
 8000a48:	4947      	ldr	r1, [pc, #284]	; (8000b68 <main+0x388>)
 8000a4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a52:	4841      	ldr	r0, [pc, #260]	; (8000b58 <main+0x378>)
 8000a54:	f007 fc84 	bl	8008360 <f_write>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b3c      	ldr	r3, [pc, #240]	; (8000b50 <main+0x370>)
 8000a5e:	701a      	strb	r2, [r3, #0]
			  savemid = 0;
 8000a60:	4b40      	ldr	r3, [pc, #256]	; (8000b64 <main+0x384>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
			  count--;
 8000a66:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
		  }
		  if (count == 0)
 8000a70:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d105      	bne.n	8000a84 <main+0x2a4>
		  {
			  recording = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
			  f_close(&sdfile);
 8000a7e:	4836      	ldr	r0, [pc, #216]	; (8000b58 <main+0x378>)
 8000a80:	f007 fe61 	bl	8008746 <f_close>




	  /////////////////////////////////////////////////////////////////////
	    if (exti){
 8000a84:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <main+0x320>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	f000 80ad 	beq.w	8000be8 <main+0x408>

		  if (!exti_start) Ri = HAL_GetTick();
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <main+0x324>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d105      	bne.n	8000aa2 <main+0x2c2>
 8000a96:	f001 fc17 	bl	80022c8 <HAL_GetTick>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <main+0x38c>)
 8000aa0:	601a      	str	r2, [r3, #0]
		  exti_start = on;
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <main+0x324>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]
		  Rf = HAL_GetTick();
 8000aa8:	f001 fc0e 	bl	80022c8 <HAL_GetTick>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <main+0x390>)
 8000ab2:	601a      	str	r2, [r3, #0]

		  	if (Rf - Ri > 10){
 8000ab4:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <main+0x390>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	; (8000b6c <main+0x38c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	2b0a      	cmp	r3, #10
 8000ac0:	f340 8092 	ble.w	8000be8 <main+0x408>
		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) buttOne = on;
 8000ac4:	2140      	movs	r1, #64	; 0x40
 8000ac6:	482b      	ldr	r0, [pc, #172]	; (8000b74 <main+0x394>)
 8000ac8:	f003 f890 	bl	8003bec <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <main+0x2fa>
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <main+0x328>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	e002      	b.n	8000ae0 <main+0x300>
		  		else buttOne = off;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <main+0x328>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]

			  	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) buttTwo = on;
 8000ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae4:	4823      	ldr	r0, [pc, #140]	; (8000b74 <main+0x394>)
 8000ae6:	f003 f881 	bl	8003bec <HAL_GPIO_ReadPin>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d043      	beq.n	8000b78 <main+0x398>
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <main+0x32c>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	e042      	b.n	8000b7e <main+0x39e>
 8000af8:	20000b6c 	.word	0x20000b6c
 8000afc:	200016c4 	.word	0x200016c4
 8000b00:	20000bd0 	.word	0x20000bd0
 8000b04:	20000e08 	.word	0x20000e08
 8000b08:	200000e0 	.word	0x200000e0
 8000b0c:	20000078 	.word	0x20000078
 8000b10:	20000bd4 	.word	0x20000bd4
 8000b14:	200017b0 	.word	0x200017b0
 8000b18:	20000b68 	.word	0x20000b68
 8000b1c:	08009370 	.word	0x08009370
 8000b20:	20001708 	.word	0x20001708
 8000b24:	20001680 	.word	0x20001680
 8000b28:	200016c8 	.word	0x200016c8
 8000b2c:	2000035c 	.word	0x2000035c
 8000b30:	20000314 	.word	0x20000314
 8000b34:	40020400 	.word	0x40020400
 8000b38:	20000080 	.word	0x20000080
 8000b3c:	0800937c 	.word	0x0800937c
 8000b40:	0800935c 	.word	0x0800935c
 8000b44:	08009384 	.word	0x08009384
 8000b48:	08009360 	.word	0x08009360
 8000b4c:	200000e4 	.word	0x200000e4
 8000b50:	200017a8 	.word	0x200017a8
 8000b54:	08009364 	.word	0x08009364
 8000b58:	20000bd8 	.word	0x20000bd8
 8000b5c:	20000040 	.word	0x20000040
 8000b60:	2000075c 	.word	0x2000075c
 8000b64:	20000041 	.word	0x20000041
 8000b68:	2000095c 	.word	0x2000095c
 8000b6c:	200016c0 	.word	0x200016c0
 8000b70:	200000d8 	.word	0x200000d8
 8000b74:	40020000 	.word	0x40020000
			  	else buttTwo = off;
 8000b78:	4ba5      	ldr	r3, [pc, #660]	; (8000e10 <main+0x630>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)) buttThree = on;
 8000b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b82:	48a4      	ldr	r0, [pc, #656]	; (8000e14 <main+0x634>)
 8000b84:	f003 f832 	bl	8003bec <HAL_GPIO_ReadPin>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <main+0x3b6>
 8000b8e:	4ba2      	ldr	r3, [pc, #648]	; (8000e18 <main+0x638>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	e002      	b.n	8000b9c <main+0x3bc>
		  		else buttThree = off;
 8000b96:	4ba0      	ldr	r3, [pc, #640]	; (8000e18 <main+0x638>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) buttRec = on;
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	489d      	ldr	r0, [pc, #628]	; (8000e14 <main+0x634>)
 8000ba0:	f003 f824 	bl	8003bec <HAL_GPIO_ReadPin>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <main+0x3d2>
 8000baa:	4b9c      	ldr	r3, [pc, #624]	; (8000e1c <main+0x63c>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	e002      	b.n	8000bb8 <main+0x3d8>
		  		else buttRec = off;
 8000bb2:	4b9a      	ldr	r3, [pc, #616]	; (8000e1c <main+0x63c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) buttStop = on;
 8000bb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bbc:	4898      	ldr	r0, [pc, #608]	; (8000e20 <main+0x640>)
 8000bbe:	f003 f815 	bl	8003bec <HAL_GPIO_ReadPin>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <main+0x3f0>
 8000bc8:	4b96      	ldr	r3, [pc, #600]	; (8000e24 <main+0x644>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	e002      	b.n	8000bd6 <main+0x3f6>
		  		else buttStop = off;
 8000bd0:	4b94      	ldr	r3, [pc, #592]	; (8000e24 <main+0x644>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]

		  		exti = off;
 8000bd6:	4b94      	ldr	r3, [pc, #592]	; (8000e28 <main+0x648>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
		  		state_start = off;
 8000bdc:	4b93      	ldr	r3, [pc, #588]	; (8000e2c <main+0x64c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
		  		exti_start = off;
 8000be2:	4b93      	ldr	r3, [pc, #588]	; (8000e30 <main+0x650>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
		  	}
	  }
	  /////////////////////////////////////////////////////////////////////

	  if (!state_start && !(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))){
 8000be8:	4b90      	ldr	r3, [pc, #576]	; (8000e2c <main+0x64c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f040 8150 	bne.w	8000e92 <main+0x6b2>
 8000bf2:	2140      	movs	r1, #64	; 0x40
 8000bf4:	4887      	ldr	r0, [pc, #540]	; (8000e14 <main+0x634>)
 8000bf6:	f002 fff9 	bl	8003bec <HAL_GPIO_ReadPin>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f040 8148 	bne.w	8000e92 <main+0x6b2>
 8000c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c06:	4883      	ldr	r0, [pc, #524]	; (8000e14 <main+0x634>)
 8000c08:	f002 fff0 	bl	8003bec <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f040 813f 	bne.w	8000e92 <main+0x6b2>
 8000c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c18:	487e      	ldr	r0, [pc, #504]	; (8000e14 <main+0x634>)
 8000c1a:	f002 ffe7 	bl	8003bec <HAL_GPIO_ReadPin>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f040 8136 	bne.w	8000e92 <main+0x6b2>
 8000c26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c2a:	487d      	ldr	r0, [pc, #500]	; (8000e20 <main+0x640>)
 8000c2c:	f002 ffde 	bl	8003bec <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 812d 	bne.w	8000e92 <main+0x6b2>
			  if (buttOne || buttTwo || buttThree || buttStop) state_start = on;
 8000c38:	4b7e      	ldr	r3, [pc, #504]	; (8000e34 <main+0x654>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d10b      	bne.n	8000c58 <main+0x478>
 8000c40:	4b73      	ldr	r3, [pc, #460]	; (8000e10 <main+0x630>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d107      	bne.n	8000c58 <main+0x478>
 8000c48:	4b73      	ldr	r3, [pc, #460]	; (8000e18 <main+0x638>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d103      	bne.n	8000c58 <main+0x478>
 8000c50:	4b74      	ldr	r3, [pc, #464]	; (8000e24 <main+0x644>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d002      	beq.n	8000c5e <main+0x47e>
 8000c58:	4b74      	ldr	r3, [pc, #464]	; (8000e2c <main+0x64c>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
			  if (!buttRec && buttOne){
 8000c5e:	4b6f      	ldr	r3, [pc, #444]	; (8000e1c <main+0x63c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d126      	bne.n	8000cb4 <main+0x4d4>
 8000c66:	4b73      	ldr	r3, [pc, #460]	; (8000e34 <main+0x654>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d022      	beq.n	8000cb4 <main+0x4d4>
				  state = PlayOne;
 8000c6e:	4b72      	ldr	r3, [pc, #456]	; (8000e38 <main+0x658>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
				  wave = 1;
 8000c74:	4b71      	ldr	r3, [pc, #452]	; (8000e3c <main+0x65c>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	601a      	str	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'P','l','a','y','_','_','_','1'};
 8000c7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c7e:	4a70      	ldr	r2, [pc, #448]	; (8000e40 <main+0x660>)
 8000c80:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c82:	c303      	stmia	r3!, {r0, r1}
 8000c84:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000c86:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000c8a:	2364      	movs	r3, #100	; 0x64
 8000c8c:	220a      	movs	r2, #10
 8000c8e:	486d      	ldr	r0, [pc, #436]	; (8000e44 <main+0x664>)
 8000c90:	f004 fd73 	bl	800577a <HAL_UART_Transmit>
		  		  wave_fillbuffer(dac_buffer, 1, 1024);
 8000c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c98:	2101      	movs	r1, #1
 8000c9a:	486b      	ldr	r0, [pc, #428]	; (8000e48 <main+0x668>)
 8000c9c:	f000 ff40 	bl	8001b20 <wave_fillbuffer>
		  		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca8:	4a67      	ldr	r2, [pc, #412]	; (8000e48 <main+0x668>)
 8000caa:	2100      	movs	r1, #0
 8000cac:	4867      	ldr	r0, [pc, #412]	; (8000e4c <main+0x66c>)
 8000cae:	f002 f85d 	bl	8002d6c <HAL_DAC_Start_DMA>
			  if (!buttRec && buttOne){
 8000cb2:	e0ee      	b.n	8000e92 <main+0x6b2>
			  }
			  else if (!buttRec && buttTwo){
 8000cb4:	4b59      	ldr	r3, [pc, #356]	; (8000e1c <main+0x63c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d126      	bne.n	8000d0a <main+0x52a>
 8000cbc:	4b54      	ldr	r3, [pc, #336]	; (8000e10 <main+0x630>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d022      	beq.n	8000d0a <main+0x52a>
				  state = PlayTwo;
 8000cc4:	4b5c      	ldr	r3, [pc, #368]	; (8000e38 <main+0x658>)
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	701a      	strb	r2, [r3, #0]
				  wave = 2;
 8000cca:	4b5c      	ldr	r3, [pc, #368]	; (8000e3c <main+0x65c>)
 8000ccc:	2202      	movs	r2, #2
 8000cce:	601a      	str	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'P','l','a','y','_','_','_','2'};
 8000cd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cd4:	4a5e      	ldr	r2, [pc, #376]	; (8000e50 <main+0x670>)
 8000cd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cd8:	c303      	stmia	r3!, {r0, r1}
 8000cda:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000cdc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000ce0:	2364      	movs	r3, #100	; 0x64
 8000ce2:	220a      	movs	r2, #10
 8000ce4:	4857      	ldr	r0, [pc, #348]	; (8000e44 <main+0x664>)
 8000ce6:	f004 fd48 	bl	800577a <HAL_UART_Transmit>
		  		  wave_fillbuffer(dac_buffer, 2, 1024);
 8000cea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cee:	2102      	movs	r1, #2
 8000cf0:	4855      	ldr	r0, [pc, #340]	; (8000e48 <main+0x668>)
 8000cf2:	f000 ff15 	bl	8001b20 <wave_fillbuffer>
		  		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfe:	4a52      	ldr	r2, [pc, #328]	; (8000e48 <main+0x668>)
 8000d00:	2100      	movs	r1, #0
 8000d02:	4852      	ldr	r0, [pc, #328]	; (8000e4c <main+0x66c>)
 8000d04:	f002 f832 	bl	8002d6c <HAL_DAC_Start_DMA>
			  else if (!buttRec && buttTwo){
 8000d08:	e0c3      	b.n	8000e92 <main+0x6b2>
			  }
			  else if (!buttRec && buttThree){
 8000d0a:	4b44      	ldr	r3, [pc, #272]	; (8000e1c <main+0x63c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d126      	bne.n	8000d60 <main+0x580>
 8000d12:	4b41      	ldr	r3, [pc, #260]	; (8000e18 <main+0x638>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d022      	beq.n	8000d60 <main+0x580>
				  state = PlayThree;
 8000d1a:	4b47      	ldr	r3, [pc, #284]	; (8000e38 <main+0x658>)
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	701a      	strb	r2, [r3, #0]
				  wave = 3;
 8000d20:	4b46      	ldr	r3, [pc, #280]	; (8000e3c <main+0x65c>)
 8000d22:	2203      	movs	r2, #3
 8000d24:	601a      	str	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'P','l','a','y','_','_','_','3'};
 8000d26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d2a:	4a4a      	ldr	r2, [pc, #296]	; (8000e54 <main+0x674>)
 8000d2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d2e:	c303      	stmia	r3!, {r0, r1}
 8000d30:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000d32:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000d36:	2364      	movs	r3, #100	; 0x64
 8000d38:	220a      	movs	r2, #10
 8000d3a:	4842      	ldr	r0, [pc, #264]	; (8000e44 <main+0x664>)
 8000d3c:	f004 fd1d 	bl	800577a <HAL_UART_Transmit>
		  		  wave_fillbuffer(dac_buffer, 3, 1024);
 8000d40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d44:	2103      	movs	r1, #3
 8000d46:	4840      	ldr	r0, [pc, #256]	; (8000e48 <main+0x668>)
 8000d48:	f000 feea 	bl	8001b20 <wave_fillbuffer>
		  		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d54:	4a3c      	ldr	r2, [pc, #240]	; (8000e48 <main+0x668>)
 8000d56:	2100      	movs	r1, #0
 8000d58:	483c      	ldr	r0, [pc, #240]	; (8000e4c <main+0x66c>)
 8000d5a:	f002 f807 	bl	8002d6c <HAL_DAC_Start_DMA>
			  else if (!buttRec && buttThree){
 8000d5e:	e098      	b.n	8000e92 <main+0x6b2>
			  }
			  else if (buttRec && buttOne){
 8000d60:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <main+0x63c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d018      	beq.n	8000d9a <main+0x5ba>
 8000d68:	4b32      	ldr	r3, [pc, #200]	; (8000e34 <main+0x654>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d014      	beq.n	8000d9a <main+0x5ba>
				  state = RecOne;
 8000d70:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <main+0x658>)
 8000d72:	2204      	movs	r2, #4
 8000d74:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'R','e','c','o','r','d','_','1'};
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4a37      	ldr	r2, [pc, #220]	; (8000e58 <main+0x678>)
 8000d7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d7e:	c303      	stmia	r3!, {r0, r1}
 8000d80:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000d82:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000d86:	2364      	movs	r3, #100	; 0x64
 8000d88:	220a      	movs	r2, #10
 8000d8a:	482e      	ldr	r0, [pc, #184]	; (8000e44 <main+0x664>)
 8000d8c:	f004 fcf5 	bl	800577a <HAL_UART_Transmit>
		  		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000d90:	2100      	movs	r1, #0
 8000d92:	482e      	ldr	r0, [pc, #184]	; (8000e4c <main+0x66c>)
 8000d94:	f002 f898 	bl	8002ec8 <HAL_DAC_Stop_DMA>
			  else if (buttRec && buttOne){
 8000d98:	e07b      	b.n	8000e92 <main+0x6b2>
			  }
			  else if (buttRec && buttTwo){
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <main+0x63c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d018      	beq.n	8000dd4 <main+0x5f4>
 8000da2:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <main+0x630>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d014      	beq.n	8000dd4 <main+0x5f4>
				  state = RecTwo;
 8000daa:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <main+0x658>)
 8000dac:	2205      	movs	r2, #5
 8000dae:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'R','e','c','o','r','d','_','2'};
 8000db0:	f107 0318 	add.w	r3, r7, #24
 8000db4:	4a29      	ldr	r2, [pc, #164]	; (8000e5c <main+0x67c>)
 8000db6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000db8:	c303      	stmia	r3!, {r0, r1}
 8000dba:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000dbc:	f107 0118 	add.w	r1, r7, #24
 8000dc0:	2364      	movs	r3, #100	; 0x64
 8000dc2:	220a      	movs	r2, #10
 8000dc4:	481f      	ldr	r0, [pc, #124]	; (8000e44 <main+0x664>)
 8000dc6:	f004 fcd8 	bl	800577a <HAL_UART_Transmit>
		  		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	481f      	ldr	r0, [pc, #124]	; (8000e4c <main+0x66c>)
 8000dce:	f002 f87b 	bl	8002ec8 <HAL_DAC_Stop_DMA>
			  else if (buttRec && buttTwo){
 8000dd2:	e05e      	b.n	8000e92 <main+0x6b2>
			  }
			  else if (buttRec && buttThree){
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <main+0x63c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d043      	beq.n	8000e64 <main+0x684>
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <main+0x638>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d03f      	beq.n	8000e64 <main+0x684>
				  state = RecThree;
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <main+0x658>)
 8000de6:	2206      	movs	r2, #6
 8000de8:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'R','e','c','o','r','d','_','3'};
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	4a1c      	ldr	r2, [pc, #112]	; (8000e60 <main+0x680>)
 8000df0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000df2:	c303      	stmia	r3!, {r0, r1}
 8000df4:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000df6:	f107 010c 	add.w	r1, r7, #12
 8000dfa:	2364      	movs	r3, #100	; 0x64
 8000dfc:	220a      	movs	r2, #10
 8000dfe:	4811      	ldr	r0, [pc, #68]	; (8000e44 <main+0x664>)
 8000e00:	f004 fcbb 	bl	800577a <HAL_UART_Transmit>
		  		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000e04:	2100      	movs	r1, #0
 8000e06:	4811      	ldr	r0, [pc, #68]	; (8000e4c <main+0x66c>)
 8000e08:	f002 f85e 	bl	8002ec8 <HAL_DAC_Stop_DMA>
			  else if (buttRec && buttThree){
 8000e0c:	e041      	b.n	8000e92 <main+0x6b2>
 8000e0e:	bf00      	nop
 8000e10:	20000078 	.word	0x20000078
 8000e14:	40020000 	.word	0x40020000
 8000e18:	20000bd4 	.word	0x20000bd4
 8000e1c:	200017b0 	.word	0x200017b0
 8000e20:	40020400 	.word	0x40020400
 8000e24:	20000b68 	.word	0x20000b68
 8000e28:	20000bd0 	.word	0x20000bd0
 8000e2c:	200016c4 	.word	0x200016c4
 8000e30:	20000e08 	.word	0x20000e08
 8000e34:	200000e0 	.word	0x200000e0
 8000e38:	20000b6c 	.word	0x20000b6c
 8000e3c:	20000b64 	.word	0x20000b64
 8000e40:	08009584 	.word	0x08009584
 8000e44:	20001708 	.word	0x20001708
 8000e48:	20000e80 	.word	0x20000e80
 8000e4c:	20000e6c 	.word	0x20000e6c
 8000e50:	08009590 	.word	0x08009590
 8000e54:	0800959c 	.word	0x0800959c
 8000e58:	080095a8 	.word	0x080095a8
 8000e5c:	080095b4 	.word	0x080095b4
 8000e60:	080095c0 	.word	0x080095c0
			  }
			  else if (buttStop){
 8000e64:	4b9a      	ldr	r3, [pc, #616]	; (80010d0 <main+0x8f0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d012      	beq.n	8000e92 <main+0x6b2>
				  state = Idle;
 8000e6c:	4b99      	ldr	r3, [pc, #612]	; (80010d4 <main+0x8f4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'S','t','o','p','_','_','_','_'};
 8000e72:	463b      	mov	r3, r7
 8000e74:	4a98      	ldr	r2, [pc, #608]	; (80010d8 <main+0x8f8>)
 8000e76:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e78:	c303      	stmia	r3!, {r0, r1}
 8000e7a:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 1000);
 8000e7c:	4639      	mov	r1, r7
 8000e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e82:	220a      	movs	r2, #10
 8000e84:	4895      	ldr	r0, [pc, #596]	; (80010dc <main+0x8fc>)
 8000e86:	f004 fc78 	bl	800577a <HAL_UART_Transmit>
		  		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4894      	ldr	r0, [pc, #592]	; (80010e0 <main+0x900>)
 8000e8e:	f002 f81b 	bl	8002ec8 <HAL_DAC_Stop_DMA>
			  }
	  }

	  ticky = HAL_GetTick();
 8000e92:	f001 fa19 	bl	80022c8 <HAL_GetTick>
 8000e96:	4603      	mov	r3, r0
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b92      	ldr	r3, [pc, #584]	; (80010e4 <main+0x904>)
 8000e9c:	601a      	str	r2, [r3, #0]
	  ///////////////////////////////////////////////////////////////////////////////////
	  if (state == PlayOne || state == PlayTwo || state == PlayThree || state == Idle){
 8000e9e:	4b8d      	ldr	r3, [pc, #564]	; (80010d4 <main+0x8f4>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d00e      	beq.n	8000ec6 <main+0x6e6>
 8000ea8:	4b8a      	ldr	r3, [pc, #552]	; (80010d4 <main+0x8f4>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d009      	beq.n	8000ec6 <main+0x6e6>
 8000eb2:	4b88      	ldr	r3, [pc, #544]	; (80010d4 <main+0x8f4>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d004      	beq.n	8000ec6 <main+0x6e6>
 8000ebc:	4b85      	ldr	r3, [pc, #532]	; (80010d4 <main+0x8f4>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d174      	bne.n	8000fb0 <main+0x7d0>
	  	  if (state == PlayOne){
 8000ec6:	4b83      	ldr	r3, [pc, #524]	; (80010d4 <main+0x8f4>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d11c      	bne.n	8000f0a <main+0x72a>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, on);
 8000ed0:	4b84      	ldr	r3, [pc, #528]	; (80010e4 <main+0x904>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b84      	ldr	r3, [pc, #528]	; (80010e8 <main+0x908>)
 8000ed6:	fb83 1302 	smull	r1, r3, r3, r2
 8000eda:	1159      	asrs	r1, r3, #5
 8000edc:	17d3      	asrs	r3, r2, #31
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ee4:	fb01 f303 	mul.w	r3, r1, r3
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2bf9      	cmp	r3, #249	; 0xf9
 8000eec:	dc06      	bgt.n	8000efc <main+0x71c>
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef4:	487d      	ldr	r0, [pc, #500]	; (80010ec <main+0x90c>)
 8000ef6:	f002 fe91 	bl	8003c1c <HAL_GPIO_WritePin>
 8000efa:	e00c      	b.n	8000f16 <main+0x736>
	  		  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f02:	487a      	ldr	r0, [pc, #488]	; (80010ec <main+0x90c>)
 8000f04:	f002 fe8a 	bl	8003c1c <HAL_GPIO_WritePin>
 8000f08:	e005      	b.n	8000f16 <main+0x736>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f10:	4876      	ldr	r0, [pc, #472]	; (80010ec <main+0x90c>)
 8000f12:	f002 fe83 	bl	8003c1c <HAL_GPIO_WritePin>

	  	  if (state == PlayTwo){
 8000f16:	4b6f      	ldr	r3, [pc, #444]	; (80010d4 <main+0x8f4>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d11c      	bne.n	8000f5a <main+0x77a>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, on);
 8000f20:	4b70      	ldr	r3, [pc, #448]	; (80010e4 <main+0x904>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b70      	ldr	r3, [pc, #448]	; (80010e8 <main+0x908>)
 8000f26:	fb83 1302 	smull	r1, r3, r3, r2
 8000f2a:	1159      	asrs	r1, r3, #5
 8000f2c:	17d3      	asrs	r3, r2, #31
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f34:	fb01 f303 	mul.w	r3, r1, r3
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2bf9      	cmp	r3, #249	; 0xf9
 8000f3c:	dc06      	bgt.n	8000f4c <main+0x76c>
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f44:	486a      	ldr	r0, [pc, #424]	; (80010f0 <main+0x910>)
 8000f46:	f002 fe69 	bl	8003c1c <HAL_GPIO_WritePin>
 8000f4a:	e00c      	b.n	8000f66 <main+0x786>
	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f52:	4867      	ldr	r0, [pc, #412]	; (80010f0 <main+0x910>)
 8000f54:	f002 fe62 	bl	8003c1c <HAL_GPIO_WritePin>
 8000f58:	e005      	b.n	8000f66 <main+0x786>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f60:	4863      	ldr	r0, [pc, #396]	; (80010f0 <main+0x910>)
 8000f62:	f002 fe5b 	bl	8003c1c <HAL_GPIO_WritePin>

	  	  if (state == PlayThree){
 8000f66:	4b5b      	ldr	r3, [pc, #364]	; (80010d4 <main+0x8f4>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d11a      	bne.n	8000fa6 <main+0x7c6>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, on);
 8000f70:	4b5c      	ldr	r3, [pc, #368]	; (80010e4 <main+0x904>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b5c      	ldr	r3, [pc, #368]	; (80010e8 <main+0x908>)
 8000f76:	fb83 1302 	smull	r1, r3, r3, r2
 8000f7a:	1159      	asrs	r1, r3, #5
 8000f7c:	17d3      	asrs	r3, r2, #31
 8000f7e:	1acb      	subs	r3, r1, r3
 8000f80:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f84:	fb01 f303 	mul.w	r3, r1, r3
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2bf9      	cmp	r3, #249	; 0xf9
 8000f8c:	dc05      	bgt.n	8000f9a <main+0x7ba>
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2110      	movs	r1, #16
 8000f92:	4857      	ldr	r0, [pc, #348]	; (80010f0 <main+0x910>)
 8000f94:	f002 fe42 	bl	8003c1c <HAL_GPIO_WritePin>
 8000f98:	e00a      	b.n	8000fb0 <main+0x7d0>
	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2110      	movs	r1, #16
 8000f9e:	4854      	ldr	r0, [pc, #336]	; (80010f0 <main+0x910>)
 8000fa0:	f002 fe3c 	bl	8003c1c <HAL_GPIO_WritePin>
 8000fa4:	e004      	b.n	8000fb0 <main+0x7d0>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2110      	movs	r1, #16
 8000faa:	4851      	ldr	r0, [pc, #324]	; (80010f0 <main+0x910>)
 8000fac:	f002 fe36 	bl	8003c1c <HAL_GPIO_WritePin>
	  }
	  ///////////////////////////////////////////////////////////////////////////////////
  	  if (state == RecOne || state == RecTwo || state == RecThree){
 8000fb0:	4b48      	ldr	r3, [pc, #288]	; (80010d4 <main+0x8f4>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d009      	beq.n	8000fce <main+0x7ee>
 8000fba:	4b46      	ldr	r3, [pc, #280]	; (80010d4 <main+0x8f4>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b05      	cmp	r3, #5
 8000fc2:	d004      	beq.n	8000fce <main+0x7ee>
 8000fc4:	4b43      	ldr	r3, [pc, #268]	; (80010d4 <main+0x8f4>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d17a      	bne.n	80010c4 <main+0x8e4>
  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, on);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4847      	ldr	r0, [pc, #284]	; (80010f0 <main+0x910>)
 8000fd4:	f002 fe22 	bl	8003c1c <HAL_GPIO_WritePin>

  	  	  if (state == RecOne){
 8000fd8:	4b3e      	ldr	r3, [pc, #248]	; (80010d4 <main+0x8f4>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	d11c      	bne.n	800101c <main+0x83c>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, on);
 8000fe2:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <main+0x904>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4b40      	ldr	r3, [pc, #256]	; (80010e8 <main+0x908>)
 8000fe8:	fb83 1302 	smull	r1, r3, r3, r2
 8000fec:	1159      	asrs	r1, r3, #5
 8000fee:	17d3      	asrs	r3, r2, #31
 8000ff0:	1acb      	subs	r3, r1, r3
 8000ff2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ff6:	fb01 f303 	mul.w	r3, r1, r3
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2bf9      	cmp	r3, #249	; 0xf9
 8000ffe:	dc06      	bgt.n	800100e <main+0x82e>
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001006:	4839      	ldr	r0, [pc, #228]	; (80010ec <main+0x90c>)
 8001008:	f002 fe08 	bl	8003c1c <HAL_GPIO_WritePin>
 800100c:	e00c      	b.n	8001028 <main+0x848>
  	  		  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001014:	4835      	ldr	r0, [pc, #212]	; (80010ec <main+0x90c>)
 8001016:	f002 fe01 	bl	8003c1c <HAL_GPIO_WritePin>
 800101a:	e005      	b.n	8001028 <main+0x848>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001022:	4832      	ldr	r0, [pc, #200]	; (80010ec <main+0x90c>)
 8001024:	f002 fdfa 	bl	8003c1c <HAL_GPIO_WritePin>

  	  	  if (state == RecTwo){
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <main+0x8f4>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b05      	cmp	r3, #5
 8001030:	d11c      	bne.n	800106c <main+0x88c>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, on);
 8001032:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <main+0x904>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <main+0x908>)
 8001038:	fb83 1302 	smull	r1, r3, r3, r2
 800103c:	1159      	asrs	r1, r3, #5
 800103e:	17d3      	asrs	r3, r2, #31
 8001040:	1acb      	subs	r3, r1, r3
 8001042:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001046:	fb01 f303 	mul.w	r3, r1, r3
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2bf9      	cmp	r3, #249	; 0xf9
 800104e:	dc06      	bgt.n	800105e <main+0x87e>
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001056:	4826      	ldr	r0, [pc, #152]	; (80010f0 <main+0x910>)
 8001058:	f002 fde0 	bl	8003c1c <HAL_GPIO_WritePin>
 800105c:	e00c      	b.n	8001078 <main+0x898>
  	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001064:	4822      	ldr	r0, [pc, #136]	; (80010f0 <main+0x910>)
 8001066:	f002 fdd9 	bl	8003c1c <HAL_GPIO_WritePin>
 800106a:	e005      	b.n	8001078 <main+0x898>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001072:	481f      	ldr	r0, [pc, #124]	; (80010f0 <main+0x910>)
 8001074:	f002 fdd2 	bl	8003c1c <HAL_GPIO_WritePin>

  	  	  if (state == RecThree){
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <main+0x8f4>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b06      	cmp	r3, #6
 8001080:	d11a      	bne.n	80010b8 <main+0x8d8>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, on);
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <main+0x904>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <main+0x908>)
 8001088:	fb83 1302 	smull	r1, r3, r3, r2
 800108c:	1159      	asrs	r1, r3, #5
 800108e:	17d3      	asrs	r3, r2, #31
 8001090:	1acb      	subs	r3, r1, r3
 8001092:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001096:	fb01 f303 	mul.w	r3, r1, r3
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2bf9      	cmp	r3, #249	; 0xf9
 800109e:	dc05      	bgt.n	80010ac <main+0x8cc>
 80010a0:	2201      	movs	r2, #1
 80010a2:	2110      	movs	r1, #16
 80010a4:	4812      	ldr	r0, [pc, #72]	; (80010f0 <main+0x910>)
 80010a6:	f002 fdb9 	bl	8003c1c <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 80010aa:	e010      	b.n	80010ce <main+0x8ee>
  	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2110      	movs	r1, #16
 80010b0:	480f      	ldr	r0, [pc, #60]	; (80010f0 <main+0x910>)
 80010b2:	f002 fdb3 	bl	8003c1c <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 80010b6:	e00a      	b.n	80010ce <main+0x8ee>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2110      	movs	r1, #16
 80010bc:	480c      	ldr	r0, [pc, #48]	; (80010f0 <main+0x910>)
 80010be:	f002 fdad 	bl	8003c1c <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 80010c2:	e004      	b.n	80010ce <main+0x8ee>
  	  }
  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, off);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2120      	movs	r1, #32
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <main+0x910>)
 80010ca:	f002 fda7 	bl	8003c1c <HAL_GPIO_WritePin>
	  if (recording)
 80010ce:	e49b      	b.n	8000a08 <main+0x228>
 80010d0:	20000b68 	.word	0x20000b68
 80010d4:	20000b6c 	.word	0x20000b6c
 80010d8:	080095cc 	.word	0x080095cc
 80010dc:	20001708 	.word	0x20001708
 80010e0:	20000e6c 	.word	0x20000e6c
 80010e4:	2000007c 	.word	0x2000007c
 80010e8:	10624dd3 	.word	0x10624dd3
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40020400 	.word	0x40020400

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	; 0x50
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	2234      	movs	r2, #52	; 0x34
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f007 fbca 	bl	800889c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <SystemClock_Config+0xd4>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	4a29      	ldr	r2, [pc, #164]	; (80011c8 <SystemClock_Config+0xd4>)
 8001122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001126:	6413      	str	r3, [r2, #64]	; 0x40
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <SystemClock_Config+0xd4>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001134:	2300      	movs	r3, #0
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <SystemClock_Config+0xd8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001140:	4a22      	ldr	r2, [pc, #136]	; (80011cc <SystemClock_Config+0xd8>)
 8001142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <SystemClock_Config+0xd8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001154:	2302      	movs	r3, #2
 8001156:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001158:	2301      	movs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800115c:	2310      	movs	r3, #16
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001160:	2302      	movs	r3, #2
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001164:	2300      	movs	r3, #0
 8001166:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001168:	2310      	movs	r3, #16
 800116a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800116c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001170:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001172:	2304      	movs	r3, #4
 8001174:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001176:	2302      	movs	r3, #2
 8001178:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800117a:	2302      	movs	r3, #2
 800117c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4618      	mov	r0, r3
 8001184:	f003 f842 	bl	800420c <HAL_RCC_OscConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800118e:	f000 fa81 	bl	8001694 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001192:	230f      	movs	r3, #15
 8001194:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001196:	2302      	movs	r3, #2
 8001198:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800119e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	2102      	movs	r1, #2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 fd72 	bl	8003c98 <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011ba:	f000 fa6b 	bl	8001694 <Error_Handler>
  }
}
 80011be:	bf00      	nop
 80011c0:	3750      	adds	r7, #80	; 0x50
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40007000 	.word	0x40007000

080011d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011d6:	463b      	mov	r3, r7
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <MX_ADC2_Init+0xa0>)
 80011e4:	4a23      	ldr	r2, [pc, #140]	; (8001274 <MX_ADC2_Init+0xa4>)
 80011e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011e8:	4b21      	ldr	r3, [pc, #132]	; (8001270 <MX_ADC2_Init+0xa0>)
 80011ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_ADC2_Init+0xa0>)
 80011f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011f6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <MX_ADC2_Init+0xa0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_ADC2_Init+0xa0>)
 8001200:	2200      	movs	r2, #0
 8001202:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MX_ADC2_Init+0xa0>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_ADC2_Init+0xa0>)
 800120e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <MX_ADC2_Init+0xa0>)
 8001216:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_ADC2_Init+0xa0>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <MX_ADC2_Init+0xa0>)
 8001224:	2201      	movs	r2, #1
 8001226:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_ADC2_Init+0xa0>)
 800122a:	2201      	movs	r2, #1
 800122c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_ADC2_Init+0xa0>)
 8001232:	2201      	movs	r2, #1
 8001234:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001236:	480e      	ldr	r0, [pc, #56]	; (8001270 <MX_ADC2_Init+0xa0>)
 8001238:	f001 f874 	bl	8002324 <HAL_ADC_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_ADC2_Init+0x76>
  {
    Error_Handler();
 8001242:	f000 fa27 	bl	8001694 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001246:	230e      	movs	r3, #14
 8001248:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800124a:	2301      	movs	r3, #1
 800124c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001252:	463b      	mov	r3, r7
 8001254:	4619      	mov	r1, r3
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <MX_ADC2_Init+0xa0>)
 8001258:	f001 f9a4 	bl	80025a4 <HAL_ADC_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_ADC2_Init+0x96>
  {
    Error_Handler();
 8001262:	f000 fa17 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000314 	.word	0x20000314
 8001274:	40012100 	.word	0x40012100

08001278 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800127e:	463b      	mov	r3, r7
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_DAC_Init+0x4c>)
 8001288:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <MX_DAC_Init+0x50>)
 800128a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800128c:	480d      	ldr	r0, [pc, #52]	; (80012c4 <MX_DAC_Init+0x4c>)
 800128e:	f001 fd4a 	bl	8002d26 <HAL_DAC_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001298:	f000 f9fc 	bl	8001694 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800129c:	2304      	movs	r3, #4
 800129e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	4619      	mov	r1, r3
 80012aa:	4806      	ldr	r0, [pc, #24]	; (80012c4 <MX_DAC_Init+0x4c>)
 80012ac:	f001 fe57 	bl	8002f5e <HAL_DAC_ConfigChannel>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80012b6:	f000 f9ed 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000e6c 	.word	0x20000e6c
 80012c8:	40007400 	.word	0x40007400

080012cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_SPI2_Init+0x64>)
 80012d2:	4a18      	ldr	r2, [pc, #96]	; (8001334 <MX_SPI2_Init+0x68>)
 80012d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_SPI2_Init+0x64>)
 80012d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_SPI2_Init+0x64>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_SPI2_Init+0x64>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_SPI2_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_SPI2_Init+0x64>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_SPI2_Init+0x64>)
 80012f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_SPI2_Init+0x64>)
 8001300:	2208      	movs	r2, #8
 8001302:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <MX_SPI2_Init+0x64>)
 8001306:	2200      	movs	r2, #0
 8001308:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_SPI2_Init+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <MX_SPI2_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_SPI2_Init+0x64>)
 8001318:	220a      	movs	r2, #10
 800131a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_SPI2_Init+0x64>)
 800131e:	f003 f9cf 	bl	80046c0 <HAL_SPI_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001328:	f000 f9b4 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000080 	.word	0x20000080
 8001334:	40003800 	.word	0x40003800

08001338 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_TIM2_Init+0x94>)
 8001356:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_TIM2_Init+0x94>)
 800135e:	2200      	movs	r2, #0
 8001360:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_TIM2_Init+0x94>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1905;
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_TIM2_Init+0x94>)
 800136a:	f240 7271 	movw	r2, #1905	; 0x771
 800136e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <MX_TIM2_Init+0x94>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_TIM2_Init+0x94>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800137c:	4813      	ldr	r0, [pc, #76]	; (80013cc <MX_TIM2_Init+0x94>)
 800137e:	f003 fef3 	bl	8005168 <HAL_TIM_Base_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001388:	f000 f984 	bl	8001694 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001390:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	4619      	mov	r1, r3
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <MX_TIM2_Init+0x94>)
 800139a:	f003 ff34 	bl	8005206 <HAL_TIM_ConfigClockSource>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013a4:	f000 f976 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013a8:	2320      	movs	r3, #32
 80013aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_TIM2_Init+0x94>)
 80013b6:	f004 f917 	bl	80055e8 <HAL_TIMEx_MasterConfigSynchronization>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013c0:	f000 f968 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200016c8 	.word	0x200016c8

080013d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d6:	463b      	mov	r3, r7
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <MX_TIM6_Init+0x64>)
 80013e0:	4a15      	ldr	r2, [pc, #84]	; (8001438 <MX_TIM6_Init+0x68>)
 80013e2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_TIM6_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <MX_TIM6_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1905;
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <MX_TIM6_Init+0x64>)
 80013f2:	f240 7271 	movw	r2, #1905	; 0x771
 80013f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_TIM6_Init+0x64>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <MX_TIM6_Init+0x64>)
 8001400:	f003 feb2 	bl	8005168 <HAL_TIM_Base_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800140a:	f000 f943 	bl	8001694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800140e:	2320      	movs	r3, #32
 8001410:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001416:	463b      	mov	r3, r7
 8001418:	4619      	mov	r1, r3
 800141a:	4806      	ldr	r0, [pc, #24]	; (8001434 <MX_TIM6_Init+0x64>)
 800141c:	f004 f8e4 	bl	80055e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001426:	f000 f935 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20001680 	.word	0x20001680
 8001438:	40001000 	.word	0x40001000

0800143c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001440:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_USART2_UART_Init+0x48>)
 8001442:	4a11      	ldr	r2, [pc, #68]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001444:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_USART2_UART_Init+0x48>)
 8001448:	4a10      	ldr	r2, [pc, #64]	; (800148c <MX_USART2_UART_Init+0x50>)
 800144a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <MX_USART2_UART_Init+0x48>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_USART2_UART_Init+0x48>)
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <MX_USART2_UART_Init+0x48>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_USART2_UART_Init+0x48>)
 8001460:	220c      	movs	r2, #12
 8001462:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <MX_USART2_UART_Init+0x48>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_USART2_UART_Init+0x48>)
 800146c:	2200      	movs	r2, #0
 800146e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_USART2_UART_Init+0x48>)
 8001472:	f004 f935 	bl	80056e0 <HAL_UART_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 800147c:	f000 f90a 	bl	8001694 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20001708 	.word	0x20001708
 8001488:	40004400 	.word	0x40004400
 800148c:	0007a120 	.word	0x0007a120

08001490 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <MX_DMA_Init+0x78>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a1a      	ldr	r2, [pc, #104]	; (8001508 <MX_DMA_Init+0x78>)
 80014a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <MX_DMA_Init+0x78>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_DMA_Init+0x78>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a13      	ldr	r2, [pc, #76]	; (8001508 <MX_DMA_Init+0x78>)
 80014bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_DMA_Init+0x78>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	2010      	movs	r0, #16
 80014d4:	f001 fbf1 	bl	8002cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014d8:	2010      	movs	r0, #16
 80014da:	f001 fc0a 	bl	8002cf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2011      	movs	r0, #17
 80014e4:	f001 fbe9 	bl	8002cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80014e8:	2011      	movs	r0, #17
 80014ea:	f001 fc02 	bl	8002cf2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	203a      	movs	r0, #58	; 0x3a
 80014f4:	f001 fbe1 	bl	8002cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014f8:	203a      	movs	r0, #58	; 0x3a
 80014fa:	f001 fbfa 	bl	8002cf2 <HAL_NVIC_EnableIRQ>

}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800

0800150c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b55      	ldr	r3, [pc, #340]	; (800167c <MX_GPIO_Init+0x170>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a54      	ldr	r2, [pc, #336]	; (800167c <MX_GPIO_Init+0x170>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b52      	ldr	r3, [pc, #328]	; (800167c <MX_GPIO_Init+0x170>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b4e      	ldr	r3, [pc, #312]	; (800167c <MX_GPIO_Init+0x170>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a4d      	ldr	r2, [pc, #308]	; (800167c <MX_GPIO_Init+0x170>)
 8001548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b4b      	ldr	r3, [pc, #300]	; (800167c <MX_GPIO_Init+0x170>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	4b47      	ldr	r3, [pc, #284]	; (800167c <MX_GPIO_Init+0x170>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a46      	ldr	r2, [pc, #280]	; (800167c <MX_GPIO_Init+0x170>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b44      	ldr	r3, [pc, #272]	; (800167c <MX_GPIO_Init+0x170>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b40      	ldr	r3, [pc, #256]	; (800167c <MX_GPIO_Init+0x170>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a3f      	ldr	r2, [pc, #252]	; (800167c <MX_GPIO_Init+0x170>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b3d      	ldr	r3, [pc, #244]	; (800167c <MX_GPIO_Init+0x170>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001598:	4839      	ldr	r0, [pc, #228]	; (8001680 <MX_GPIO_Init+0x174>)
 800159a:	f002 fb3f 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	f240 4131 	movw	r1, #1073	; 0x431
 80015a4:	4837      	ldr	r0, [pc, #220]	; (8001684 <MX_GPIO_Init+0x178>)
 80015a6:	f002 fb39 	bl	8003c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015b0:	4b35      	ldr	r3, [pc, #212]	; (8001688 <MX_GPIO_Init+0x17c>)
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4833      	ldr	r0, [pc, #204]	; (800168c <MX_GPIO_Init+0x180>)
 80015c0:	f002 f982 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80015c4:	f44f 7390 	mov.w	r3, #288	; 0x120
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4828      	ldr	r0, [pc, #160]	; (8001680 <MX_GPIO_Init+0x174>)
 80015de:	f002 f973 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 80015e2:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 80015e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <MX_GPIO_Init+0x184>)
 80015ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015ec:	2302      	movs	r3, #2
 80015ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	4822      	ldr	r0, [pc, #136]	; (8001680 <MX_GPIO_Init+0x174>)
 80015f8:	f002 f966 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80015fc:	f240 4331 	movw	r3, #1073	; 0x431
 8001600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	481b      	ldr	r0, [pc, #108]	; (8001684 <MX_GPIO_Init+0x178>)
 8001616:	f002 f957 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800161a:	2308      	movs	r3, #8
 800161c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001626:	2303      	movs	r3, #3
 8001628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800162a:	2306      	movs	r3, #6
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	4813      	ldr	r0, [pc, #76]	; (8001684 <MX_GPIO_Init+0x178>)
 8001636:	f002 f947 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800163a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800163e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MX_GPIO_Init+0x184>)
 8001642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001644:	2302      	movs	r3, #2
 8001646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	480d      	ldr	r0, [pc, #52]	; (8001684 <MX_GPIO_Init+0x178>)
 8001650:	f002 f93a 	bl	80038c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2100      	movs	r1, #0
 8001658:	2017      	movs	r0, #23
 800165a:	f001 fb2e 	bl	8002cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800165e:	2017      	movs	r0, #23
 8001660:	f001 fb47 	bl	8002cf2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	2028      	movs	r0, #40	; 0x28
 800166a:	f001 fb26 	bl	8002cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800166e:	2028      	movs	r0, #40	; 0x28
 8001670:	f001 fb3f 	bl	8002cf2 <HAL_NVIC_EnableIRQ>

}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40023800 	.word	0x40023800
 8001680:	40020000 	.word	0x40020000
 8001684:	40020400 	.word	0x40020400
 8001688:	10210000 	.word	0x10210000
 800168c:	40020800 	.word	0x40020800
 8001690:	10110000 	.word	0x10110000

08001694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <SD_ReceiveByte>:
#include "main.h"

extern SPI_HandleTypeDef hspi2;

uint8_t SD_ReceiveByte(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80016aa:	23ff      	movs	r3, #255	; 0xff
 80016ac:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, 100);
 80016ae:	1dba      	adds	r2, r7, #6
 80016b0:	1df9      	adds	r1, r7, #7
 80016b2:	2364      	movs	r3, #100	; 0x64
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2301      	movs	r3, #1
 80016b8:	4803      	ldr	r0, [pc, #12]	; (80016c8 <SD_ReceiveByte+0x24>)
 80016ba:	f003 faa2 	bl	8004c02 <HAL_SPI_TransmitReceive>

	return data;
 80016be:	79bb      	ldrb	r3, [r7, #6]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000080 	.word	0x20000080

080016cc <SD_SendCommand>:

uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
	// wait for SD to become ready
	uint32_t ticksstart = HAL_GetTick();
 80016d8:	f000 fdf6 	bl	80022c8 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]
	uint8_t res = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	73fb      	strb	r3, [r7, #15]
	do
	{
		res = SD_ReceiveByte();
 80016e2:	f7ff ffdf 	bl	80016a4 <SD_ReceiveByte>
 80016e6:	4603      	mov	r3, r0
 80016e8:	73fb      	strb	r3, [r7, #15]
	} while (((HAL_GetTick() - ticksstart) >= 500) && (res != 0xff));
 80016ea:	f000 fded 	bl	80022c8 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016f8:	d302      	bcc.n	8001700 <SD_SendCommand+0x34>
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	2bff      	cmp	r3, #255	; 0xff
 80016fe:	d1f0      	bne.n	80016e2 <SD_SendCommand+0x16>

	uint8_t cmdbuffer[6];
	cmdbuffer[0] = 0x40 | cmd;
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001706:	b2db      	uxtb	r3, r3
 8001708:	723b      	strb	r3, [r7, #8]
	cmdbuffer[1] = (uint8_t)(arg >> 24);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	0e1b      	lsrs	r3, r3, #24
 800170e:	b2db      	uxtb	r3, r3
 8001710:	727b      	strb	r3, [r7, #9]
	cmdbuffer[2] = (uint8_t)(arg >> 16);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	0c1b      	lsrs	r3, r3, #16
 8001716:	b2db      	uxtb	r3, r3
 8001718:	72bb      	strb	r3, [r7, #10]
	cmdbuffer[3] = (uint8_t)(arg >> 8);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	b2db      	uxtb	r3, r3
 8001720:	72fb      	strb	r3, [r7, #11]
	cmdbuffer[4] = (uint8_t)arg;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	733b      	strb	r3, [r7, #12]

	// crc
	if(cmd == 0)
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d102      	bne.n	8001734 <SD_SendCommand+0x68>
		cmdbuffer[5] = 0x95;	// CRC for CMD0
 800172e:	2395      	movs	r3, #149	; 0x95
 8001730:	737b      	strb	r3, [r7, #13]
 8001732:	e007      	b.n	8001744 <SD_SendCommand+0x78>
	else if (cmd == 8)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	2b08      	cmp	r3, #8
 8001738:	d102      	bne.n	8001740 <SD_SendCommand+0x74>
		cmdbuffer[5] = 0x87;	// CRC for CMD8 (with 32-bit argument = 0x1AA)
 800173a:	2387      	movs	r3, #135	; 0x87
 800173c:	737b      	strb	r3, [r7, #13]
 800173e:	e001      	b.n	8001744 <SD_SendCommand+0x78>
	else
		cmdbuffer[5] = 1;
 8001740:	2301      	movs	r3, #1
 8001742:	737b      	strb	r3, [r7, #13]

	// transmit command
	HAL_SPI_Transmit(&hspi2, cmdbuffer, 6, 100);
 8001744:	f107 0108 	add.w	r1, r7, #8
 8001748:	2364      	movs	r3, #100	; 0x64
 800174a:	2206      	movs	r2, #6
 800174c:	480b      	ldr	r0, [pc, #44]	; (800177c <SD_SendCommand+0xb0>)
 800174e:	f003 f81b 	bl	8004788 <HAL_SPI_Transmit>

	// read response code
	uint8_t n = 10;
 8001752:	230a      	movs	r3, #10
 8001754:	75fb      	strb	r3, [r7, #23]
	do
	{
		res = SD_ReceiveByte();
 8001756:	f7ff ffa5 	bl	80016a4 <SD_ReceiveByte>
 800175a:	4603      	mov	r3, r0
 800175c:	73fb      	strb	r3, [r7, #15]
		n--;
 800175e:	7dfb      	ldrb	r3, [r7, #23]
 8001760:	3b01      	subs	r3, #1
 8001762:	75fb      	strb	r3, [r7, #23]
	} while ((res & 0x80) && (n > 0));
 8001764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001768:	2b00      	cmp	r3, #0
 800176a:	da02      	bge.n	8001772 <SD_SendCommand+0xa6>
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f1      	bne.n	8001756 <SD_SendCommand+0x8a>

	return res;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000080 	.word	0x20000080

08001780 <Deselect>:

void Deselect()
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	// set chipselect high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8001784:	2201      	movs	r2, #1
 8001786:	2101      	movs	r1, #1
 8001788:	4803      	ldr	r0, [pc, #12]	; (8001798 <Deselect+0x18>)
 800178a:	f002 fa47 	bl	8003c1c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800178e:	2001      	movs	r0, #1
 8001790:	f000 fda6 	bl	80022e0 <HAL_Delay>
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40020400 	.word	0x40020400

0800179c <Select>:

void Select()
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	// set chipselect low
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2101      	movs	r1, #1
 80017a4:	4803      	ldr	r0, [pc, #12]	; (80017b4 <Select+0x18>)
 80017a6:	f002 fa39 	bl	8003c1c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80017aa:	2001      	movs	r0, #1
 80017ac:	f000 fd98 	bl	80022e0 <HAL_Delay>
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40020400 	.word	0x40020400

080017b8 <SD_Init>:

uint8_t SD_Init()
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
	Deselect();
 80017be:	f7ff ffdf 	bl	8001780 <Deselect>

	uint8_t dummy = 0xff;
 80017c2:	23ff      	movs	r3, #255	; 0xff
 80017c4:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < 10; i++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	e009      	b.n	80017e0 <SD_Init+0x28>
	{
	  HAL_SPI_Transmit(&hspi2, &dummy, 1, 100);
 80017cc:	f107 010b 	add.w	r1, r7, #11
 80017d0:	2364      	movs	r3, #100	; 0x64
 80017d2:	2201      	movs	r2, #1
 80017d4:	482d      	ldr	r0, [pc, #180]	; (800188c <SD_Init+0xd4>)
 80017d6:	f002 ffd7 	bl	8004788 <HAL_SPI_Transmit>
	for (int i = 0; i < 10; i++)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	2b09      	cmp	r3, #9
 80017e4:	ddf2      	ble.n	80017cc <SD_Init+0x14>
	}

	Select();
 80017e6:	f7ff ffd9 	bl	800179c <Select>

	// send command 0
	if (SD_SendCommand(0, 0) != 1)
 80017ea:	2100      	movs	r1, #0
 80017ec:	2000      	movs	r0, #0
 80017ee:	f7ff ff6d 	bl	80016cc <SD_SendCommand>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d001      	beq.n	80017fc <SD_Init+0x44>
		return 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	e042      	b.n	8001882 <SD_Init+0xca>

	// send command 8
	if (SD_SendCommand(8, 0x1aa) != 1)
 80017fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001800:	2008      	movs	r0, #8
 8001802:	f7ff ff63 	bl	80016cc <SD_SendCommand>
 8001806:	4603      	mov	r3, r0
 8001808:	2b01      	cmp	r3, #1
 800180a:	d001      	beq.n	8001810 <SD_Init+0x58>
		return 0;
 800180c:	2300      	movs	r3, #0
 800180e:	e038      	b.n	8001882 <SD_Init+0xca>

	// read R7 response, after CMD8
	uint8_t cmd8return[4];
	for (int i = 0; i < 4; i++)
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	e00b      	b.n	800182e <SD_Init+0x76>
		cmd8return[i] = SD_ReceiveByte();
 8001816:	f7ff ff45 	bl	80016a4 <SD_ReceiveByte>
 800181a:	4603      	mov	r3, r0
 800181c:	4619      	mov	r1, r3
 800181e:	1d3a      	adds	r2, r7, #4
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4413      	add	r3, r2
 8001824:	460a      	mov	r2, r1
 8001826:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	3301      	adds	r3, #1
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	2b03      	cmp	r3, #3
 8001832:	ddf0      	ble.n	8001816 <SD_Init+0x5e>

	if ((cmd8return[2] != 1) || (cmd8return[3] != 0xaa))
 8001834:	79bb      	ldrb	r3, [r7, #6]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d102      	bne.n	8001840 <SD_Init+0x88>
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2baa      	cmp	r3, #170	; 0xaa
 800183e:	d001      	beq.n	8001844 <SD_Init+0x8c>
		return 0;
 8001840:	2300      	movs	r3, #0
 8001842:	e01e      	b.n	8001882 <SD_Init+0xca>

	uint32_t ticksstart = HAL_GetTick();
 8001844:	f000 fd40 	bl	80022c8 <HAL_GetTick>
 8001848:	60f8      	str	r0, [r7, #12]
	do
	{
		if (SD_SendCommand(55, 0) <= 1)
 800184a:	2100      	movs	r1, #0
 800184c:	2037      	movs	r0, #55	; 0x37
 800184e:	f7ff ff3d 	bl	80016cc <SD_SendCommand>
 8001852:	4603      	mov	r3, r0
 8001854:	2b01      	cmp	r3, #1
 8001856:	d807      	bhi.n	8001868 <SD_Init+0xb0>
		{
			if (SD_SendCommand(41, 1<< 30) == 0)
 8001858:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800185c:	2029      	movs	r0, #41	; 0x29
 800185e:	f7ff ff35 	bl	80016cc <SD_SendCommand>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <SD_Init+0xc2>
			{
				//ok!
				break;
			}
		}
	} while ((HAL_GetTick() - ticksstart) < 1000);
 8001868:	f000 fd2e 	bl	80022c8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001876:	d3e8      	bcc.n	800184a <SD_Init+0x92>
 8001878:	e000      	b.n	800187c <SD_Init+0xc4>
				break;
 800187a:	bf00      	nop

	//add a check here for standard vs high capacity card (Command 58)

	Deselect();
 800187c:	f7ff ff80 	bl	8001780 <Deselect>

	return 1;
 8001880:	2301      	movs	r3, #1
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000080 	.word	0x20000080

08001890 <SD_RxDataBlock>:


uint8_t SD_RxDataBlock(uint8_t* buff)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	uint8_t token;

	uint32_t ticksstart = HAL_GetTick();
 8001898:	f000 fd16 	bl	80022c8 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

	// loop until receive a response or timeout
	do
	{
		token = SD_ReceiveByte();
 800189e:	f7ff ff01 	bl	80016a4 <SD_ReceiveByte>
 80018a2:	4603      	mov	r3, r0
 80018a4:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && ((HAL_GetTick() - ticksstart) < 200));
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	2bff      	cmp	r3, #255	; 0xff
 80018aa:	d106      	bne.n	80018ba <SD_RxDataBlock+0x2a>
 80018ac:	f000 fd0c 	bl	80022c8 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2bc7      	cmp	r3, #199	; 0xc7
 80018b8:	d9f1      	bls.n	800189e <SD_RxDataBlock+0xe>

	// check for invalid response
	if(token != 0xFE)
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	2bfe      	cmp	r3, #254	; 0xfe
 80018be:	d001      	beq.n	80018c4 <SD_RxDataBlock+0x34>
		return 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	e015      	b.n	80018f0 <SD_RxDataBlock+0x60>

	// receive data
	for (int i = 0; i < 512; i++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e009      	b.n	80018de <SD_RxDataBlock+0x4e>
	{
		buff[i] = SD_ReceiveByte();
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	18d4      	adds	r4, r2, r3
 80018d0:	f7ff fee8 	bl	80016a4 <SD_ReceiveByte>
 80018d4:	4603      	mov	r3, r0
 80018d6:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < 512; i++)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3301      	adds	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018e4:	dbf1      	blt.n	80018ca <SD_RxDataBlock+0x3a>
	}

	// read and discard CRC
	SD_ReceiveByte();
 80018e6:	f7ff fedd 	bl	80016a4 <SD_ReceiveByte>
	SD_ReceiveByte();
 80018ea:	f7ff fedb 	bl	80016a4 <SD_ReceiveByte>

	// return success
	return 1;
 80018ee:	2301      	movs	r3, #1

}
 80018f0:	4618      	mov	r0, r3
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}

080018f8 <SD_Read>:

uint8_t SD_Read(uint8_t* rxbuffer, uint32_t address, uint32_t numblocks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
	uint32_t sector = address >> 9;
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	0a5b      	lsrs	r3, r3, #9
 8001908:	613b      	str	r3, [r7, #16]

	Select();
 800190a:	f7ff ff47 	bl	800179c <Select>

	if (numblocks == 1)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d10d      	bne.n	8001930 <SD_Read+0x38>
	{
		// read single block
		if (SD_SendCommand(17, sector) != 0)
 8001914:	6939      	ldr	r1, [r7, #16]
 8001916:	2011      	movs	r0, #17
 8001918:	f7ff fed8 	bl	80016cc <SD_SendCommand>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <SD_Read+0x2e>
			return 0;
 8001922:	2300      	movs	r3, #0
 8001924:	e02a      	b.n	800197c <SD_Read+0x84>

		SD_RxDataBlock(rxbuffer);
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f7ff ffb2 	bl	8001890 <SD_RxDataBlock>

		return 1;
 800192c:	2301      	movs	r3, #1
 800192e:	e025      	b.n	800197c <SD_Read+0x84>
	}
	else
	{
		// read multiple blocks
		if (SD_SendCommand(18, sector) != 0)
 8001930:	6939      	ldr	r1, [r7, #16]
 8001932:	2012      	movs	r0, #18
 8001934:	f7ff feca 	bl	80016cc <SD_SendCommand>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <SD_Read+0x4a>
			return 0;
 800193e:	2300      	movs	r3, #0
 8001940:	e01c      	b.n	800197c <SD_Read+0x84>

		for (int i = 0; i < numblocks; i++)
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	e00c      	b.n	8001962 <SD_Read+0x6a>
		{
			if (!SD_RxDataBlock(rxbuffer))
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f7ff ffa1 	bl	8001890 <SD_RxDataBlock>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00b      	beq.n	800196c <SD_Read+0x74>
				break;

			rxbuffer += 512;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800195a:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < numblocks; i++)
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	3301      	adds	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	429a      	cmp	r2, r3
 8001968:	d8ee      	bhi.n	8001948 <SD_Read+0x50>
 800196a:	e000      	b.n	800196e <SD_Read+0x76>
				break;
 800196c:	bf00      	nop
		}

		// stop receiving
		SD_SendCommand(12, 0);
 800196e:	2100      	movs	r1, #0
 8001970:	200c      	movs	r0, #12
 8001972:	f7ff feab 	bl	80016cc <SD_SendCommand>
	}

	Deselect();
 8001976:	f7ff ff03 	bl	8001780 <Deselect>

	return 1;
 800197a:	2301      	movs	r3, #1
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <SD_TxDataBlock>:

uint8_t SD_TxDataBlock(uint8_t *buff, uint8_t token)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	75fb      	strb	r3, [r7, #23]
	uint8_t crc[2] = {0, 0};
 8001994:	2300      	movs	r3, #0
 8001996:	733b      	strb	r3, [r7, #12]
 8001998:	2300      	movs	r3, #0
 800199a:	737b      	strb	r3, [r7, #13]

	// transmit token
	HAL_SPI_Transmit(&hspi2, &token, 1, 100);
 800199c:	1cf9      	adds	r1, r7, #3
 800199e:	2364      	movs	r3, #100	; 0x64
 80019a0:	2201      	movs	r2, #1
 80019a2:	481b      	ldr	r0, [pc, #108]	; (8001a10 <SD_TxDataBlock+0x8c>)
 80019a4:	f002 fef0 	bl	8004788 <HAL_SPI_Transmit>

	// transmit data bytes
	HAL_SPI_Transmit(&hspi2, buff, 512, 100);
 80019a8:	2364      	movs	r3, #100	; 0x64
 80019aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4817      	ldr	r0, [pc, #92]	; (8001a10 <SD_TxDataBlock+0x8c>)
 80019b2:	f002 fee9 	bl	8004788 <HAL_SPI_Transmit>

	// transmit dummy crc
	HAL_SPI_Transmit(&hspi2, crc, 2, 100);
 80019b6:	f107 010c 	add.w	r1, r7, #12
 80019ba:	2364      	movs	r3, #100	; 0x64
 80019bc:	2202      	movs	r2, #2
 80019be:	4814      	ldr	r0, [pc, #80]	; (8001a10 <SD_TxDataBlock+0x8c>)
 80019c0:	f002 fee2 	bl	8004788 <HAL_SPI_Transmit>

	// wait for data response token
	for (int i = 0; i < 64; i++)
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	e00b      	b.n	80019e2 <SD_TxDataBlock+0x5e>
	{
		resp = SD_ReceiveByte();
 80019ca:	f7ff fe6b 	bl	80016a4 <SD_ReceiveByte>
 80019ce:	4603      	mov	r3, r0
 80019d0:	75fb      	strb	r3, [r7, #23]

		if ((resp & 0x1F) == 0x05)
 80019d2:	7dfb      	ldrb	r3, [r7, #23]
 80019d4:	f003 031f 	and.w	r3, r3, #31
 80019d8:	2b05      	cmp	r3, #5
 80019da:	d006      	beq.n	80019ea <SD_TxDataBlock+0x66>
	for (int i = 0; i < 64; i++)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	3301      	adds	r3, #1
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	2b3f      	cmp	r3, #63	; 0x3f
 80019e6:	ddf0      	ble.n	80019ca <SD_TxDataBlock+0x46>
 80019e8:	e000      	b.n	80019ec <SD_TxDataBlock+0x68>
			break;
 80019ea:	bf00      	nop
	}

	// now wait for programming to finish. TO DO: add a timeout here...
	while (SD_ReceiveByte() == 0);
 80019ec:	bf00      	nop
 80019ee:	f7ff fe59 	bl	80016a4 <SD_ReceiveByte>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0fa      	beq.n	80019ee <SD_TxDataBlock+0x6a>

	// return success if data was accepted
	if ((resp & 0x1F) == 0x05)
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d101      	bne.n	8001a06 <SD_TxDataBlock+0x82>
		return 1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <SD_TxDataBlock+0x84>

	return 0;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000080 	.word	0x20000080

08001a14 <SD_Write>:

uint8_t SD_Write(uint8_t* txbuffer, uint32_t address, uint32_t numblocks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
	Select();
 8001a20:	f7ff febc 	bl	800179c <Select>

	uint32_t sector = address >> 9;
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	0a5b      	lsrs	r3, r3, #9
 8001a28:	61bb      	str	r3, [r7, #24]

	if (numblocks == 1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d10b      	bne.n	8001a48 <SD_Write+0x34>
	{
		if (SD_SendCommand(24, sector) == 0)
 8001a30:	69b9      	ldr	r1, [r7, #24]
 8001a32:	2018      	movs	r0, #24
 8001a34:	f7ff fe4a 	bl	80016cc <SD_SendCommand>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d12b      	bne.n	8001a96 <SD_Write+0x82>
		{
			SD_TxDataBlock(txbuffer, 0xFE);
 8001a3e:	21fe      	movs	r1, #254	; 0xfe
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f7ff ff9f 	bl	8001984 <SD_TxDataBlock>
 8001a46:	e026      	b.n	8001a96 <SD_Write+0x82>
		}
	}
	else
	{
		if (SD_SendCommand(25, sector) == 0)
 8001a48:	69b9      	ldr	r1, [r7, #24]
 8001a4a:	2019      	movs	r0, #25
 8001a4c:	f7ff fe3e 	bl	80016cc <SD_SendCommand>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d11f      	bne.n	8001a96 <SD_Write+0x82>
		{
			for (int i = 0; i < numblocks; i++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	e00d      	b.n	8001a78 <SD_Write+0x64>
			{
				if (!SD_TxDataBlock(txbuffer, 0xFC))
 8001a5c:	21fc      	movs	r1, #252	; 0xfc
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f7ff ff90 	bl	8001984 <SD_TxDataBlock>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00b      	beq.n	8001a82 <SD_Write+0x6e>
					break;

				txbuffer += 512;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a70:	60fb      	str	r3, [r7, #12]
			for (int i = 0; i < numblocks; i++)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3301      	adds	r3, #1
 8001a76:	61fb      	str	r3, [r7, #28]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d8ed      	bhi.n	8001a5c <SD_Write+0x48>
 8001a80:	e000      	b.n	8001a84 <SD_Write+0x70>
					break;
 8001a82:	bf00      	nop
			}

			uint8_t token = 0xFD;
 8001a84:	23fd      	movs	r3, #253	; 0xfd
 8001a86:	75fb      	strb	r3, [r7, #23]
			HAL_SPI_Transmit(&hspi2, &token, 1, 100);
 8001a88:	f107 0117 	add.w	r1, r7, #23
 8001a8c:	2364      	movs	r3, #100	; 0x64
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <SD_Write+0x90>)
 8001a92:	f002 fe79 	bl	8004788 <HAL_SPI_Transmit>
		}
	}

	Deselect();
 8001a96:	f7ff fe73 	bl	8001780 <Deselect>

	return 1;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000080 	.word	0x20000080

08001aa8 <wave_init>:
int16_t sintab[256];
uint16_t offset_440hz;
uint16_t offset_523hz;

void wave_init()
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
	for (int i = 0; i < 256; i++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	e01e      	b.n	8001af2 <wave_init+0x4a>
		sintab[i] = (int) (900.0f * sinf(i * 0.02454369261f));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001abe:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001b0c <wave_init+0x64>
 8001ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aca:	f006 feef 	bl	80088ac <sinf>
 8001ace:	eeb0 7a40 	vmov.f32	s14, s0
 8001ad2:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001b10 <wave_init+0x68>
 8001ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ade:	ee17 3a90 	vmov	r3, s15
 8001ae2:	b219      	sxth	r1, r3
 8001ae4:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <wave_init+0x6c>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 256; i++)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3301      	adds	r3, #1
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2bff      	cmp	r3, #255	; 0xff
 8001af6:	dddd      	ble.n	8001ab4 <wave_init+0xc>

	offset_440hz = 0;
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <wave_init+0x70>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	801a      	strh	r2, [r3, #0]
	offset_523hz = 0;
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <wave_init+0x74>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	801a      	strh	r2, [r3, #0]
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	3cc90fdb 	.word	0x3cc90fdb
 8001b10:	44610000 	.word	0x44610000
 8001b14:	200017b8 	.word	0x200017b8
 8001b18:	200017b6 	.word	0x200017b6
 8001b1c:	200017b4 	.word	0x200017b4

08001b20 <wave_fillbuffer>:


void wave_fillbuffer(uint16_t* buffer, uint8_t type, uint16_t len)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	70fb      	strb	r3, [r7, #3]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	803b      	strh	r3, [r7, #0]
	for (int i = 0; i < len; i++)
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	e05e      	b.n	8001bf4 <wave_fillbuffer+0xd4>
	{
		int16_t sample = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	817b      	strh	r3, [r7, #10]
		switch (type)
 8001b3a:	78fb      	ldrb	r3, [r7, #3]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d014      	beq.n	8001b6a <wave_fillbuffer+0x4a>
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d023      	beq.n	8001b8c <wave_fillbuffer+0x6c>
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d149      	bne.n	8001bdc <wave_fillbuffer+0xbc>
		{
			case 1:
				sample = sintab[offset_440hz >> 8];
 8001b48:	4b2f      	ldr	r3, [pc, #188]	; (8001c08 <wave_fillbuffer+0xe8>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b2e      	ldr	r3, [pc, #184]	; (8001c0c <wave_fillbuffer+0xec>)
 8001b54:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b58:	817b      	strh	r3, [r7, #10]
				offset_440hz += 654;
 8001b5a:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <wave_fillbuffer+0xe8>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	f203 238e 	addw	r3, r3, #654	; 0x28e
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <wave_fillbuffer+0xe8>)
 8001b66:	801a      	strh	r2, [r3, #0]
				break;
 8001b68:	e038      	b.n	8001bdc <wave_fillbuffer+0xbc>
			case 2:
				sample = sintab[offset_523hz >> 8];
 8001b6a:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <wave_fillbuffer+0xf0>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	0a1b      	lsrs	r3, r3, #8
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <wave_fillbuffer+0xec>)
 8001b76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b7a:	817b      	strh	r3, [r7, #10]
				offset_523hz += 777;
 8001b7c:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <wave_fillbuffer+0xf0>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	f203 3309 	addw	r3, r3, #777	; 0x309
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <wave_fillbuffer+0xf0>)
 8001b88:	801a      	strh	r2, [r3, #0]
				break;
 8001b8a:	e027      	b.n	8001bdc <wave_fillbuffer+0xbc>
			case 3:
				sample = (sintab[offset_440hz >> 8] >> 1) + (sintab[offset_523hz >> 8] >> 1);
 8001b8c:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <wave_fillbuffer+0xe8>)
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <wave_fillbuffer+0xec>)
 8001b98:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001b9c:	105b      	asrs	r3, r3, #1
 8001b9e:	b21b      	sxth	r3, r3
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <wave_fillbuffer+0xf0>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4619      	mov	r1, r3
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <wave_fillbuffer+0xec>)
 8001bae:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8001bb2:	105b      	asrs	r3, r3, #1
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	817b      	strh	r3, [r7, #10]
				offset_440hz += 654;
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <wave_fillbuffer+0xe8>)
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	f203 238e 	addw	r3, r3, #654	; 0x28e
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <wave_fillbuffer+0xe8>)
 8001bca:	801a      	strh	r2, [r3, #0]
				offset_523hz += 777;
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <wave_fillbuffer+0xf0>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	f203 3309 	addw	r3, r3, #777	; 0x309
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <wave_fillbuffer+0xf0>)
 8001bd8:	801a      	strh	r2, [r3, #0]
				break;
 8001bda:	bf00      	nop
		}
		buffer[i] = (uint16_t)(sample + 2048);
 8001bdc:	897a      	ldrh	r2, [r7, #10]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	440b      	add	r3, r1
 8001be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bea:	b292      	uxth	r2, r2
 8001bec:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	883b      	ldrh	r3, [r7, #0]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	db9c      	blt.n	8001b36 <wave_fillbuffer+0x16>
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	200017b6 	.word	0x200017b6
 8001c0c:	200017b8 	.word	0x200017b8
 8001c10:	200017b4 	.word	0x200017b4

08001c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <HAL_MspInit+0x4c>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	4a0f      	ldr	r2, [pc, #60]	; (8001c60 <HAL_MspInit+0x4c>)
 8001c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c28:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <HAL_MspInit+0x4c>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_MspInit+0x4c>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a08      	ldr	r2, [pc, #32]	; (8001c60 <HAL_MspInit+0x4c>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_MspInit+0x4c>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c52:	2007      	movs	r0, #7
 8001c54:	f001 f826 	bl	8002ca4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800

08001c64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a2e      	ldr	r2, [pc, #184]	; (8001d3c <HAL_ADC_MspInit+0xd8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d156      	bne.n	8001d34 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <HAL_ADC_MspInit+0xdc>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	4a2c      	ldr	r2, [pc, #176]	; (8001d40 <HAL_ADC_MspInit+0xdc>)
 8001c90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c94:	6453      	str	r3, [r2, #68]	; 0x44
 8001c96:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <HAL_ADC_MspInit+0xdc>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <HAL_ADC_MspInit+0xdc>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a25      	ldr	r2, [pc, #148]	; (8001d40 <HAL_ADC_MspInit+0xdc>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b23      	ldr	r3, [pc, #140]	; (8001d40 <HAL_ADC_MspInit+0xdc>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PC4     ------> ADC2_IN14 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cbe:	2310      	movs	r3, #16
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	481c      	ldr	r0, [pc, #112]	; (8001d44 <HAL_ADC_MspInit+0xe0>)
 8001cd2:	f001 fdf9 	bl	80038c8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <HAL_ADC_MspInit+0xe4>)
 8001cd8:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001cda:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_ADC_MspInit+0xe4>)
 8001cde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_ADC_MspInit+0xe4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_ADC_MspInit+0xe4>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001cf0:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_ADC_MspInit+0xe4>)
 8001cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cf8:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <HAL_ADC_MspInit+0xe4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_ADC_MspInit+0xe4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001d04:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <HAL_ADC_MspInit+0xe4>)
 8001d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d0a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <HAL_ADC_MspInit+0xe4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_ADC_MspInit+0xe4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001d18:	480b      	ldr	r0, [pc, #44]	; (8001d48 <HAL_ADC_MspInit+0xe4>)
 8001d1a:	f001 f9f7 	bl	800310c <HAL_DMA_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001d24:	f7ff fcb6 	bl	8001694 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <HAL_ADC_MspInit+0xe4>)
 8001d2c:	639a      	str	r2, [r3, #56]	; 0x38
 8001d2e:	4a06      	ldr	r2, [pc, #24]	; (8001d48 <HAL_ADC_MspInit+0xe4>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001d34:	bf00      	nop
 8001d36:	3728      	adds	r7, #40	; 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40012100 	.word	0x40012100
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020800 	.word	0x40020800
 8001d48:	20001748 	.word	0x20001748
 8001d4c:	40026440 	.word	0x40026440

08001d50 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a2f      	ldr	r2, [pc, #188]	; (8001e2c <HAL_DAC_MspInit+0xdc>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d157      	bne.n	8001e22 <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <HAL_DAC_MspInit+0xe0>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a2d      	ldr	r2, [pc, #180]	; (8001e30 <HAL_DAC_MspInit+0xe0>)
 8001d7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <HAL_DAC_MspInit+0xe0>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <HAL_DAC_MspInit+0xe0>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a26      	ldr	r2, [pc, #152]	; (8001e30 <HAL_DAC_MspInit+0xe0>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <HAL_DAC_MspInit+0xe0>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001daa:	2310      	movs	r3, #16
 8001dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dae:	2303      	movs	r3, #3
 8001db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	481d      	ldr	r0, [pc, #116]	; (8001e34 <HAL_DAC_MspInit+0xe4>)
 8001dbe:	f001 fd83 	bl	80038c8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_DAC_MspInit+0xe8>)
 8001dc4:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <HAL_DAC_MspInit+0xec>)
 8001dc6:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <HAL_DAC_MspInit+0xe8>)
 8001dca:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001dce:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <HAL_DAC_MspInit+0xe8>)
 8001dd2:	2240      	movs	r2, #64	; 0x40
 8001dd4:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd6:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <HAL_DAC_MspInit+0xe8>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <HAL_DAC_MspInit+0xe8>)
 8001dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001de4:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <HAL_DAC_MspInit+0xe8>)
 8001de6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dea:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_DAC_MspInit+0xe8>)
 8001dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001df2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <HAL_DAC_MspInit+0xe8>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <HAL_DAC_MspInit+0xe8>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <HAL_DAC_MspInit+0xe8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001e06:	480c      	ldr	r0, [pc, #48]	; (8001e38 <HAL_DAC_MspInit+0xe8>)
 8001e08:	f001 f980 	bl	800310c <HAL_DMA_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 8001e12:	f7ff fc3f 	bl	8001694 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a07      	ldr	r2, [pc, #28]	; (8001e38 <HAL_DAC_MspInit+0xe8>)
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	4a06      	ldr	r2, [pc, #24]	; (8001e38 <HAL_DAC_MspInit+0xe8>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001e22:	bf00      	nop
 8001e24:	3728      	adds	r7, #40	; 0x28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40007400 	.word	0x40007400
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020000 	.word	0x40020000
 8001e38:	20000b70 	.word	0x20000b70
 8001e3c:	40026088 	.word	0x40026088

08001e40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a30      	ldr	r2, [pc, #192]	; (8001f20 <HAL_SPI_MspInit+0xe0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d15a      	bne.n	8001f18 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <HAL_SPI_MspInit+0xe4>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a2e      	ldr	r2, [pc, #184]	; (8001f24 <HAL_SPI_MspInit+0xe4>)
 8001e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b2c      	ldr	r3, [pc, #176]	; (8001f24 <HAL_SPI_MspInit+0xe4>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <HAL_SPI_MspInit+0xe4>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a27      	ldr	r2, [pc, #156]	; (8001f24 <HAL_SPI_MspInit+0xe4>)
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <HAL_SPI_MspInit+0xe4>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <HAL_SPI_MspInit+0xe4>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a20      	ldr	r2, [pc, #128]	; (8001f24 <HAL_SPI_MspInit+0xe4>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <HAL_SPI_MspInit+0xe4>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4815      	ldr	r0, [pc, #84]	; (8001f28 <HAL_SPI_MspInit+0xe8>)
 8001ed2:	f001 fcf9 	bl	80038c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480d      	ldr	r0, [pc, #52]	; (8001f28 <HAL_SPI_MspInit+0xe8>)
 8001ef2:	f001 fce9 	bl	80038c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f08:	2305      	movs	r3, #5
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	4806      	ldr	r0, [pc, #24]	; (8001f2c <HAL_SPI_MspInit+0xec>)
 8001f14:	f001 fcd8 	bl	80038c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f18:	bf00      	nop
 8001f1a:	3728      	adds	r7, #40	; 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40003800 	.word	0x40003800
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40020400 	.word	0x40020400

08001f30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f40:	d10e      	bne.n	8001f60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <HAL_TIM_Base_MspInit+0x64>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <HAL_TIM_Base_MspInit+0x64>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6413      	str	r3, [r2, #64]	; 0x40
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <HAL_TIM_Base_MspInit+0x64>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001f5e:	e012      	b.n	8001f86 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0c      	ldr	r2, [pc, #48]	; (8001f98 <HAL_TIM_Base_MspInit+0x68>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d10d      	bne.n	8001f86 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_TIM_Base_MspInit+0x64>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <HAL_TIM_Base_MspInit+0x64>)
 8001f74:	f043 0310 	orr.w	r3, r3, #16
 8001f78:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_TIM_Base_MspInit+0x64>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40001000 	.word	0x40001000

08001f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a30      	ldr	r2, [pc, #192]	; (800207c <HAL_UART_MspInit+0xe0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d159      	bne.n	8002072 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	4b2f      	ldr	r3, [pc, #188]	; (8002080 <HAL_UART_MspInit+0xe4>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	4a2e      	ldr	r2, [pc, #184]	; (8002080 <HAL_UART_MspInit+0xe4>)
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fce:	4b2c      	ldr	r3, [pc, #176]	; (8002080 <HAL_UART_MspInit+0xe4>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b28      	ldr	r3, [pc, #160]	; (8002080 <HAL_UART_MspInit+0xe4>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a27      	ldr	r2, [pc, #156]	; (8002080 <HAL_UART_MspInit+0xe4>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_UART_MspInit+0xe4>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ff6:	230c      	movs	r3, #12
 8001ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002002:	2303      	movs	r3, #3
 8002004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002006:	2307      	movs	r3, #7
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4619      	mov	r1, r3
 8002010:	481c      	ldr	r0, [pc, #112]	; (8002084 <HAL_UART_MspInit+0xe8>)
 8002012:	f001 fc59 	bl	80038c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002016:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <HAL_UART_MspInit+0xec>)
 8002018:	4a1c      	ldr	r2, [pc, #112]	; (800208c <HAL_UART_MspInit+0xf0>)
 800201a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800201c:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <HAL_UART_MspInit+0xec>)
 800201e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002022:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_UART_MspInit+0xec>)
 8002026:	2240      	movs	r2, #64	; 0x40
 8002028:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800202a:	4b17      	ldr	r3, [pc, #92]	; (8002088 <HAL_UART_MspInit+0xec>)
 800202c:	2200      	movs	r2, #0
 800202e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002030:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_UART_MspInit+0xec>)
 8002032:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002036:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002038:	4b13      	ldr	r3, [pc, #76]	; (8002088 <HAL_UART_MspInit+0xec>)
 800203a:	2200      	movs	r2, #0
 800203c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_UART_MspInit+0xec>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002044:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_UART_MspInit+0xec>)
 8002046:	2200      	movs	r2, #0
 8002048:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <HAL_UART_MspInit+0xec>)
 800204c:	2200      	movs	r2, #0
 800204e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_UART_MspInit+0xec>)
 8002052:	2200      	movs	r2, #0
 8002054:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002056:	480c      	ldr	r0, [pc, #48]	; (8002088 <HAL_UART_MspInit+0xec>)
 8002058:	f001 f858 	bl	800310c <HAL_DMA_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002062:	f7ff fb17 	bl	8001694 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a07      	ldr	r2, [pc, #28]	; (8002088 <HAL_UART_MspInit+0xec>)
 800206a:	631a      	str	r2, [r3, #48]	; 0x30
 800206c:	4a06      	ldr	r2, [pc, #24]	; (8002088 <HAL_UART_MspInit+0xec>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002072:	bf00      	nop
 8002074:	3728      	adds	r7, #40	; 0x28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40004400 	.word	0x40004400
 8002080:	40023800 	.word	0x40023800
 8002084:	40020000 	.word	0x40020000
 8002088:	20000e0c 	.word	0x20000e0c
 800208c:	400260a0 	.word	0x400260a0

08002090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a2:	e7fe      	b.n	80020a2 <HardFault_Handler+0x4>

080020a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <MemManage_Handler+0x4>

080020aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <BusFault_Handler+0x4>

080020b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <UsageFault_Handler+0x4>

080020b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e4:	f000 f8dc 	bl	80022a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <DMA1_Stream5_IRQHandler+0x10>)
 80020f2:	f001 f981 	bl	80033f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000b70 	.word	0x20000b70

08002100 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <DMA1_Stream6_IRQHandler+0x10>)
 8002106:	f001 f977 	bl	80033f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000e0c 	.word	0x20000e0c

08002114 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	exti = on;
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <EXTI9_5_IRQHandler+0x2c>)
 800211a:	2201      	movs	r2, #1
 800211c:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800211e:	2040      	movs	r0, #64	; 0x40
 8002120:	f001 fd96 	bl	8003c50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002124:	2080      	movs	r0, #128	; 0x80
 8002126:	f001 fd93 	bl	8003c50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800212a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800212e:	f001 fd8f 	bl	8003c50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002132:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002136:	f001 fd8b 	bl	8003c50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000bd0 	.word	0x20000bd0

08002144 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	exti = on;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <EXTI15_10_IRQHandler+0x20>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800214e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002152:	f001 fd7d 	bl	8003c50 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002156:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800215a:	f001 fd79 	bl	8003c50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000bd0 	.word	0x20000bd0

08002168 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <DMA2_Stream2_IRQHandler+0x10>)
 800216e:	f001 f943 	bl	80033f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20001748 	.word	0x20001748

0800217c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <SystemInit+0x28>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <SystemInit+0x28>)
 8002188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800218c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <SystemInit+0x28>)
 8002192:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002196:	609a      	str	r2, [r3, #8]
#endif
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021ae:	e003      	b.n	80021b8 <LoopCopyDataInit>

080021b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021b6:	3104      	adds	r1, #4

080021b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021b8:	480b      	ldr	r0, [pc, #44]	; (80021e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021ba:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021c0:	d3f6      	bcc.n	80021b0 <CopyDataInit>
  ldr  r2, =_sbss
 80021c2:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80021c4:	e002      	b.n	80021cc <LoopFillZerobss>

080021c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021c8:	f842 3b04 	str.w	r3, [r2], #4

080021cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80021ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021d0:	d3f9      	bcc.n	80021c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021d2:	f7ff ffd3 	bl	800217c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021d6:	f006 fb3d 	bl	8008854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021da:	f7fe fb01 	bl	80007e0 <main>
  bx  lr    
 80021de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80021e4:	08009a9c 	.word	0x08009a9c
  ldr  r0, =_sdata
 80021e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021ec:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 80021f0:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 80021f4:	20001e24 	.word	0x20001e24

080021f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021f8:	e7fe      	b.n	80021f8 <ADC_IRQHandler>
	...

080021fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002200:	4b0e      	ldr	r3, [pc, #56]	; (800223c <HAL_Init+0x40>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0d      	ldr	r2, [pc, #52]	; (800223c <HAL_Init+0x40>)
 8002206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_Init+0x40>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0a      	ldr	r2, [pc, #40]	; (800223c <HAL_Init+0x40>)
 8002212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002216:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002218:	4b08      	ldr	r3, [pc, #32]	; (800223c <HAL_Init+0x40>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a07      	ldr	r2, [pc, #28]	; (800223c <HAL_Init+0x40>)
 800221e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002224:	2003      	movs	r0, #3
 8002226:	f000 fd3d 	bl	8002ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800222a:	2000      	movs	r0, #0
 800222c:	f000 f808 	bl	8002240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002230:	f7ff fcf0 	bl	8001c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40023c00 	.word	0x40023c00

08002240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_InitTick+0x54>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_InitTick+0x58>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4619      	mov	r1, r3
 8002252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002256:	fbb3 f3f1 	udiv	r3, r3, r1
 800225a:	fbb2 f3f3 	udiv	r3, r2, r3
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fd55 	bl	8002d0e <HAL_SYSTICK_Config>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e00e      	b.n	800228c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b0f      	cmp	r3, #15
 8002272:	d80a      	bhi.n	800228a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002274:	2200      	movs	r2, #0
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	f000 fd1d 	bl	8002cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002280:	4a06      	ldr	r2, [pc, #24]	; (800229c <HAL_InitTick+0x5c>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	e000      	b.n	800228c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000004 	.word	0x20000004
 8002298:	2000000c 	.word	0x2000000c
 800229c:	20000008 	.word	0x20000008

080022a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_IncTick+0x20>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_IncTick+0x24>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <HAL_IncTick+0x24>)
 80022b2:	6013      	str	r3, [r2, #0]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	2000000c 	.word	0x2000000c
 80022c4:	200019b8 	.word	0x200019b8

080022c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return uwTick;
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <HAL_GetTick+0x14>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	200019b8 	.word	0x200019b8

080022e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e8:	f7ff ffee 	bl	80022c8 <HAL_GetTick>
 80022ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d005      	beq.n	8002306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_Delay+0x40>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002306:	bf00      	nop
 8002308:	f7ff ffde 	bl	80022c8 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	429a      	cmp	r2, r3
 8002316:	d8f7      	bhi.n	8002308 <HAL_Delay+0x28>
  {
  }
}
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	2000000c 	.word	0x2000000c

08002324 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e033      	b.n	80023a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff fc8e 	bl	8001c64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	d118      	bne.n	8002394 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800236a:	f023 0302 	bic.w	r3, r3, #2
 800236e:	f043 0202 	orr.w	r2, r3, #2
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fa46 	bl	8002808 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f023 0303 	bic.w	r3, r3, #3
 800238a:	f043 0201 	orr.w	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
 8002392:	e001      	b.n	8002398 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_Start_DMA+0x1e>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e0cc      	b.n	8002564 <HAL_ADC_Start_DMA+0x1b8>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d018      	beq.n	8002412 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023f0:	4b5e      	ldr	r3, [pc, #376]	; (800256c <HAL_ADC_Start_DMA+0x1c0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a5e      	ldr	r2, [pc, #376]	; (8002570 <HAL_ADC_Start_DMA+0x1c4>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	0c9a      	lsrs	r2, r3, #18
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002404:	e002      	b.n	800240c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	3b01      	subs	r3, #1
 800240a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f9      	bne.n	8002406 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b01      	cmp	r3, #1
 800241e:	f040 80a0 	bne.w	8002562 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800242a:	f023 0301 	bic.w	r3, r3, #1
 800242e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800244c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800245c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002460:	d106      	bne.n	8002470 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f023 0206 	bic.w	r2, r3, #6
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	645a      	str	r2, [r3, #68]	; 0x44
 800246e:	e002      	b.n	8002476 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800247e:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <HAL_ADC_Start_DMA+0x1c8>)
 8002480:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	4a3c      	ldr	r2, [pc, #240]	; (8002578 <HAL_ADC_Start_DMA+0x1cc>)
 8002488:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248e:	4a3b      	ldr	r2, [pc, #236]	; (800257c <HAL_ADC_Start_DMA+0x1d0>)
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	4a3a      	ldr	r2, [pc, #232]	; (8002580 <HAL_ADC_Start_DMA+0x1d4>)
 8002498:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80024b2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	334c      	adds	r3, #76	; 0x4c
 80024ce:	4619      	mov	r1, r3
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f000 fec8 	bl	8003268 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d12a      	bne.n	800253a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a26      	ldr	r2, [pc, #152]	; (8002584 <HAL_ADC_Start_DMA+0x1d8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d015      	beq.n	800251a <HAL_ADC_Start_DMA+0x16e>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a25      	ldr	r2, [pc, #148]	; (8002588 <HAL_ADC_Start_DMA+0x1dc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d105      	bne.n	8002504 <HAL_ADC_Start_DMA+0x158>
 80024f8:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <HAL_ADC_Start_DMA+0x1c8>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a20      	ldr	r2, [pc, #128]	; (800258c <HAL_ADC_Start_DMA+0x1e0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d129      	bne.n	8002562 <HAL_ADC_Start_DMA+0x1b6>
 800250e:	4b19      	ldr	r3, [pc, #100]	; (8002574 <HAL_ADC_Start_DMA+0x1c8>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	2b0f      	cmp	r3, #15
 8002518:	d823      	bhi.n	8002562 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d11c      	bne.n	8002562 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	e013      	b.n	8002562 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a11      	ldr	r2, [pc, #68]	; (8002584 <HAL_ADC_Start_DMA+0x1d8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d10e      	bne.n	8002562 <HAL_ADC_Start_DMA+0x1b6>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d107      	bne.n	8002562 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002560:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000004 	.word	0x20000004
 8002570:	431bde83 	.word	0x431bde83
 8002574:	40012300 	.word	0x40012300
 8002578:	08002a01 	.word	0x08002a01
 800257c:	08002abb 	.word	0x08002abb
 8002580:	08002ad7 	.word	0x08002ad7
 8002584:	40012000 	.word	0x40012000
 8002588:	40012100 	.word	0x40012100
 800258c:	40012200 	.word	0x40012200

08002590 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x1c>
 80025bc:	2302      	movs	r3, #2
 80025be:	e113      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x244>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b09      	cmp	r3, #9
 80025ce:	d925      	bls.n	800261c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68d9      	ldr	r1, [r3, #12]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	4613      	mov	r3, r2
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	4413      	add	r3, r2
 80025e4:	3b1e      	subs	r3, #30
 80025e6:	2207      	movs	r2, #7
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43da      	mvns	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	400a      	ands	r2, r1
 80025f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68d9      	ldr	r1, [r3, #12]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	b29b      	uxth	r3, r3
 8002606:	4618      	mov	r0, r3
 8002608:	4603      	mov	r3, r0
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4403      	add	r3, r0
 800260e:	3b1e      	subs	r3, #30
 8002610:	409a      	lsls	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	e022      	b.n	8002662 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6919      	ldr	r1, [r3, #16]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	b29b      	uxth	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	2207      	movs	r2, #7
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	400a      	ands	r2, r1
 800263e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6919      	ldr	r1, [r3, #16]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	4618      	mov	r0, r3
 8002652:	4603      	mov	r3, r0
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4403      	add	r3, r0
 8002658:	409a      	lsls	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b06      	cmp	r3, #6
 8002668:	d824      	bhi.n	80026b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	3b05      	subs	r3, #5
 800267c:	221f      	movs	r2, #31
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	400a      	ands	r2, r1
 800268a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	4618      	mov	r0, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	3b05      	subs	r3, #5
 80026a6:	fa00 f203 	lsl.w	r2, r0, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	635a      	str	r2, [r3, #52]	; 0x34
 80026b2:	e04c      	b.n	800274e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b0c      	cmp	r3, #12
 80026ba:	d824      	bhi.n	8002706 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	3b23      	subs	r3, #35	; 0x23
 80026ce:	221f      	movs	r2, #31
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43da      	mvns	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	400a      	ands	r2, r1
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	4618      	mov	r0, r3
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	3b23      	subs	r3, #35	; 0x23
 80026f8:	fa00 f203 	lsl.w	r2, r0, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
 8002704:	e023      	b.n	800274e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	3b41      	subs	r3, #65	; 0x41
 8002718:	221f      	movs	r2, #31
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	400a      	ands	r2, r1
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	4618      	mov	r0, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	3b41      	subs	r3, #65	; 0x41
 8002742:	fa00 f203 	lsl.w	r2, r0, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800274e:	4b29      	ldr	r3, [pc, #164]	; (80027f4 <HAL_ADC_ConfigChannel+0x250>)
 8002750:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a28      	ldr	r2, [pc, #160]	; (80027f8 <HAL_ADC_ConfigChannel+0x254>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d10f      	bne.n	800277c <HAL_ADC_ConfigChannel+0x1d8>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b12      	cmp	r3, #18
 8002762:	d10b      	bne.n	800277c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a1d      	ldr	r2, [pc, #116]	; (80027f8 <HAL_ADC_ConfigChannel+0x254>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d12b      	bne.n	80027de <HAL_ADC_ConfigChannel+0x23a>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a1c      	ldr	r2, [pc, #112]	; (80027fc <HAL_ADC_ConfigChannel+0x258>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d003      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x1f4>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b11      	cmp	r3, #17
 8002796:	d122      	bne.n	80027de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a11      	ldr	r2, [pc, #68]	; (80027fc <HAL_ADC_ConfigChannel+0x258>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d111      	bne.n	80027de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027ba:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HAL_ADC_ConfigChannel+0x25c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a11      	ldr	r2, [pc, #68]	; (8002804 <HAL_ADC_ConfigChannel+0x260>)
 80027c0:	fba2 2303 	umull	r2, r3, r2, r3
 80027c4:	0c9a      	lsrs	r2, r3, #18
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027d0:	e002      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f9      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	40012300 	.word	0x40012300
 80027f8:	40012000 	.word	0x40012000
 80027fc:	10000012 	.word	0x10000012
 8002800:	20000004 	.word	0x20000004
 8002804:	431bde83 	.word	0x431bde83

08002808 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002810:	4b79      	ldr	r3, [pc, #484]	; (80029f8 <ADC_Init+0x1f0>)
 8002812:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	431a      	orrs	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800283c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	021a      	lsls	r2, r3, #8
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6899      	ldr	r1, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	4a58      	ldr	r2, [pc, #352]	; (80029fc <ADC_Init+0x1f4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d022      	beq.n	80028e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6899      	ldr	r1, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6899      	ldr	r1, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	e00f      	b.n	8002906 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002904:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0202 	bic.w	r2, r2, #2
 8002914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6899      	ldr	r1, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	7e1b      	ldrb	r3, [r3, #24]
 8002920:	005a      	lsls	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01b      	beq.n	800296c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002942:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002952:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6859      	ldr	r1, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	3b01      	subs	r3, #1
 8002960:	035a      	lsls	r2, r3, #13
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	e007      	b.n	800297c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800297a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800298a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	3b01      	subs	r3, #1
 8002998:	051a      	lsls	r2, r3, #20
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6899      	ldr	r1, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029be:	025a      	lsls	r2, r3, #9
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6899      	ldr	r1, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	029a      	lsls	r2, r3, #10
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	609a      	str	r2, [r3, #8]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	40012300 	.word	0x40012300
 80029fc:	0f000001 	.word	0x0f000001

08002a00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d13c      	bne.n	8002a94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d12b      	bne.n	8002a8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d127      	bne.n	8002a8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d006      	beq.n	8002a58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d119      	bne.n	8002a8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0220 	bic.w	r2, r2, #32
 8002a66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f043 0201 	orr.w	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f7fd fd39 	bl	8000504 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a92:	e00e      	b.n	8002ab2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f7ff fd75 	bl	8002590 <HAL_ADC_ErrorCallback>
}
 8002aa6:	e004      	b.n	8002ab2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4798      	blx	r3
}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f7fd fdb9 	bl	8000640 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2240      	movs	r2, #64	; 0x40
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f043 0204 	orr.w	r2, r3, #4
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f7ff fd4a 	bl	8002590 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002afc:	bf00      	nop
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b36:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	60d3      	str	r3, [r2, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <__NVIC_GetPriorityGrouping+0x18>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db0b      	blt.n	8002b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	4907      	ldr	r1, [pc, #28]	; (8002ba0 <__NVIC_EnableIRQ+0x38>)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2001      	movs	r0, #1
 8002b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000e100 	.word	0xe000e100

08002ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	6039      	str	r1, [r7, #0]
 8002bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db0a      	blt.n	8002bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	490c      	ldr	r1, [pc, #48]	; (8002bf0 <__NVIC_SetPriority+0x4c>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bcc:	e00a      	b.n	8002be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4908      	ldr	r1, [pc, #32]	; (8002bf4 <__NVIC_SetPriority+0x50>)
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	3b04      	subs	r3, #4
 8002bdc:	0112      	lsls	r2, r2, #4
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	440b      	add	r3, r1
 8002be2:	761a      	strb	r2, [r3, #24]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000e100 	.word	0xe000e100
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	; 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f1c3 0307 	rsb	r3, r3, #7
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	bf28      	it	cs
 8002c16:	2304      	movcs	r3, #4
 8002c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d902      	bls.n	8002c28 <NVIC_EncodePriority+0x30>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3b03      	subs	r3, #3
 8002c26:	e000      	b.n	8002c2a <NVIC_EncodePriority+0x32>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c40:	f04f 31ff 	mov.w	r1, #4294967295
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43d9      	mvns	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	4313      	orrs	r3, r2
         );
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	; 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c70:	d301      	bcc.n	8002c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c72:	2301      	movs	r3, #1
 8002c74:	e00f      	b.n	8002c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c76:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <SysTick_Config+0x40>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7e:	210f      	movs	r1, #15
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295
 8002c84:	f7ff ff8e 	bl	8002ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <SysTick_Config+0x40>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8e:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <SysTick_Config+0x40>)
 8002c90:	2207      	movs	r2, #7
 8002c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	e000e010 	.word	0xe000e010

08002ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff ff29 	bl	8002b04 <__NVIC_SetPriorityGrouping>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ccc:	f7ff ff3e 	bl	8002b4c <__NVIC_GetPriorityGrouping>
 8002cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	6978      	ldr	r0, [r7, #20]
 8002cd8:	f7ff ff8e 	bl	8002bf8 <NVIC_EncodePriority>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff5d 	bl	8002ba4 <__NVIC_SetPriority>
}
 8002cea:	bf00      	nop
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff31 	bl	8002b68 <__NVIC_EnableIRQ>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ffa2 	bl	8002c60 <SysTick_Config>
 8002d1c:	4603      	mov	r3, r0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e014      	b.n	8002d62 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	791b      	ldrb	r3, [r3, #4]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d105      	bne.n	8002d4e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff f801 	bl	8001d50 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2202      	movs	r2, #2
 8002d52:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	795b      	ldrb	r3, [r3, #5]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_DAC_Start_DMA+0x1e>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e08e      	b.n	8002ea8 <HAL_DAC_Start_DMA+0x13c>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2202      	movs	r2, #2
 8002d94:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d12a      	bne.n	8002df2 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a43      	ldr	r2, [pc, #268]	; (8002eb0 <HAL_DAC_Start_DMA+0x144>)
 8002da2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4a42      	ldr	r2, [pc, #264]	; (8002eb4 <HAL_DAC_Start_DMA+0x148>)
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4a41      	ldr	r2, [pc, #260]	; (8002eb8 <HAL_DAC_Start_DMA+0x14c>)
 8002db2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dc2:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d009      	beq.n	8002dde <HAL_DAC_Start_DMA+0x72>
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d00c      	beq.n	8002de8 <HAL_DAC_Start_DMA+0x7c>
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d000      	beq.n	8002dd4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002dd2:	e039      	b.n	8002e48 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3308      	adds	r3, #8
 8002dda:	617b      	str	r3, [r7, #20]
        break;
 8002ddc:	e034      	b.n	8002e48 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	330c      	adds	r3, #12
 8002de4:	617b      	str	r3, [r7, #20]
        break;
 8002de6:	e02f      	b.n	8002e48 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3310      	adds	r3, #16
 8002dee:	617b      	str	r3, [r7, #20]
        break;
 8002df0:	e02a      	b.n	8002e48 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	4a31      	ldr	r2, [pc, #196]	; (8002ebc <HAL_DAC_Start_DMA+0x150>)
 8002df8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	4a30      	ldr	r2, [pc, #192]	; (8002ec0 <HAL_DAC_Start_DMA+0x154>)
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	4a2f      	ldr	r2, [pc, #188]	; (8002ec4 <HAL_DAC_Start_DMA+0x158>)
 8002e08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e18:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d009      	beq.n	8002e34 <HAL_DAC_Start_DMA+0xc8>
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d00c      	beq.n	8002e3e <HAL_DAC_Start_DMA+0xd2>
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d000      	beq.n	8002e2a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002e28:	e00e      	b.n	8002e48 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3314      	adds	r3, #20
 8002e30:	617b      	str	r3, [r7, #20]
        break;
 8002e32:	e009      	b.n	8002e48 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3318      	adds	r3, #24
 8002e3a:	617b      	str	r3, [r7, #20]
        break;
 8002e3c:	e004      	b.n	8002e48 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	331c      	adds	r3, #28
 8002e44:	617b      	str	r3, [r7, #20]
        break;
 8002e46:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10f      	bne.n	8002e6e <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e5c:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6898      	ldr	r0, [r3, #8]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	f000 f9fe 	bl	8003268 <HAL_DMA_Start_IT>
 8002e6c:	e00e      	b.n	8002e8c <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002e7c:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	68d8      	ldr	r0, [r3, #12]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	f000 f9ee 	bl	8003268 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	2201      	movs	r2, #1
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	409a      	lsls	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	08002ff9 	.word	0x08002ff9
 8002eb4:	0800301b 	.word	0x0800301b
 8002eb8:	08003037 	.word	0x08003037
 8002ebc:	080030a1 	.word	0x080030a1
 8002ec0:	080030c3 	.word	0x080030c3
 8002ec4:	080030df 	.word	0x080030df

08002ec8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6819      	ldr	r1, [r3, #0]
 8002edc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	400a      	ands	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6819      	ldr	r1, [r3, #0]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	400a      	ands	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d107      	bne.n	8002f1e <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fa00 	bl	8003318 <HAL_DMA_Abort>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	73fb      	strb	r3, [r7, #15]
 8002f1c:	e006      	b.n	8002f2c <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f9f8 	bl	8003318 <HAL_DMA_Abort>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2204      	movs	r2, #4
 8002f36:	711a      	strb	r2, [r3, #4]
 8002f38:	e002      	b.n	8002f40 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b087      	sub	sp, #28
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	795b      	ldrb	r3, [r3, #5]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_DAC_ConfigChannel+0x20>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e036      	b.n	8002fec <HAL_DAC_ConfigChannel+0x8e>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2202      	movs	r2, #2
 8002f88:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002f92:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6819      	ldr	r1, [r3, #0]
 8002fcc:	22c0      	movs	r2, #192	; 0xc0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	400a      	ands	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	371c      	adds	r7, #28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f7fd fbb4 	bl	8000774 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	711a      	strb	r2, [r3, #4]
}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7fd fbc3 	bl	80007b4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800302e:	bf00      	nop
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003042:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	f043 0204 	orr.w	r2, r3, #4
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f7ff ff7a 	bl	8002f4a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	711a      	strb	r2, [r3, #4]
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f7ff ffd8 	bl	8003064 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	711a      	strb	r2, [r3, #4]
}
 80030ba:	bf00      	nop
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f7ff ffd1 	bl	8003078 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ea:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f043 0204 	orr.w	r2, r3, #4
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7ff ffc7 	bl	800308c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	711a      	strb	r2, [r3, #4]
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003118:	f7ff f8d6 	bl	80022c8 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e099      	b.n	800325c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003148:	e00f      	b.n	800316a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800314a:	f7ff f8bd 	bl	80022c8 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b05      	cmp	r3, #5
 8003156:	d908      	bls.n	800316a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2220      	movs	r2, #32
 800315c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2203      	movs	r2, #3
 8003162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e078      	b.n	800325c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1e8      	bne.n	800314a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	4b38      	ldr	r3, [pc, #224]	; (8003264 <HAL_DMA_Init+0x158>)
 8003184:	4013      	ands	r3, r2
 8003186:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003196:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d107      	bne.n	80031d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	4313      	orrs	r3, r2
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 0307 	bic.w	r3, r3, #7
 80031ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d117      	bne.n	800322e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00e      	beq.n	800322e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 fadf 	bl	80037d4 <DMA_CheckFifoParam>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2240      	movs	r2, #64	; 0x40
 8003220:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800322a:	2301      	movs	r3, #1
 800322c:	e016      	b.n	800325c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 fa96 	bl	8003768 <DMA_CalcBaseAndBitshift>
 800323c:	4603      	mov	r3, r0
 800323e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003244:	223f      	movs	r2, #63	; 0x3f
 8003246:	409a      	lsls	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	f010803f 	.word	0xf010803f

08003268 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_DMA_Start_IT+0x26>
 800328a:	2302      	movs	r3, #2
 800328c:	e040      	b.n	8003310 <HAL_DMA_Start_IT+0xa8>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d12f      	bne.n	8003302 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2202      	movs	r2, #2
 80032a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 fa28 	bl	800370c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c0:	223f      	movs	r2, #63	; 0x3f
 80032c2:	409a      	lsls	r2, r3
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0216 	orr.w	r2, r2, #22
 80032d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d007      	beq.n	80032f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0208 	orr.w	r2, r2, #8
 80032ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	e005      	b.n	800330e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800330a:	2302      	movs	r3, #2
 800330c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800330e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003326:	f7fe ffcf 	bl	80022c8 <HAL_GetTick>
 800332a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d008      	beq.n	800334a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2280      	movs	r2, #128	; 0x80
 800333c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e052      	b.n	80033f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0216 	bic.w	r2, r2, #22
 8003358:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695a      	ldr	r2, [r3, #20]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003368:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	2b00      	cmp	r3, #0
 8003370:	d103      	bne.n	800337a <HAL_DMA_Abort+0x62>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0208 	bic.w	r2, r2, #8
 8003388:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0201 	bic.w	r2, r2, #1
 8003398:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800339a:	e013      	b.n	80033c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800339c:	f7fe ff94 	bl	80022c8 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d90c      	bls.n	80033c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2203      	movs	r2, #3
 80033bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e015      	b.n	80033f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e4      	bne.n	800339c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d6:	223f      	movs	r2, #63	; 0x3f
 80033d8:	409a      	lsls	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003404:	4b92      	ldr	r3, [pc, #584]	; (8003650 <HAL_DMA_IRQHandler+0x258>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a92      	ldr	r2, [pc, #584]	; (8003654 <HAL_DMA_IRQHandler+0x25c>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	0a9b      	lsrs	r3, r3, #10
 8003410:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003416:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003422:	2208      	movs	r2, #8
 8003424:	409a      	lsls	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4013      	ands	r3, r2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d01a      	beq.n	8003464 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d013      	beq.n	8003464 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0204 	bic.w	r2, r2, #4
 800344a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	2208      	movs	r2, #8
 8003452:	409a      	lsls	r2, r3
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345c:	f043 0201 	orr.w	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003468:	2201      	movs	r2, #1
 800346a:	409a      	lsls	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d012      	beq.n	800349a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	2201      	movs	r2, #1
 8003488:	409a      	lsls	r2, r3
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003492:	f043 0202 	orr.w	r2, r3, #2
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349e:	2204      	movs	r2, #4
 80034a0:	409a      	lsls	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d012      	beq.n	80034d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00b      	beq.n	80034d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	2204      	movs	r2, #4
 80034be:	409a      	lsls	r2, r3
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c8:	f043 0204 	orr.w	r2, r3, #4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d4:	2210      	movs	r2, #16
 80034d6:	409a      	lsls	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d043      	beq.n	8003568 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d03c      	beq.n	8003568 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f2:	2210      	movs	r2, #16
 80034f4:	409a      	lsls	r2, r3
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d018      	beq.n	800353a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d108      	bne.n	8003528 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d024      	beq.n	8003568 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4798      	blx	r3
 8003526:	e01f      	b.n	8003568 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01b      	beq.n	8003568 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	4798      	blx	r3
 8003538:	e016      	b.n	8003568 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003544:	2b00      	cmp	r3, #0
 8003546:	d107      	bne.n	8003558 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0208 	bic.w	r2, r2, #8
 8003556:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356c:	2220      	movs	r2, #32
 800356e:	409a      	lsls	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 808e 	beq.w	8003696 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8086 	beq.w	8003696 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358e:	2220      	movs	r2, #32
 8003590:	409a      	lsls	r2, r3
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b05      	cmp	r3, #5
 80035a0:	d136      	bne.n	8003610 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0216 	bic.w	r2, r2, #22
 80035b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695a      	ldr	r2, [r3, #20]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d103      	bne.n	80035d2 <HAL_DMA_IRQHandler+0x1da>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d007      	beq.n	80035e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0208 	bic.w	r2, r2, #8
 80035e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e6:	223f      	movs	r2, #63	; 0x3f
 80035e8:	409a      	lsls	r2, r3
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003602:	2b00      	cmp	r3, #0
 8003604:	d07d      	beq.n	8003702 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
        }
        return;
 800360e:	e078      	b.n	8003702 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d01c      	beq.n	8003658 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d108      	bne.n	800363e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	2b00      	cmp	r3, #0
 8003632:	d030      	beq.n	8003696 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	4798      	blx	r3
 800363c:	e02b      	b.n	8003696 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003642:	2b00      	cmp	r3, #0
 8003644:	d027      	beq.n	8003696 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	4798      	blx	r3
 800364e:	e022      	b.n	8003696 <HAL_DMA_IRQHandler+0x29e>
 8003650:	20000004 	.word	0x20000004
 8003654:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10f      	bne.n	8003686 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0210 	bic.w	r2, r2, #16
 8003674:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369a:	2b00      	cmp	r3, #0
 800369c:	d032      	beq.n	8003704 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d022      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2205      	movs	r2, #5
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0201 	bic.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	3301      	adds	r3, #1
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d307      	bcc.n	80036de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f2      	bne.n	80036c2 <HAL_DMA_IRQHandler+0x2ca>
 80036dc:	e000      	b.n	80036e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80036de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4798      	blx	r3
 8003700:	e000      	b.n	8003704 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003702:	bf00      	nop
    }
  }
}
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop

0800370c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003728:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	d108      	bne.n	800374c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800374a:	e007      	b.n	800375c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	60da      	str	r2, [r3, #12]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	3b10      	subs	r3, #16
 8003778:	4a14      	ldr	r2, [pc, #80]	; (80037cc <DMA_CalcBaseAndBitshift+0x64>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003782:	4a13      	ldr	r2, [pc, #76]	; (80037d0 <DMA_CalcBaseAndBitshift+0x68>)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d909      	bls.n	80037aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800379e:	f023 0303 	bic.w	r3, r3, #3
 80037a2:	1d1a      	adds	r2, r3, #4
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	659a      	str	r2, [r3, #88]	; 0x58
 80037a8:	e007      	b.n	80037ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037b2:	f023 0303 	bic.w	r3, r3, #3
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	aaaaaaab 	.word	0xaaaaaaab
 80037d0:	08009634 	.word	0x08009634

080037d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d11f      	bne.n	800382e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d855      	bhi.n	80038a0 <DMA_CheckFifoParam+0xcc>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <DMA_CheckFifoParam+0x28>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	0800380d 	.word	0x0800380d
 8003800:	0800381f 	.word	0x0800381f
 8003804:	0800380d 	.word	0x0800380d
 8003808:	080038a1 	.word	0x080038a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d045      	beq.n	80038a4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800381c:	e042      	b.n	80038a4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003826:	d13f      	bne.n	80038a8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800382c:	e03c      	b.n	80038a8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003836:	d121      	bne.n	800387c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b03      	cmp	r3, #3
 800383c:	d836      	bhi.n	80038ac <DMA_CheckFifoParam+0xd8>
 800383e:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <DMA_CheckFifoParam+0x70>)
 8003840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003844:	08003855 	.word	0x08003855
 8003848:	0800385b 	.word	0x0800385b
 800384c:	08003855 	.word	0x08003855
 8003850:	0800386d 	.word	0x0800386d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      break;
 8003858:	e02f      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d024      	beq.n	80038b0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386a:	e021      	b.n	80038b0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003874:	d11e      	bne.n	80038b4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800387a:	e01b      	b.n	80038b4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d902      	bls.n	8003888 <DMA_CheckFifoParam+0xb4>
 8003882:	2b03      	cmp	r3, #3
 8003884:	d003      	beq.n	800388e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003886:	e018      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
      break;
 800388c:	e015      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00e      	beq.n	80038b8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
      break;
 800389e:	e00b      	b.n	80038b8 <DMA_CheckFifoParam+0xe4>
      break;
 80038a0:	bf00      	nop
 80038a2:	e00a      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038a4:	bf00      	nop
 80038a6:	e008      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038a8:	bf00      	nop
 80038aa:	e006      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038ac:	bf00      	nop
 80038ae:	e004      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038b0:	bf00      	nop
 80038b2:	e002      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;   
 80038b4:	bf00      	nop
 80038b6:	e000      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038b8:	bf00      	nop
    }
  } 
  
  return status; 
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b089      	sub	sp, #36	; 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	e165      	b.n	8003bb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038e4:	2201      	movs	r2, #1
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	f040 8154 	bne.w	8003baa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d00b      	beq.n	8003922 <HAL_GPIO_Init+0x5a>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d007      	beq.n	8003922 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003916:	2b11      	cmp	r3, #17
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b12      	cmp	r3, #18
 8003920:	d130      	bne.n	8003984 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	2203      	movs	r2, #3
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43db      	mvns	r3, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4013      	ands	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003958:	2201      	movs	r2, #1
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 0201 	and.w	r2, r3, #1
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2203      	movs	r2, #3
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d003      	beq.n	80039c4 <HAL_GPIO_Init+0xfc>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b12      	cmp	r3, #18
 80039c2:	d123      	bne.n	8003a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	08da      	lsrs	r2, r3, #3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3208      	adds	r2, #8
 80039cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	220f      	movs	r2, #15
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	08da      	lsrs	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3208      	adds	r2, #8
 8003a06:	69b9      	ldr	r1, [r7, #24]
 8003a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	2203      	movs	r2, #3
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 0203 	and.w	r2, r3, #3
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80ae 	beq.w	8003baa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	4b5c      	ldr	r3, [pc, #368]	; (8003bc4 <HAL_GPIO_Init+0x2fc>)
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	4a5b      	ldr	r2, [pc, #364]	; (8003bc4 <HAL_GPIO_Init+0x2fc>)
 8003a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a5e:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <HAL_GPIO_Init+0x2fc>)
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a6a:	4a57      	ldr	r2, [pc, #348]	; (8003bc8 <HAL_GPIO_Init+0x300>)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	089b      	lsrs	r3, r3, #2
 8003a70:	3302      	adds	r3, #2
 8003a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	220f      	movs	r2, #15
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a4e      	ldr	r2, [pc, #312]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d025      	beq.n	8003ae2 <HAL_GPIO_Init+0x21a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4d      	ldr	r2, [pc, #308]	; (8003bd0 <HAL_GPIO_Init+0x308>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01f      	beq.n	8003ade <HAL_GPIO_Init+0x216>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a4c      	ldr	r2, [pc, #304]	; (8003bd4 <HAL_GPIO_Init+0x30c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d019      	beq.n	8003ada <HAL_GPIO_Init+0x212>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a4b      	ldr	r2, [pc, #300]	; (8003bd8 <HAL_GPIO_Init+0x310>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d013      	beq.n	8003ad6 <HAL_GPIO_Init+0x20e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a4a      	ldr	r2, [pc, #296]	; (8003bdc <HAL_GPIO_Init+0x314>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00d      	beq.n	8003ad2 <HAL_GPIO_Init+0x20a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a49      	ldr	r2, [pc, #292]	; (8003be0 <HAL_GPIO_Init+0x318>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d007      	beq.n	8003ace <HAL_GPIO_Init+0x206>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a48      	ldr	r2, [pc, #288]	; (8003be4 <HAL_GPIO_Init+0x31c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d101      	bne.n	8003aca <HAL_GPIO_Init+0x202>
 8003ac6:	2306      	movs	r3, #6
 8003ac8:	e00c      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003aca:	2307      	movs	r3, #7
 8003acc:	e00a      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003ace:	2305      	movs	r3, #5
 8003ad0:	e008      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003ad2:	2304      	movs	r3, #4
 8003ad4:	e006      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e004      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e002      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <HAL_GPIO_Init+0x21c>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	f002 0203 	and.w	r2, r2, #3
 8003aea:	0092      	lsls	r2, r2, #2
 8003aec:	4093      	lsls	r3, r2
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003af4:	4934      	ldr	r1, [pc, #208]	; (8003bc8 <HAL_GPIO_Init+0x300>)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	089b      	lsrs	r3, r3, #2
 8003afa:	3302      	adds	r3, #2
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b02:	4b39      	ldr	r3, [pc, #228]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b26:	4a30      	ldr	r2, [pc, #192]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b2c:	4b2e      	ldr	r3, [pc, #184]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b50:	4a25      	ldr	r2, [pc, #148]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b56:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4013      	ands	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b7a:	4a1b      	ldr	r2, [pc, #108]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b80:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ba4:	4a10      	ldr	r2, [pc, #64]	; (8003be8 <HAL_GPIO_Init+0x320>)
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3301      	adds	r3, #1
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	2b0f      	cmp	r3, #15
 8003bb4:	f67f ae96 	bls.w	80038e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bb8:	bf00      	nop
 8003bba:	3724      	adds	r7, #36	; 0x24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40013800 	.word	0x40013800
 8003bcc:	40020000 	.word	0x40020000
 8003bd0:	40020400 	.word	0x40020400
 8003bd4:	40020800 	.word	0x40020800
 8003bd8:	40020c00 	.word	0x40020c00
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40021400 	.word	0x40021400
 8003be4:	40021800 	.word	0x40021800
 8003be8:	40013c00 	.word	0x40013c00

08003bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	887b      	ldrh	r3, [r7, #2]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
 8003c08:	e001      	b.n	8003c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	807b      	strh	r3, [r7, #2]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c2c:	787b      	ldrb	r3, [r7, #1]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c32:	887a      	ldrh	r2, [r7, #2]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c38:	e003      	b.n	8003c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c3a:	887b      	ldrh	r3, [r7, #2]
 8003c3c:	041a      	lsls	r2, r3, #16
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	619a      	str	r2, [r3, #24]
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
	...

08003c50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c5a:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	88fb      	ldrh	r3, [r7, #6]
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c66:	4a05      	ldr	r2, [pc, #20]	; (8003c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 f806 	bl	8003c80 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40013c00 	.word	0x40013c00

08003c80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0cc      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cac:	4b68      	ldr	r3, [pc, #416]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d90c      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b65      	ldr	r3, [pc, #404]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b63      	ldr	r3, [pc, #396]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0b8      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d020      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cec:	4b59      	ldr	r3, [pc, #356]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a58      	ldr	r2, [pc, #352]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d04:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a52      	ldr	r2, [pc, #328]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d10:	4b50      	ldr	r3, [pc, #320]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	494d      	ldr	r1, [pc, #308]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d044      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	4b47      	ldr	r3, [pc, #284]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d119      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e07f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d003      	beq.n	8003d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d56:	4b3f      	ldr	r3, [pc, #252]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e06f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d66:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e067      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d76:	4b37      	ldr	r3, [pc, #220]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f023 0203 	bic.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4934      	ldr	r1, [pc, #208]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d88:	f7fe fa9e 	bl	80022c8 <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d90:	f7fe fa9a 	bl	80022c8 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e04f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 020c 	and.w	r2, r3, #12
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d1eb      	bne.n	8003d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003db8:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d20c      	bcs.n	8003de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e032      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dec:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4916      	ldr	r1, [pc, #88]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0a:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	490e      	ldr	r1, [pc, #56]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e1e:	f000 f855 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 8003e22:	4601      	mov	r1, r0
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	; (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003e30:	5cd3      	ldrb	r3, [r2, r3]
 8003e32:	fa21 f303 	lsr.w	r3, r1, r3
 8003e36:	4a09      	ldr	r2, [pc, #36]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe f9fe 	bl	8002240 <HAL_InitTick>

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023c00 	.word	0x40023c00
 8003e54:	40023800 	.word	0x40023800
 8003e58:	0800961c 	.word	0x0800961c
 8003e5c:	20000004 	.word	0x20000004
 8003e60:	20000008 	.word	0x20000008

08003e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e68:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20000004 	.word	0x20000004

08003e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e80:	f7ff fff0 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003e84:	4601      	mov	r1, r0
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	0a9b      	lsrs	r3, r3, #10
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	4a03      	ldr	r2, [pc, #12]	; (8003ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e92:	5cd3      	ldrb	r3, [r2, r3]
 8003e94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	0800962c 	.word	0x0800962c

08003ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ea8:	f7ff ffdc 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003eac:	4601      	mov	r1, r0
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	0b5b      	lsrs	r3, r3, #13
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4a03      	ldr	r2, [pc, #12]	; (8003ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eba:	5cd3      	ldrb	r3, [r2, r3]
 8003ebc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	0800962c 	.word	0x0800962c

08003ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ee6:	4bc6      	ldr	r3, [pc, #792]	; (8004200 <HAL_RCC_GetSysClockFreq+0x334>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b0c      	cmp	r3, #12
 8003ef0:	f200 817e 	bhi.w	80041f0 <HAL_RCC_GetSysClockFreq+0x324>
 8003ef4:	a201      	add	r2, pc, #4	; (adr r2, 8003efc <HAL_RCC_GetSysClockFreq+0x30>)
 8003ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efa:	bf00      	nop
 8003efc:	08003f31 	.word	0x08003f31
 8003f00:	080041f1 	.word	0x080041f1
 8003f04:	080041f1 	.word	0x080041f1
 8003f08:	080041f1 	.word	0x080041f1
 8003f0c:	08003f37 	.word	0x08003f37
 8003f10:	080041f1 	.word	0x080041f1
 8003f14:	080041f1 	.word	0x080041f1
 8003f18:	080041f1 	.word	0x080041f1
 8003f1c:	08003f3d 	.word	0x08003f3d
 8003f20:	080041f1 	.word	0x080041f1
 8003f24:	080041f1 	.word	0x080041f1
 8003f28:	080041f1 	.word	0x080041f1
 8003f2c:	08004099 	.word	0x08004099
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f30:	4bb4      	ldr	r3, [pc, #720]	; (8004204 <HAL_RCC_GetSysClockFreq+0x338>)
 8003f32:	613b      	str	r3, [r7, #16]
       break;
 8003f34:	e15f      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f36:	4bb4      	ldr	r3, [pc, #720]	; (8004208 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003f38:	613b      	str	r3, [r7, #16]
      break;
 8003f3a:	e15c      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f3c:	4bb0      	ldr	r3, [pc, #704]	; (8004200 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f44:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f46:	4bae      	ldr	r3, [pc, #696]	; (8004200 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d04a      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f52:	4bab      	ldr	r3, [pc, #684]	; (8004200 <HAL_RCC_GetSysClockFreq+0x334>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	099b      	lsrs	r3, r3, #6
 8003f58:	f04f 0400 	mov.w	r4, #0
 8003f5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	ea03 0501 	and.w	r5, r3, r1
 8003f68:	ea04 0602 	and.w	r6, r4, r2
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	4632      	mov	r2, r6
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	f04f 0400 	mov.w	r4, #0
 8003f78:	0154      	lsls	r4, r2, #5
 8003f7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f7e:	014b      	lsls	r3, r1, #5
 8003f80:	4619      	mov	r1, r3
 8003f82:	4622      	mov	r2, r4
 8003f84:	1b49      	subs	r1, r1, r5
 8003f86:	eb62 0206 	sbc.w	r2, r2, r6
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	f04f 0400 	mov.w	r4, #0
 8003f92:	0194      	lsls	r4, r2, #6
 8003f94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f98:	018b      	lsls	r3, r1, #6
 8003f9a:	1a5b      	subs	r3, r3, r1
 8003f9c:	eb64 0402 	sbc.w	r4, r4, r2
 8003fa0:	f04f 0100 	mov.w	r1, #0
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	00e2      	lsls	r2, r4, #3
 8003faa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003fae:	00d9      	lsls	r1, r3, #3
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4614      	mov	r4, r2
 8003fb4:	195b      	adds	r3, r3, r5
 8003fb6:	eb44 0406 	adc.w	r4, r4, r6
 8003fba:	f04f 0100 	mov.w	r1, #0
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	0262      	lsls	r2, r4, #9
 8003fc4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003fc8:	0259      	lsls	r1, r3, #9
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4614      	mov	r4, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f04f 0400 	mov.w	r4, #0
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4623      	mov	r3, r4
 8003fdc:	f7fc f912 	bl	8000204 <__aeabi_uldivmod>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	460c      	mov	r4, r1
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e049      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe8:	4b85      	ldr	r3, [pc, #532]	; (8004200 <HAL_RCC_GetSysClockFreq+0x334>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	099b      	lsrs	r3, r3, #6
 8003fee:	f04f 0400 	mov.w	r4, #0
 8003ff2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	ea03 0501 	and.w	r5, r3, r1
 8003ffe:	ea04 0602 	and.w	r6, r4, r2
 8004002:	4629      	mov	r1, r5
 8004004:	4632      	mov	r2, r6
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	f04f 0400 	mov.w	r4, #0
 800400e:	0154      	lsls	r4, r2, #5
 8004010:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004014:	014b      	lsls	r3, r1, #5
 8004016:	4619      	mov	r1, r3
 8004018:	4622      	mov	r2, r4
 800401a:	1b49      	subs	r1, r1, r5
 800401c:	eb62 0206 	sbc.w	r2, r2, r6
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	f04f 0400 	mov.w	r4, #0
 8004028:	0194      	lsls	r4, r2, #6
 800402a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800402e:	018b      	lsls	r3, r1, #6
 8004030:	1a5b      	subs	r3, r3, r1
 8004032:	eb64 0402 	sbc.w	r4, r4, r2
 8004036:	f04f 0100 	mov.w	r1, #0
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	00e2      	lsls	r2, r4, #3
 8004040:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004044:	00d9      	lsls	r1, r3, #3
 8004046:	460b      	mov	r3, r1
 8004048:	4614      	mov	r4, r2
 800404a:	195b      	adds	r3, r3, r5
 800404c:	eb44 0406 	adc.w	r4, r4, r6
 8004050:	f04f 0100 	mov.w	r1, #0
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	02a2      	lsls	r2, r4, #10
 800405a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800405e:	0299      	lsls	r1, r3, #10
 8004060:	460b      	mov	r3, r1
 8004062:	4614      	mov	r4, r2
 8004064:	4618      	mov	r0, r3
 8004066:	4621      	mov	r1, r4
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f04f 0400 	mov.w	r4, #0
 800406e:	461a      	mov	r2, r3
 8004070:	4623      	mov	r3, r4
 8004072:	f7fc f8c7 	bl	8000204 <__aeabi_uldivmod>
 8004076:	4603      	mov	r3, r0
 8004078:	460c      	mov	r4, r1
 800407a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800407c:	4b60      	ldr	r3, [pc, #384]	; (8004200 <HAL_RCC_GetSysClockFreq+0x334>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	0c1b      	lsrs	r3, r3, #16
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	3301      	adds	r3, #1
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	613b      	str	r3, [r7, #16]
      break;
 8004096:	e0ae      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004098:	4b59      	ldr	r3, [pc, #356]	; (8004200 <HAL_RCC_GetSysClockFreq+0x334>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040a0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040a2:	4b57      	ldr	r3, [pc, #348]	; (8004200 <HAL_RCC_GetSysClockFreq+0x334>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d04a      	beq.n	8004144 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ae:	4b54      	ldr	r3, [pc, #336]	; (8004200 <HAL_RCC_GetSysClockFreq+0x334>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	099b      	lsrs	r3, r3, #6
 80040b4:	f04f 0400 	mov.w	r4, #0
 80040b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	ea03 0501 	and.w	r5, r3, r1
 80040c4:	ea04 0602 	and.w	r6, r4, r2
 80040c8:	4629      	mov	r1, r5
 80040ca:	4632      	mov	r2, r6
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	f04f 0400 	mov.w	r4, #0
 80040d4:	0154      	lsls	r4, r2, #5
 80040d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040da:	014b      	lsls	r3, r1, #5
 80040dc:	4619      	mov	r1, r3
 80040de:	4622      	mov	r2, r4
 80040e0:	1b49      	subs	r1, r1, r5
 80040e2:	eb62 0206 	sbc.w	r2, r2, r6
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	f04f 0400 	mov.w	r4, #0
 80040ee:	0194      	lsls	r4, r2, #6
 80040f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040f4:	018b      	lsls	r3, r1, #6
 80040f6:	1a5b      	subs	r3, r3, r1
 80040f8:	eb64 0402 	sbc.w	r4, r4, r2
 80040fc:	f04f 0100 	mov.w	r1, #0
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	00e2      	lsls	r2, r4, #3
 8004106:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800410a:	00d9      	lsls	r1, r3, #3
 800410c:	460b      	mov	r3, r1
 800410e:	4614      	mov	r4, r2
 8004110:	195b      	adds	r3, r3, r5
 8004112:	eb44 0406 	adc.w	r4, r4, r6
 8004116:	f04f 0100 	mov.w	r1, #0
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	0262      	lsls	r2, r4, #9
 8004120:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004124:	0259      	lsls	r1, r3, #9
 8004126:	460b      	mov	r3, r1
 8004128:	4614      	mov	r4, r2
 800412a:	4618      	mov	r0, r3
 800412c:	4621      	mov	r1, r4
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f04f 0400 	mov.w	r4, #0
 8004134:	461a      	mov	r2, r3
 8004136:	4623      	mov	r3, r4
 8004138:	f7fc f864 	bl	8000204 <__aeabi_uldivmod>
 800413c:	4603      	mov	r3, r0
 800413e:	460c      	mov	r4, r1
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	e049      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004144:	4b2e      	ldr	r3, [pc, #184]	; (8004200 <HAL_RCC_GetSysClockFreq+0x334>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	099b      	lsrs	r3, r3, #6
 800414a:	f04f 0400 	mov.w	r4, #0
 800414e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	ea03 0501 	and.w	r5, r3, r1
 800415a:	ea04 0602 	and.w	r6, r4, r2
 800415e:	4629      	mov	r1, r5
 8004160:	4632      	mov	r2, r6
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	f04f 0400 	mov.w	r4, #0
 800416a:	0154      	lsls	r4, r2, #5
 800416c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004170:	014b      	lsls	r3, r1, #5
 8004172:	4619      	mov	r1, r3
 8004174:	4622      	mov	r2, r4
 8004176:	1b49      	subs	r1, r1, r5
 8004178:	eb62 0206 	sbc.w	r2, r2, r6
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	f04f 0400 	mov.w	r4, #0
 8004184:	0194      	lsls	r4, r2, #6
 8004186:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800418a:	018b      	lsls	r3, r1, #6
 800418c:	1a5b      	subs	r3, r3, r1
 800418e:	eb64 0402 	sbc.w	r4, r4, r2
 8004192:	f04f 0100 	mov.w	r1, #0
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	00e2      	lsls	r2, r4, #3
 800419c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041a0:	00d9      	lsls	r1, r3, #3
 80041a2:	460b      	mov	r3, r1
 80041a4:	4614      	mov	r4, r2
 80041a6:	195b      	adds	r3, r3, r5
 80041a8:	eb44 0406 	adc.w	r4, r4, r6
 80041ac:	f04f 0100 	mov.w	r1, #0
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	02a2      	lsls	r2, r4, #10
 80041b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80041ba:	0299      	lsls	r1, r3, #10
 80041bc:	460b      	mov	r3, r1
 80041be:	4614      	mov	r4, r2
 80041c0:	4618      	mov	r0, r3
 80041c2:	4621      	mov	r1, r4
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f04f 0400 	mov.w	r4, #0
 80041ca:	461a      	mov	r2, r3
 80041cc:	4623      	mov	r3, r4
 80041ce:	f7fc f819 	bl	8000204 <__aeabi_uldivmod>
 80041d2:	4603      	mov	r3, r0
 80041d4:	460c      	mov	r4, r1
 80041d6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80041d8:	4b09      	ldr	r3, [pc, #36]	; (8004200 <HAL_RCC_GetSysClockFreq+0x334>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	0f1b      	lsrs	r3, r3, #28
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	613b      	str	r3, [r7, #16]
      break;
 80041ee:	e002      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <HAL_RCC_GetSysClockFreq+0x338>)
 80041f2:	613b      	str	r3, [r7, #16]
      break;
 80041f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041f6:	693b      	ldr	r3, [r7, #16]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004200:	40023800 	.word	0x40023800
 8004204:	00f42400 	.word	0x00f42400
 8004208:	007a1200 	.word	0x007a1200

0800420c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8083 	beq.w	800432c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004226:	4b95      	ldr	r3, [pc, #596]	; (800447c <HAL_RCC_OscConfig+0x270>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	2b04      	cmp	r3, #4
 8004230:	d019      	beq.n	8004266 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004232:	4b92      	ldr	r3, [pc, #584]	; (800447c <HAL_RCC_OscConfig+0x270>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800423a:	2b08      	cmp	r3, #8
 800423c:	d106      	bne.n	800424c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800423e:	4b8f      	ldr	r3, [pc, #572]	; (800447c <HAL_RCC_OscConfig+0x270>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800424a:	d00c      	beq.n	8004266 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800424c:	4b8b      	ldr	r3, [pc, #556]	; (800447c <HAL_RCC_OscConfig+0x270>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004254:	2b0c      	cmp	r3, #12
 8004256:	d112      	bne.n	800427e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004258:	4b88      	ldr	r3, [pc, #544]	; (800447c <HAL_RCC_OscConfig+0x270>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004264:	d10b      	bne.n	800427e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004266:	4b85      	ldr	r3, [pc, #532]	; (800447c <HAL_RCC_OscConfig+0x270>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d05b      	beq.n	800432a <HAL_RCC_OscConfig+0x11e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d157      	bne.n	800432a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e216      	b.n	80046ac <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004286:	d106      	bne.n	8004296 <HAL_RCC_OscConfig+0x8a>
 8004288:	4b7c      	ldr	r3, [pc, #496]	; (800447c <HAL_RCC_OscConfig+0x270>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a7b      	ldr	r2, [pc, #492]	; (800447c <HAL_RCC_OscConfig+0x270>)
 800428e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	e01d      	b.n	80042d2 <HAL_RCC_OscConfig+0xc6>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800429e:	d10c      	bne.n	80042ba <HAL_RCC_OscConfig+0xae>
 80042a0:	4b76      	ldr	r3, [pc, #472]	; (800447c <HAL_RCC_OscConfig+0x270>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a75      	ldr	r2, [pc, #468]	; (800447c <HAL_RCC_OscConfig+0x270>)
 80042a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	4b73      	ldr	r3, [pc, #460]	; (800447c <HAL_RCC_OscConfig+0x270>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a72      	ldr	r2, [pc, #456]	; (800447c <HAL_RCC_OscConfig+0x270>)
 80042b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	e00b      	b.n	80042d2 <HAL_RCC_OscConfig+0xc6>
 80042ba:	4b70      	ldr	r3, [pc, #448]	; (800447c <HAL_RCC_OscConfig+0x270>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a6f      	ldr	r2, [pc, #444]	; (800447c <HAL_RCC_OscConfig+0x270>)
 80042c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	4b6d      	ldr	r3, [pc, #436]	; (800447c <HAL_RCC_OscConfig+0x270>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a6c      	ldr	r2, [pc, #432]	; (800447c <HAL_RCC_OscConfig+0x270>)
 80042cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d013      	beq.n	8004302 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042da:	f7fd fff5 	bl	80022c8 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e2:	f7fd fff1 	bl	80022c8 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b64      	cmp	r3, #100	; 0x64
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e1db      	b.n	80046ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f4:	4b61      	ldr	r3, [pc, #388]	; (800447c <HAL_RCC_OscConfig+0x270>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0xd6>
 8004300:	e014      	b.n	800432c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004302:	f7fd ffe1 	bl	80022c8 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800430a:	f7fd ffdd 	bl	80022c8 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b64      	cmp	r3, #100	; 0x64
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e1c7      	b.n	80046ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431c:	4b57      	ldr	r3, [pc, #348]	; (800447c <HAL_RCC_OscConfig+0x270>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f0      	bne.n	800430a <HAL_RCC_OscConfig+0xfe>
 8004328:	e000      	b.n	800432c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d06f      	beq.n	8004418 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004338:	4b50      	ldr	r3, [pc, #320]	; (800447c <HAL_RCC_OscConfig+0x270>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 030c 	and.w	r3, r3, #12
 8004340:	2b00      	cmp	r3, #0
 8004342:	d017      	beq.n	8004374 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004344:	4b4d      	ldr	r3, [pc, #308]	; (800447c <HAL_RCC_OscConfig+0x270>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800434c:	2b08      	cmp	r3, #8
 800434e:	d105      	bne.n	800435c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004350:	4b4a      	ldr	r3, [pc, #296]	; (800447c <HAL_RCC_OscConfig+0x270>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00b      	beq.n	8004374 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800435c:	4b47      	ldr	r3, [pc, #284]	; (800447c <HAL_RCC_OscConfig+0x270>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004364:	2b0c      	cmp	r3, #12
 8004366:	d11c      	bne.n	80043a2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004368:	4b44      	ldr	r3, [pc, #272]	; (800447c <HAL_RCC_OscConfig+0x270>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d116      	bne.n	80043a2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004374:	4b41      	ldr	r3, [pc, #260]	; (800447c <HAL_RCC_OscConfig+0x270>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_RCC_OscConfig+0x180>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d001      	beq.n	800438c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e18f      	b.n	80046ac <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438c:	4b3b      	ldr	r3, [pc, #236]	; (800447c <HAL_RCC_OscConfig+0x270>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4938      	ldr	r1, [pc, #224]	; (800447c <HAL_RCC_OscConfig+0x270>)
 800439c:	4313      	orrs	r3, r2
 800439e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a0:	e03a      	b.n	8004418 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d020      	beq.n	80043ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043aa:	4b35      	ldr	r3, [pc, #212]	; (8004480 <HAL_RCC_OscConfig+0x274>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b0:	f7fd ff8a 	bl	80022c8 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043b8:	f7fd ff86 	bl	80022c8 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e170      	b.n	80046ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ca:	4b2c      	ldr	r3, [pc, #176]	; (800447c <HAL_RCC_OscConfig+0x270>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0f0      	beq.n	80043b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d6:	4b29      	ldr	r3, [pc, #164]	; (800447c <HAL_RCC_OscConfig+0x270>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4925      	ldr	r1, [pc, #148]	; (800447c <HAL_RCC_OscConfig+0x270>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	600b      	str	r3, [r1, #0]
 80043ea:	e015      	b.n	8004418 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ec:	4b24      	ldr	r3, [pc, #144]	; (8004480 <HAL_RCC_OscConfig+0x274>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f2:	f7fd ff69 	bl	80022c8 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043fa:	f7fd ff65 	bl	80022c8 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e14f      	b.n	80046ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440c:	4b1b      	ldr	r3, [pc, #108]	; (800447c <HAL_RCC_OscConfig+0x270>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f0      	bne.n	80043fa <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d037      	beq.n	8004494 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d016      	beq.n	800445a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800442c:	4b15      	ldr	r3, [pc, #84]	; (8004484 <HAL_RCC_OscConfig+0x278>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004432:	f7fd ff49 	bl	80022c8 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800443a:	f7fd ff45 	bl	80022c8 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e12f      	b.n	80046ac <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_RCC_OscConfig+0x270>)
 800444e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x22e>
 8004458:	e01c      	b.n	8004494 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800445a:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <HAL_RCC_OscConfig+0x278>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004460:	f7fd ff32 	bl	80022c8 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004466:	e00f      	b.n	8004488 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004468:	f7fd ff2e 	bl	80022c8 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d908      	bls.n	8004488 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e118      	b.n	80046ac <HAL_RCC_OscConfig+0x4a0>
 800447a:	bf00      	nop
 800447c:	40023800 	.word	0x40023800
 8004480:	42470000 	.word	0x42470000
 8004484:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004488:	4b8a      	ldr	r3, [pc, #552]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 800448a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e9      	bne.n	8004468 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8097 	beq.w	80045d0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044a2:	2300      	movs	r3, #0
 80044a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a6:	4b83      	ldr	r3, [pc, #524]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10f      	bne.n	80044d2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	4b7f      	ldr	r3, [pc, #508]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	4a7e      	ldr	r2, [pc, #504]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 80044bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c0:	6413      	str	r3, [r2, #64]	; 0x40
 80044c2:	4b7c      	ldr	r3, [pc, #496]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d2:	4b79      	ldr	r3, [pc, #484]	; (80046b8 <HAL_RCC_OscConfig+0x4ac>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d118      	bne.n	8004510 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044de:	4b76      	ldr	r3, [pc, #472]	; (80046b8 <HAL_RCC_OscConfig+0x4ac>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a75      	ldr	r2, [pc, #468]	; (80046b8 <HAL_RCC_OscConfig+0x4ac>)
 80044e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ea:	f7fd feed 	bl	80022c8 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f2:	f7fd fee9 	bl	80022c8 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e0d3      	b.n	80046ac <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004504:	4b6c      	ldr	r3, [pc, #432]	; (80046b8 <HAL_RCC_OscConfig+0x4ac>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d106      	bne.n	8004526 <HAL_RCC_OscConfig+0x31a>
 8004518:	4b66      	ldr	r3, [pc, #408]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	4a65      	ldr	r2, [pc, #404]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	6713      	str	r3, [r2, #112]	; 0x70
 8004524:	e01c      	b.n	8004560 <HAL_RCC_OscConfig+0x354>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b05      	cmp	r3, #5
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x33c>
 800452e:	4b61      	ldr	r3, [pc, #388]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	4a60      	ldr	r2, [pc, #384]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 8004534:	f043 0304 	orr.w	r3, r3, #4
 8004538:	6713      	str	r3, [r2, #112]	; 0x70
 800453a:	4b5e      	ldr	r3, [pc, #376]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	4a5d      	ldr	r2, [pc, #372]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	6713      	str	r3, [r2, #112]	; 0x70
 8004546:	e00b      	b.n	8004560 <HAL_RCC_OscConfig+0x354>
 8004548:	4b5a      	ldr	r3, [pc, #360]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 800454a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454c:	4a59      	ldr	r2, [pc, #356]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	6713      	str	r3, [r2, #112]	; 0x70
 8004554:	4b57      	ldr	r3, [pc, #348]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	4a56      	ldr	r2, [pc, #344]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 800455a:	f023 0304 	bic.w	r3, r3, #4
 800455e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d015      	beq.n	8004594 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004568:	f7fd feae 	bl	80022c8 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456e:	e00a      	b.n	8004586 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004570:	f7fd feaa 	bl	80022c8 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	f241 3288 	movw	r2, #5000	; 0x1388
 800457e:	4293      	cmp	r3, r2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e092      	b.n	80046ac <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004586:	4b4b      	ldr	r3, [pc, #300]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0ee      	beq.n	8004570 <HAL_RCC_OscConfig+0x364>
 8004592:	e014      	b.n	80045be <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fd fe98 	bl	80022c8 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800459a:	e00a      	b.n	80045b2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800459c:	f7fd fe94 	bl	80022c8 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e07c      	b.n	80046ac <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b2:	4b40      	ldr	r3, [pc, #256]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1ee      	bne.n	800459c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045be:	7dfb      	ldrb	r3, [r7, #23]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d105      	bne.n	80045d0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c4:	4b3b      	ldr	r3, [pc, #236]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	4a3a      	ldr	r2, [pc, #232]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 80045ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d068      	beq.n	80046aa <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045d8:	4b36      	ldr	r3, [pc, #216]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 030c 	and.w	r3, r3, #12
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d060      	beq.n	80046a6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d145      	bne.n	8004678 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ec:	4b33      	ldr	r3, [pc, #204]	; (80046bc <HAL_RCC_OscConfig+0x4b0>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f2:	f7fd fe69 	bl	80022c8 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045fa:	f7fd fe65 	bl	80022c8 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e04f      	b.n	80046ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460c:	4b29      	ldr	r3, [pc, #164]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69da      	ldr	r2, [r3, #28]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	019b      	lsls	r3, r3, #6
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	085b      	lsrs	r3, r3, #1
 8004630:	3b01      	subs	r3, #1
 8004632:	041b      	lsls	r3, r3, #16
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	061b      	lsls	r3, r3, #24
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	071b      	lsls	r3, r3, #28
 8004644:	491b      	ldr	r1, [pc, #108]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 8004646:	4313      	orrs	r3, r2
 8004648:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800464a:	4b1c      	ldr	r3, [pc, #112]	; (80046bc <HAL_RCC_OscConfig+0x4b0>)
 800464c:	2201      	movs	r2, #1
 800464e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fd fe3a 	bl	80022c8 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004658:	f7fd fe36 	bl	80022c8 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e020      	b.n	80046ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466a:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0x44c>
 8004676:	e018      	b.n	80046aa <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004678:	4b10      	ldr	r3, [pc, #64]	; (80046bc <HAL_RCC_OscConfig+0x4b0>)
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467e:	f7fd fe23 	bl	80022c8 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004686:	f7fd fe1f 	bl	80022c8 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e009      	b.n	80046ac <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004698:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <HAL_RCC_OscConfig+0x4a8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1f0      	bne.n	8004686 <HAL_RCC_OscConfig+0x47a>
 80046a4:	e001      	b.n	80046aa <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40023800 	.word	0x40023800
 80046b8:	40007000 	.word	0x40007000
 80046bc:	42470060 	.word	0x42470060

080046c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e056      	b.n	8004780 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d106      	bne.n	80046f2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7fd fba7 	bl	8001e40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2202      	movs	r2, #2
 80046f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004708:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	ea42 0103 	orr.w	r1, r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	0c1b      	lsrs	r3, r3, #16
 8004750:	f003 0104 	and.w	r1, r3, #4
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	69da      	ldr	r2, [r3, #28]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <HAL_SPI_Transmit+0x22>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e11e      	b.n	80049e8 <HAL_SPI_Transmit+0x260>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047b2:	f7fd fd89 	bl	80022c8 <HAL_GetTick>
 80047b6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047b8:	88fb      	ldrh	r3, [r7, #6]
 80047ba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d002      	beq.n	80047ce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047c8:	2302      	movs	r3, #2
 80047ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047cc:	e103      	b.n	80049d6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_SPI_Transmit+0x52>
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d102      	bne.n	80047e0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047de:	e0fa      	b.n	80049d6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2203      	movs	r2, #3
 80047e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	88fa      	ldrh	r2, [r7, #6]
 80047f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	88fa      	ldrh	r2, [r7, #6]
 80047fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004826:	d107      	bne.n	8004838 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004836:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b40      	cmp	r3, #64	; 0x40
 8004844:	d007      	beq.n	8004856 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004854:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800485e:	d14b      	bne.n	80048f8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <HAL_SPI_Transmit+0xe6>
 8004868:	8afb      	ldrh	r3, [r7, #22]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d13e      	bne.n	80048ec <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	881a      	ldrh	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	1c9a      	adds	r2, r3, #2
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004892:	e02b      	b.n	80048ec <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d112      	bne.n	80048c8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	881a      	ldrh	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	1c9a      	adds	r2, r3, #2
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048bc:	b29b      	uxth	r3, r3
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80048c6:	e011      	b.n	80048ec <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048c8:	f7fd fcfe 	bl	80022c8 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d803      	bhi.n	80048e0 <HAL_SPI_Transmit+0x158>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048de:	d102      	bne.n	80048e6 <HAL_SPI_Transmit+0x15e>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d102      	bne.n	80048ec <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048ea:	e074      	b.n	80049d6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1ce      	bne.n	8004894 <HAL_SPI_Transmit+0x10c>
 80048f6:	e04c      	b.n	8004992 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <HAL_SPI_Transmit+0x17e>
 8004900:	8afb      	ldrh	r3, [r7, #22]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d140      	bne.n	8004988 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	7812      	ldrb	r2, [r2, #0]
 8004912:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800492c:	e02c      	b.n	8004988 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b02      	cmp	r3, #2
 800493a:	d113      	bne.n	8004964 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	330c      	adds	r3, #12
 8004946:	7812      	ldrb	r2, [r2, #0]
 8004948:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	86da      	strh	r2, [r3, #54]	; 0x36
 8004962:	e011      	b.n	8004988 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004964:	f7fd fcb0 	bl	80022c8 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d803      	bhi.n	800497c <HAL_SPI_Transmit+0x1f4>
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497a:	d102      	bne.n	8004982 <HAL_SPI_Transmit+0x1fa>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004986:	e026      	b.n	80049d6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1cd      	bne.n	800492e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	6839      	ldr	r1, [r7, #0]
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 fba4 	bl	80050e4 <SPI_EndRxTxTransaction>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2220      	movs	r2, #32
 80049a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049b0:	2300      	movs	r3, #0
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	77fb      	strb	r3, [r7, #31]
 80049d2:	e000      	b.n	80049d6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80049d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3720      	adds	r7, #32
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	4613      	mov	r3, r2
 80049fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a0c:	d112      	bne.n	8004a34 <HAL_SPI_Receive+0x44>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10e      	bne.n	8004a34 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2204      	movs	r2, #4
 8004a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a1e:	88fa      	ldrh	r2, [r7, #6]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	4613      	mov	r3, r2
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	68b9      	ldr	r1, [r7, #8]
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f8e9 	bl	8004c02 <HAL_SPI_TransmitReceive>
 8004a30:	4603      	mov	r3, r0
 8004a32:	e0e2      	b.n	8004bfa <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_SPI_Receive+0x52>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e0db      	b.n	8004bfa <HAL_SPI_Receive+0x20a>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a4a:	f7fd fc3d 	bl	80022c8 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d002      	beq.n	8004a62 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a60:	e0c2      	b.n	8004be8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <HAL_SPI_Receive+0x7e>
 8004a68:	88fb      	ldrh	r3, [r7, #6]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d102      	bne.n	8004a74 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a72:	e0b9      	b.n	8004be8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2204      	movs	r2, #4
 8004a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	88fa      	ldrh	r2, [r7, #6]
 8004a8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	88fa      	ldrh	r2, [r7, #6]
 8004a92:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aba:	d107      	bne.n	8004acc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004aca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad6:	2b40      	cmp	r3, #64	; 0x40
 8004ad8:	d007      	beq.n	8004aea <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ae8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d162      	bne.n	8004bb8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004af2:	e02e      	b.n	8004b52 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d115      	bne.n	8004b2e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f103 020c 	add.w	r2, r3, #12
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0e:	7812      	ldrb	r2, [r2, #0]
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b2c:	e011      	b.n	8004b52 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b2e:	f7fd fbcb 	bl	80022c8 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d803      	bhi.n	8004b46 <HAL_SPI_Receive+0x156>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b44:	d102      	bne.n	8004b4c <HAL_SPI_Receive+0x15c>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d102      	bne.n	8004b52 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b50:	e04a      	b.n	8004be8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1cb      	bne.n	8004af4 <HAL_SPI_Receive+0x104>
 8004b5c:	e031      	b.n	8004bc2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d113      	bne.n	8004b94 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	b292      	uxth	r2, r2
 8004b78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	1c9a      	adds	r2, r3, #2
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b92:	e011      	b.n	8004bb8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b94:	f7fd fb98 	bl	80022c8 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d803      	bhi.n	8004bac <HAL_SPI_Receive+0x1bc>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d102      	bne.n	8004bb2 <HAL_SPI_Receive+0x1c2>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d102      	bne.n	8004bb8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004bb6:	e017      	b.n	8004be8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1cd      	bne.n	8004b5e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	6839      	ldr	r1, [r7, #0]
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fa27 	bl	800501a <SPI_EndRxTransaction>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	75fb      	strb	r3, [r7, #23]
 8004be4:	e000      	b.n	8004be8 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004be6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b08c      	sub	sp, #48	; 0x30
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
 8004c0e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c10:	2301      	movs	r3, #1
 8004c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_SPI_TransmitReceive+0x26>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e18a      	b.n	8004f3e <HAL_SPI_TransmitReceive+0x33c>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c30:	f7fd fb4a 	bl	80022c8 <HAL_GetTick>
 8004c34:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c46:	887b      	ldrh	r3, [r7, #2]
 8004c48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d00f      	beq.n	8004c72 <HAL_SPI_TransmitReceive+0x70>
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c58:	d107      	bne.n	8004c6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d103      	bne.n	8004c6a <HAL_SPI_TransmitReceive+0x68>
 8004c62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d003      	beq.n	8004c72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c70:	e15b      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_SPI_TransmitReceive+0x82>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_SPI_TransmitReceive+0x82>
 8004c7e:	887b      	ldrh	r3, [r7, #2]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d103      	bne.n	8004c8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c8a:	e14e      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d003      	beq.n	8004ca0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2205      	movs	r2, #5
 8004c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	887a      	ldrh	r2, [r7, #2]
 8004cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	887a      	ldrh	r2, [r7, #2]
 8004cb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	887a      	ldrh	r2, [r7, #2]
 8004cc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	887a      	ldrh	r2, [r7, #2]
 8004cc8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce0:	2b40      	cmp	r3, #64	; 0x40
 8004ce2:	d007      	beq.n	8004cf4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cfc:	d178      	bne.n	8004df0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_SPI_TransmitReceive+0x10a>
 8004d06:	8b7b      	ldrh	r3, [r7, #26]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d166      	bne.n	8004dda <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	881a      	ldrh	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	1c9a      	adds	r2, r3, #2
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d30:	e053      	b.n	8004dda <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d11b      	bne.n	8004d78 <HAL_SPI_TransmitReceive+0x176>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d016      	beq.n	8004d78 <HAL_SPI_TransmitReceive+0x176>
 8004d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d113      	bne.n	8004d78 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	881a      	ldrh	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d60:	1c9a      	adds	r2, r3, #2
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d119      	bne.n	8004dba <HAL_SPI_TransmitReceive+0x1b8>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d014      	beq.n	8004dba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	b292      	uxth	r2, r2
 8004d9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	1c9a      	adds	r2, r3, #2
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004db6:	2301      	movs	r3, #1
 8004db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dba:	f7fd fa85 	bl	80022c8 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d807      	bhi.n	8004dda <HAL_SPI_TransmitReceive+0x1d8>
 8004dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd0:	d003      	beq.n	8004dda <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004dd8:	e0a7      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1a6      	bne.n	8004d32 <HAL_SPI_TransmitReceive+0x130>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1a1      	bne.n	8004d32 <HAL_SPI_TransmitReceive+0x130>
 8004dee:	e07c      	b.n	8004eea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <HAL_SPI_TransmitReceive+0x1fc>
 8004df8:	8b7b      	ldrh	r3, [r7, #26]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d16b      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	330c      	adds	r3, #12
 8004e08:	7812      	ldrb	r2, [r2, #0]
 8004e0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e24:	e057      	b.n	8004ed6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d11c      	bne.n	8004e6e <HAL_SPI_TransmitReceive+0x26c>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d017      	beq.n	8004e6e <HAL_SPI_TransmitReceive+0x26c>
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d114      	bne.n	8004e6e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	330c      	adds	r3, #12
 8004e4e:	7812      	ldrb	r2, [r2, #0]
 8004e50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d119      	bne.n	8004eb0 <HAL_SPI_TransmitReceive+0x2ae>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d014      	beq.n	8004eb0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eac:	2301      	movs	r3, #1
 8004eae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eb0:	f7fd fa0a 	bl	80022c8 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d803      	bhi.n	8004ec8 <HAL_SPI_TransmitReceive+0x2c6>
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec6:	d102      	bne.n	8004ece <HAL_SPI_TransmitReceive+0x2cc>
 8004ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d103      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ed4:	e029      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1a2      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x224>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d19d      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f8f8 	bl	80050e4 <SPI_EndRxTxTransaction>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d006      	beq.n	8004f08 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f06:	e010      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10b      	bne.n	8004f28 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f10:	2300      	movs	r3, #0
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	e000      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3730      	adds	r7, #48	; 0x30
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	603b      	str	r3, [r7, #0]
 8004f52:	4613      	mov	r3, r2
 8004f54:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f56:	e04c      	b.n	8004ff2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5e:	d048      	beq.n	8004ff2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004f60:	f7fd f9b2 	bl	80022c8 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d902      	bls.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d13d      	bne.n	8004ff2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f8e:	d111      	bne.n	8004fb4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f98:	d004      	beq.n	8004fa4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa2:	d107      	bne.n	8004fb4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fbc:	d10f      	bne.n	8004fde <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e00f      	b.n	8005012 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	bf0c      	ite	eq
 8005002:	2301      	moveq	r3, #1
 8005004:	2300      	movne	r3, #0
 8005006:	b2db      	uxtb	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	429a      	cmp	r2, r3
 800500e:	d1a3      	bne.n	8004f58 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b086      	sub	sp, #24
 800501e:	af02      	add	r7, sp, #8
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800502e:	d111      	bne.n	8005054 <SPI_EndRxTransaction+0x3a>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005038:	d004      	beq.n	8005044 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005042:	d107      	bne.n	8005054 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005052:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800505c:	d12a      	bne.n	80050b4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005066:	d012      	beq.n	800508e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2200      	movs	r2, #0
 8005070:	2180      	movs	r1, #128	; 0x80
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7ff ff67 	bl	8004f46 <SPI_WaitFlagStateUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d02d      	beq.n	80050da <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005082:	f043 0220 	orr.w	r2, r3, #32
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e026      	b.n	80050dc <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2200      	movs	r2, #0
 8005096:	2101      	movs	r1, #1
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f7ff ff54 	bl	8004f46 <SPI_WaitFlagStateUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01a      	beq.n	80050da <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a8:	f043 0220 	orr.w	r2, r3, #32
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e013      	b.n	80050dc <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2200      	movs	r2, #0
 80050bc:	2101      	movs	r1, #1
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f7ff ff41 	bl	8004f46 <SPI_WaitFlagStateUntilTimeout>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d007      	beq.n	80050da <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	f043 0220 	orr.w	r2, r3, #32
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e000      	b.n	80050dc <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050f0:	4b1b      	ldr	r3, [pc, #108]	; (8005160 <SPI_EndRxTxTransaction+0x7c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1b      	ldr	r2, [pc, #108]	; (8005164 <SPI_EndRxTxTransaction+0x80>)
 80050f6:	fba2 2303 	umull	r2, r3, r2, r3
 80050fa:	0d5b      	lsrs	r3, r3, #21
 80050fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005100:	fb02 f303 	mul.w	r3, r2, r3
 8005104:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510e:	d112      	bne.n	8005136 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2200      	movs	r2, #0
 8005118:	2180      	movs	r1, #128	; 0x80
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f7ff ff13 	bl	8004f46 <SPI_WaitFlagStateUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d016      	beq.n	8005154 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512a:	f043 0220 	orr.w	r2, r3, #32
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e00f      	b.n	8005156 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3b01      	subs	r3, #1
 8005140:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514c:	2b80      	cmp	r3, #128	; 0x80
 800514e:	d0f2      	beq.n	8005136 <SPI_EndRxTxTransaction+0x52>
 8005150:	e000      	b.n	8005154 <SPI_EndRxTxTransaction+0x70>
        break;
 8005152:	bf00      	nop
  }

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20000004 	.word	0x20000004
 8005164:	165e9f81 	.word	0x165e9f81

08005168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e01d      	b.n	80051b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d106      	bne.n	8005194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fc fece 	bl	8001f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3304      	adds	r3, #4
 80051a4:	4619      	mov	r1, r3
 80051a6:	4610      	mov	r0, r2
 80051a8:	f000 f8e4 	bl	8005374 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051be:	b480      	push	{r7}
 80051c0:	b085      	sub	sp, #20
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2202      	movs	r2, #2
 80051ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b06      	cmp	r3, #6
 80051de:	d007      	beq.n	80051f0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0201 	orr.w	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <HAL_TIM_ConfigClockSource+0x18>
 800521a:	2302      	movs	r3, #2
 800521c:	e0a6      	b.n	800536c <HAL_TIM_ConfigClockSource+0x166>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800523c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005244:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b40      	cmp	r3, #64	; 0x40
 8005254:	d067      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0x120>
 8005256:	2b40      	cmp	r3, #64	; 0x40
 8005258:	d80b      	bhi.n	8005272 <HAL_TIM_ConfigClockSource+0x6c>
 800525a:	2b10      	cmp	r3, #16
 800525c:	d073      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x140>
 800525e:	2b10      	cmp	r3, #16
 8005260:	d802      	bhi.n	8005268 <HAL_TIM_ConfigClockSource+0x62>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d06f      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005266:	e078      	b.n	800535a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005268:	2b20      	cmp	r3, #32
 800526a:	d06c      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x140>
 800526c:	2b30      	cmp	r3, #48	; 0x30
 800526e:	d06a      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005270:	e073      	b.n	800535a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005272:	2b70      	cmp	r3, #112	; 0x70
 8005274:	d00d      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0x8c>
 8005276:	2b70      	cmp	r3, #112	; 0x70
 8005278:	d804      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x7e>
 800527a:	2b50      	cmp	r3, #80	; 0x50
 800527c:	d033      	beq.n	80052e6 <HAL_TIM_ConfigClockSource+0xe0>
 800527e:	2b60      	cmp	r3, #96	; 0x60
 8005280:	d041      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005282:	e06a      	b.n	800535a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005288:	d066      	beq.n	8005358 <HAL_TIM_ConfigClockSource+0x152>
 800528a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800528e:	d017      	beq.n	80052c0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005290:	e063      	b.n	800535a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6899      	ldr	r1, [r3, #8]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f000 f981 	bl	80055a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	609a      	str	r2, [r3, #8]
      break;
 80052be:	e04c      	b.n	800535a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6818      	ldr	r0, [r3, #0]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	6899      	ldr	r1, [r3, #8]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f000 f96a 	bl	80055a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052e2:	609a      	str	r2, [r3, #8]
      break;
 80052e4:	e039      	b.n	800535a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	6859      	ldr	r1, [r3, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f000 f8de 	bl	80054b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2150      	movs	r1, #80	; 0x50
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f937 	bl	8005572 <TIM_ITRx_SetConfig>
      break;
 8005304:	e029      	b.n	800535a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	6859      	ldr	r1, [r3, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	461a      	mov	r2, r3
 8005314:	f000 f8fd 	bl	8005512 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2160      	movs	r1, #96	; 0x60
 800531e:	4618      	mov	r0, r3
 8005320:	f000 f927 	bl	8005572 <TIM_ITRx_SetConfig>
      break;
 8005324:	e019      	b.n	800535a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6818      	ldr	r0, [r3, #0]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6859      	ldr	r1, [r3, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	461a      	mov	r2, r3
 8005334:	f000 f8be 	bl	80054b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2140      	movs	r1, #64	; 0x40
 800533e:	4618      	mov	r0, r3
 8005340:	f000 f917 	bl	8005572 <TIM_ITRx_SetConfig>
      break;
 8005344:	e009      	b.n	800535a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4619      	mov	r1, r3
 8005350:	4610      	mov	r0, r2
 8005352:	f000 f90e 	bl	8005572 <TIM_ITRx_SetConfig>
      break;
 8005356:	e000      	b.n	800535a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005358:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a40      	ldr	r2, [pc, #256]	; (8005488 <TIM_Base_SetConfig+0x114>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d013      	beq.n	80053b4 <TIM_Base_SetConfig+0x40>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005392:	d00f      	beq.n	80053b4 <TIM_Base_SetConfig+0x40>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a3d      	ldr	r2, [pc, #244]	; (800548c <TIM_Base_SetConfig+0x118>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00b      	beq.n	80053b4 <TIM_Base_SetConfig+0x40>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a3c      	ldr	r2, [pc, #240]	; (8005490 <TIM_Base_SetConfig+0x11c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d007      	beq.n	80053b4 <TIM_Base_SetConfig+0x40>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a3b      	ldr	r2, [pc, #236]	; (8005494 <TIM_Base_SetConfig+0x120>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d003      	beq.n	80053b4 <TIM_Base_SetConfig+0x40>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a3a      	ldr	r2, [pc, #232]	; (8005498 <TIM_Base_SetConfig+0x124>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d108      	bne.n	80053c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a2f      	ldr	r2, [pc, #188]	; (8005488 <TIM_Base_SetConfig+0x114>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d02b      	beq.n	8005426 <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d4:	d027      	beq.n	8005426 <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a2c      	ldr	r2, [pc, #176]	; (800548c <TIM_Base_SetConfig+0x118>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d023      	beq.n	8005426 <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a2b      	ldr	r2, [pc, #172]	; (8005490 <TIM_Base_SetConfig+0x11c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d01f      	beq.n	8005426 <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a2a      	ldr	r2, [pc, #168]	; (8005494 <TIM_Base_SetConfig+0x120>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d01b      	beq.n	8005426 <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a29      	ldr	r2, [pc, #164]	; (8005498 <TIM_Base_SetConfig+0x124>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d017      	beq.n	8005426 <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a28      	ldr	r2, [pc, #160]	; (800549c <TIM_Base_SetConfig+0x128>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d013      	beq.n	8005426 <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a27      	ldr	r2, [pc, #156]	; (80054a0 <TIM_Base_SetConfig+0x12c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00f      	beq.n	8005426 <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a26      	ldr	r2, [pc, #152]	; (80054a4 <TIM_Base_SetConfig+0x130>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00b      	beq.n	8005426 <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a25      	ldr	r2, [pc, #148]	; (80054a8 <TIM_Base_SetConfig+0x134>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d007      	beq.n	8005426 <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a24      	ldr	r2, [pc, #144]	; (80054ac <TIM_Base_SetConfig+0x138>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d003      	beq.n	8005426 <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a23      	ldr	r2, [pc, #140]	; (80054b0 <TIM_Base_SetConfig+0x13c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d108      	bne.n	8005438 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4313      	orrs	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a0a      	ldr	r2, [pc, #40]	; (8005488 <TIM_Base_SetConfig+0x114>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d003      	beq.n	800546c <TIM_Base_SetConfig+0xf8>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a0c      	ldr	r2, [pc, #48]	; (8005498 <TIM_Base_SetConfig+0x124>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d103      	bne.n	8005474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	615a      	str	r2, [r3, #20]
}
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40010000 	.word	0x40010000
 800548c:	40000400 	.word	0x40000400
 8005490:	40000800 	.word	0x40000800
 8005494:	40000c00 	.word	0x40000c00
 8005498:	40010400 	.word	0x40010400
 800549c:	40014000 	.word	0x40014000
 80054a0:	40014400 	.word	0x40014400
 80054a4:	40014800 	.word	0x40014800
 80054a8:	40001800 	.word	0x40001800
 80054ac:	40001c00 	.word	0x40001c00
 80054b0:	40002000 	.word	0x40002000

080054b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	f023 0201 	bic.w	r2, r3, #1
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f023 030a 	bic.w	r3, r3, #10
 80054f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	621a      	str	r2, [r3, #32]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005512:	b480      	push	{r7}
 8005514:	b087      	sub	sp, #28
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f023 0210 	bic.w	r2, r3, #16
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800553c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	031b      	lsls	r3, r3, #12
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800554e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005572:	b480      	push	{r7}
 8005574:	b085      	sub	sp, #20
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	f043 0307 	orr.w	r3, r3, #7
 8005594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	609a      	str	r2, [r3, #8]
}
 800559c:	bf00      	nop
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	021a      	lsls	r2, r3, #8
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	609a      	str	r2, [r3, #8]
}
 80055dc:	bf00      	nop
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e05a      	b.n	80056b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005626:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a21      	ldr	r2, [pc, #132]	; (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d022      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564c:	d01d      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1d      	ldr	r2, [pc, #116]	; (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d018      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a1b      	ldr	r2, [pc, #108]	; (80056cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a1a      	ldr	r2, [pc, #104]	; (80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00e      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a18      	ldr	r2, [pc, #96]	; (80056d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d009      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a17      	ldr	r2, [pc, #92]	; (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d004      	beq.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a15      	ldr	r2, [pc, #84]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d10c      	bne.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	4313      	orrs	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40010000 	.word	0x40010000
 80056c8:	40000400 	.word	0x40000400
 80056cc:	40000800 	.word	0x40000800
 80056d0:	40000c00 	.word	0x40000c00
 80056d4:	40010400 	.word	0x40010400
 80056d8:	40014000 	.word	0x40014000
 80056dc:	40001800 	.word	0x40001800

080056e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e03f      	b.n	8005772 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fc fc48 	bl	8001f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2224      	movs	r2, #36	; 0x24
 8005710:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fa4b 	bl	8005bc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	695a      	ldr	r2, [r3, #20]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2220      	movs	r2, #32
 800576c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b088      	sub	sp, #32
 800577e:	af02      	add	r7, sp, #8
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	603b      	str	r3, [r7, #0]
 8005786:	4613      	mov	r3, r2
 8005788:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b20      	cmp	r3, #32
 8005798:	f040 8083 	bne.w	80058a2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <HAL_UART_Transmit+0x2e>
 80057a2:	88fb      	ldrh	r3, [r7, #6]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e07b      	b.n	80058a4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d101      	bne.n	80057ba <HAL_UART_Transmit+0x40>
 80057b6:	2302      	movs	r3, #2
 80057b8:	e074      	b.n	80058a4 <HAL_UART_Transmit+0x12a>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2221      	movs	r2, #33	; 0x21
 80057cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80057d0:	f7fc fd7a 	bl	80022c8 <HAL_GetTick>
 80057d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	88fa      	ldrh	r2, [r7, #6]
 80057da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	88fa      	ldrh	r2, [r7, #6]
 80057e0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80057ea:	e042      	b.n	8005872 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005802:	d122      	bne.n	800584a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2200      	movs	r2, #0
 800580c:	2180      	movs	r1, #128	; 0x80
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 f957 	bl	8005ac2 <UART_WaitOnFlagUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e042      	b.n	80058a4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005830:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d103      	bne.n	8005842 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	3302      	adds	r3, #2
 800583e:	60bb      	str	r3, [r7, #8]
 8005840:	e017      	b.n	8005872 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	3301      	adds	r3, #1
 8005846:	60bb      	str	r3, [r7, #8]
 8005848:	e013      	b.n	8005872 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2200      	movs	r2, #0
 8005852:	2180      	movs	r1, #128	; 0x80
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 f934 	bl	8005ac2 <UART_WaitOnFlagUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e01f      	b.n	80058a4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	60ba      	str	r2, [r7, #8]
 800586a:	781a      	ldrb	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1b7      	bne.n	80057ec <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2200      	movs	r2, #0
 8005884:	2140      	movs	r1, #64	; 0x40
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 f91b 	bl	8005ac2 <UART_WaitOnFlagUntilTimeout>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e006      	b.n	80058a4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	e000      	b.n	80058a4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80058a2:	2302      	movs	r3, #2
  }
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	4613      	mov	r3, r2
 80058b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	d153      	bne.n	800596e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <HAL_UART_Transmit_DMA+0x26>
 80058cc:	88fb      	ldrh	r3, [r7, #6]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e04c      	b.n	8005970 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_UART_Transmit_DMA+0x38>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e045      	b.n	8005970 <HAL_UART_Transmit_DMA+0xc4>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	88fa      	ldrh	r2, [r7, #6]
 80058f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	88fa      	ldrh	r2, [r7, #6]
 80058fc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2221      	movs	r2, #33	; 0x21
 8005908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	4a19      	ldr	r2, [pc, #100]	; (8005978 <HAL_UART_Transmit_DMA+0xcc>)
 8005912:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005918:	4a18      	ldr	r2, [pc, #96]	; (800597c <HAL_UART_Transmit_DMA+0xd0>)
 800591a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	4a17      	ldr	r2, [pc, #92]	; (8005980 <HAL_UART_Transmit_DMA+0xd4>)
 8005922:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005928:	2200      	movs	r2, #0
 800592a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800592c:	f107 0308 	add.w	r3, r7, #8
 8005930:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	6819      	ldr	r1, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3304      	adds	r3, #4
 8005940:	461a      	mov	r2, r3
 8005942:	88fb      	ldrh	r3, [r7, #6]
 8005944:	f7fd fc90 	bl	8003268 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005950:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005968:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	e000      	b.n	8005970 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800596e:	2302      	movs	r3, #2
  }
}
 8005970:	4618      	mov	r0, r3
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	080059c1 	.word	0x080059c1
 800597c:	08005a13 	.word	0x08005a13
 8005980:	08005a2f 	.word	0x08005a2f

08005984 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d113      	bne.n	8005a04 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695a      	ldr	r2, [r3, #20]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059f0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a00:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a02:	e002      	b.n	8005a0a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7ff ffbd 	bl	8005984 <HAL_UART_TxCpltCallback>
}
 8005a0a:	bf00      	nop
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f7ff ffb9 	bl	8005998 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a26:	bf00      	nop
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4a:	2b80      	cmp	r3, #128	; 0x80
 8005a4c:	bf0c      	ite	eq
 8005a4e:	2301      	moveq	r3, #1
 8005a50:	2300      	movne	r3, #0
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b21      	cmp	r3, #33	; 0x21
 8005a60:	d108      	bne.n	8005a74 <UART_DMAError+0x46>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005a6e:	68b8      	ldr	r0, [r7, #8]
 8005a70:	f000 f871 	bl	8005b56 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7e:	2b40      	cmp	r3, #64	; 0x40
 8005a80:	bf0c      	ite	eq
 8005a82:	2301      	moveq	r3, #1
 8005a84:	2300      	movne	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b22      	cmp	r3, #34	; 0x22
 8005a94:	d108      	bne.n	8005aa8 <UART_DMAError+0x7a>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005aa2:	68b8      	ldr	r0, [r7, #8]
 8005aa4:	f000 f86d 	bl	8005b82 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aac:	f043 0210 	orr.w	r2, r3, #16
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ab4:	68b8      	ldr	r0, [r7, #8]
 8005ab6:	f7ff ff79 	bl	80059ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aba:	bf00      	nop
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	60f8      	str	r0, [r7, #12]
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	603b      	str	r3, [r7, #0]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad2:	e02c      	b.n	8005b2e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ada:	d028      	beq.n	8005b2e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d007      	beq.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ae2:	f7fc fbf1 	bl	80022c8 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d21d      	bcs.n	8005b2e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68da      	ldr	r2, [r3, #12]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b00:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695a      	ldr	r2, [r3, #20]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0201 	bic.w	r2, r2, #1
 8005b10:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e00f      	b.n	8005b4e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	4013      	ands	r3, r2
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	bf0c      	ite	eq
 8005b3e:	2301      	moveq	r3, #1
 8005b40:	2300      	movne	r3, #0
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	461a      	mov	r2, r3
 8005b46:	79fb      	ldrb	r3, [r7, #7]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d0c3      	beq.n	8005ad4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005b6c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b98:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695a      	ldr	r2, [r3, #20]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0201 	bic.w	r2, r2, #1
 8005ba8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc4:	b085      	sub	sp, #20
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c02:	f023 030c 	bic.w	r3, r3, #12
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	68f9      	ldr	r1, [r7, #12]
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699a      	ldr	r2, [r3, #24]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c2e:	f040 818b 	bne.w	8005f48 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4ac1      	ldr	r2, [pc, #772]	; (8005f3c <UART_SetConfig+0x37c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d005      	beq.n	8005c48 <UART_SetConfig+0x88>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4abf      	ldr	r2, [pc, #764]	; (8005f40 <UART_SetConfig+0x380>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	f040 80bd 	bne.w	8005dc2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c48:	f7fe f92c 	bl	8003ea4 <HAL_RCC_GetPCLK2Freq>
 8005c4c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	461d      	mov	r5, r3
 8005c52:	f04f 0600 	mov.w	r6, #0
 8005c56:	46a8      	mov	r8, r5
 8005c58:	46b1      	mov	r9, r6
 8005c5a:	eb18 0308 	adds.w	r3, r8, r8
 8005c5e:	eb49 0409 	adc.w	r4, r9, r9
 8005c62:	4698      	mov	r8, r3
 8005c64:	46a1      	mov	r9, r4
 8005c66:	eb18 0805 	adds.w	r8, r8, r5
 8005c6a:	eb49 0906 	adc.w	r9, r9, r6
 8005c6e:	f04f 0100 	mov.w	r1, #0
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c7a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c82:	4688      	mov	r8, r1
 8005c84:	4691      	mov	r9, r2
 8005c86:	eb18 0005 	adds.w	r0, r8, r5
 8005c8a:	eb49 0106 	adc.w	r1, r9, r6
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	461d      	mov	r5, r3
 8005c94:	f04f 0600 	mov.w	r6, #0
 8005c98:	196b      	adds	r3, r5, r5
 8005c9a:	eb46 0406 	adc.w	r4, r6, r6
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	4623      	mov	r3, r4
 8005ca2:	f7fa faaf 	bl	8000204 <__aeabi_uldivmod>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	460c      	mov	r4, r1
 8005caa:	461a      	mov	r2, r3
 8005cac:	4ba5      	ldr	r3, [pc, #660]	; (8005f44 <UART_SetConfig+0x384>)
 8005cae:	fba3 2302 	umull	r2, r3, r3, r2
 8005cb2:	095b      	lsrs	r3, r3, #5
 8005cb4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	461d      	mov	r5, r3
 8005cbc:	f04f 0600 	mov.w	r6, #0
 8005cc0:	46a9      	mov	r9, r5
 8005cc2:	46b2      	mov	sl, r6
 8005cc4:	eb19 0309 	adds.w	r3, r9, r9
 8005cc8:	eb4a 040a 	adc.w	r4, sl, sl
 8005ccc:	4699      	mov	r9, r3
 8005cce:	46a2      	mov	sl, r4
 8005cd0:	eb19 0905 	adds.w	r9, r9, r5
 8005cd4:	eb4a 0a06 	adc.w	sl, sl, r6
 8005cd8:	f04f 0100 	mov.w	r1, #0
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ce4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ce8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cec:	4689      	mov	r9, r1
 8005cee:	4692      	mov	sl, r2
 8005cf0:	eb19 0005 	adds.w	r0, r9, r5
 8005cf4:	eb4a 0106 	adc.w	r1, sl, r6
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	461d      	mov	r5, r3
 8005cfe:	f04f 0600 	mov.w	r6, #0
 8005d02:	196b      	adds	r3, r5, r5
 8005d04:	eb46 0406 	adc.w	r4, r6, r6
 8005d08:	461a      	mov	r2, r3
 8005d0a:	4623      	mov	r3, r4
 8005d0c:	f7fa fa7a 	bl	8000204 <__aeabi_uldivmod>
 8005d10:	4603      	mov	r3, r0
 8005d12:	460c      	mov	r4, r1
 8005d14:	461a      	mov	r2, r3
 8005d16:	4b8b      	ldr	r3, [pc, #556]	; (8005f44 <UART_SetConfig+0x384>)
 8005d18:	fba3 1302 	umull	r1, r3, r3, r2
 8005d1c:	095b      	lsrs	r3, r3, #5
 8005d1e:	2164      	movs	r1, #100	; 0x64
 8005d20:	fb01 f303 	mul.w	r3, r1, r3
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	3332      	adds	r3, #50	; 0x32
 8005d2a:	4a86      	ldr	r2, [pc, #536]	; (8005f44 <UART_SetConfig+0x384>)
 8005d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d30:	095b      	lsrs	r3, r3, #5
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d38:	4498      	add	r8, r3
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	461d      	mov	r5, r3
 8005d3e:	f04f 0600 	mov.w	r6, #0
 8005d42:	46a9      	mov	r9, r5
 8005d44:	46b2      	mov	sl, r6
 8005d46:	eb19 0309 	adds.w	r3, r9, r9
 8005d4a:	eb4a 040a 	adc.w	r4, sl, sl
 8005d4e:	4699      	mov	r9, r3
 8005d50:	46a2      	mov	sl, r4
 8005d52:	eb19 0905 	adds.w	r9, r9, r5
 8005d56:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d5a:	f04f 0100 	mov.w	r1, #0
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d6e:	4689      	mov	r9, r1
 8005d70:	4692      	mov	sl, r2
 8005d72:	eb19 0005 	adds.w	r0, r9, r5
 8005d76:	eb4a 0106 	adc.w	r1, sl, r6
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	461d      	mov	r5, r3
 8005d80:	f04f 0600 	mov.w	r6, #0
 8005d84:	196b      	adds	r3, r5, r5
 8005d86:	eb46 0406 	adc.w	r4, r6, r6
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	4623      	mov	r3, r4
 8005d8e:	f7fa fa39 	bl	8000204 <__aeabi_uldivmod>
 8005d92:	4603      	mov	r3, r0
 8005d94:	460c      	mov	r4, r1
 8005d96:	461a      	mov	r2, r3
 8005d98:	4b6a      	ldr	r3, [pc, #424]	; (8005f44 <UART_SetConfig+0x384>)
 8005d9a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d9e:	095b      	lsrs	r3, r3, #5
 8005da0:	2164      	movs	r1, #100	; 0x64
 8005da2:	fb01 f303 	mul.w	r3, r1, r3
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	3332      	adds	r3, #50	; 0x32
 8005dac:	4a65      	ldr	r2, [pc, #404]	; (8005f44 <UART_SetConfig+0x384>)
 8005dae:	fba2 2303 	umull	r2, r3, r2, r3
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	f003 0207 	and.w	r2, r3, #7
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4442      	add	r2, r8
 8005dbe:	609a      	str	r2, [r3, #8]
 8005dc0:	e26f      	b.n	80062a2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dc2:	f7fe f85b 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 8005dc6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	461d      	mov	r5, r3
 8005dcc:	f04f 0600 	mov.w	r6, #0
 8005dd0:	46a8      	mov	r8, r5
 8005dd2:	46b1      	mov	r9, r6
 8005dd4:	eb18 0308 	adds.w	r3, r8, r8
 8005dd8:	eb49 0409 	adc.w	r4, r9, r9
 8005ddc:	4698      	mov	r8, r3
 8005dde:	46a1      	mov	r9, r4
 8005de0:	eb18 0805 	adds.w	r8, r8, r5
 8005de4:	eb49 0906 	adc.w	r9, r9, r6
 8005de8:	f04f 0100 	mov.w	r1, #0
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005df4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005df8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005dfc:	4688      	mov	r8, r1
 8005dfe:	4691      	mov	r9, r2
 8005e00:	eb18 0005 	adds.w	r0, r8, r5
 8005e04:	eb49 0106 	adc.w	r1, r9, r6
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	461d      	mov	r5, r3
 8005e0e:	f04f 0600 	mov.w	r6, #0
 8005e12:	196b      	adds	r3, r5, r5
 8005e14:	eb46 0406 	adc.w	r4, r6, r6
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4623      	mov	r3, r4
 8005e1c:	f7fa f9f2 	bl	8000204 <__aeabi_uldivmod>
 8005e20:	4603      	mov	r3, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	461a      	mov	r2, r3
 8005e26:	4b47      	ldr	r3, [pc, #284]	; (8005f44 <UART_SetConfig+0x384>)
 8005e28:	fba3 2302 	umull	r2, r3, r3, r2
 8005e2c:	095b      	lsrs	r3, r3, #5
 8005e2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	461d      	mov	r5, r3
 8005e36:	f04f 0600 	mov.w	r6, #0
 8005e3a:	46a9      	mov	r9, r5
 8005e3c:	46b2      	mov	sl, r6
 8005e3e:	eb19 0309 	adds.w	r3, r9, r9
 8005e42:	eb4a 040a 	adc.w	r4, sl, sl
 8005e46:	4699      	mov	r9, r3
 8005e48:	46a2      	mov	sl, r4
 8005e4a:	eb19 0905 	adds.w	r9, r9, r5
 8005e4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e52:	f04f 0100 	mov.w	r1, #0
 8005e56:	f04f 0200 	mov.w	r2, #0
 8005e5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e66:	4689      	mov	r9, r1
 8005e68:	4692      	mov	sl, r2
 8005e6a:	eb19 0005 	adds.w	r0, r9, r5
 8005e6e:	eb4a 0106 	adc.w	r1, sl, r6
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	461d      	mov	r5, r3
 8005e78:	f04f 0600 	mov.w	r6, #0
 8005e7c:	196b      	adds	r3, r5, r5
 8005e7e:	eb46 0406 	adc.w	r4, r6, r6
 8005e82:	461a      	mov	r2, r3
 8005e84:	4623      	mov	r3, r4
 8005e86:	f7fa f9bd 	bl	8000204 <__aeabi_uldivmod>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	461a      	mov	r2, r3
 8005e90:	4b2c      	ldr	r3, [pc, #176]	; (8005f44 <UART_SetConfig+0x384>)
 8005e92:	fba3 1302 	umull	r1, r3, r3, r2
 8005e96:	095b      	lsrs	r3, r3, #5
 8005e98:	2164      	movs	r1, #100	; 0x64
 8005e9a:	fb01 f303 	mul.w	r3, r1, r3
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	3332      	adds	r3, #50	; 0x32
 8005ea4:	4a27      	ldr	r2, [pc, #156]	; (8005f44 <UART_SetConfig+0x384>)
 8005ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005eb2:	4498      	add	r8, r3
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	461d      	mov	r5, r3
 8005eb8:	f04f 0600 	mov.w	r6, #0
 8005ebc:	46a9      	mov	r9, r5
 8005ebe:	46b2      	mov	sl, r6
 8005ec0:	eb19 0309 	adds.w	r3, r9, r9
 8005ec4:	eb4a 040a 	adc.w	r4, sl, sl
 8005ec8:	4699      	mov	r9, r3
 8005eca:	46a2      	mov	sl, r4
 8005ecc:	eb19 0905 	adds.w	r9, r9, r5
 8005ed0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ed4:	f04f 0100 	mov.w	r1, #0
 8005ed8:	f04f 0200 	mov.w	r2, #0
 8005edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ee0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ee4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ee8:	4689      	mov	r9, r1
 8005eea:	4692      	mov	sl, r2
 8005eec:	eb19 0005 	adds.w	r0, r9, r5
 8005ef0:	eb4a 0106 	adc.w	r1, sl, r6
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	461d      	mov	r5, r3
 8005efa:	f04f 0600 	mov.w	r6, #0
 8005efe:	196b      	adds	r3, r5, r5
 8005f00:	eb46 0406 	adc.w	r4, r6, r6
 8005f04:	461a      	mov	r2, r3
 8005f06:	4623      	mov	r3, r4
 8005f08:	f7fa f97c 	bl	8000204 <__aeabi_uldivmod>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	460c      	mov	r4, r1
 8005f10:	461a      	mov	r2, r3
 8005f12:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <UART_SetConfig+0x384>)
 8005f14:	fba3 1302 	umull	r1, r3, r3, r2
 8005f18:	095b      	lsrs	r3, r3, #5
 8005f1a:	2164      	movs	r1, #100	; 0x64
 8005f1c:	fb01 f303 	mul.w	r3, r1, r3
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	3332      	adds	r3, #50	; 0x32
 8005f26:	4a07      	ldr	r2, [pc, #28]	; (8005f44 <UART_SetConfig+0x384>)
 8005f28:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	f003 0207 	and.w	r2, r3, #7
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4442      	add	r2, r8
 8005f38:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005f3a:	e1b2      	b.n	80062a2 <UART_SetConfig+0x6e2>
 8005f3c:	40011000 	.word	0x40011000
 8005f40:	40011400 	.word	0x40011400
 8005f44:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4ad7      	ldr	r2, [pc, #860]	; (80062ac <UART_SetConfig+0x6ec>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d005      	beq.n	8005f5e <UART_SetConfig+0x39e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4ad6      	ldr	r2, [pc, #856]	; (80062b0 <UART_SetConfig+0x6f0>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	f040 80d1 	bne.w	8006100 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f5e:	f7fd ffa1 	bl	8003ea4 <HAL_RCC_GetPCLK2Freq>
 8005f62:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	469a      	mov	sl, r3
 8005f68:	f04f 0b00 	mov.w	fp, #0
 8005f6c:	46d0      	mov	r8, sl
 8005f6e:	46d9      	mov	r9, fp
 8005f70:	eb18 0308 	adds.w	r3, r8, r8
 8005f74:	eb49 0409 	adc.w	r4, r9, r9
 8005f78:	4698      	mov	r8, r3
 8005f7a:	46a1      	mov	r9, r4
 8005f7c:	eb18 080a 	adds.w	r8, r8, sl
 8005f80:	eb49 090b 	adc.w	r9, r9, fp
 8005f84:	f04f 0100 	mov.w	r1, #0
 8005f88:	f04f 0200 	mov.w	r2, #0
 8005f8c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f90:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f94:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f98:	4688      	mov	r8, r1
 8005f9a:	4691      	mov	r9, r2
 8005f9c:	eb1a 0508 	adds.w	r5, sl, r8
 8005fa0:	eb4b 0609 	adc.w	r6, fp, r9
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	4619      	mov	r1, r3
 8005faa:	f04f 0200 	mov.w	r2, #0
 8005fae:	f04f 0300 	mov.w	r3, #0
 8005fb2:	f04f 0400 	mov.w	r4, #0
 8005fb6:	0094      	lsls	r4, r2, #2
 8005fb8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fbc:	008b      	lsls	r3, r1, #2
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	4623      	mov	r3, r4
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	4631      	mov	r1, r6
 8005fc6:	f7fa f91d 	bl	8000204 <__aeabi_uldivmod>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	460c      	mov	r4, r1
 8005fce:	461a      	mov	r2, r3
 8005fd0:	4bb8      	ldr	r3, [pc, #736]	; (80062b4 <UART_SetConfig+0x6f4>)
 8005fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8005fd6:	095b      	lsrs	r3, r3, #5
 8005fd8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	469b      	mov	fp, r3
 8005fe0:	f04f 0c00 	mov.w	ip, #0
 8005fe4:	46d9      	mov	r9, fp
 8005fe6:	46e2      	mov	sl, ip
 8005fe8:	eb19 0309 	adds.w	r3, r9, r9
 8005fec:	eb4a 040a 	adc.w	r4, sl, sl
 8005ff0:	4699      	mov	r9, r3
 8005ff2:	46a2      	mov	sl, r4
 8005ff4:	eb19 090b 	adds.w	r9, r9, fp
 8005ff8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ffc:	f04f 0100 	mov.w	r1, #0
 8006000:	f04f 0200 	mov.w	r2, #0
 8006004:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006008:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800600c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006010:	4689      	mov	r9, r1
 8006012:	4692      	mov	sl, r2
 8006014:	eb1b 0509 	adds.w	r5, fp, r9
 8006018:	eb4c 060a 	adc.w	r6, ip, sl
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	4619      	mov	r1, r3
 8006022:	f04f 0200 	mov.w	r2, #0
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	f04f 0400 	mov.w	r4, #0
 800602e:	0094      	lsls	r4, r2, #2
 8006030:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006034:	008b      	lsls	r3, r1, #2
 8006036:	461a      	mov	r2, r3
 8006038:	4623      	mov	r3, r4
 800603a:	4628      	mov	r0, r5
 800603c:	4631      	mov	r1, r6
 800603e:	f7fa f8e1 	bl	8000204 <__aeabi_uldivmod>
 8006042:	4603      	mov	r3, r0
 8006044:	460c      	mov	r4, r1
 8006046:	461a      	mov	r2, r3
 8006048:	4b9a      	ldr	r3, [pc, #616]	; (80062b4 <UART_SetConfig+0x6f4>)
 800604a:	fba3 1302 	umull	r1, r3, r3, r2
 800604e:	095b      	lsrs	r3, r3, #5
 8006050:	2164      	movs	r1, #100	; 0x64
 8006052:	fb01 f303 	mul.w	r3, r1, r3
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	3332      	adds	r3, #50	; 0x32
 800605c:	4a95      	ldr	r2, [pc, #596]	; (80062b4 <UART_SetConfig+0x6f4>)
 800605e:	fba2 2303 	umull	r2, r3, r2, r3
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006068:	4498      	add	r8, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	469b      	mov	fp, r3
 800606e:	f04f 0c00 	mov.w	ip, #0
 8006072:	46d9      	mov	r9, fp
 8006074:	46e2      	mov	sl, ip
 8006076:	eb19 0309 	adds.w	r3, r9, r9
 800607a:	eb4a 040a 	adc.w	r4, sl, sl
 800607e:	4699      	mov	r9, r3
 8006080:	46a2      	mov	sl, r4
 8006082:	eb19 090b 	adds.w	r9, r9, fp
 8006086:	eb4a 0a0c 	adc.w	sl, sl, ip
 800608a:	f04f 0100 	mov.w	r1, #0
 800608e:	f04f 0200 	mov.w	r2, #0
 8006092:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006096:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800609a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800609e:	4689      	mov	r9, r1
 80060a0:	4692      	mov	sl, r2
 80060a2:	eb1b 0509 	adds.w	r5, fp, r9
 80060a6:	eb4c 060a 	adc.w	r6, ip, sl
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	4619      	mov	r1, r3
 80060b0:	f04f 0200 	mov.w	r2, #0
 80060b4:	f04f 0300 	mov.w	r3, #0
 80060b8:	f04f 0400 	mov.w	r4, #0
 80060bc:	0094      	lsls	r4, r2, #2
 80060be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060c2:	008b      	lsls	r3, r1, #2
 80060c4:	461a      	mov	r2, r3
 80060c6:	4623      	mov	r3, r4
 80060c8:	4628      	mov	r0, r5
 80060ca:	4631      	mov	r1, r6
 80060cc:	f7fa f89a 	bl	8000204 <__aeabi_uldivmod>
 80060d0:	4603      	mov	r3, r0
 80060d2:	460c      	mov	r4, r1
 80060d4:	461a      	mov	r2, r3
 80060d6:	4b77      	ldr	r3, [pc, #476]	; (80062b4 <UART_SetConfig+0x6f4>)
 80060d8:	fba3 1302 	umull	r1, r3, r3, r2
 80060dc:	095b      	lsrs	r3, r3, #5
 80060de:	2164      	movs	r1, #100	; 0x64
 80060e0:	fb01 f303 	mul.w	r3, r1, r3
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	3332      	adds	r3, #50	; 0x32
 80060ea:	4a72      	ldr	r2, [pc, #456]	; (80062b4 <UART_SetConfig+0x6f4>)
 80060ec:	fba2 2303 	umull	r2, r3, r2, r3
 80060f0:	095b      	lsrs	r3, r3, #5
 80060f2:	f003 020f 	and.w	r2, r3, #15
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4442      	add	r2, r8
 80060fc:	609a      	str	r2, [r3, #8]
 80060fe:	e0d0      	b.n	80062a2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006100:	f7fd febc 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 8006104:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	469a      	mov	sl, r3
 800610a:	f04f 0b00 	mov.w	fp, #0
 800610e:	46d0      	mov	r8, sl
 8006110:	46d9      	mov	r9, fp
 8006112:	eb18 0308 	adds.w	r3, r8, r8
 8006116:	eb49 0409 	adc.w	r4, r9, r9
 800611a:	4698      	mov	r8, r3
 800611c:	46a1      	mov	r9, r4
 800611e:	eb18 080a 	adds.w	r8, r8, sl
 8006122:	eb49 090b 	adc.w	r9, r9, fp
 8006126:	f04f 0100 	mov.w	r1, #0
 800612a:	f04f 0200 	mov.w	r2, #0
 800612e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006132:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006136:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800613a:	4688      	mov	r8, r1
 800613c:	4691      	mov	r9, r2
 800613e:	eb1a 0508 	adds.w	r5, sl, r8
 8006142:	eb4b 0609 	adc.w	r6, fp, r9
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	4619      	mov	r1, r3
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	f04f 0300 	mov.w	r3, #0
 8006154:	f04f 0400 	mov.w	r4, #0
 8006158:	0094      	lsls	r4, r2, #2
 800615a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800615e:	008b      	lsls	r3, r1, #2
 8006160:	461a      	mov	r2, r3
 8006162:	4623      	mov	r3, r4
 8006164:	4628      	mov	r0, r5
 8006166:	4631      	mov	r1, r6
 8006168:	f7fa f84c 	bl	8000204 <__aeabi_uldivmod>
 800616c:	4603      	mov	r3, r0
 800616e:	460c      	mov	r4, r1
 8006170:	461a      	mov	r2, r3
 8006172:	4b50      	ldr	r3, [pc, #320]	; (80062b4 <UART_SetConfig+0x6f4>)
 8006174:	fba3 2302 	umull	r2, r3, r3, r2
 8006178:	095b      	lsrs	r3, r3, #5
 800617a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	469b      	mov	fp, r3
 8006182:	f04f 0c00 	mov.w	ip, #0
 8006186:	46d9      	mov	r9, fp
 8006188:	46e2      	mov	sl, ip
 800618a:	eb19 0309 	adds.w	r3, r9, r9
 800618e:	eb4a 040a 	adc.w	r4, sl, sl
 8006192:	4699      	mov	r9, r3
 8006194:	46a2      	mov	sl, r4
 8006196:	eb19 090b 	adds.w	r9, r9, fp
 800619a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800619e:	f04f 0100 	mov.w	r1, #0
 80061a2:	f04f 0200 	mov.w	r2, #0
 80061a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061b2:	4689      	mov	r9, r1
 80061b4:	4692      	mov	sl, r2
 80061b6:	eb1b 0509 	adds.w	r5, fp, r9
 80061ba:	eb4c 060a 	adc.w	r6, ip, sl
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	4619      	mov	r1, r3
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	f04f 0400 	mov.w	r4, #0
 80061d0:	0094      	lsls	r4, r2, #2
 80061d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061d6:	008b      	lsls	r3, r1, #2
 80061d8:	461a      	mov	r2, r3
 80061da:	4623      	mov	r3, r4
 80061dc:	4628      	mov	r0, r5
 80061de:	4631      	mov	r1, r6
 80061e0:	f7fa f810 	bl	8000204 <__aeabi_uldivmod>
 80061e4:	4603      	mov	r3, r0
 80061e6:	460c      	mov	r4, r1
 80061e8:	461a      	mov	r2, r3
 80061ea:	4b32      	ldr	r3, [pc, #200]	; (80062b4 <UART_SetConfig+0x6f4>)
 80061ec:	fba3 1302 	umull	r1, r3, r3, r2
 80061f0:	095b      	lsrs	r3, r3, #5
 80061f2:	2164      	movs	r1, #100	; 0x64
 80061f4:	fb01 f303 	mul.w	r3, r1, r3
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	3332      	adds	r3, #50	; 0x32
 80061fe:	4a2d      	ldr	r2, [pc, #180]	; (80062b4 <UART_SetConfig+0x6f4>)
 8006200:	fba2 2303 	umull	r2, r3, r2, r3
 8006204:	095b      	lsrs	r3, r3, #5
 8006206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800620a:	4498      	add	r8, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	469b      	mov	fp, r3
 8006210:	f04f 0c00 	mov.w	ip, #0
 8006214:	46d9      	mov	r9, fp
 8006216:	46e2      	mov	sl, ip
 8006218:	eb19 0309 	adds.w	r3, r9, r9
 800621c:	eb4a 040a 	adc.w	r4, sl, sl
 8006220:	4699      	mov	r9, r3
 8006222:	46a2      	mov	sl, r4
 8006224:	eb19 090b 	adds.w	r9, r9, fp
 8006228:	eb4a 0a0c 	adc.w	sl, sl, ip
 800622c:	f04f 0100 	mov.w	r1, #0
 8006230:	f04f 0200 	mov.w	r2, #0
 8006234:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006238:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800623c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006240:	4689      	mov	r9, r1
 8006242:	4692      	mov	sl, r2
 8006244:	eb1b 0509 	adds.w	r5, fp, r9
 8006248:	eb4c 060a 	adc.w	r6, ip, sl
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	4619      	mov	r1, r3
 8006252:	f04f 0200 	mov.w	r2, #0
 8006256:	f04f 0300 	mov.w	r3, #0
 800625a:	f04f 0400 	mov.w	r4, #0
 800625e:	0094      	lsls	r4, r2, #2
 8006260:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006264:	008b      	lsls	r3, r1, #2
 8006266:	461a      	mov	r2, r3
 8006268:	4623      	mov	r3, r4
 800626a:	4628      	mov	r0, r5
 800626c:	4631      	mov	r1, r6
 800626e:	f7f9 ffc9 	bl	8000204 <__aeabi_uldivmod>
 8006272:	4603      	mov	r3, r0
 8006274:	460c      	mov	r4, r1
 8006276:	461a      	mov	r2, r3
 8006278:	4b0e      	ldr	r3, [pc, #56]	; (80062b4 <UART_SetConfig+0x6f4>)
 800627a:	fba3 1302 	umull	r1, r3, r3, r2
 800627e:	095b      	lsrs	r3, r3, #5
 8006280:	2164      	movs	r1, #100	; 0x64
 8006282:	fb01 f303 	mul.w	r3, r1, r3
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	3332      	adds	r3, #50	; 0x32
 800628c:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <UART_SetConfig+0x6f4>)
 800628e:	fba2 2303 	umull	r2, r3, r2, r3
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	f003 020f 	and.w	r2, r3, #15
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4442      	add	r2, r8
 800629e:	609a      	str	r2, [r3, #8]
}
 80062a0:	e7ff      	b.n	80062a2 <UART_SetConfig+0x6e2>
 80062a2:	bf00      	nop
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ac:	40011000 	.word	0x40011000
 80062b0:	40011400 	.word	0x40011400
 80062b4:	51eb851f 	.word	0x51eb851f

080062b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80062bc:	4904      	ldr	r1, [pc, #16]	; (80062d0 <MX_FATFS_Init+0x18>)
 80062be:	4805      	ldr	r0, [pc, #20]	; (80062d4 <MX_FATFS_Init+0x1c>)
 80062c0:	f002 fab8 	bl	8008834 <FATFS_LinkDriver>
 80062c4:	4603      	mov	r3, r0
 80062c6:	461a      	mov	r2, r3
 80062c8:	4b03      	ldr	r3, [pc, #12]	; (80062d8 <MX_FATFS_Init+0x20>)
 80062ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80062cc:	bf00      	nop
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	200019bc 	.word	0x200019bc
 80062d4:	20000010 	.word	0x20000010
 80062d8:	200019c0 	.word	0x200019c0

080062dc <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80062e0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	4603      	mov	r3, r0
 80062f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	if (SD_Init() == 1) Stat = 0;
 80062f6:	f7fb fa5f 	bl	80017b8 <SD_Init>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d102      	bne.n	8006306 <USER_initialize+0x1a>
 8006300:	4b04      	ldr	r3, [pc, #16]	; (8006314 <USER_initialize+0x28>)
 8006302:	2200      	movs	r2, #0
 8006304:	701a      	strb	r2, [r3, #0]
	else STA_NOINIT;
	return Stat;
 8006306:	4b03      	ldr	r3, [pc, #12]	; (8006314 <USER_initialize+0x28>)
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	b2db      	uxtb	r3, r3

  /* USER CODE END INIT */
}
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	2000000d 	.word	0x2000000d

08006318 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	4603      	mov	r3, r0
 8006320:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return Stat;
 8006322:	4b04      	ldr	r3, [pc, #16]	; (8006334 <USER_status+0x1c>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	2000000d 	.word	0x2000000d

08006338 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	607a      	str	r2, [r7, #4]
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	4603      	mov	r3, r0
 8006346:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	if (SD_Read(buff, sector*512, count) == 1) return RES_OK;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	025b      	lsls	r3, r3, #9
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	4619      	mov	r1, r3
 8006350:	68b8      	ldr	r0, [r7, #8]
 8006352:	f7fb fad1 	bl	80018f8 <SD_Read>
 8006356:	4603      	mov	r3, r0
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <USER_read+0x28>
 800635c:	2300      	movs	r3, #0
 800635e:	e000      	b.n	8006362 <USER_read+0x2a>
	else return RES_ERROR;
 8006360:	2301      	movs	r3, #1
  /* USER CODE END READ */
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]
 8006376:	4603      	mov	r3, r0
 8006378:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	if (SD_Write(buff, sector*512, count) == 1) return RES_OK;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	025b      	lsls	r3, r3, #9
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	4619      	mov	r1, r3
 8006382:	68b8      	ldr	r0, [r7, #8]
 8006384:	f7fb fb46 	bl	8001a14 <SD_Write>
 8006388:	4603      	mov	r3, r0
 800638a:	2b01      	cmp	r3, #1
 800638c:	d101      	bne.n	8006392 <USER_write+0x28>
 800638e:	2300      	movs	r3, #0
 8006390:	e000      	b.n	8006394 <USER_write+0x2a>
	else return RES_ERROR;
 8006392:	2301      	movs	r3, #1
  /* USER CODE END WRITE */
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	4603      	mov	r3, r0
 80063a4:	603a      	str	r2, [r7, #0]
 80063a6:	71fb      	strb	r3, [r7, #7]
 80063a8:	460b      	mov	r3, r1
 80063aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	75fb      	strb	r3, [r7, #23]
    uint8_t* ptr = buff;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	613b      	str	r3, [r7, #16]
    switch (cmd)
 80063b4:	79bb      	ldrb	r3, [r7, #6]
 80063b6:	2b0e      	cmp	r3, #14
 80063b8:	f200 8090 	bhi.w	80064dc <USER_ioctl+0x140>
 80063bc:	a201      	add	r2, pc, #4	; (adr r2, 80063c4 <USER_ioctl+0x28>)
 80063be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c2:	bf00      	nop
 80063c4:	08006401 	.word	0x08006401
 80063c8:	08006407 	.word	0x08006407
 80063cc:	08006415 	.word	0x08006415
 80063d0:	08006423 	.word	0x08006423
 80063d4:	0800642f 	.word	0x0800642f
 80063d8:	08006435 	.word	0x08006435
 80063dc:	0800643b 	.word	0x0800643b
 80063e0:	08006441 	.word	0x08006441
 80063e4:	08006447 	.word	0x08006447
 80063e8:	080064dd 	.word	0x080064dd
 80063ec:	080064dd 	.word	0x080064dd
 80063f0:	0800644d 	.word	0x0800644d
 80063f4:	0800646d 	.word	0x0800646d
 80063f8:	0800648d 	.word	0x0800648d
 80063fc:	080064c3 	.word	0x080064c3
    {
	/* Generic command (Used by FatFs) */
    case CTRL_SYNC : /* Complete pending write process (needed at _FS_READONLY == 0) */
    	res = RES_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	75fb      	strb	r3, [r7, #23]
    	break;
 8006404:	e06a      	b.n	80064dc <USER_ioctl+0x140>
    case GET_SECTOR_COUNT : /* Get media size (needed at _USE_MKFS == 1) */
    	*(unsigned long*) buff = 8388608; //2^32 / 512
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800640c:	601a      	str	r2, [r3, #0]
    	res = RES_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	75fb      	strb	r3, [r7, #23]
    	break;
 8006412:	e063      	b.n	80064dc <USER_ioctl+0x140>
    case GET_SECTOR_SIZE : /* Get sector size (needed at _MAX_SS != _MIN_SS) */
    	*(unsigned short*) buff = 512;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800641a:	801a      	strh	r2, [r3, #0]
    	res = RES_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	75fb      	strb	r3, [r7, #23]
    	break;
 8006420:	e05c      	b.n	80064dc <USER_ioctl+0x140>
    case GET_BLOCK_SIZE : /* Get erase block size (needed at _USE_MKFS == 1) */
    	*(unsigned short*) buff = 0;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2200      	movs	r2, #0
 8006426:	801a      	strh	r2, [r3, #0]
    	res = RES_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	75fb      	strb	r3, [r7, #23]
    	break;
 800642c:	e056      	b.n	80064dc <USER_ioctl+0x140>
    case CTRL_TRIM : /* Inform device that the data on the block of sectors is no longer used (needed at _USE_TRIM == 1) */
    	res = RES_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	75fb      	strb	r3, [r7, #23]
    	break;
 8006432:	e053      	b.n	80064dc <USER_ioctl+0x140>

   	/* Generic command (Not used by FatFs) */
    case CTRL_POWER : /* Get/Set power status */
    	res = RES_OK;
 8006434:	2300      	movs	r3, #0
 8006436:	75fb      	strb	r3, [r7, #23]
    	break;
 8006438:	e050      	b.n	80064dc <USER_ioctl+0x140>
    case CTRL_LOCK : /* Lock/Unlock media removal */
    	res = RES_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	75fb      	strb	r3, [r7, #23]
    	break;
 800643e:	e04d      	b.n	80064dc <USER_ioctl+0x140>
    case CTRL_EJECT : /* Eject media */
    	res = RES_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	75fb      	strb	r3, [r7, #23]
    	break;
 8006444:	e04a      	b.n	80064dc <USER_ioctl+0x140>
    case CTRL_FORMAT : /* Create physical format on the media */
    	res = RES_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	75fb      	strb	r3, [r7, #23]
    	break;
 800644a:	e047      	b.n	80064dc <USER_ioctl+0x140>
    /* MMC/SDC specific ioctl command */
    case MMC_GET_TYPE : /* Get card type */
    	break;
    case MMC_GET_CSD : /* Get CSD */
    	/* Send CSD */
    	if (SD_SendCommand(9,0) == 0 && SD_RxDataBlock((unsigned char*)buff)) res = RES_OK;
 800644c:	2100      	movs	r1, #0
 800644e:	2009      	movs	r0, #9
 8006450:	f7fb f93c 	bl	80016cc <SD_SendCommand>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d13b      	bne.n	80064d2 <USER_ioctl+0x136>
 800645a:	6838      	ldr	r0, [r7, #0]
 800645c:	f7fb fa18 	bl	8001890 <SD_RxDataBlock>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d035      	beq.n	80064d2 <USER_ioctl+0x136>
 8006466:	2300      	movs	r3, #0
 8006468:	75fb      	strb	r3, [r7, #23]
    	break;
 800646a:	e032      	b.n	80064d2 <USER_ioctl+0x136>
    case MMC_GET_CID : /* Get CID */
    	/* Send CID */
    	if (SD_SendCommand(10,0) == 0 && SD_RxDataBlock((unsigned char*)buff)) res = RES_OK;
 800646c:	2100      	movs	r1, #0
 800646e:	200a      	movs	r0, #10
 8006470:	f7fb f92c 	bl	80016cc <SD_SendCommand>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d12d      	bne.n	80064d6 <USER_ioctl+0x13a>
 800647a:	6838      	ldr	r0, [r7, #0]
 800647c:	f7fb fa08 	bl	8001890 <SD_RxDataBlock>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d027      	beq.n	80064d6 <USER_ioctl+0x13a>
 8006486:	2300      	movs	r3, #0
 8006488:	75fb      	strb	r3, [r7, #23]
    	break;
 800648a:	e024      	b.n	80064d6 <USER_ioctl+0x13a>
    case MMC_GET_OCR : /* Get OCR */
    	/* Read OCR */
    	if (SD_SendCommand(58, 0) == 0)
 800648c:	2100      	movs	r1, #0
 800648e:	203a      	movs	r0, #58	; 0x3a
 8006490:	f7fb f91c 	bl	80016cc <SD_SendCommand>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d11f      	bne.n	80064da <USER_ioctl+0x13e>
    	{
    		for (int n=0;n<4;n++)
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
 800649e:	e00a      	b.n	80064b6 <USER_ioctl+0x11a>
    		{
    			*ptr++ = SD_ReceiveByte();
 80064a0:	f7fb f900 	bl	80016a4 <SD_ReceiveByte>
 80064a4:	4601      	mov	r1, r0
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	613a      	str	r2, [r7, #16]
 80064ac:	b2ca      	uxtb	r2, r1
 80064ae:	701a      	strb	r2, [r3, #0]
    		for (int n=0;n<4;n++)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3301      	adds	r3, #1
 80064b4:	60fb      	str	r3, [r7, #12]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2b03      	cmp	r3, #3
 80064ba:	ddf1      	ble.n	80064a0 <USER_ioctl+0x104>
    		}
    		res = RES_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	75fb      	strb	r3, [r7, #23]
    	}
    	break;
 80064c0:	e00b      	b.n	80064da <USER_ioctl+0x13e>
    case MMC_GET_SDSTAT : /* Get SD status */
    	*(unsigned char*)buff = Stat;
 80064c2:	4b09      	ldr	r3, [pc, #36]	; (80064e8 <USER_ioctl+0x14c>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	701a      	strb	r2, [r3, #0]
    	res = RES_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	75fb      	strb	r3, [r7, #23]
    	break;
 80064d0:	e004      	b.n	80064dc <USER_ioctl+0x140>
    	break;
 80064d2:	bf00      	nop
 80064d4:	e002      	b.n	80064dc <USER_ioctl+0x140>
    	break;
 80064d6:	bf00      	nop
 80064d8:	e000      	b.n	80064dc <USER_ioctl+0x140>
    	break;
 80064da:	bf00      	nop
    }
    return res;
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
  /* USER CODE END IOCTL */
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	2000000d 	.word	0x2000000d

080064ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	4603      	mov	r3, r0
 80064f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	4a08      	ldr	r2, [pc, #32]	; (800651c <disk_status+0x30>)
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	79fa      	ldrb	r2, [r7, #7]
 8006504:	4905      	ldr	r1, [pc, #20]	; (800651c <disk_status+0x30>)
 8006506:	440a      	add	r2, r1
 8006508:	7a12      	ldrb	r2, [r2, #8]
 800650a:	4610      	mov	r0, r2
 800650c:	4798      	blx	r3
 800650e:	4603      	mov	r3, r0
 8006510:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006512:	7bfb      	ldrb	r3, [r7, #15]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	2000006c 	.word	0x2000006c

08006520 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	4603      	mov	r3, r0
 8006528:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800652e:	79fb      	ldrb	r3, [r7, #7]
 8006530:	4a0d      	ldr	r2, [pc, #52]	; (8006568 <disk_initialize+0x48>)
 8006532:	5cd3      	ldrb	r3, [r2, r3]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d111      	bne.n	800655c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006538:	79fb      	ldrb	r3, [r7, #7]
 800653a:	4a0b      	ldr	r2, [pc, #44]	; (8006568 <disk_initialize+0x48>)
 800653c:	2101      	movs	r1, #1
 800653e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006540:	79fb      	ldrb	r3, [r7, #7]
 8006542:	4a09      	ldr	r2, [pc, #36]	; (8006568 <disk_initialize+0x48>)
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4413      	add	r3, r2
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	79fa      	ldrb	r2, [r7, #7]
 800654e:	4906      	ldr	r1, [pc, #24]	; (8006568 <disk_initialize+0x48>)
 8006550:	440a      	add	r2, r1
 8006552:	7a12      	ldrb	r2, [r2, #8]
 8006554:	4610      	mov	r0, r2
 8006556:	4798      	blx	r3
 8006558:	4603      	mov	r3, r0
 800655a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	2000006c 	.word	0x2000006c

0800656c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800656c:	b590      	push	{r4, r7, lr}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	60b9      	str	r1, [r7, #8]
 8006574:	607a      	str	r2, [r7, #4]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	4603      	mov	r3, r0
 800657a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800657c:	7bfb      	ldrb	r3, [r7, #15]
 800657e:	4a0a      	ldr	r2, [pc, #40]	; (80065a8 <disk_read+0x3c>)
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	689c      	ldr	r4, [r3, #8]
 8006588:	7bfb      	ldrb	r3, [r7, #15]
 800658a:	4a07      	ldr	r2, [pc, #28]	; (80065a8 <disk_read+0x3c>)
 800658c:	4413      	add	r3, r2
 800658e:	7a18      	ldrb	r0, [r3, #8]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	68b9      	ldr	r1, [r7, #8]
 8006596:	47a0      	blx	r4
 8006598:	4603      	mov	r3, r0
 800659a:	75fb      	strb	r3, [r7, #23]
  return res;
 800659c:	7dfb      	ldrb	r3, [r7, #23]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd90      	pop	{r4, r7, pc}
 80065a6:	bf00      	nop
 80065a8:	2000006c 	.word	0x2000006c

080065ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80065ac:	b590      	push	{r4, r7, lr}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60b9      	str	r1, [r7, #8]
 80065b4:	607a      	str	r2, [r7, #4]
 80065b6:	603b      	str	r3, [r7, #0]
 80065b8:	4603      	mov	r3, r0
 80065ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	4a0a      	ldr	r2, [pc, #40]	; (80065e8 <disk_write+0x3c>)
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	68dc      	ldr	r4, [r3, #12]
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	4a07      	ldr	r2, [pc, #28]	; (80065e8 <disk_write+0x3c>)
 80065cc:	4413      	add	r3, r2
 80065ce:	7a18      	ldrb	r0, [r3, #8]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	68b9      	ldr	r1, [r7, #8]
 80065d6:	47a0      	blx	r4
 80065d8:	4603      	mov	r3, r0
 80065da:	75fb      	strb	r3, [r7, #23]
  return res;
 80065dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	371c      	adds	r7, #28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd90      	pop	{r4, r7, pc}
 80065e6:	bf00      	nop
 80065e8:	2000006c 	.word	0x2000006c

080065ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4603      	mov	r3, r0
 80065f4:	603a      	str	r2, [r7, #0]
 80065f6:	71fb      	strb	r3, [r7, #7]
 80065f8:	460b      	mov	r3, r1
 80065fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	4a09      	ldr	r2, [pc, #36]	; (8006624 <disk_ioctl+0x38>)
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	79fa      	ldrb	r2, [r7, #7]
 800660a:	4906      	ldr	r1, [pc, #24]	; (8006624 <disk_ioctl+0x38>)
 800660c:	440a      	add	r2, r1
 800660e:	7a10      	ldrb	r0, [r2, #8]
 8006610:	79b9      	ldrb	r1, [r7, #6]
 8006612:	683a      	ldr	r2, [r7, #0]
 8006614:	4798      	blx	r3
 8006616:	4603      	mov	r3, r0
 8006618:	73fb      	strb	r3, [r7, #15]
  return res;
 800661a:	7bfb      	ldrb	r3, [r7, #15]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	2000006c 	.word	0x2000006c

08006628 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	3301      	adds	r3, #1
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006638:	89fb      	ldrh	r3, [r7, #14]
 800663a:	021b      	lsls	r3, r3, #8
 800663c:	b21a      	sxth	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	b21b      	sxth	r3, r3
 8006644:	4313      	orrs	r3, r2
 8006646:	b21b      	sxth	r3, r3
 8006648:	81fb      	strh	r3, [r7, #14]
	return rv;
 800664a:	89fb      	ldrh	r3, [r7, #14]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3303      	adds	r3, #3
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	021b      	lsls	r3, r3, #8
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	3202      	adds	r2, #2
 8006670:	7812      	ldrb	r2, [r2, #0]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	021b      	lsls	r3, r3, #8
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	3201      	adds	r2, #1
 800667e:	7812      	ldrb	r2, [r2, #0]
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	021b      	lsls	r3, r3, #8
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	7812      	ldrb	r2, [r2, #0]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006690:	68fb      	ldr	r3, [r7, #12]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	887a      	ldrh	r2, [r7, #2]
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	887b      	ldrh	r3, [r7, #2]
 80066b8:	0a1b      	lsrs	r3, r3, #8
 80066ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	887a      	ldrh	r2, [r7, #2]
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	701a      	strb	r2, [r3, #0]
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	701a      	strb	r2, [r3, #0]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	0a1b      	lsrs	r3, r3, #8
 80066ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	607a      	str	r2, [r7, #4]
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	701a      	strb	r2, [r3, #0]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	0a1b      	lsrs	r3, r3, #8
 8006700:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	0a1b      	lsrs	r3, r3, #8
 8006712:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	607a      	str	r2, [r7, #4]
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00d      	beq.n	8006762 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	1c53      	adds	r3, r2, #1
 800674a:	613b      	str	r3, [r7, #16]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	1c59      	adds	r1, r3, #1
 8006750:	6179      	str	r1, [r7, #20]
 8006752:	7812      	ldrb	r2, [r2, #0]
 8006754:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	3b01      	subs	r3, #1
 800675a:	607b      	str	r3, [r7, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f1      	bne.n	8006746 <mem_cpy+0x1a>
	}
}
 8006762:	bf00      	nop
 8006764:	371c      	adds	r7, #28
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800676e:	b480      	push	{r7}
 8006770:	b087      	sub	sp, #28
 8006772:	af00      	add	r7, sp, #0
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	617a      	str	r2, [r7, #20]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3b01      	subs	r3, #1
 800678e:	607b      	str	r3, [r7, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1f3      	bne.n	800677e <mem_set+0x10>
}
 8006796:	bf00      	nop
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80067a2:	b480      	push	{r7}
 80067a4:	b089      	sub	sp, #36	; 0x24
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	61fb      	str	r3, [r7, #28]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	61fa      	str	r2, [r7, #28]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	4619      	mov	r1, r3
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	61ba      	str	r2, [r7, #24]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	1acb      	subs	r3, r1, r3
 80067ce:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	607b      	str	r3, [r7, #4]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <mem_cmp+0x40>
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0eb      	beq.n	80067ba <mem_cmp+0x18>

	return r;
 80067e2:	697b      	ldr	r3, [r7, #20]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3724      	adds	r7, #36	; 0x24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80067fa:	e002      	b.n	8006802 <chk_chr+0x12>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	3301      	adds	r3, #1
 8006800:	607b      	str	r3, [r7, #4]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d005      	beq.n	8006816 <chk_chr+0x26>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	4293      	cmp	r3, r2
 8006814:	d1f2      	bne.n	80067fc <chk_chr+0xc>
	return *str;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	781b      	ldrb	r3, [r3, #0]
}
 800681a:	4618      	mov	r0, r3
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
	...

08006828 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006832:	2300      	movs	r3, #0
 8006834:	60bb      	str	r3, [r7, #8]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	e029      	b.n	8006890 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800683c:	4a27      	ldr	r2, [pc, #156]	; (80068dc <chk_lock+0xb4>)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	011b      	lsls	r3, r3, #4
 8006842:	4413      	add	r3, r2
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d01d      	beq.n	8006886 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800684a:	4a24      	ldr	r2, [pc, #144]	; (80068dc <chk_lock+0xb4>)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	4413      	add	r3, r2
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	429a      	cmp	r2, r3
 800685a:	d116      	bne.n	800688a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800685c:	4a1f      	ldr	r2, [pc, #124]	; (80068dc <chk_lock+0xb4>)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	011b      	lsls	r3, r3, #4
 8006862:	4413      	add	r3, r2
 8006864:	3304      	adds	r3, #4
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800686c:	429a      	cmp	r2, r3
 800686e:	d10c      	bne.n	800688a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006870:	4a1a      	ldr	r2, [pc, #104]	; (80068dc <chk_lock+0xb4>)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	011b      	lsls	r3, r3, #4
 8006876:	4413      	add	r3, r2
 8006878:	3308      	adds	r3, #8
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006880:	429a      	cmp	r2, r3
 8006882:	d102      	bne.n	800688a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006884:	e007      	b.n	8006896 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006886:	2301      	movs	r3, #1
 8006888:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3301      	adds	r3, #1
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d9d2      	bls.n	800683c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b02      	cmp	r3, #2
 800689a:	d109      	bne.n	80068b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d102      	bne.n	80068a8 <chk_lock+0x80>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d101      	bne.n	80068ac <chk_lock+0x84>
 80068a8:	2300      	movs	r3, #0
 80068aa:	e010      	b.n	80068ce <chk_lock+0xa6>
 80068ac:	2312      	movs	r3, #18
 80068ae:	e00e      	b.n	80068ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d108      	bne.n	80068c8 <chk_lock+0xa0>
 80068b6:	4a09      	ldr	r2, [pc, #36]	; (80068dc <chk_lock+0xb4>)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	4413      	add	r3, r2
 80068be:	330c      	adds	r3, #12
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c6:	d101      	bne.n	80068cc <chk_lock+0xa4>
 80068c8:	2310      	movs	r3, #16
 80068ca:	e000      	b.n	80068ce <chk_lock+0xa6>
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	2000004c 	.word	0x2000004c

080068e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80068e6:	2300      	movs	r3, #0
 80068e8:	607b      	str	r3, [r7, #4]
 80068ea:	e002      	b.n	80068f2 <enq_lock+0x12>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	3301      	adds	r3, #1
 80068f0:	607b      	str	r3, [r7, #4]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d806      	bhi.n	8006906 <enq_lock+0x26>
 80068f8:	4a09      	ldr	r2, [pc, #36]	; (8006920 <enq_lock+0x40>)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	011b      	lsls	r3, r3, #4
 80068fe:	4413      	add	r3, r2
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1f2      	bne.n	80068ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b02      	cmp	r3, #2
 800690a:	bf14      	ite	ne
 800690c:	2301      	movne	r3, #1
 800690e:	2300      	moveq	r3, #0
 8006910:	b2db      	uxtb	r3, r3
}
 8006912:	4618      	mov	r0, r3
 8006914:	370c      	adds	r7, #12
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	2000004c 	.word	0x2000004c

08006924 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	e01f      	b.n	8006974 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006934:	4a41      	ldr	r2, [pc, #260]	; (8006a3c <inc_lock+0x118>)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	011b      	lsls	r3, r3, #4
 800693a:	4413      	add	r3, r2
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d113      	bne.n	800696e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006946:	4a3d      	ldr	r2, [pc, #244]	; (8006a3c <inc_lock+0x118>)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	4413      	add	r3, r2
 800694e:	3304      	adds	r3, #4
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006956:	429a      	cmp	r2, r3
 8006958:	d109      	bne.n	800696e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800695a:	4a38      	ldr	r2, [pc, #224]	; (8006a3c <inc_lock+0x118>)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	4413      	add	r3, r2
 8006962:	3308      	adds	r3, #8
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800696a:	429a      	cmp	r2, r3
 800696c:	d006      	beq.n	800697c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3301      	adds	r3, #1
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d9dc      	bls.n	8006934 <inc_lock+0x10>
 800697a:	e000      	b.n	800697e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800697c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b02      	cmp	r3, #2
 8006982:	d132      	bne.n	80069ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	e002      	b.n	8006990 <inc_lock+0x6c>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3301      	adds	r3, #1
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d806      	bhi.n	80069a4 <inc_lock+0x80>
 8006996:	4a29      	ldr	r2, [pc, #164]	; (8006a3c <inc_lock+0x118>)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	4413      	add	r3, r2
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1f2      	bne.n	800698a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d101      	bne.n	80069ae <inc_lock+0x8a>
 80069aa:	2300      	movs	r3, #0
 80069ac:	e040      	b.n	8006a30 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	4922      	ldr	r1, [pc, #136]	; (8006a3c <inc_lock+0x118>)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	440b      	add	r3, r1
 80069ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	491e      	ldr	r1, [pc, #120]	; (8006a3c <inc_lock+0x118>)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	011b      	lsls	r3, r3, #4
 80069c6:	440b      	add	r3, r1
 80069c8:	3304      	adds	r3, #4
 80069ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	695a      	ldr	r2, [r3, #20]
 80069d0:	491a      	ldr	r1, [pc, #104]	; (8006a3c <inc_lock+0x118>)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	440b      	add	r3, r1
 80069d8:	3308      	adds	r3, #8
 80069da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80069dc:	4a17      	ldr	r2, [pc, #92]	; (8006a3c <inc_lock+0x118>)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	4413      	add	r3, r2
 80069e4:	330c      	adds	r3, #12
 80069e6:	2200      	movs	r2, #0
 80069e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d009      	beq.n	8006a04 <inc_lock+0xe0>
 80069f0:	4a12      	ldr	r2, [pc, #72]	; (8006a3c <inc_lock+0x118>)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	4413      	add	r3, r2
 80069f8:	330c      	adds	r3, #12
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <inc_lock+0xe0>
 8006a00:	2300      	movs	r3, #0
 8006a02:	e015      	b.n	8006a30 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d108      	bne.n	8006a1c <inc_lock+0xf8>
 8006a0a:	4a0c      	ldr	r2, [pc, #48]	; (8006a3c <inc_lock+0x118>)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	4413      	add	r3, r2
 8006a12:	330c      	adds	r3, #12
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	3301      	adds	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	e001      	b.n	8006a20 <inc_lock+0xfc>
 8006a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a20:	4906      	ldr	r1, [pc, #24]	; (8006a3c <inc_lock+0x118>)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	440b      	add	r3, r1
 8006a28:	330c      	adds	r3, #12
 8006a2a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3301      	adds	r3, #1
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	2000004c 	.word	0x2000004c

08006a40 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	607b      	str	r3, [r7, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d825      	bhi.n	8006aa0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006a54:	4a17      	ldr	r2, [pc, #92]	; (8006ab4 <dec_lock+0x74>)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	011b      	lsls	r3, r3, #4
 8006a5a:	4413      	add	r3, r2
 8006a5c:	330c      	adds	r3, #12
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006a62:	89fb      	ldrh	r3, [r7, #14]
 8006a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a68:	d101      	bne.n	8006a6e <dec_lock+0x2e>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006a6e:	89fb      	ldrh	r3, [r7, #14]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <dec_lock+0x3a>
 8006a74:	89fb      	ldrh	r3, [r7, #14]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006a7a:	4a0e      	ldr	r2, [pc, #56]	; (8006ab4 <dec_lock+0x74>)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	4413      	add	r3, r2
 8006a82:	330c      	adds	r3, #12
 8006a84:	89fa      	ldrh	r2, [r7, #14]
 8006a86:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006a88:	89fb      	ldrh	r3, [r7, #14]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d105      	bne.n	8006a9a <dec_lock+0x5a>
 8006a8e:	4a09      	ldr	r2, [pc, #36]	; (8006ab4 <dec_lock+0x74>)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	4413      	add	r3, r2
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	737b      	strb	r3, [r7, #13]
 8006a9e:	e001      	b.n	8006aa4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006aa4:	7b7b      	ldrb	r3, [r7, #13]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	2000004c 	.word	0x2000004c

08006ab8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	e010      	b.n	8006ae8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006ac6:	4a0d      	ldr	r2, [pc, #52]	; (8006afc <clear_lock+0x44>)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	4413      	add	r3, r2
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d105      	bne.n	8006ae2 <clear_lock+0x2a>
 8006ad6:	4a09      	ldr	r2, [pc, #36]	; (8006afc <clear_lock+0x44>)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	011b      	lsls	r3, r3, #4
 8006adc:	4413      	add	r3, r2
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d9eb      	bls.n	8006ac6 <clear_lock+0xe>
	}
}
 8006aee:	bf00      	nop
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	2000004c 	.word	0x2000004c

08006b00 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	78db      	ldrb	r3, [r3, #3]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d034      	beq.n	8006b7e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	7858      	ldrb	r0, [r3, #1]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006b24:	2301      	movs	r3, #1
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	f7ff fd40 	bl	80065ac <disk_write>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	73fb      	strb	r3, [r7, #15]
 8006b36:	e022      	b.n	8006b7e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	1ad2      	subs	r2, r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d217      	bcs.n	8006b7e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	789b      	ldrb	r3, [r3, #2]
 8006b52:	613b      	str	r3, [r7, #16]
 8006b54:	e010      	b.n	8006b78 <sync_window+0x78>
					wsect += fs->fsize;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	7858      	ldrb	r0, [r3, #1]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	f7ff fd1d 	bl	80065ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	3b01      	subs	r3, #1
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d8eb      	bhi.n	8006b56 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3718      	adds	r7, #24
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d01b      	beq.n	8006bd8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff ffad 	bl	8006b00 <sync_window>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d113      	bne.n	8006bd8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	7858      	ldrb	r0, [r3, #1]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006bba:	2301      	movs	r3, #1
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	f7ff fcd5 	bl	800656c <disk_read>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d004      	beq.n	8006bd2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bcc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
	...

08006be4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff ff87 	bl	8006b00 <sync_window>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d158      	bne.n	8006cae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d148      	bne.n	8006c96 <sync_fs+0xb2>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	791b      	ldrb	r3, [r3, #4]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d144      	bne.n	8006c96 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3330      	adds	r3, #48	; 0x30
 8006c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c14:	2100      	movs	r1, #0
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff fda9 	bl	800676e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3330      	adds	r3, #48	; 0x30
 8006c20:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c24:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff fd38 	bl	800669e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3330      	adds	r3, #48	; 0x30
 8006c32:	4921      	ldr	r1, [pc, #132]	; (8006cb8 <sync_fs+0xd4>)
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff fd4d 	bl	80066d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	3330      	adds	r3, #48	; 0x30
 8006c3e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006c42:	491e      	ldr	r1, [pc, #120]	; (8006cbc <sync_fs+0xd8>)
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff fd45 	bl	80066d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3330      	adds	r3, #48	; 0x30
 8006c4e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	4619      	mov	r1, r3
 8006c58:	4610      	mov	r0, r2
 8006c5a:	f7ff fd3b 	bl	80066d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	3330      	adds	r3, #48	; 0x30
 8006c62:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	f7ff fd31 	bl	80066d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	7858      	ldrb	r0, [r3, #1]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	f7ff fc8e 	bl	80065ac <disk_write>
			fs->fsi_flag = 0;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	785b      	ldrb	r3, [r3, #1]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7ff fca4 	bl	80065ec <disk_ioctl>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <sync_fs+0xca>
 8006caa:	2301      	movs	r3, #1
 8006cac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	41615252 	.word	0x41615252
 8006cbc:	61417272 	.word	0x61417272

08006cc0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	3b02      	subs	r3, #2
 8006cce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	3b02      	subs	r3, #2
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d301      	bcc.n	8006ce0 <clust2sect+0x20>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	e008      	b.n	8006cf2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	895b      	ldrh	r3, [r3, #10]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	fb03 f202 	mul.w	r2, r3, r2
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf0:	4413      	add	r3, r2
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b086      	sub	sp, #24
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d904      	bls.n	8006d1e <get_fat+0x20>
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d302      	bcc.n	8006d24 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006d1e:	2301      	movs	r3, #1
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	e08c      	b.n	8006e3e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006d24:	f04f 33ff 	mov.w	r3, #4294967295
 8006d28:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d045      	beq.n	8006dbe <get_fat+0xc0>
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d05d      	beq.n	8006df2 <get_fat+0xf4>
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d177      	bne.n	8006e2a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	085b      	lsrs	r3, r3, #1
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	4413      	add	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	6a1a      	ldr	r2, [r3, #32]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	0a5b      	lsrs	r3, r3, #9
 8006d50:	4413      	add	r3, r2
 8006d52:	4619      	mov	r1, r3
 8006d54:	6938      	ldr	r0, [r7, #16]
 8006d56:	f7ff ff17 	bl	8006b88 <move_window>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d167      	bne.n	8006e30 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	60fa      	str	r2, [r7, #12]
 8006d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d72:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	6a1a      	ldr	r2, [r3, #32]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	0a5b      	lsrs	r3, r3, #9
 8006d7c:	4413      	add	r3, r2
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6938      	ldr	r0, [r7, #16]
 8006d82:	f7ff ff01 	bl	8006b88 <move_window>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d153      	bne.n	8006e34 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	4413      	add	r3, r2
 8006d96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d9a:	021b      	lsls	r3, r3, #8
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <get_fat+0xb6>
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	091b      	lsrs	r3, r3, #4
 8006db2:	e002      	b.n	8006dba <get_fat+0xbc>
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dba:	617b      	str	r3, [r7, #20]
			break;
 8006dbc:	e03f      	b.n	8006e3e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	6a1a      	ldr	r2, [r3, #32]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	0a1b      	lsrs	r3, r3, #8
 8006dc6:	4413      	add	r3, r2
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6938      	ldr	r0, [r7, #16]
 8006dcc:	f7ff fedc 	bl	8006b88 <move_window>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d130      	bne.n	8006e38 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	005b      	lsls	r3, r3, #1
 8006de0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006de4:	4413      	add	r3, r2
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7ff fc1e 	bl	8006628 <ld_word>
 8006dec:	4603      	mov	r3, r0
 8006dee:	617b      	str	r3, [r7, #20]
			break;
 8006df0:	e025      	b.n	8006e3e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	6a1a      	ldr	r2, [r3, #32]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	09db      	lsrs	r3, r3, #7
 8006dfa:	4413      	add	r3, r2
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6938      	ldr	r0, [r7, #16]
 8006e00:	f7ff fec2 	bl	8006b88 <move_window>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d118      	bne.n	8006e3c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006e18:	4413      	add	r3, r2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff fc1c 	bl	8006658 <ld_dword>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e26:	617b      	str	r3, [r7, #20]
			break;
 8006e28:	e009      	b.n	8006e3e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	617b      	str	r3, [r7, #20]
 8006e2e:	e006      	b.n	8006e3e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e30:	bf00      	nop
 8006e32:	e004      	b.n	8006e3e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006e34:	bf00      	nop
 8006e36:	e002      	b.n	8006e3e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006e38:	bf00      	nop
 8006e3a:	e000      	b.n	8006e3e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006e3c:	bf00      	nop
		}
	}

	return val;
 8006e3e:	697b      	ldr	r3, [r7, #20]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3718      	adds	r7, #24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006e48:	b590      	push	{r4, r7, lr}
 8006e4a:	b089      	sub	sp, #36	; 0x24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006e54:	2302      	movs	r3, #2
 8006e56:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	f240 80d6 	bls.w	800700c <put_fat+0x1c4>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	f080 80d0 	bcs.w	800700c <put_fat+0x1c4>
		switch (fs->fs_type) {
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d073      	beq.n	8006f5c <put_fat+0x114>
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	f000 8091 	beq.w	8006f9c <put_fat+0x154>
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	f040 80c6 	bne.w	800700c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	61bb      	str	r3, [r7, #24]
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	085b      	lsrs	r3, r3, #1
 8006e88:	69ba      	ldr	r2, [r7, #24]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a1a      	ldr	r2, [r3, #32]
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	0a5b      	lsrs	r3, r3, #9
 8006e96:	4413      	add	r3, r2
 8006e98:	4619      	mov	r1, r3
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f7ff fe74 	bl	8006b88 <move_window>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ea4:	7ffb      	ldrb	r3, [r7, #31]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f040 80a9 	bne.w	8006ffe <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	1c59      	adds	r1, r3, #1
 8006eb6:	61b9      	str	r1, [r7, #24]
 8006eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ebc:	4413      	add	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00d      	beq.n	8006ee6 <put_fat+0x9e>
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	b25b      	sxtb	r3, r3
 8006ed0:	f003 030f 	and.w	r3, r3, #15
 8006ed4:	b25a      	sxtb	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	b25b      	sxtb	r3, r3
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	b25b      	sxtb	r3, r3
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	e001      	b.n	8006eea <put_fat+0xa2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6a1a      	ldr	r2, [r3, #32]
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	0a5b      	lsrs	r3, r3, #9
 8006efc:	4413      	add	r3, r2
 8006efe:	4619      	mov	r1, r3
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f7ff fe41 	bl	8006b88 <move_window>
 8006f06:	4603      	mov	r3, r0
 8006f08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f0a:	7ffb      	ldrb	r3, [r7, #31]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d178      	bne.n	8007002 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1c:	4413      	add	r3, r2
 8006f1e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <put_fat+0xea>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	091b      	lsrs	r3, r3, #4
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	e00e      	b.n	8006f50 <put_fat+0x108>
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	b25b      	sxtb	r3, r3
 8006f38:	f023 030f 	bic.w	r3, r3, #15
 8006f3c:	b25a      	sxtb	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	0a1b      	lsrs	r3, r3, #8
 8006f42:	b25b      	sxtb	r3, r3
 8006f44:	f003 030f 	and.w	r3, r3, #15
 8006f48:	b25b      	sxtb	r3, r3
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	b25b      	sxtb	r3, r3
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2201      	movs	r2, #1
 8006f58:	70da      	strb	r2, [r3, #3]
			break;
 8006f5a:	e057      	b.n	800700c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6a1a      	ldr	r2, [r3, #32]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	0a1b      	lsrs	r3, r3, #8
 8006f64:	4413      	add	r3, r2
 8006f66:	4619      	mov	r1, r3
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f7ff fe0d 	bl	8006b88 <move_window>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f72:	7ffb      	ldrb	r3, [r7, #31]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d146      	bne.n	8007006 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	005b      	lsls	r3, r3, #1
 8006f82:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006f86:	4413      	add	r3, r2
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	b292      	uxth	r2, r2
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7ff fb85 	bl	800669e <st_word>
			fs->wflag = 1;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2201      	movs	r2, #1
 8006f98:	70da      	strb	r2, [r3, #3]
			break;
 8006f9a:	e037      	b.n	800700c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6a1a      	ldr	r2, [r3, #32]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	09db      	lsrs	r3, r3, #7
 8006fa4:	4413      	add	r3, r2
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f7ff fded 	bl	8006b88 <move_window>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006fb2:	7ffb      	ldrb	r3, [r7, #31]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d128      	bne.n	800700a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006fcc:	4413      	add	r3, r2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff fb42 	bl	8006658 <ld_dword>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006fda:	4323      	orrs	r3, r4
 8006fdc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006fec:	4413      	add	r3, r2
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7ff fb6f 	bl	80066d4 <st_dword>
			fs->wflag = 1;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	70da      	strb	r2, [r3, #3]
			break;
 8006ffc:	e006      	b.n	800700c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006ffe:	bf00      	nop
 8007000:	e004      	b.n	800700c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007002:	bf00      	nop
 8007004:	e002      	b.n	800700c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8007006:	bf00      	nop
 8007008:	e000      	b.n	800700c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800700a:	bf00      	nop
		}
	}
	return res;
 800700c:	7ffb      	ldrb	r3, [r7, #31]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3724      	adds	r7, #36	; 0x24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd90      	pop	{r4, r7, pc}

08007016 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b088      	sub	sp, #32
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d904      	bls.n	800703c <remove_chain+0x26>
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	429a      	cmp	r2, r3
 800703a:	d301      	bcc.n	8007040 <remove_chain+0x2a>
 800703c:	2302      	movs	r3, #2
 800703e:	e04b      	b.n	80070d8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00c      	beq.n	8007060 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007046:	f04f 32ff 	mov.w	r2, #4294967295
 800704a:	6879      	ldr	r1, [r7, #4]
 800704c:	69b8      	ldr	r0, [r7, #24]
 800704e:	f7ff fefb 	bl	8006e48 <put_fat>
 8007052:	4603      	mov	r3, r0
 8007054:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007056:	7ffb      	ldrb	r3, [r7, #31]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <remove_chain+0x4a>
 800705c:	7ffb      	ldrb	r3, [r7, #31]
 800705e:	e03b      	b.n	80070d8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007060:	68b9      	ldr	r1, [r7, #8]
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f7ff fe4b 	bl	8006cfe <get_fat>
 8007068:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d031      	beq.n	80070d4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d101      	bne.n	800707a <remove_chain+0x64>
 8007076:	2302      	movs	r3, #2
 8007078:	e02e      	b.n	80070d8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007080:	d101      	bne.n	8007086 <remove_chain+0x70>
 8007082:	2301      	movs	r3, #1
 8007084:	e028      	b.n	80070d8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007086:	2200      	movs	r2, #0
 8007088:	68b9      	ldr	r1, [r7, #8]
 800708a:	69b8      	ldr	r0, [r7, #24]
 800708c:	f7ff fedc 	bl	8006e48 <put_fat>
 8007090:	4603      	mov	r3, r0
 8007092:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007094:	7ffb      	ldrb	r3, [r7, #31]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <remove_chain+0x88>
 800709a:	7ffb      	ldrb	r3, [r7, #31]
 800709c:	e01c      	b.n	80070d8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	691a      	ldr	r2, [r3, #16]
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	3b02      	subs	r3, #2
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d20b      	bcs.n	80070c4 <remove_chain+0xae>
			fs->free_clst++;
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	791b      	ldrb	r3, [r3, #4]
 80070ba:	f043 0301 	orr.w	r3, r3, #1
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d3c6      	bcc.n	8007060 <remove_chain+0x4a>
 80070d2:	e000      	b.n	80070d6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80070d4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3720      	adds	r7, #32
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10d      	bne.n	8007112 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d004      	beq.n	800710c <create_chain+0x2c>
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	429a      	cmp	r2, r3
 800710a:	d31b      	bcc.n	8007144 <create_chain+0x64>
 800710c:	2301      	movs	r3, #1
 800710e:	61bb      	str	r3, [r7, #24]
 8007110:	e018      	b.n	8007144 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff fdf2 	bl	8006cfe <get_fat>
 800711a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d801      	bhi.n	8007126 <create_chain+0x46>
 8007122:	2301      	movs	r3, #1
 8007124:	e070      	b.n	8007208 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712c:	d101      	bne.n	8007132 <create_chain+0x52>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	e06a      	b.n	8007208 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	429a      	cmp	r2, r3
 800713a:	d201      	bcs.n	8007140 <create_chain+0x60>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	e063      	b.n	8007208 <create_chain+0x128>
		scl = clst;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	3301      	adds	r3, #1
 800714c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	429a      	cmp	r2, r3
 8007156:	d307      	bcc.n	8007168 <create_chain+0x88>
				ncl = 2;
 8007158:	2302      	movs	r3, #2
 800715a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800715c:	69fa      	ldr	r2, [r7, #28]
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	429a      	cmp	r2, r3
 8007162:	d901      	bls.n	8007168 <create_chain+0x88>
 8007164:	2300      	movs	r3, #0
 8007166:	e04f      	b.n	8007208 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007168:	69f9      	ldr	r1, [r7, #28]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7ff fdc7 	bl	8006cfe <get_fat>
 8007170:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00e      	beq.n	8007196 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d003      	beq.n	8007186 <create_chain+0xa6>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007184:	d101      	bne.n	800718a <create_chain+0xaa>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	e03e      	b.n	8007208 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800718a:	69fa      	ldr	r2, [r7, #28]
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	429a      	cmp	r2, r3
 8007190:	d1da      	bne.n	8007148 <create_chain+0x68>
 8007192:	2300      	movs	r3, #0
 8007194:	e038      	b.n	8007208 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007196:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007198:	f04f 32ff 	mov.w	r2, #4294967295
 800719c:	69f9      	ldr	r1, [r7, #28]
 800719e:	6938      	ldr	r0, [r7, #16]
 80071a0:	f7ff fe52 	bl	8006e48 <put_fat>
 80071a4:	4603      	mov	r3, r0
 80071a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d109      	bne.n	80071c2 <create_chain+0xe2>
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d006      	beq.n	80071c2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80071b4:	69fa      	ldr	r2, [r7, #28]
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6938      	ldr	r0, [r7, #16]
 80071ba:	f7ff fe45 	bl	8006e48 <put_fat>
 80071be:	4603      	mov	r3, r0
 80071c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d116      	bne.n	80071f6 <create_chain+0x116>
		fs->last_clst = ncl;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	69fa      	ldr	r2, [r7, #28]
 80071cc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	691a      	ldr	r2, [r3, #16]
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	3b02      	subs	r3, #2
 80071d8:	429a      	cmp	r2, r3
 80071da:	d804      	bhi.n	80071e6 <create_chain+0x106>
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	1e5a      	subs	r2, r3, #1
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	791b      	ldrb	r3, [r3, #4]
 80071ea:	f043 0301 	orr.w	r3, r3, #1
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	711a      	strb	r2, [r3, #4]
 80071f4:	e007      	b.n	8007206 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80071f6:	7dfb      	ldrb	r3, [r7, #23]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d102      	bne.n	8007202 <create_chain+0x122>
 80071fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007200:	e000      	b.n	8007204 <create_chain+0x124>
 8007202:	2301      	movs	r3, #1
 8007204:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007206:	69fb      	ldr	r3, [r7, #28]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3720      	adds	r7, #32
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007224:	3304      	adds	r3, #4
 8007226:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	0a5b      	lsrs	r3, r3, #9
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	8952      	ldrh	r2, [r2, #10]
 8007230:	fbb3 f3f2 	udiv	r3, r3, r2
 8007234:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	1d1a      	adds	r2, r3, #4
 800723a:	613a      	str	r2, [r7, #16]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <clmt_clust+0x3a>
 8007246:	2300      	movs	r3, #0
 8007248:	e010      	b.n	800726c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	429a      	cmp	r2, r3
 8007250:	d307      	bcc.n	8007262 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	617b      	str	r3, [r7, #20]
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	3304      	adds	r3, #4
 800725e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007260:	e7e9      	b.n	8007236 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007262:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	4413      	add	r3, r2
}
 800726c:	4618      	mov	r0, r3
 800726e:	371c      	adds	r7, #28
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800728e:	d204      	bcs.n	800729a <dir_sdi+0x22>
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	f003 031f 	and.w	r3, r3, #31
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <dir_sdi+0x26>
		return FR_INT_ERR;
 800729a:	2302      	movs	r3, #2
 800729c:	e063      	b.n	8007366 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d106      	bne.n	80072be <dir_sdi+0x46>
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d902      	bls.n	80072be <dir_sdi+0x46>
		clst = fs->dirbase;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10c      	bne.n	80072de <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	8912      	ldrh	r2, [r2, #8]
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d301      	bcc.n	80072d4 <dir_sdi+0x5c>
 80072d0:	2302      	movs	r3, #2
 80072d2:	e048      	b.n	8007366 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	61da      	str	r2, [r3, #28]
 80072dc:	e029      	b.n	8007332 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	895b      	ldrh	r3, [r3, #10]
 80072e2:	025b      	lsls	r3, r3, #9
 80072e4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80072e6:	e019      	b.n	800731c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6979      	ldr	r1, [r7, #20]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7ff fd06 	bl	8006cfe <get_fat>
 80072f2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fa:	d101      	bne.n	8007300 <dir_sdi+0x88>
 80072fc:	2301      	movs	r3, #1
 80072fe:	e032      	b.n	8007366 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d904      	bls.n	8007310 <dir_sdi+0x98>
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	429a      	cmp	r2, r3
 800730e:	d301      	bcc.n	8007314 <dir_sdi+0x9c>
 8007310:	2302      	movs	r3, #2
 8007312:	e028      	b.n	8007366 <dir_sdi+0xee>
			ofs -= csz;
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	429a      	cmp	r2, r3
 8007322:	d2e1      	bcs.n	80072e8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007324:	6979      	ldr	r1, [r7, #20]
 8007326:	6938      	ldr	r0, [r7, #16]
 8007328:	f7ff fcca 	bl	8006cc0 <clust2sect>
 800732c:	4602      	mov	r2, r0
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <dir_sdi+0xcc>
 8007340:	2302      	movs	r3, #2
 8007342:	e010      	b.n	8007366 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	69da      	ldr	r2, [r3, #28]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	0a5b      	lsrs	r3, r3, #9
 800734c:	441a      	add	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735e:	441a      	add	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b086      	sub	sp, #24
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	3320      	adds	r3, #32
 8007384:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <dir_next+0x28>
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007394:	d301      	bcc.n	800739a <dir_next+0x2c>
 8007396:	2304      	movs	r3, #4
 8007398:	e0aa      	b.n	80074f0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f040 8098 	bne.w	80074d6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10b      	bne.n	80073d0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	095b      	lsrs	r3, r3, #5
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	8912      	ldrh	r2, [r2, #8]
 80073c0:	4293      	cmp	r3, r2
 80073c2:	f0c0 8088 	bcc.w	80074d6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	61da      	str	r2, [r3, #28]
 80073cc:	2304      	movs	r3, #4
 80073ce:	e08f      	b.n	80074f0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	0a5b      	lsrs	r3, r3, #9
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	8952      	ldrh	r2, [r2, #10]
 80073d8:	3a01      	subs	r2, #1
 80073da:	4013      	ands	r3, r2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d17a      	bne.n	80074d6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	4619      	mov	r1, r3
 80073e8:	4610      	mov	r0, r2
 80073ea:	f7ff fc88 	bl	8006cfe <get_fat>
 80073ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d801      	bhi.n	80073fa <dir_next+0x8c>
 80073f6:	2302      	movs	r3, #2
 80073f8:	e07a      	b.n	80074f0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007400:	d101      	bne.n	8007406 <dir_next+0x98>
 8007402:	2301      	movs	r3, #1
 8007404:	e074      	b.n	80074f0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	429a      	cmp	r2, r3
 800740e:	d358      	bcc.n	80074c2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d104      	bne.n	8007420 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	61da      	str	r2, [r3, #28]
 800741c:	2304      	movs	r3, #4
 800741e:	e067      	b.n	80074f0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	4619      	mov	r1, r3
 8007428:	4610      	mov	r0, r2
 800742a:	f7ff fe59 	bl	80070e0 <create_chain>
 800742e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <dir_next+0xcc>
 8007436:	2307      	movs	r3, #7
 8007438:	e05a      	b.n	80074f0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d101      	bne.n	8007444 <dir_next+0xd6>
 8007440:	2302      	movs	r3, #2
 8007442:	e055      	b.n	80074f0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744a:	d101      	bne.n	8007450 <dir_next+0xe2>
 800744c:	2301      	movs	r3, #1
 800744e:	e04f      	b.n	80074f0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f7ff fb55 	bl	8006b00 <sync_window>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <dir_next+0xf2>
 800745c:	2301      	movs	r3, #1
 800745e:	e047      	b.n	80074f0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3330      	adds	r3, #48	; 0x30
 8007464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007468:	2100      	movs	r1, #0
 800746a:	4618      	mov	r0, r3
 800746c:	f7ff f97f 	bl	800676e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007470:	2300      	movs	r3, #0
 8007472:	613b      	str	r3, [r7, #16]
 8007474:	6979      	ldr	r1, [r7, #20]
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f7ff fc22 	bl	8006cc0 <clust2sect>
 800747c:	4602      	mov	r2, r0
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	62da      	str	r2, [r3, #44]	; 0x2c
 8007482:	e012      	b.n	80074aa <dir_next+0x13c>
						fs->wflag = 1;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2201      	movs	r2, #1
 8007488:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f7ff fb38 	bl	8006b00 <sync_window>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <dir_next+0x12c>
 8007496:	2301      	movs	r3, #1
 8007498:	e02a      	b.n	80074f0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	3301      	adds	r3, #1
 800749e:	613b      	str	r3, [r7, #16]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	895b      	ldrh	r3, [r3, #10]
 80074ae:	461a      	mov	r2, r3
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d3e6      	bcc.n	8007484 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad2      	subs	r2, r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80074c8:	6979      	ldr	r1, [r7, #20]
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f7ff fbf8 	bl	8006cc0 <clust2sect>
 80074d0:	4602      	mov	r2, r0
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e8:	441a      	add	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007508:	2100      	movs	r1, #0
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7ff feb4 	bl	8007278 <dir_sdi>
 8007510:	4603      	mov	r3, r0
 8007512:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007514:	7dfb      	ldrb	r3, [r7, #23]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d12b      	bne.n	8007572 <dir_alloc+0x7a>
		n = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	4619      	mov	r1, r3
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7ff fb2f 	bl	8006b88 <move_window>
 800752a:	4603      	mov	r3, r0
 800752c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800752e:	7dfb      	ldrb	r3, [r7, #23]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d11d      	bne.n	8007570 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	2be5      	cmp	r3, #229	; 0xe5
 800753c:	d004      	beq.n	8007548 <dir_alloc+0x50>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d107      	bne.n	8007558 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	3301      	adds	r3, #1
 800754c:	613b      	str	r3, [r7, #16]
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d102      	bne.n	800755c <dir_alloc+0x64>
 8007556:	e00c      	b.n	8007572 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007558:	2300      	movs	r3, #0
 800755a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800755c:	2101      	movs	r1, #1
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff ff05 	bl	800736e <dir_next>
 8007564:	4603      	mov	r3, r0
 8007566:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0d7      	beq.n	800751e <dir_alloc+0x26>
 800756e:	e000      	b.n	8007572 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007570:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007572:	7dfb      	ldrb	r3, [r7, #23]
 8007574:	2b04      	cmp	r3, #4
 8007576:	d101      	bne.n	800757c <dir_alloc+0x84>
 8007578:	2307      	movs	r3, #7
 800757a:	75fb      	strb	r3, [r7, #23]
	return res;
 800757c:	7dfb      	ldrb	r3, [r7, #23]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	331a      	adds	r3, #26
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff f847 	bl	8006628 <ld_word>
 800759a:	4603      	mov	r3, r0
 800759c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d109      	bne.n	80075ba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	3314      	adds	r3, #20
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7ff f83c 	bl	8006628 <ld_word>
 80075b0:	4603      	mov	r3, r0
 80075b2:	041b      	lsls	r3, r3, #16
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80075ba:	68fb      	ldr	r3, [r7, #12]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	331a      	adds	r3, #26
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	b292      	uxth	r2, r2
 80075d8:	4611      	mov	r1, r2
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff f85f 	bl	800669e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d109      	bne.n	80075fc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f103 0214 	add.w	r2, r3, #20
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	0c1b      	lsrs	r3, r3, #16
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	4619      	mov	r1, r3
 80075f6:	4610      	mov	r0, r2
 80075f8:	f7ff f851 	bl	800669e <st_word>
	}
}
 80075fc:	bf00      	nop
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007612:	2100      	movs	r1, #0
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7ff fe2f 	bl	8007278 <dir_sdi>
 800761a:	4603      	mov	r3, r0
 800761c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800761e:	7dfb      	ldrb	r3, [r7, #23]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <dir_find+0x24>
 8007624:	7dfb      	ldrb	r3, [r7, #23]
 8007626:	e03e      	b.n	80076a6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	4619      	mov	r1, r3
 800762e:	6938      	ldr	r0, [r7, #16]
 8007630:	f7ff faaa 	bl	8006b88 <move_window>
 8007634:	4603      	mov	r3, r0
 8007636:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007638:	7dfb      	ldrb	r3, [r7, #23]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d12f      	bne.n	800769e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007646:	7bfb      	ldrb	r3, [r7, #15]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d102      	bne.n	8007652 <dir_find+0x4e>
 800764c:	2304      	movs	r3, #4
 800764e:	75fb      	strb	r3, [r7, #23]
 8007650:	e028      	b.n	80076a4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	330b      	adds	r3, #11
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800765e:	b2da      	uxtb	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	330b      	adds	r3, #11
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	f003 0308 	and.w	r3, r3, #8
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10a      	bne.n	800768a <dir_find+0x86>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a18      	ldr	r0, [r3, #32]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3324      	adds	r3, #36	; 0x24
 800767c:	220b      	movs	r2, #11
 800767e:	4619      	mov	r1, r3
 8007680:	f7ff f88f 	bl	80067a2 <mem_cmp>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00b      	beq.n	80076a2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800768a:	2100      	movs	r1, #0
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7ff fe6e 	bl	800736e <dir_next>
 8007692:	4603      	mov	r3, r0
 8007694:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007696:	7dfb      	ldrb	r3, [r7, #23]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d0c5      	beq.n	8007628 <dir_find+0x24>
 800769c:	e002      	b.n	80076a4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800769e:	bf00      	nop
 80076a0:	e000      	b.n	80076a4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80076a2:	bf00      	nop

	return res;
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80076bc:	2101      	movs	r1, #1
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff ff1a 	bl	80074f8 <dir_alloc>
 80076c4:	4603      	mov	r3, r0
 80076c6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d11c      	bne.n	8007708 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	4619      	mov	r1, r3
 80076d4:	68b8      	ldr	r0, [r7, #8]
 80076d6:	f7ff fa57 	bl	8006b88 <move_window>
 80076da:	4603      	mov	r3, r0
 80076dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80076de:	7bfb      	ldrb	r3, [r7, #15]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d111      	bne.n	8007708 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	2220      	movs	r2, #32
 80076ea:	2100      	movs	r1, #0
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7ff f83e 	bl	800676e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a18      	ldr	r0, [r3, #32]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	3324      	adds	r3, #36	; 0x24
 80076fa:	220b      	movs	r2, #11
 80076fc:	4619      	mov	r1, r3
 80076fe:	f7ff f815 	bl	800672c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2201      	movs	r2, #1
 8007706:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007708:	7bfb      	ldrb	r3, [r7, #15]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
	...

08007714 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b088      	sub	sp, #32
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3324      	adds	r3, #36	; 0x24
 8007728:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800772a:	220b      	movs	r2, #11
 800772c:	2120      	movs	r1, #32
 800772e:	68b8      	ldr	r0, [r7, #8]
 8007730:	f7ff f81d 	bl	800676e <mem_set>
	si = i = 0; ni = 8;
 8007734:	2300      	movs	r3, #0
 8007736:	613b      	str	r3, [r7, #16]
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	617b      	str	r3, [r7, #20]
 800773c:	2308      	movs	r3, #8
 800773e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	1c5a      	adds	r2, r3, #1
 8007744:	617a      	str	r2, [r7, #20]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4413      	add	r3, r2
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800774e:	7ffb      	ldrb	r3, [r7, #31]
 8007750:	2b20      	cmp	r3, #32
 8007752:	d94e      	bls.n	80077f2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007754:	7ffb      	ldrb	r3, [r7, #31]
 8007756:	2b2f      	cmp	r3, #47	; 0x2f
 8007758:	d006      	beq.n	8007768 <create_name+0x54>
 800775a:	7ffb      	ldrb	r3, [r7, #31]
 800775c:	2b5c      	cmp	r3, #92	; 0x5c
 800775e:	d110      	bne.n	8007782 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007760:	e002      	b.n	8007768 <create_name+0x54>
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	3301      	adds	r3, #1
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	4413      	add	r3, r2
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b2f      	cmp	r3, #47	; 0x2f
 8007772:	d0f6      	beq.n	8007762 <create_name+0x4e>
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	4413      	add	r3, r2
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	2b5c      	cmp	r3, #92	; 0x5c
 800777e:	d0f0      	beq.n	8007762 <create_name+0x4e>
			break;
 8007780:	e038      	b.n	80077f4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007782:	7ffb      	ldrb	r3, [r7, #31]
 8007784:	2b2e      	cmp	r3, #46	; 0x2e
 8007786:	d003      	beq.n	8007790 <create_name+0x7c>
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	429a      	cmp	r2, r3
 800778e:	d30c      	bcc.n	80077aa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	2b0b      	cmp	r3, #11
 8007794:	d002      	beq.n	800779c <create_name+0x88>
 8007796:	7ffb      	ldrb	r3, [r7, #31]
 8007798:	2b2e      	cmp	r3, #46	; 0x2e
 800779a:	d001      	beq.n	80077a0 <create_name+0x8c>
 800779c:	2306      	movs	r3, #6
 800779e:	e044      	b.n	800782a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80077a0:	2308      	movs	r3, #8
 80077a2:	613b      	str	r3, [r7, #16]
 80077a4:	230b      	movs	r3, #11
 80077a6:	61bb      	str	r3, [r7, #24]
			continue;
 80077a8:	e022      	b.n	80077f0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80077aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	da04      	bge.n	80077bc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80077b2:	7ffb      	ldrb	r3, [r7, #31]
 80077b4:	3b80      	subs	r3, #128	; 0x80
 80077b6:	4a1f      	ldr	r2, [pc, #124]	; (8007834 <create_name+0x120>)
 80077b8:	5cd3      	ldrb	r3, [r2, r3]
 80077ba:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80077bc:	7ffb      	ldrb	r3, [r7, #31]
 80077be:	4619      	mov	r1, r3
 80077c0:	481d      	ldr	r0, [pc, #116]	; (8007838 <create_name+0x124>)
 80077c2:	f7ff f815 	bl	80067f0 <chk_chr>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <create_name+0xbc>
 80077cc:	2306      	movs	r3, #6
 80077ce:	e02c      	b.n	800782a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80077d0:	7ffb      	ldrb	r3, [r7, #31]
 80077d2:	2b60      	cmp	r3, #96	; 0x60
 80077d4:	d905      	bls.n	80077e2 <create_name+0xce>
 80077d6:	7ffb      	ldrb	r3, [r7, #31]
 80077d8:	2b7a      	cmp	r3, #122	; 0x7a
 80077da:	d802      	bhi.n	80077e2 <create_name+0xce>
 80077dc:	7ffb      	ldrb	r3, [r7, #31]
 80077de:	3b20      	subs	r3, #32
 80077e0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	1c5a      	adds	r2, r3, #1
 80077e6:	613a      	str	r2, [r7, #16]
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	4413      	add	r3, r2
 80077ec:	7ffa      	ldrb	r2, [r7, #31]
 80077ee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80077f0:	e7a6      	b.n	8007740 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80077f2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	441a      	add	r2, r3
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <create_name+0xf4>
 8007804:	2306      	movs	r3, #6
 8007806:	e010      	b.n	800782a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2be5      	cmp	r3, #229	; 0xe5
 800780e:	d102      	bne.n	8007816 <create_name+0x102>
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	2205      	movs	r2, #5
 8007814:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007816:	7ffb      	ldrb	r3, [r7, #31]
 8007818:	2b20      	cmp	r3, #32
 800781a:	d801      	bhi.n	8007820 <create_name+0x10c>
 800781c:	2204      	movs	r2, #4
 800781e:	e000      	b.n	8007822 <create_name+0x10e>
 8007820:	2200      	movs	r2, #0
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	330b      	adds	r3, #11
 8007826:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007828:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800782a:	4618      	mov	r0, r3
 800782c:	3720      	adds	r7, #32
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	0800963c 	.word	0x0800963c
 8007838:	080095d8 	.word	0x080095d8

0800783c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007850:	e002      	b.n	8007858 <follow_path+0x1c>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	3301      	adds	r3, #1
 8007856:	603b      	str	r3, [r7, #0]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	2b2f      	cmp	r3, #47	; 0x2f
 800785e:	d0f8      	beq.n	8007852 <follow_path+0x16>
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	2b5c      	cmp	r3, #92	; 0x5c
 8007866:	d0f4      	beq.n	8007852 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	2200      	movs	r2, #0
 800786c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	2b1f      	cmp	r3, #31
 8007874:	d80a      	bhi.n	800788c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2280      	movs	r2, #128	; 0x80
 800787a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800787e:	2100      	movs	r1, #0
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7ff fcf9 	bl	8007278 <dir_sdi>
 8007886:	4603      	mov	r3, r0
 8007888:	75fb      	strb	r3, [r7, #23]
 800788a:	e043      	b.n	8007914 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800788c:	463b      	mov	r3, r7
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7ff ff3f 	bl	8007714 <create_name>
 8007896:	4603      	mov	r3, r0
 8007898:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d134      	bne.n	800790a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f7ff feaf 	bl	8007604 <dir_find>
 80078a6:	4603      	mov	r3, r0
 80078a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80078b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00a      	beq.n	80078ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	2b04      	cmp	r3, #4
 80078bc:	d127      	bne.n	800790e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80078be:	7afb      	ldrb	r3, [r7, #11]
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d122      	bne.n	800790e <follow_path+0xd2>
 80078c8:	2305      	movs	r3, #5
 80078ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80078cc:	e01f      	b.n	800790e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80078ce:	7afb      	ldrb	r3, [r7, #11]
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d11c      	bne.n	8007912 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	799b      	ldrb	r3, [r3, #6]
 80078dc:	f003 0310 	and.w	r3, r3, #16
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d102      	bne.n	80078ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 80078e4:	2305      	movs	r3, #5
 80078e6:	75fb      	strb	r3, [r7, #23]
 80078e8:	e014      	b.n	8007914 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f8:	4413      	add	r3, r2
 80078fa:	4619      	mov	r1, r3
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f7ff fe42 	bl	8007586 <ld_clust>
 8007902:	4602      	mov	r2, r0
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007908:	e7c0      	b.n	800788c <follow_path+0x50>
			if (res != FR_OK) break;
 800790a:	bf00      	nop
 800790c:	e002      	b.n	8007914 <follow_path+0xd8>
				break;
 800790e:	bf00      	nop
 8007910:	e000      	b.n	8007914 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007912:	bf00      	nop
			}
		}
	}

	return res;
 8007914:	7dfb      	ldrb	r3, [r7, #23]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800791e:	b480      	push	{r7}
 8007920:	b087      	sub	sp, #28
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007926:	f04f 33ff 	mov.w	r3, #4294967295
 800792a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d031      	beq.n	8007998 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	617b      	str	r3, [r7, #20]
 800793a:	e002      	b.n	8007942 <get_ldnumber+0x24>
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	3301      	adds	r3, #1
 8007940:	617b      	str	r3, [r7, #20]
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	2b20      	cmp	r3, #32
 8007948:	d903      	bls.n	8007952 <get_ldnumber+0x34>
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	2b3a      	cmp	r3, #58	; 0x3a
 8007950:	d1f4      	bne.n	800793c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	2b3a      	cmp	r3, #58	; 0x3a
 8007958:	d11c      	bne.n	8007994 <get_ldnumber+0x76>
			tp = *path;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	60fa      	str	r2, [r7, #12]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	3b30      	subs	r3, #48	; 0x30
 800796a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2b09      	cmp	r3, #9
 8007970:	d80e      	bhi.n	8007990 <get_ldnumber+0x72>
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	429a      	cmp	r2, r3
 8007978:	d10a      	bne.n	8007990 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d107      	bne.n	8007990 <get_ldnumber+0x72>
					vol = (int)i;
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	3301      	adds	r3, #1
 8007988:	617b      	str	r3, [r7, #20]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	e002      	b.n	800799a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007994:	2300      	movs	r3, #0
 8007996:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007998:	693b      	ldr	r3, [r7, #16]
}
 800799a:	4618      	mov	r0, r3
 800799c:	371c      	adds	r7, #28
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
	...

080079a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	70da      	strb	r2, [r3, #3]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f04f 32ff 	mov.w	r2, #4294967295
 80079be:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff f8e0 	bl	8006b88 <move_window>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <check_fs+0x2a>
 80079ce:	2304      	movs	r3, #4
 80079d0:	e038      	b.n	8007a44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	3330      	adds	r3, #48	; 0x30
 80079d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe fe24 	bl	8006628 <ld_word>
 80079e0:	4603      	mov	r3, r0
 80079e2:	461a      	mov	r2, r3
 80079e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d001      	beq.n	80079f0 <check_fs+0x48>
 80079ec:	2303      	movs	r3, #3
 80079ee:	e029      	b.n	8007a44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079f6:	2be9      	cmp	r3, #233	; 0xe9
 80079f8:	d009      	beq.n	8007a0e <check_fs+0x66>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007a00:	2beb      	cmp	r3, #235	; 0xeb
 8007a02:	d11e      	bne.n	8007a42 <check_fs+0x9a>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007a0a:	2b90      	cmp	r3, #144	; 0x90
 8007a0c:	d119      	bne.n	8007a42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3330      	adds	r3, #48	; 0x30
 8007a12:	3336      	adds	r3, #54	; 0x36
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fe fe1f 	bl	8006658 <ld_dword>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a20:	4a0a      	ldr	r2, [pc, #40]	; (8007a4c <check_fs+0xa4>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d101      	bne.n	8007a2a <check_fs+0x82>
 8007a26:	2300      	movs	r3, #0
 8007a28:	e00c      	b.n	8007a44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	3330      	adds	r3, #48	; 0x30
 8007a2e:	3352      	adds	r3, #82	; 0x52
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fe fe11 	bl	8006658 <ld_dword>
 8007a36:	4602      	mov	r2, r0
 8007a38:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <check_fs+0xa8>)
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d101      	bne.n	8007a42 <check_fs+0x9a>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e000      	b.n	8007a44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007a42:	2302      	movs	r3, #2
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	00544146 	.word	0x00544146
 8007a50:	33544146 	.word	0x33544146

08007a54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b096      	sub	sp, #88	; 0x58
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	2200      	movs	r2, #0
 8007a66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f7ff ff58 	bl	800791e <get_ldnumber>
 8007a6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	da01      	bge.n	8007a7a <find_volume+0x26>
 8007a76:	230b      	movs	r3, #11
 8007a78:	e22e      	b.n	8007ed8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007a7a:	4aa8      	ldr	r2, [pc, #672]	; (8007d1c <find_volume+0x2c8>)
 8007a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <find_volume+0x3a>
 8007a8a:	230c      	movs	r3, #12
 8007a8c:	e224      	b.n	8007ed8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007a94:	79fb      	ldrb	r3, [r7, #7]
 8007a96:	f023 0301 	bic.w	r3, r3, #1
 8007a9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d01a      	beq.n	8007ada <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	785b      	ldrb	r3, [r3, #1]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7fe fd1f 	bl	80064ec <disk_status>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007ab4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10c      	bne.n	8007ada <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007ac0:	79fb      	ldrb	r3, [r7, #7]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d007      	beq.n	8007ad6 <find_volume+0x82>
 8007ac6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007aca:	f003 0304 	and.w	r3, r3, #4
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007ad2:	230a      	movs	r3, #10
 8007ad4:	e200      	b.n	8007ed8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	e1fe      	b.n	8007ed8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007adc:	2200      	movs	r2, #0
 8007ade:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aea:	785b      	ldrb	r3, [r3, #1]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fe fd17 	bl	8006520 <disk_initialize>
 8007af2:	4603      	mov	r3, r0
 8007af4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007af8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007b04:	2303      	movs	r3, #3
 8007b06:	e1e7      	b.n	8007ed8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007b08:	79fb      	ldrb	r3, [r7, #7]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d007      	beq.n	8007b1e <find_volume+0xca>
 8007b0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007b1a:	230a      	movs	r3, #10
 8007b1c:	e1dc      	b.n	8007ed8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007b22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b26:	f7ff ff3f 	bl	80079a8 <check_fs>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007b30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d14b      	bne.n	8007bd0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007b38:	2300      	movs	r3, #0
 8007b3a:	643b      	str	r3, [r7, #64]	; 0x40
 8007b3c:	e01f      	b.n	8007b7e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007b4c:	4413      	add	r3, r2
 8007b4e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b52:	3304      	adds	r3, #4
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d006      	beq.n	8007b68 <find_volume+0x114>
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5c:	3308      	adds	r3, #8
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe fd7a 	bl	8006658 <ld_dword>
 8007b64:	4602      	mov	r2, r0
 8007b66:	e000      	b.n	8007b6a <find_volume+0x116>
 8007b68:	2200      	movs	r2, #0
 8007b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007b72:	440b      	add	r3, r1
 8007b74:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8007b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d9dc      	bls.n	8007b3e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007b84:	2300      	movs	r3, #0
 8007b86:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d002      	beq.n	8007b94 <find_volume+0x140>
 8007b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b90:	3b01      	subs	r3, #1
 8007b92:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007ba2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d005      	beq.n	8007bb6 <find_volume+0x162>
 8007baa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007bac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bae:	f7ff fefb 	bl	80079a8 <check_fs>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	e000      	b.n	8007bb8 <find_volume+0x164>
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d905      	bls.n	8007bd0 <find_volume+0x17c>
 8007bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8007bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bcc:	2b03      	cmp	r3, #3
 8007bce:	d9e1      	bls.n	8007b94 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007bd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bd4:	2b04      	cmp	r3, #4
 8007bd6:	d101      	bne.n	8007bdc <find_volume+0x188>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e17d      	b.n	8007ed8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007bdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d901      	bls.n	8007be8 <find_volume+0x194>
 8007be4:	230d      	movs	r3, #13
 8007be6:	e177      	b.n	8007ed8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bea:	3330      	adds	r3, #48	; 0x30
 8007bec:	330b      	adds	r3, #11
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fe fd1a 	bl	8006628 <ld_word>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bfa:	d001      	beq.n	8007c00 <find_volume+0x1ac>
 8007bfc:	230d      	movs	r3, #13
 8007bfe:	e16b      	b.n	8007ed8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c02:	3330      	adds	r3, #48	; 0x30
 8007c04:	3316      	adds	r3, #22
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fe fd0e 	bl	8006628 <ld_word>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d106      	bne.n	8007c24 <find_volume+0x1d0>
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	3330      	adds	r3, #48	; 0x30
 8007c1a:	3324      	adds	r3, #36	; 0x24
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fe fd1b 	bl	8006658 <ld_dword>
 8007c22:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c28:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c32:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	789b      	ldrb	r3, [r3, #2]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d005      	beq.n	8007c48 <find_volume+0x1f4>
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3e:	789b      	ldrb	r3, [r3, #2]
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d001      	beq.n	8007c48 <find_volume+0x1f4>
 8007c44:	230d      	movs	r3, #13
 8007c46:	e147      	b.n	8007ed8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	789b      	ldrb	r3, [r3, #2]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c50:	fb02 f303 	mul.w	r3, r2, r3
 8007c54:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c60:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c64:	895b      	ldrh	r3, [r3, #10]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d008      	beq.n	8007c7c <find_volume+0x228>
 8007c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6c:	895b      	ldrh	r3, [r3, #10]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c72:	895b      	ldrh	r3, [r3, #10]
 8007c74:	3b01      	subs	r3, #1
 8007c76:	4013      	ands	r3, r2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <find_volume+0x22c>
 8007c7c:	230d      	movs	r3, #13
 8007c7e:	e12b      	b.n	8007ed8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c82:	3330      	adds	r3, #48	; 0x30
 8007c84:	3311      	adds	r3, #17
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fe fcce 	bl	8006628 <ld_word>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	461a      	mov	r2, r3
 8007c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c92:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c96:	891b      	ldrh	r3, [r3, #8]
 8007c98:	f003 030f 	and.w	r3, r3, #15
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <find_volume+0x252>
 8007ca2:	230d      	movs	r3, #13
 8007ca4:	e118      	b.n	8007ed8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca8:	3330      	adds	r3, #48	; 0x30
 8007caa:	3313      	adds	r3, #19
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fe fcbb 	bl	8006628 <ld_word>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d106      	bne.n	8007cca <find_volume+0x276>
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbe:	3330      	adds	r3, #48	; 0x30
 8007cc0:	3320      	adds	r3, #32
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fe fcc8 	bl	8006658 <ld_dword>
 8007cc8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ccc:	3330      	adds	r3, #48	; 0x30
 8007cce:	330e      	adds	r3, #14
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fe fca9 	bl	8006628 <ld_word>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007cda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d101      	bne.n	8007ce4 <find_volume+0x290>
 8007ce0:	230d      	movs	r3, #13
 8007ce2:	e0f9      	b.n	8007ed8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007ce4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ce8:	4413      	add	r3, r2
 8007cea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cec:	8912      	ldrh	r2, [r2, #8]
 8007cee:	0912      	lsrs	r2, r2, #4
 8007cf0:	b292      	uxth	r2, r2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d201      	bcs.n	8007d02 <find_volume+0x2ae>
 8007cfe:	230d      	movs	r3, #13
 8007d00:	e0ea      	b.n	8007ed8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007d02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d0a:	8952      	ldrh	r2, [r2, #10]
 8007d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d10:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d103      	bne.n	8007d20 <find_volume+0x2cc>
 8007d18:	230d      	movs	r3, #13
 8007d1a:	e0dd      	b.n	8007ed8 <find_volume+0x484>
 8007d1c:	20000044 	.word	0x20000044
		fmt = FS_FAT32;
 8007d20:	2303      	movs	r3, #3
 8007d22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d28:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d802      	bhi.n	8007d36 <find_volume+0x2e2>
 8007d30:	2302      	movs	r3, #2
 8007d32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d802      	bhi.n	8007d46 <find_volume+0x2f2>
 8007d40:	2301      	movs	r3, #1
 8007d42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d48:	1c9a      	adds	r2, r3, #2
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d52:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007d54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d58:	441a      	add	r2, r3
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007d5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	441a      	add	r2, r3
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007d68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d11e      	bne.n	8007dae <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	3330      	adds	r3, #48	; 0x30
 8007d74:	332a      	adds	r3, #42	; 0x2a
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fe fc56 	bl	8006628 <ld_word>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <find_volume+0x332>
 8007d82:	230d      	movs	r3, #13
 8007d84:	e0a8      	b.n	8007ed8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d88:	891b      	ldrh	r3, [r3, #8]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <find_volume+0x33e>
 8007d8e:	230d      	movs	r3, #13
 8007d90:	e0a2      	b.n	8007ed8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d94:	3330      	adds	r3, #48	; 0x30
 8007d96:	332c      	adds	r3, #44	; 0x2c
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fe fc5d 	bl	8006658 <ld_dword>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	647b      	str	r3, [r7, #68]	; 0x44
 8007dac:	e01f      	b.n	8007dee <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db0:	891b      	ldrh	r3, [r3, #8]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <find_volume+0x366>
 8007db6:	230d      	movs	r3, #13
 8007db8:	e08e      	b.n	8007ed8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbc:	6a1a      	ldr	r2, [r3, #32]
 8007dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dc0:	441a      	add	r2, r3
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007dc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d103      	bne.n	8007dd6 <find_volume+0x382>
 8007dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	005b      	lsls	r3, r3, #1
 8007dd4:	e00a      	b.n	8007dec <find_volume+0x398>
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd8:	695a      	ldr	r2, [r3, #20]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	4413      	add	r3, r2
 8007de0:	085a      	lsrs	r2, r3, #1
 8007de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007dec:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df0:	699a      	ldr	r2, [r3, #24]
 8007df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007df4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007df8:	0a5b      	lsrs	r3, r3, #9
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d201      	bcs.n	8007e02 <find_volume+0x3ae>
 8007dfe:	230d      	movs	r3, #13
 8007e00:	e06a      	b.n	8007ed8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e04:	f04f 32ff 	mov.w	r2, #4294967295
 8007e08:	611a      	str	r2, [r3, #16]
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0c:	691a      	ldr	r2, [r3, #16]
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e14:	2280      	movs	r2, #128	; 0x80
 8007e16:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007e18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d149      	bne.n	8007eb4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e22:	3330      	adds	r3, #48	; 0x30
 8007e24:	3330      	adds	r3, #48	; 0x30
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe fbfe 	bl	8006628 <ld_word>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d140      	bne.n	8007eb4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e34:	3301      	adds	r3, #1
 8007e36:	4619      	mov	r1, r3
 8007e38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e3a:	f7fe fea5 	bl	8006b88 <move_window>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d137      	bne.n	8007eb4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8007e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e46:	2200      	movs	r2, #0
 8007e48:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4c:	3330      	adds	r3, #48	; 0x30
 8007e4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fe fbe8 	bl	8006628 <ld_word>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d127      	bne.n	8007eb4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e66:	3330      	adds	r3, #48	; 0x30
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fe fbf5 	bl	8006658 <ld_dword>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	4b1b      	ldr	r3, [pc, #108]	; (8007ee0 <find_volume+0x48c>)
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d11e      	bne.n	8007eb4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e78:	3330      	adds	r3, #48	; 0x30
 8007e7a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe fbea 	bl	8006658 <ld_dword>
 8007e84:	4602      	mov	r2, r0
 8007e86:	4b17      	ldr	r3, [pc, #92]	; (8007ee4 <find_volume+0x490>)
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d113      	bne.n	8007eb4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	3330      	adds	r3, #48	; 0x30
 8007e90:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fe fbdf 	bl	8006658 <ld_dword>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea2:	3330      	adds	r3, #48	; 0x30
 8007ea4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fe fbd5 	bl	8006658 <ld_dword>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007eba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007ebc:	4b0a      	ldr	r3, [pc, #40]	; (8007ee8 <find_volume+0x494>)
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	4b08      	ldr	r3, [pc, #32]	; (8007ee8 <find_volume+0x494>)
 8007ec6:	801a      	strh	r2, [r3, #0]
 8007ec8:	4b07      	ldr	r3, [pc, #28]	; (8007ee8 <find_volume+0x494>)
 8007eca:	881a      	ldrh	r2, [r3, #0]
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ece:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007ed0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ed2:	f7fe fdf1 	bl	8006ab8 <clear_lock>
#endif
	return FR_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3758      	adds	r7, #88	; 0x58
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	41615252 	.word	0x41615252
 8007ee4:	61417272 	.word	0x61417272
 8007ee8:	20000048 	.word	0x20000048

08007eec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007ef6:	2309      	movs	r3, #9
 8007ef8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d01c      	beq.n	8007f3a <validate+0x4e>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d018      	beq.n	8007f3a <validate+0x4e>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d013      	beq.n	8007f3a <validate+0x4e>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	889a      	ldrh	r2, [r3, #4]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	88db      	ldrh	r3, [r3, #6]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d10c      	bne.n	8007f3a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	785b      	ldrb	r3, [r3, #1]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fe fae0 	bl	80064ec <disk_status>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <validate+0x4e>
			res = FR_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d102      	bne.n	8007f46 <validate+0x5a>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	e000      	b.n	8007f48 <validate+0x5c>
 8007f46:	2300      	movs	r3, #0
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	6013      	str	r3, [r2, #0]
	return res;
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b088      	sub	sp, #32
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	4613      	mov	r3, r2
 8007f64:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007f6a:	f107 0310 	add.w	r3, r7, #16
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7ff fcd5 	bl	800791e <get_ldnumber>
 8007f74:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	da01      	bge.n	8007f80 <f_mount+0x28>
 8007f7c:	230b      	movs	r3, #11
 8007f7e:	e02b      	b.n	8007fd8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007f80:	4a17      	ldr	r2, [pc, #92]	; (8007fe0 <f_mount+0x88>)
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f88:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d005      	beq.n	8007f9c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007f90:	69b8      	ldr	r0, [r7, #24]
 8007f92:	f7fe fd91 	bl	8006ab8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d002      	beq.n	8007fa8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	490d      	ldr	r1, [pc, #52]	; (8007fe0 <f_mount+0x88>)
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <f_mount+0x66>
 8007fb8:	79fb      	ldrb	r3, [r7, #7]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d001      	beq.n	8007fc2 <f_mount+0x6a>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	e00a      	b.n	8007fd8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007fc2:	f107 010c 	add.w	r1, r7, #12
 8007fc6:	f107 0308 	add.w	r3, r7, #8
 8007fca:	2200      	movs	r2, #0
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7ff fd41 	bl	8007a54 <find_volume>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3720      	adds	r7, #32
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	20000044 	.word	0x20000044

08007fe4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b098      	sub	sp, #96	; 0x60
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <f_open+0x18>
 8007ff8:	2309      	movs	r3, #9
 8007ffa:	e1ad      	b.n	8008358 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008002:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008004:	79fa      	ldrb	r2, [r7, #7]
 8008006:	f107 0110 	add.w	r1, r7, #16
 800800a:	f107 0308 	add.w	r3, r7, #8
 800800e:	4618      	mov	r0, r3
 8008010:	f7ff fd20 	bl	8007a54 <find_volume>
 8008014:	4603      	mov	r3, r0
 8008016:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800801a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800801e:	2b00      	cmp	r3, #0
 8008020:	f040 8191 	bne.w	8008346 <f_open+0x362>
		dj.obj.fs = fs;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	f107 0314 	add.w	r3, r7, #20
 800802e:	4611      	mov	r1, r2
 8008030:	4618      	mov	r0, r3
 8008032:	f7ff fc03 	bl	800783c <follow_path>
 8008036:	4603      	mov	r3, r0
 8008038:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800803c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008040:	2b00      	cmp	r3, #0
 8008042:	d11a      	bne.n	800807a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008044:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008048:	b25b      	sxtb	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	da03      	bge.n	8008056 <f_open+0x72>
				res = FR_INVALID_NAME;
 800804e:	2306      	movs	r3, #6
 8008050:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008054:	e011      	b.n	800807a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008056:	79fb      	ldrb	r3, [r7, #7]
 8008058:	f023 0301 	bic.w	r3, r3, #1
 800805c:	2b00      	cmp	r3, #0
 800805e:	bf14      	ite	ne
 8008060:	2301      	movne	r3, #1
 8008062:	2300      	moveq	r3, #0
 8008064:	b2db      	uxtb	r3, r3
 8008066:	461a      	mov	r2, r3
 8008068:	f107 0314 	add.w	r3, r7, #20
 800806c:	4611      	mov	r1, r2
 800806e:	4618      	mov	r0, r3
 8008070:	f7fe fbda 	bl	8006828 <chk_lock>
 8008074:	4603      	mov	r3, r0
 8008076:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	f003 031c 	and.w	r3, r3, #28
 8008080:	2b00      	cmp	r3, #0
 8008082:	d07f      	beq.n	8008184 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008084:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008088:	2b00      	cmp	r3, #0
 800808a:	d017      	beq.n	80080bc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800808c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008090:	2b04      	cmp	r3, #4
 8008092:	d10e      	bne.n	80080b2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008094:	f7fe fc24 	bl	80068e0 <enq_lock>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d006      	beq.n	80080ac <f_open+0xc8>
 800809e:	f107 0314 	add.w	r3, r7, #20
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7ff fb03 	bl	80076ae <dir_register>
 80080a8:	4603      	mov	r3, r0
 80080aa:	e000      	b.n	80080ae <f_open+0xca>
 80080ac:	2312      	movs	r3, #18
 80080ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	f043 0308 	orr.w	r3, r3, #8
 80080b8:	71fb      	strb	r3, [r7, #7]
 80080ba:	e010      	b.n	80080de <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80080bc:	7ebb      	ldrb	r3, [r7, #26]
 80080be:	f003 0311 	and.w	r3, r3, #17
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <f_open+0xea>
					res = FR_DENIED;
 80080c6:	2307      	movs	r3, #7
 80080c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80080cc:	e007      	b.n	80080de <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80080ce:	79fb      	ldrb	r3, [r7, #7]
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d002      	beq.n	80080de <f_open+0xfa>
 80080d8:	2308      	movs	r3, #8
 80080da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80080de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d168      	bne.n	80081b8 <f_open+0x1d4>
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	f003 0308 	and.w	r3, r3, #8
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d063      	beq.n	80081b8 <f_open+0x1d4>
				dw = GET_FATTIME();
 80080f0:	f7fe f8f4 	bl	80062dc <get_fattime>
 80080f4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80080f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f8:	330e      	adds	r3, #14
 80080fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fe fae9 	bl	80066d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008104:	3316      	adds	r3, #22
 8008106:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008108:	4618      	mov	r0, r3
 800810a:	f7fe fae3 	bl	80066d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800810e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008110:	330b      	adds	r3, #11
 8008112:	2220      	movs	r2, #32
 8008114:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800811a:	4611      	mov	r1, r2
 800811c:	4618      	mov	r0, r3
 800811e:	f7ff fa32 	bl	8007586 <ld_clust>
 8008122:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008128:	2200      	movs	r2, #0
 800812a:	4618      	mov	r0, r3
 800812c:	f7ff fa4a 	bl	80075c4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008132:	331c      	adds	r3, #28
 8008134:	2100      	movs	r1, #0
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe facc 	bl	80066d4 <st_dword>
					fs->wflag = 1;
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	2201      	movs	r2, #1
 8008140:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008144:	2b00      	cmp	r3, #0
 8008146:	d037      	beq.n	80081b8 <f_open+0x1d4>
						dw = fs->winsect;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800814e:	f107 0314 	add.w	r3, r7, #20
 8008152:	2200      	movs	r2, #0
 8008154:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008156:	4618      	mov	r0, r3
 8008158:	f7fe ff5d 	bl	8007016 <remove_chain>
 800815c:	4603      	mov	r3, r0
 800815e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008162:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008166:	2b00      	cmp	r3, #0
 8008168:	d126      	bne.n	80081b8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800816e:	4618      	mov	r0, r3
 8008170:	f7fe fd0a 	bl	8006b88 <move_window>
 8008174:	4603      	mov	r3, r0
 8008176:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800817e:	3a01      	subs	r2, #1
 8008180:	60da      	str	r2, [r3, #12]
 8008182:	e019      	b.n	80081b8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008184:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008188:	2b00      	cmp	r3, #0
 800818a:	d115      	bne.n	80081b8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800818c:	7ebb      	ldrb	r3, [r7, #26]
 800818e:	f003 0310 	and.w	r3, r3, #16
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008196:	2304      	movs	r3, #4
 8008198:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800819c:	e00c      	b.n	80081b8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800819e:	79fb      	ldrb	r3, [r7, #7]
 80081a0:	f003 0302 	and.w	r3, r3, #2
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d007      	beq.n	80081b8 <f_open+0x1d4>
 80081a8:	7ebb      	ldrb	r3, [r7, #26]
 80081aa:	f003 0301 	and.w	r3, r3, #1
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <f_open+0x1d4>
						res = FR_DENIED;
 80081b2:	2307      	movs	r3, #7
 80081b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80081b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d128      	bne.n	8008212 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80081c0:	79fb      	ldrb	r3, [r7, #7]
 80081c2:	f003 0308 	and.w	r3, r3, #8
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80081ca:	79fb      	ldrb	r3, [r7, #7]
 80081cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80081da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	f023 0301 	bic.w	r3, r3, #1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	bf14      	ite	ne
 80081ea:	2301      	movne	r3, #1
 80081ec:	2300      	moveq	r3, #0
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	461a      	mov	r2, r3
 80081f2:	f107 0314 	add.w	r3, r7, #20
 80081f6:	4611      	mov	r1, r2
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7fe fb93 	bl	8006924 <inc_lock>
 80081fe:	4602      	mov	r2, r0
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d102      	bne.n	8008212 <f_open+0x22e>
 800820c:	2302      	movs	r3, #2
 800820e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008212:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008216:	2b00      	cmp	r3, #0
 8008218:	f040 8095 	bne.w	8008346 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008220:	4611      	mov	r1, r2
 8008222:	4618      	mov	r0, r3
 8008224:	f7ff f9af 	bl	8007586 <ld_clust>
 8008228:	4602      	mov	r2, r0
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800822e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008230:	331c      	adds	r3, #28
 8008232:	4618      	mov	r0, r3
 8008234:	f7fe fa10 	bl	8006658 <ld_dword>
 8008238:	4602      	mov	r2, r0
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	88da      	ldrh	r2, [r3, #6]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	79fa      	ldrb	r2, [r7, #7]
 8008256:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3330      	adds	r3, #48	; 0x30
 800826e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008272:	2100      	movs	r1, #0
 8008274:	4618      	mov	r0, r3
 8008276:	f7fe fa7a 	bl	800676e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800827a:	79fb      	ldrb	r3, [r7, #7]
 800827c:	f003 0320 	and.w	r3, r3, #32
 8008280:	2b00      	cmp	r3, #0
 8008282:	d060      	beq.n	8008346 <f_open+0x362>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d05c      	beq.n	8008346 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	895b      	ldrh	r3, [r3, #10]
 8008298:	025b      	lsls	r3, r3, #9
 800829a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	657b      	str	r3, [r7, #84]	; 0x54
 80082a8:	e016      	b.n	80082d8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fe fd25 	bl	8006cfe <get_fat>
 80082b4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80082b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d802      	bhi.n	80082c2 <f_open+0x2de>
 80082bc:	2302      	movs	r3, #2
 80082be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80082c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c8:	d102      	bne.n	80082d0 <f_open+0x2ec>
 80082ca:	2301      	movs	r3, #1
 80082cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80082d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80082d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	657b      	str	r3, [r7, #84]	; 0x54
 80082d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d103      	bne.n	80082e8 <f_open+0x304>
 80082e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80082e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d8e0      	bhi.n	80082aa <f_open+0x2c6>
				}
				fp->clust = clst;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80082ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d127      	bne.n	8008346 <f_open+0x362>
 80082f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d022      	beq.n	8008346 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008304:	4618      	mov	r0, r3
 8008306:	f7fe fcdb 	bl	8006cc0 <clust2sect>
 800830a:	6478      	str	r0, [r7, #68]	; 0x44
 800830c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800830e:	2b00      	cmp	r3, #0
 8008310:	d103      	bne.n	800831a <f_open+0x336>
						res = FR_INT_ERR;
 8008312:	2302      	movs	r3, #2
 8008314:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008318:	e015      	b.n	8008346 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800831a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800831c:	0a5a      	lsrs	r2, r3, #9
 800831e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008320:	441a      	add	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	7858      	ldrb	r0, [r3, #1]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6a1a      	ldr	r2, [r3, #32]
 8008334:	2301      	movs	r3, #1
 8008336:	f7fe f919 	bl	800656c <disk_read>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d002      	beq.n	8008346 <f_open+0x362>
 8008340:	2301      	movs	r3, #1
 8008342:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008346:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <f_open+0x370>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008354:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008358:	4618      	mov	r0, r3
 800835a:	3760      	adds	r7, #96	; 0x60
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b08c      	sub	sp, #48	; 0x30
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2200      	movs	r2, #0
 8008376:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f107 0210 	add.w	r2, r7, #16
 800837e:	4611      	mov	r1, r2
 8008380:	4618      	mov	r0, r3
 8008382:	f7ff fdb3 	bl	8007eec <validate>
 8008386:	4603      	mov	r3, r0
 8008388:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800838c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008390:	2b00      	cmp	r3, #0
 8008392:	d107      	bne.n	80083a4 <f_write+0x44>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	7d5b      	ldrb	r3, [r3, #21]
 8008398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800839c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d002      	beq.n	80083aa <f_write+0x4a>
 80083a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083a8:	e14b      	b.n	8008642 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	7d1b      	ldrb	r3, [r3, #20]
 80083ae:	f003 0302 	and.w	r3, r3, #2
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <f_write+0x5a>
 80083b6:	2307      	movs	r3, #7
 80083b8:	e143      	b.n	8008642 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	699a      	ldr	r2, [r3, #24]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	441a      	add	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	f080 812d 	bcs.w	8008626 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	43db      	mvns	r3, r3
 80083d2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80083d4:	e127      	b.n	8008626 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f040 80e3 	bne.w	80085aa <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	0a5b      	lsrs	r3, r3, #9
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	8952      	ldrh	r2, [r2, #10]
 80083ee:	3a01      	subs	r2, #1
 80083f0:	4013      	ands	r3, r2
 80083f2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d143      	bne.n	8008482 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10c      	bne.n	800841c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840a:	2b00      	cmp	r3, #0
 800840c:	d11a      	bne.n	8008444 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2100      	movs	r1, #0
 8008412:	4618      	mov	r0, r3
 8008414:	f7fe fe64 	bl	80070e0 <create_chain>
 8008418:	62b8      	str	r0, [r7, #40]	; 0x28
 800841a:	e013      	b.n	8008444 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008420:	2b00      	cmp	r3, #0
 8008422:	d007      	beq.n	8008434 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	4619      	mov	r1, r3
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f7fe fef0 	bl	8007210 <clmt_clust>
 8008430:	62b8      	str	r0, [r7, #40]	; 0x28
 8008432:	e007      	b.n	8008444 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	4619      	mov	r1, r3
 800843c:	4610      	mov	r0, r2
 800843e:	f7fe fe4f 	bl	80070e0 <create_chain>
 8008442:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 80f2 	beq.w	8008630 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	2b01      	cmp	r3, #1
 8008450:	d104      	bne.n	800845c <f_write+0xfc>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2202      	movs	r2, #2
 8008456:	755a      	strb	r2, [r3, #21]
 8008458:	2302      	movs	r3, #2
 800845a:	e0f2      	b.n	8008642 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800845c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008462:	d104      	bne.n	800846e <f_write+0x10e>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2201      	movs	r2, #1
 8008468:	755a      	strb	r2, [r3, #21]
 800846a:	2301      	movs	r3, #1
 800846c:	e0e9      	b.n	8008642 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008472:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d102      	bne.n	8008482 <f_write+0x122>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008480:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	7d1b      	ldrb	r3, [r3, #20]
 8008486:	b25b      	sxtb	r3, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	da18      	bge.n	80084be <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	7858      	ldrb	r0, [r3, #1]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6a1a      	ldr	r2, [r3, #32]
 800849a:	2301      	movs	r3, #1
 800849c:	f7fe f886 	bl	80065ac <disk_write>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d004      	beq.n	80084b0 <f_write+0x150>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2201      	movs	r2, #1
 80084aa:	755a      	strb	r2, [r3, #21]
 80084ac:	2301      	movs	r3, #1
 80084ae:	e0c8      	b.n	8008642 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	7d1b      	ldrb	r3, [r3, #20]
 80084b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	69db      	ldr	r3, [r3, #28]
 80084c4:	4619      	mov	r1, r3
 80084c6:	4610      	mov	r0, r2
 80084c8:	f7fe fbfa 	bl	8006cc0 <clust2sect>
 80084cc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d104      	bne.n	80084de <f_write+0x17e>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2202      	movs	r2, #2
 80084d8:	755a      	strb	r2, [r3, #21]
 80084da:	2302      	movs	r3, #2
 80084dc:	e0b1      	b.n	8008642 <f_write+0x2e2>
			sect += csect;
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	4413      	add	r3, r2
 80084e4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	0a5b      	lsrs	r3, r3, #9
 80084ea:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d03c      	beq.n	800856c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	4413      	add	r3, r2
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	8952      	ldrh	r2, [r2, #10]
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d905      	bls.n	800850c <f_write+0x1ac>
					cc = fs->csize - csect;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	895b      	ldrh	r3, [r3, #10]
 8008504:	461a      	mov	r2, r3
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	7858      	ldrb	r0, [r3, #1]
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	69f9      	ldr	r1, [r7, #28]
 8008516:	f7fe f849 	bl	80065ac <disk_write>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d004      	beq.n	800852a <f_write+0x1ca>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2201      	movs	r2, #1
 8008524:	755a      	strb	r2, [r3, #21]
 8008526:	2301      	movs	r3, #1
 8008528:	e08b      	b.n	8008642 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6a1a      	ldr	r2, [r3, #32]
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	6a3a      	ldr	r2, [r7, #32]
 8008534:	429a      	cmp	r2, r3
 8008536:	d915      	bls.n	8008564 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6a1a      	ldr	r2, [r3, #32]
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	025b      	lsls	r3, r3, #9
 8008548:	69fa      	ldr	r2, [r7, #28]
 800854a:	4413      	add	r3, r2
 800854c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008550:	4619      	mov	r1, r3
 8008552:	f7fe f8eb 	bl	800672c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	7d1b      	ldrb	r3, [r3, #20]
 800855a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800855e:	b2da      	uxtb	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	025b      	lsls	r3, r3, #9
 8008568:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800856a:	e03f      	b.n	80085ec <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	429a      	cmp	r2, r3
 8008574:	d016      	beq.n	80085a4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	699a      	ldr	r2, [r3, #24]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800857e:	429a      	cmp	r2, r3
 8008580:	d210      	bcs.n	80085a4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	7858      	ldrb	r0, [r3, #1]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800858c:	2301      	movs	r3, #1
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	f7fd ffec 	bl	800656c <disk_read>
 8008594:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008596:	2b00      	cmp	r3, #0
 8008598:	d004      	beq.n	80085a4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2201      	movs	r2, #1
 800859e:	755a      	strb	r2, [r3, #21]
 80085a0:	2301      	movs	r3, #1
 80085a2:	e04e      	b.n	8008642 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80085b6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80085b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d901      	bls.n	80085c4 <f_write+0x264>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d2:	4413      	add	r3, r2
 80085d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d6:	69f9      	ldr	r1, [r7, #28]
 80085d8:	4618      	mov	r0, r3
 80085da:	f7fe f8a7 	bl	800672c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	7d1b      	ldrb	r3, [r3, #20]
 80085e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80085ec:	69fa      	ldr	r2, [r7, #28]
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	4413      	add	r3, r2
 80085f2:	61fb      	str	r3, [r7, #28]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	699a      	ldr	r2, [r3, #24]
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	441a      	add	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	619a      	str	r2, [r3, #24]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	68da      	ldr	r2, [r3, #12]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	429a      	cmp	r2, r3
 800860a:	bf38      	it	cc
 800860c:	461a      	movcc	r2, r3
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	60da      	str	r2, [r3, #12]
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	441a      	add	r2, r3
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	f47f aed4 	bne.w	80083d6 <f_write+0x76>
 800862e:	e000      	b.n	8008632 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008630:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	7d1b      	ldrb	r3, [r3, #20]
 8008636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800863a:	b2da      	uxtb	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3730      	adds	r7, #48	; 0x30
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b086      	sub	sp, #24
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f107 0208 	add.w	r2, r7, #8
 8008658:	4611      	mov	r1, r2
 800865a:	4618      	mov	r0, r3
 800865c:	f7ff fc46 	bl	8007eec <validate>
 8008660:	4603      	mov	r3, r0
 8008662:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008664:	7dfb      	ldrb	r3, [r7, #23]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d168      	bne.n	800873c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	7d1b      	ldrb	r3, [r3, #20]
 800866e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008672:	2b00      	cmp	r3, #0
 8008674:	d062      	beq.n	800873c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	7d1b      	ldrb	r3, [r3, #20]
 800867a:	b25b      	sxtb	r3, r3
 800867c:	2b00      	cmp	r3, #0
 800867e:	da15      	bge.n	80086ac <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	7858      	ldrb	r0, [r3, #1]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1a      	ldr	r2, [r3, #32]
 800868e:	2301      	movs	r3, #1
 8008690:	f7fd ff8c 	bl	80065ac <disk_write>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <f_sync+0x54>
 800869a:	2301      	movs	r3, #1
 800869c:	e04f      	b.n	800873e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	7d1b      	ldrb	r3, [r3, #20]
 80086a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a6:	b2da      	uxtb	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80086ac:	f7fd fe16 	bl	80062dc <get_fattime>
 80086b0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b8:	4619      	mov	r1, r3
 80086ba:	4610      	mov	r0, r2
 80086bc:	f7fe fa64 	bl	8006b88 <move_window>
 80086c0:	4603      	mov	r3, r0
 80086c2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80086c4:	7dfb      	ldrb	r3, [r7, #23]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d138      	bne.n	800873c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	330b      	adds	r3, #11
 80086d4:	781a      	ldrb	r2, [r3, #0]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	330b      	adds	r3, #11
 80086da:	f042 0220 	orr.w	r2, r2, #32
 80086de:	b2d2      	uxtb	r2, r2
 80086e0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6818      	ldr	r0, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	461a      	mov	r2, r3
 80086ec:	68f9      	ldr	r1, [r7, #12]
 80086ee:	f7fe ff69 	bl	80075c4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f103 021c 	add.w	r2, r3, #28
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	4619      	mov	r1, r3
 80086fe:	4610      	mov	r0, r2
 8008700:	f7fd ffe8 	bl	80066d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	3316      	adds	r3, #22
 8008708:	6939      	ldr	r1, [r7, #16]
 800870a:	4618      	mov	r0, r3
 800870c:	f7fd ffe2 	bl	80066d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	3312      	adds	r3, #18
 8008714:	2100      	movs	r1, #0
 8008716:	4618      	mov	r0, r3
 8008718:	f7fd ffc1 	bl	800669e <st_word>
					fs->wflag = 1;
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2201      	movs	r2, #1
 8008720:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	4618      	mov	r0, r3
 8008726:	f7fe fa5d 	bl	8006be4 <sync_fs>
 800872a:	4603      	mov	r3, r0
 800872c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	7d1b      	ldrb	r3, [r3, #20]
 8008732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008736:	b2da      	uxtb	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800873c:	7dfb      	ldrb	r3, [r7, #23]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b084      	sub	sp, #16
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7ff ff7b 	bl	800864a <f_sync>
 8008754:	4603      	mov	r3, r0
 8008756:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008758:	7bfb      	ldrb	r3, [r7, #15]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d118      	bne.n	8008790 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f107 0208 	add.w	r2, r7, #8
 8008764:	4611      	mov	r1, r2
 8008766:	4618      	mov	r0, r3
 8008768:	f7ff fbc0 	bl	8007eec <validate>
 800876c:	4603      	mov	r3, r0
 800876e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10c      	bne.n	8008790 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	4618      	mov	r0, r3
 800877c:	f7fe f960 	bl	8006a40 <dec_lock>
 8008780:	4603      	mov	r3, r0
 8008782:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008784:	7bfb      	ldrb	r3, [r7, #15]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d102      	bne.n	8008790 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008790:	7bfb      	ldrb	r3, [r7, #15]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
	...

0800879c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	4613      	mov	r3, r2
 80087a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80087aa:	2301      	movs	r3, #1
 80087ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80087ae:	2300      	movs	r3, #0
 80087b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80087b2:	4b1f      	ldr	r3, [pc, #124]	; (8008830 <FATFS_LinkDriverEx+0x94>)
 80087b4:	7a5b      	ldrb	r3, [r3, #9]
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d131      	bne.n	8008820 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80087bc:	4b1c      	ldr	r3, [pc, #112]	; (8008830 <FATFS_LinkDriverEx+0x94>)
 80087be:	7a5b      	ldrb	r3, [r3, #9]
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	461a      	mov	r2, r3
 80087c4:	4b1a      	ldr	r3, [pc, #104]	; (8008830 <FATFS_LinkDriverEx+0x94>)
 80087c6:	2100      	movs	r1, #0
 80087c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80087ca:	4b19      	ldr	r3, [pc, #100]	; (8008830 <FATFS_LinkDriverEx+0x94>)
 80087cc:	7a5b      	ldrb	r3, [r3, #9]
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	4a17      	ldr	r2, [pc, #92]	; (8008830 <FATFS_LinkDriverEx+0x94>)
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80087da:	4b15      	ldr	r3, [pc, #84]	; (8008830 <FATFS_LinkDriverEx+0x94>)
 80087dc:	7a5b      	ldrb	r3, [r3, #9]
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	461a      	mov	r2, r3
 80087e2:	4b13      	ldr	r3, [pc, #76]	; (8008830 <FATFS_LinkDriverEx+0x94>)
 80087e4:	4413      	add	r3, r2
 80087e6:	79fa      	ldrb	r2, [r7, #7]
 80087e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80087ea:	4b11      	ldr	r3, [pc, #68]	; (8008830 <FATFS_LinkDriverEx+0x94>)
 80087ec:	7a5b      	ldrb	r3, [r3, #9]
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	b2d1      	uxtb	r1, r2
 80087f4:	4a0e      	ldr	r2, [pc, #56]	; (8008830 <FATFS_LinkDriverEx+0x94>)
 80087f6:	7251      	strb	r1, [r2, #9]
 80087f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80087fa:	7dbb      	ldrb	r3, [r7, #22]
 80087fc:	3330      	adds	r3, #48	; 0x30
 80087fe:	b2da      	uxtb	r2, r3
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	3301      	adds	r3, #1
 8008808:	223a      	movs	r2, #58	; 0x3a
 800880a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	3302      	adds	r3, #2
 8008810:	222f      	movs	r2, #47	; 0x2f
 8008812:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	3303      	adds	r3, #3
 8008818:	2200      	movs	r2, #0
 800881a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800881c:	2300      	movs	r3, #0
 800881e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008820:	7dfb      	ldrb	r3, [r7, #23]
}
 8008822:	4618      	mov	r0, r3
 8008824:	371c      	adds	r7, #28
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	2000006c 	.word	0x2000006c

08008834 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800883e:	2200      	movs	r2, #0
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff ffaa 	bl	800879c <FATFS_LinkDriverEx>
 8008848:	4603      	mov	r3, r0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
	...

08008854 <__libc_init_array>:
 8008854:	b570      	push	{r4, r5, r6, lr}
 8008856:	4e0d      	ldr	r6, [pc, #52]	; (800888c <__libc_init_array+0x38>)
 8008858:	4c0d      	ldr	r4, [pc, #52]	; (8008890 <__libc_init_array+0x3c>)
 800885a:	1ba4      	subs	r4, r4, r6
 800885c:	10a4      	asrs	r4, r4, #2
 800885e:	2500      	movs	r5, #0
 8008860:	42a5      	cmp	r5, r4
 8008862:	d109      	bne.n	8008878 <__libc_init_array+0x24>
 8008864:	4e0b      	ldr	r6, [pc, #44]	; (8008894 <__libc_init_array+0x40>)
 8008866:	4c0c      	ldr	r4, [pc, #48]	; (8008898 <__libc_init_array+0x44>)
 8008868:	f000 fd6c 	bl	8009344 <_init>
 800886c:	1ba4      	subs	r4, r4, r6
 800886e:	10a4      	asrs	r4, r4, #2
 8008870:	2500      	movs	r5, #0
 8008872:	42a5      	cmp	r5, r4
 8008874:	d105      	bne.n	8008882 <__libc_init_array+0x2e>
 8008876:	bd70      	pop	{r4, r5, r6, pc}
 8008878:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800887c:	4798      	blx	r3
 800887e:	3501      	adds	r5, #1
 8008880:	e7ee      	b.n	8008860 <__libc_init_array+0xc>
 8008882:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008886:	4798      	blx	r3
 8008888:	3501      	adds	r5, #1
 800888a:	e7f2      	b.n	8008872 <__libc_init_array+0x1e>
 800888c:	08009a94 	.word	0x08009a94
 8008890:	08009a94 	.word	0x08009a94
 8008894:	08009a94 	.word	0x08009a94
 8008898:	08009a98 	.word	0x08009a98

0800889c <memset>:
 800889c:	4402      	add	r2, r0
 800889e:	4603      	mov	r3, r0
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d100      	bne.n	80088a6 <memset+0xa>
 80088a4:	4770      	bx	lr
 80088a6:	f803 1b01 	strb.w	r1, [r3], #1
 80088aa:	e7f9      	b.n	80088a0 <memset+0x4>

080088ac <sinf>:
 80088ac:	ee10 3a10 	vmov	r3, s0
 80088b0:	b507      	push	{r0, r1, r2, lr}
 80088b2:	4a1d      	ldr	r2, [pc, #116]	; (8008928 <sinf+0x7c>)
 80088b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088b8:	4293      	cmp	r3, r2
 80088ba:	dc05      	bgt.n	80088c8 <sinf+0x1c>
 80088bc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800892c <sinf+0x80>
 80088c0:	2000      	movs	r0, #0
 80088c2:	f000 fc41 	bl	8009148 <__kernel_sinf>
 80088c6:	e004      	b.n	80088d2 <sinf+0x26>
 80088c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80088cc:	db04      	blt.n	80088d8 <sinf+0x2c>
 80088ce:	ee30 0a40 	vsub.f32	s0, s0, s0
 80088d2:	b003      	add	sp, #12
 80088d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80088d8:	4668      	mov	r0, sp
 80088da:	f000 f829 	bl	8008930 <__ieee754_rem_pio2f>
 80088de:	f000 0003 	and.w	r0, r0, #3
 80088e2:	2801      	cmp	r0, #1
 80088e4:	d008      	beq.n	80088f8 <sinf+0x4c>
 80088e6:	2802      	cmp	r0, #2
 80088e8:	d00d      	beq.n	8008906 <sinf+0x5a>
 80088ea:	b9b0      	cbnz	r0, 800891a <sinf+0x6e>
 80088ec:	2001      	movs	r0, #1
 80088ee:	eddd 0a01 	vldr	s1, [sp, #4]
 80088f2:	ed9d 0a00 	vldr	s0, [sp]
 80088f6:	e7e4      	b.n	80088c2 <sinf+0x16>
 80088f8:	eddd 0a01 	vldr	s1, [sp, #4]
 80088fc:	ed9d 0a00 	vldr	s0, [sp]
 8008900:	f000 f942 	bl	8008b88 <__kernel_cosf>
 8008904:	e7e5      	b.n	80088d2 <sinf+0x26>
 8008906:	2001      	movs	r0, #1
 8008908:	eddd 0a01 	vldr	s1, [sp, #4]
 800890c:	ed9d 0a00 	vldr	s0, [sp]
 8008910:	f000 fc1a 	bl	8009148 <__kernel_sinf>
 8008914:	eeb1 0a40 	vneg.f32	s0, s0
 8008918:	e7db      	b.n	80088d2 <sinf+0x26>
 800891a:	eddd 0a01 	vldr	s1, [sp, #4]
 800891e:	ed9d 0a00 	vldr	s0, [sp]
 8008922:	f000 f931 	bl	8008b88 <__kernel_cosf>
 8008926:	e7f5      	b.n	8008914 <sinf+0x68>
 8008928:	3f490fd8 	.word	0x3f490fd8
 800892c:	00000000 	.word	0x00000000

08008930 <__ieee754_rem_pio2f>:
 8008930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008932:	ee10 6a10 	vmov	r6, s0
 8008936:	4b86      	ldr	r3, [pc, #536]	; (8008b50 <__ieee754_rem_pio2f+0x220>)
 8008938:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800893c:	429c      	cmp	r4, r3
 800893e:	b087      	sub	sp, #28
 8008940:	4605      	mov	r5, r0
 8008942:	dc05      	bgt.n	8008950 <__ieee754_rem_pio2f+0x20>
 8008944:	2300      	movs	r3, #0
 8008946:	ed85 0a00 	vstr	s0, [r5]
 800894a:	6043      	str	r3, [r0, #4]
 800894c:	2000      	movs	r0, #0
 800894e:	e020      	b.n	8008992 <__ieee754_rem_pio2f+0x62>
 8008950:	4b80      	ldr	r3, [pc, #512]	; (8008b54 <__ieee754_rem_pio2f+0x224>)
 8008952:	429c      	cmp	r4, r3
 8008954:	dc38      	bgt.n	80089c8 <__ieee754_rem_pio2f+0x98>
 8008956:	2e00      	cmp	r6, #0
 8008958:	f024 040f 	bic.w	r4, r4, #15
 800895c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8008b58 <__ieee754_rem_pio2f+0x228>
 8008960:	4b7e      	ldr	r3, [pc, #504]	; (8008b5c <__ieee754_rem_pio2f+0x22c>)
 8008962:	dd18      	ble.n	8008996 <__ieee754_rem_pio2f+0x66>
 8008964:	429c      	cmp	r4, r3
 8008966:	ee70 7a47 	vsub.f32	s15, s0, s14
 800896a:	bf09      	itett	eq
 800896c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8008b60 <__ieee754_rem_pio2f+0x230>
 8008970:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8008b64 <__ieee754_rem_pio2f+0x234>
 8008974:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8008978:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8008b68 <__ieee754_rem_pio2f+0x238>
 800897c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008980:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008984:	edc0 6a00 	vstr	s13, [r0]
 8008988:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800898c:	edc0 7a01 	vstr	s15, [r0, #4]
 8008990:	2001      	movs	r0, #1
 8008992:	b007      	add	sp, #28
 8008994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008996:	429c      	cmp	r4, r3
 8008998:	ee70 7a07 	vadd.f32	s15, s0, s14
 800899c:	bf09      	itett	eq
 800899e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8008b60 <__ieee754_rem_pio2f+0x230>
 80089a2:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8008b64 <__ieee754_rem_pio2f+0x234>
 80089a6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80089aa:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8008b68 <__ieee754_rem_pio2f+0x238>
 80089ae:	ee77 6a87 	vadd.f32	s13, s15, s14
 80089b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80089b6:	edc0 6a00 	vstr	s13, [r0]
 80089ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80089be:	edc0 7a01 	vstr	s15, [r0, #4]
 80089c2:	f04f 30ff 	mov.w	r0, #4294967295
 80089c6:	e7e4      	b.n	8008992 <__ieee754_rem_pio2f+0x62>
 80089c8:	4b68      	ldr	r3, [pc, #416]	; (8008b6c <__ieee754_rem_pio2f+0x23c>)
 80089ca:	429c      	cmp	r4, r3
 80089cc:	dc71      	bgt.n	8008ab2 <__ieee754_rem_pio2f+0x182>
 80089ce:	f000 fc03 	bl	80091d8 <fabsf>
 80089d2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008b70 <__ieee754_rem_pio2f+0x240>
 80089d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80089da:	eee0 7a07 	vfma.f32	s15, s0, s14
 80089de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089e2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80089e6:	ee17 0a90 	vmov	r0, s15
 80089ea:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008b58 <__ieee754_rem_pio2f+0x228>
 80089ee:	eeb1 7a46 	vneg.f32	s14, s12
 80089f2:	eea7 0a27 	vfma.f32	s0, s14, s15
 80089f6:	281f      	cmp	r0, #31
 80089f8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008b64 <__ieee754_rem_pio2f+0x234>
 80089fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008a00:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008a04:	ee16 3a90 	vmov	r3, s13
 8008a08:	dc1c      	bgt.n	8008a44 <__ieee754_rem_pio2f+0x114>
 8008a0a:	1e47      	subs	r7, r0, #1
 8008a0c:	4959      	ldr	r1, [pc, #356]	; (8008b74 <__ieee754_rem_pio2f+0x244>)
 8008a0e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8008a12:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8008a16:	428a      	cmp	r2, r1
 8008a18:	d014      	beq.n	8008a44 <__ieee754_rem_pio2f+0x114>
 8008a1a:	602b      	str	r3, [r5, #0]
 8008a1c:	ed95 7a00 	vldr	s14, [r5]
 8008a20:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008a24:	2e00      	cmp	r6, #0
 8008a26:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008a2a:	ed85 0a01 	vstr	s0, [r5, #4]
 8008a2e:	dab0      	bge.n	8008992 <__ieee754_rem_pio2f+0x62>
 8008a30:	eeb1 7a47 	vneg.f32	s14, s14
 8008a34:	eeb1 0a40 	vneg.f32	s0, s0
 8008a38:	ed85 7a00 	vstr	s14, [r5]
 8008a3c:	ed85 0a01 	vstr	s0, [r5, #4]
 8008a40:	4240      	negs	r0, r0
 8008a42:	e7a6      	b.n	8008992 <__ieee754_rem_pio2f+0x62>
 8008a44:	15e4      	asrs	r4, r4, #23
 8008a46:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008a4a:	1aa2      	subs	r2, r4, r2
 8008a4c:	2a08      	cmp	r2, #8
 8008a4e:	dde4      	ble.n	8008a1a <__ieee754_rem_pio2f+0xea>
 8008a50:	eddf 7a43 	vldr	s15, [pc, #268]	; 8008b60 <__ieee754_rem_pio2f+0x230>
 8008a54:	eef0 6a40 	vmov.f32	s13, s0
 8008a58:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008a5c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008a60:	eea7 0a27 	vfma.f32	s0, s14, s15
 8008a64:	eddf 7a40 	vldr	s15, [pc, #256]	; 8008b68 <__ieee754_rem_pio2f+0x238>
 8008a68:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8008a6c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8008a70:	eef0 7a40 	vmov.f32	s15, s0
 8008a74:	ee15 3a90 	vmov	r3, s11
 8008a78:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008a7c:	1aa4      	subs	r4, r4, r2
 8008a7e:	2c19      	cmp	r4, #25
 8008a80:	dc04      	bgt.n	8008a8c <__ieee754_rem_pio2f+0x15c>
 8008a82:	edc5 5a00 	vstr	s11, [r5]
 8008a86:	eeb0 0a66 	vmov.f32	s0, s13
 8008a8a:	e7c7      	b.n	8008a1c <__ieee754_rem_pio2f+0xec>
 8008a8c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008b78 <__ieee754_rem_pio2f+0x248>
 8008a90:	eeb0 0a66 	vmov.f32	s0, s13
 8008a94:	eea7 0a25 	vfma.f32	s0, s14, s11
 8008a98:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008a9c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008aa0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008b7c <__ieee754_rem_pio2f+0x24c>
 8008aa4:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8008aa8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008aac:	ed85 7a00 	vstr	s14, [r5]
 8008ab0:	e7b4      	b.n	8008a1c <__ieee754_rem_pio2f+0xec>
 8008ab2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008ab6:	db06      	blt.n	8008ac6 <__ieee754_rem_pio2f+0x196>
 8008ab8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008abc:	edc0 7a01 	vstr	s15, [r0, #4]
 8008ac0:	edc0 7a00 	vstr	s15, [r0]
 8008ac4:	e742      	b.n	800894c <__ieee754_rem_pio2f+0x1c>
 8008ac6:	15e2      	asrs	r2, r4, #23
 8008ac8:	3a86      	subs	r2, #134	; 0x86
 8008aca:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ad6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8008b80 <__ieee754_rem_pio2f+0x250>
 8008ada:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008ade:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ae2:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008ae6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008aea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008aee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008af2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008af6:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008afa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008afe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b06:	edcd 7a05 	vstr	s15, [sp, #20]
 8008b0a:	d11e      	bne.n	8008b4a <__ieee754_rem_pio2f+0x21a>
 8008b0c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b14:	bf0c      	ite	eq
 8008b16:	2301      	moveq	r3, #1
 8008b18:	2302      	movne	r3, #2
 8008b1a:	491a      	ldr	r1, [pc, #104]	; (8008b84 <__ieee754_rem_pio2f+0x254>)
 8008b1c:	9101      	str	r1, [sp, #4]
 8008b1e:	2102      	movs	r1, #2
 8008b20:	9100      	str	r1, [sp, #0]
 8008b22:	a803      	add	r0, sp, #12
 8008b24:	4629      	mov	r1, r5
 8008b26:	f000 f88d 	bl	8008c44 <__kernel_rem_pio2f>
 8008b2a:	2e00      	cmp	r6, #0
 8008b2c:	f6bf af31 	bge.w	8008992 <__ieee754_rem_pio2f+0x62>
 8008b30:	edd5 7a00 	vldr	s15, [r5]
 8008b34:	eef1 7a67 	vneg.f32	s15, s15
 8008b38:	edc5 7a00 	vstr	s15, [r5]
 8008b3c:	edd5 7a01 	vldr	s15, [r5, #4]
 8008b40:	eef1 7a67 	vneg.f32	s15, s15
 8008b44:	edc5 7a01 	vstr	s15, [r5, #4]
 8008b48:	e77a      	b.n	8008a40 <__ieee754_rem_pio2f+0x110>
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	e7e5      	b.n	8008b1a <__ieee754_rem_pio2f+0x1ea>
 8008b4e:	bf00      	nop
 8008b50:	3f490fd8 	.word	0x3f490fd8
 8008b54:	4016cbe3 	.word	0x4016cbe3
 8008b58:	3fc90f80 	.word	0x3fc90f80
 8008b5c:	3fc90fd0 	.word	0x3fc90fd0
 8008b60:	37354400 	.word	0x37354400
 8008b64:	37354443 	.word	0x37354443
 8008b68:	2e85a308 	.word	0x2e85a308
 8008b6c:	43490f80 	.word	0x43490f80
 8008b70:	3f22f984 	.word	0x3f22f984
 8008b74:	080096bc 	.word	0x080096bc
 8008b78:	2e85a300 	.word	0x2e85a300
 8008b7c:	248d3132 	.word	0x248d3132
 8008b80:	43800000 	.word	0x43800000
 8008b84:	0800973c 	.word	0x0800973c

08008b88 <__kernel_cosf>:
 8008b88:	ee10 3a10 	vmov	r3, s0
 8008b8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b90:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008b94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b98:	da05      	bge.n	8008ba6 <__kernel_cosf+0x1e>
 8008b9a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008b9e:	ee17 2a90 	vmov	r2, s15
 8008ba2:	2a00      	cmp	r2, #0
 8008ba4:	d03b      	beq.n	8008c1e <__kernel_cosf+0x96>
 8008ba6:	ee20 6a00 	vmul.f32	s12, s0, s0
 8008baa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008bae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008c24 <__kernel_cosf+0x9c>
 8008bb2:	4a1d      	ldr	r2, [pc, #116]	; (8008c28 <__kernel_cosf+0xa0>)
 8008bb4:	ee66 7a07 	vmul.f32	s15, s12, s14
 8008bb8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008c2c <__kernel_cosf+0xa4>
 8008bbc:	eea6 7a25 	vfma.f32	s14, s12, s11
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8008c30 <__kernel_cosf+0xa8>
 8008bc6:	eee7 5a06 	vfma.f32	s11, s14, s12
 8008bca:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008c34 <__kernel_cosf+0xac>
 8008bce:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008bd2:	eddf 5a19 	vldr	s11, [pc, #100]	; 8008c38 <__kernel_cosf+0xb0>
 8008bd6:	eee7 5a06 	vfma.f32	s11, s14, s12
 8008bda:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008c3c <__kernel_cosf+0xb4>
 8008bde:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008be2:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8008be6:	ee27 7a06 	vmul.f32	s14, s14, s12
 8008bea:	eee6 0a07 	vfma.f32	s1, s12, s14
 8008bee:	dc04      	bgt.n	8008bfa <__kernel_cosf+0x72>
 8008bf0:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8008bf4:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8008bf8:	4770      	bx	lr
 8008bfa:	4a11      	ldr	r2, [pc, #68]	; (8008c40 <__kernel_cosf+0xb8>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	bfda      	itte	le
 8008c00:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008c04:	ee07 3a10 	vmovle	s14, r3
 8008c08:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8008c0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c10:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8008c14:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008c18:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008c1c:	4770      	bx	lr
 8008c1e:	eeb0 0a66 	vmov.f32	s0, s13
 8008c22:	4770      	bx	lr
 8008c24:	ad47d74e 	.word	0xad47d74e
 8008c28:	3e999999 	.word	0x3e999999
 8008c2c:	310f74f6 	.word	0x310f74f6
 8008c30:	b493f27c 	.word	0xb493f27c
 8008c34:	37d00d01 	.word	0x37d00d01
 8008c38:	bab60b61 	.word	0xbab60b61
 8008c3c:	3d2aaaab 	.word	0x3d2aaaab
 8008c40:	3f480000 	.word	0x3f480000

08008c44 <__kernel_rem_pio2f>:
 8008c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c48:	ed2d 8b04 	vpush	{d8-d9}
 8008c4c:	b0d7      	sub	sp, #348	; 0x15c
 8008c4e:	469b      	mov	fp, r3
 8008c50:	460e      	mov	r6, r1
 8008c52:	4bbe      	ldr	r3, [pc, #760]	; (8008f4c <__kernel_rem_pio2f+0x308>)
 8008c54:	9964      	ldr	r1, [sp, #400]	; 0x190
 8008c56:	9002      	str	r0, [sp, #8]
 8008c58:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8008c5c:	9865      	ldr	r0, [sp, #404]	; 0x194
 8008c5e:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8008f5c <__kernel_rem_pio2f+0x318>
 8008c62:	1ed1      	subs	r1, r2, #3
 8008c64:	2308      	movs	r3, #8
 8008c66:	fb91 f1f3 	sdiv	r1, r1, r3
 8008c6a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8008c6e:	f10b 3aff 	add.w	sl, fp, #4294967295
 8008c72:	1c4c      	adds	r4, r1, #1
 8008c74:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8008c78:	eba1 050a 	sub.w	r5, r1, sl
 8008c7c:	aa1a      	add	r2, sp, #104	; 0x68
 8008c7e:	eb09 070a 	add.w	r7, r9, sl
 8008c82:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8008c86:	4696      	mov	lr, r2
 8008c88:	2300      	movs	r3, #0
 8008c8a:	42bb      	cmp	r3, r7
 8008c8c:	dd0f      	ble.n	8008cae <__kernel_rem_pio2f+0x6a>
 8008c8e:	af42      	add	r7, sp, #264	; 0x108
 8008c90:	2200      	movs	r2, #0
 8008c92:	454a      	cmp	r2, r9
 8008c94:	dc27      	bgt.n	8008ce6 <__kernel_rem_pio2f+0xa2>
 8008c96:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8008c9a:	eb0b 0302 	add.w	r3, fp, r2
 8008c9e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8008ca2:	9d02      	ldr	r5, [sp, #8]
 8008ca4:	eddf 7aad 	vldr	s15, [pc, #692]	; 8008f5c <__kernel_rem_pio2f+0x318>
 8008ca8:	f04f 0c00 	mov.w	ip, #0
 8008cac:	e015      	b.n	8008cda <__kernel_rem_pio2f+0x96>
 8008cae:	42dd      	cmn	r5, r3
 8008cb0:	bf5d      	ittte	pl
 8008cb2:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8008cb6:	ee07 2a90 	vmovpl	s15, r2
 8008cba:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008cbe:	eef0 7a47 	vmovmi.f32	s15, s14
 8008cc2:	ecee 7a01 	vstmia	lr!, {s15}
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	e7df      	b.n	8008c8a <__kernel_rem_pio2f+0x46>
 8008cca:	ecf5 6a01 	vldmia	r5!, {s13}
 8008cce:	ed33 7a01 	vldmdb	r3!, {s14}
 8008cd2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008cd6:	f10c 0c01 	add.w	ip, ip, #1
 8008cda:	45d4      	cmp	ip, sl
 8008cdc:	ddf5      	ble.n	8008cca <__kernel_rem_pio2f+0x86>
 8008cde:	ece7 7a01 	vstmia	r7!, {s15}
 8008ce2:	3201      	adds	r2, #1
 8008ce4:	e7d5      	b.n	8008c92 <__kernel_rem_pio2f+0x4e>
 8008ce6:	ab06      	add	r3, sp, #24
 8008ce8:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8008cec:	9304      	str	r3, [sp, #16]
 8008cee:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8008f58 <__kernel_rem_pio2f+0x314>
 8008cf2:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8008f54 <__kernel_rem_pio2f+0x310>
 8008cf6:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8008cfa:	9303      	str	r3, [sp, #12]
 8008cfc:	464d      	mov	r5, r9
 8008cfe:	ab56      	add	r3, sp, #344	; 0x158
 8008d00:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8008d04:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008d08:	3f01      	subs	r7, #1
 8008d0a:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8008d0e:	00bf      	lsls	r7, r7, #2
 8008d10:	ab56      	add	r3, sp, #344	; 0x158
 8008d12:	19da      	adds	r2, r3, r7
 8008d14:	3a4c      	subs	r2, #76	; 0x4c
 8008d16:	2300      	movs	r3, #0
 8008d18:	1ae9      	subs	r1, r5, r3
 8008d1a:	2900      	cmp	r1, #0
 8008d1c:	dc4c      	bgt.n	8008db8 <__kernel_rem_pio2f+0x174>
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f000 faa4 	bl	800926c <scalbnf>
 8008d24:	eeb0 8a40 	vmov.f32	s16, s0
 8008d28:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008d2c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008d30:	f000 fa5a 	bl	80091e8 <floorf>
 8008d34:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008d38:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008d3c:	2c00      	cmp	r4, #0
 8008d3e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008d42:	edcd 7a01 	vstr	s15, [sp, #4]
 8008d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d4a:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008d4e:	dd48      	ble.n	8008de2 <__kernel_rem_pio2f+0x19e>
 8008d50:	1e69      	subs	r1, r5, #1
 8008d52:	ab06      	add	r3, sp, #24
 8008d54:	f1c4 0008 	rsb	r0, r4, #8
 8008d58:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8008d5c:	9a01      	ldr	r2, [sp, #4]
 8008d5e:	fa4c f300 	asr.w	r3, ip, r0
 8008d62:	441a      	add	r2, r3
 8008d64:	4083      	lsls	r3, r0
 8008d66:	9201      	str	r2, [sp, #4]
 8008d68:	ebac 0203 	sub.w	r2, ip, r3
 8008d6c:	ab06      	add	r3, sp, #24
 8008d6e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8008d72:	f1c4 0307 	rsb	r3, r4, #7
 8008d76:	fa42 f803 	asr.w	r8, r2, r3
 8008d7a:	f1b8 0f00 	cmp.w	r8, #0
 8008d7e:	dd41      	ble.n	8008e04 <__kernel_rem_pio2f+0x1c0>
 8008d80:	9b01      	ldr	r3, [sp, #4]
 8008d82:	2000      	movs	r0, #0
 8008d84:	3301      	adds	r3, #1
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	4601      	mov	r1, r0
 8008d8a:	4285      	cmp	r5, r0
 8008d8c:	dc6d      	bgt.n	8008e6a <__kernel_rem_pio2f+0x226>
 8008d8e:	2c00      	cmp	r4, #0
 8008d90:	dd04      	ble.n	8008d9c <__kernel_rem_pio2f+0x158>
 8008d92:	2c01      	cmp	r4, #1
 8008d94:	d07e      	beq.n	8008e94 <__kernel_rem_pio2f+0x250>
 8008d96:	2c02      	cmp	r4, #2
 8008d98:	f000 8086 	beq.w	8008ea8 <__kernel_rem_pio2f+0x264>
 8008d9c:	f1b8 0f02 	cmp.w	r8, #2
 8008da0:	d130      	bne.n	8008e04 <__kernel_rem_pio2f+0x1c0>
 8008da2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008da6:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008daa:	b359      	cbz	r1, 8008e04 <__kernel_rem_pio2f+0x1c0>
 8008dac:	4620      	mov	r0, r4
 8008dae:	f000 fa5d 	bl	800926c <scalbnf>
 8008db2:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008db6:	e025      	b.n	8008e04 <__kernel_rem_pio2f+0x1c0>
 8008db8:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008dbc:	a806      	add	r0, sp, #24
 8008dbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dc6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008dca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008dce:	ee10 1a10 	vmov	r1, s0
 8008dd2:	ed32 0a01 	vldmdb	r2!, {s0}
 8008dd6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8008dda:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008dde:	3301      	adds	r3, #1
 8008de0:	e79a      	b.n	8008d18 <__kernel_rem_pio2f+0xd4>
 8008de2:	d106      	bne.n	8008df2 <__kernel_rem_pio2f+0x1ae>
 8008de4:	1e6b      	subs	r3, r5, #1
 8008de6:	aa06      	add	r2, sp, #24
 8008de8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008dec:	ea4f 2822 	mov.w	r8, r2, asr #8
 8008df0:	e7c3      	b.n	8008d7a <__kernel_rem_pio2f+0x136>
 8008df2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008df6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dfe:	da31      	bge.n	8008e64 <__kernel_rem_pio2f+0x220>
 8008e00:	f04f 0800 	mov.w	r8, #0
 8008e04:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e0c:	f040 80a8 	bne.w	8008f60 <__kernel_rem_pio2f+0x31c>
 8008e10:	1e6b      	subs	r3, r5, #1
 8008e12:	4618      	mov	r0, r3
 8008e14:	2200      	movs	r2, #0
 8008e16:	4548      	cmp	r0, r9
 8008e18:	da4d      	bge.n	8008eb6 <__kernel_rem_pio2f+0x272>
 8008e1a:	2a00      	cmp	r2, #0
 8008e1c:	f000 8087 	beq.w	8008f2e <__kernel_rem_pio2f+0x2ea>
 8008e20:	aa06      	add	r2, sp, #24
 8008e22:	3c08      	subs	r4, #8
 8008e24:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008e28:	2900      	cmp	r1, #0
 8008e2a:	f000 808d 	beq.w	8008f48 <__kernel_rem_pio2f+0x304>
 8008e2e:	4620      	mov	r0, r4
 8008e30:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008e34:	9302      	str	r3, [sp, #8]
 8008e36:	f000 fa19 	bl	800926c <scalbnf>
 8008e3a:	9b02      	ldr	r3, [sp, #8]
 8008e3c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008f58 <__kernel_rem_pio2f+0x314>
 8008e40:	0099      	lsls	r1, r3, #2
 8008e42:	aa42      	add	r2, sp, #264	; 0x108
 8008e44:	1850      	adds	r0, r2, r1
 8008e46:	1d05      	adds	r5, r0, #4
 8008e48:	461c      	mov	r4, r3
 8008e4a:	2c00      	cmp	r4, #0
 8008e4c:	f280 80b8 	bge.w	8008fc0 <__kernel_rem_pio2f+0x37c>
 8008e50:	2500      	movs	r5, #0
 8008e52:	1b5c      	subs	r4, r3, r5
 8008e54:	2c00      	cmp	r4, #0
 8008e56:	f2c0 80d8 	blt.w	800900a <__kernel_rem_pio2f+0x3c6>
 8008e5a:	4f3d      	ldr	r7, [pc, #244]	; (8008f50 <__kernel_rem_pio2f+0x30c>)
 8008e5c:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8008f5c <__kernel_rem_pio2f+0x318>
 8008e60:	2400      	movs	r4, #0
 8008e62:	e0c6      	b.n	8008ff2 <__kernel_rem_pio2f+0x3ae>
 8008e64:	f04f 0802 	mov.w	r8, #2
 8008e68:	e78a      	b.n	8008d80 <__kernel_rem_pio2f+0x13c>
 8008e6a:	ab06      	add	r3, sp, #24
 8008e6c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008e70:	b949      	cbnz	r1, 8008e86 <__kernel_rem_pio2f+0x242>
 8008e72:	b12b      	cbz	r3, 8008e80 <__kernel_rem_pio2f+0x23c>
 8008e74:	aa06      	add	r2, sp, #24
 8008e76:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008e7a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008e7e:	2301      	movs	r3, #1
 8008e80:	3001      	adds	r0, #1
 8008e82:	4619      	mov	r1, r3
 8008e84:	e781      	b.n	8008d8a <__kernel_rem_pio2f+0x146>
 8008e86:	aa06      	add	r2, sp, #24
 8008e88:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8008e8c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008e90:	460b      	mov	r3, r1
 8008e92:	e7f5      	b.n	8008e80 <__kernel_rem_pio2f+0x23c>
 8008e94:	1e68      	subs	r0, r5, #1
 8008e96:	ab06      	add	r3, sp, #24
 8008e98:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ea0:	aa06      	add	r2, sp, #24
 8008ea2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008ea6:	e779      	b.n	8008d9c <__kernel_rem_pio2f+0x158>
 8008ea8:	1e68      	subs	r0, r5, #1
 8008eaa:	ab06      	add	r3, sp, #24
 8008eac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008eb4:	e7f4      	b.n	8008ea0 <__kernel_rem_pio2f+0x25c>
 8008eb6:	a906      	add	r1, sp, #24
 8008eb8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008ebc:	3801      	subs	r0, #1
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	e7a9      	b.n	8008e16 <__kernel_rem_pio2f+0x1d2>
 8008ec2:	f10c 0c01 	add.w	ip, ip, #1
 8008ec6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008eca:	2a00      	cmp	r2, #0
 8008ecc:	d0f9      	beq.n	8008ec2 <__kernel_rem_pio2f+0x27e>
 8008ece:	eb0b 0305 	add.w	r3, fp, r5
 8008ed2:	aa1a      	add	r2, sp, #104	; 0x68
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	1898      	adds	r0, r3, r2
 8008ed8:	3004      	adds	r0, #4
 8008eda:	1c69      	adds	r1, r5, #1
 8008edc:	3704      	adds	r7, #4
 8008ede:	2200      	movs	r2, #0
 8008ee0:	4465      	add	r5, ip
 8008ee2:	9005      	str	r0, [sp, #20]
 8008ee4:	428d      	cmp	r5, r1
 8008ee6:	f6ff af0a 	blt.w	8008cfe <__kernel_rem_pio2f+0xba>
 8008eea:	a81a      	add	r0, sp, #104	; 0x68
 8008eec:	eb02 0c03 	add.w	ip, r2, r3
 8008ef0:	4484      	add	ip, r0
 8008ef2:	9803      	ldr	r0, [sp, #12]
 8008ef4:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008ef8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8008efc:	9001      	str	r0, [sp, #4]
 8008efe:	ee07 0a90 	vmov	s15, r0
 8008f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f06:	9805      	ldr	r0, [sp, #20]
 8008f08:	edcc 7a00 	vstr	s15, [ip]
 8008f0c:	eddf 7a13 	vldr	s15, [pc, #76]	; 8008f5c <__kernel_rem_pio2f+0x318>
 8008f10:	eb00 0802 	add.w	r8, r0, r2
 8008f14:	f04f 0c00 	mov.w	ip, #0
 8008f18:	45d4      	cmp	ip, sl
 8008f1a:	dd0c      	ble.n	8008f36 <__kernel_rem_pio2f+0x2f2>
 8008f1c:	eb02 0c07 	add.w	ip, r2, r7
 8008f20:	a842      	add	r0, sp, #264	; 0x108
 8008f22:	4484      	add	ip, r0
 8008f24:	edcc 7a01 	vstr	s15, [ip, #4]
 8008f28:	3101      	adds	r1, #1
 8008f2a:	3204      	adds	r2, #4
 8008f2c:	e7da      	b.n	8008ee4 <__kernel_rem_pio2f+0x2a0>
 8008f2e:	9b04      	ldr	r3, [sp, #16]
 8008f30:	f04f 0c01 	mov.w	ip, #1
 8008f34:	e7c7      	b.n	8008ec6 <__kernel_rem_pio2f+0x282>
 8008f36:	ecfe 6a01 	vldmia	lr!, {s13}
 8008f3a:	ed38 7a01 	vldmdb	r8!, {s14}
 8008f3e:	f10c 0c01 	add.w	ip, ip, #1
 8008f42:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008f46:	e7e7      	b.n	8008f18 <__kernel_rem_pio2f+0x2d4>
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	e769      	b.n	8008e20 <__kernel_rem_pio2f+0x1dc>
 8008f4c:	08009a80 	.word	0x08009a80
 8008f50:	08009a54 	.word	0x08009a54
 8008f54:	43800000 	.word	0x43800000
 8008f58:	3b800000 	.word	0x3b800000
 8008f5c:	00000000 	.word	0x00000000
 8008f60:	4260      	negs	r0, r4
 8008f62:	eeb0 0a48 	vmov.f32	s0, s16
 8008f66:	f000 f981 	bl	800926c <scalbnf>
 8008f6a:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8008f54 <__kernel_rem_pio2f+0x310>
 8008f6e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f76:	db1a      	blt.n	8008fae <__kernel_rem_pio2f+0x36a>
 8008f78:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008f58 <__kernel_rem_pio2f+0x314>
 8008f7c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008f80:	aa06      	add	r2, sp, #24
 8008f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f86:	a906      	add	r1, sp, #24
 8008f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f8c:	3408      	adds	r4, #8
 8008f8e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008f92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f96:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008f9a:	ee10 3a10 	vmov	r3, s0
 8008f9e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008fa2:	1c6b      	adds	r3, r5, #1
 8008fa4:	ee17 2a90 	vmov	r2, s15
 8008fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008fac:	e73f      	b.n	8008e2e <__kernel_rem_pio2f+0x1ea>
 8008fae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008fb2:	aa06      	add	r2, sp, #24
 8008fb4:	ee10 3a10 	vmov	r3, s0
 8008fb8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008fbc:	462b      	mov	r3, r5
 8008fbe:	e736      	b.n	8008e2e <__kernel_rem_pio2f+0x1ea>
 8008fc0:	aa06      	add	r2, sp, #24
 8008fc2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8008fc6:	9202      	str	r2, [sp, #8]
 8008fc8:	ee07 2a90 	vmov	s15, r2
 8008fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008fd0:	3c01      	subs	r4, #1
 8008fd2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008fd6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008fda:	ed65 7a01 	vstmdb	r5!, {s15}
 8008fde:	e734      	b.n	8008e4a <__kernel_rem_pio2f+0x206>
 8008fe0:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8008fe4:	ecf7 6a01 	vldmia	r7!, {s13}
 8008fe8:	ed9c 7a00 	vldr	s14, [ip]
 8008fec:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008ff0:	3401      	adds	r4, #1
 8008ff2:	454c      	cmp	r4, r9
 8008ff4:	dc01      	bgt.n	8008ffa <__kernel_rem_pio2f+0x3b6>
 8008ff6:	42a5      	cmp	r5, r4
 8008ff8:	daf2      	bge.n	8008fe0 <__kernel_rem_pio2f+0x39c>
 8008ffa:	aa56      	add	r2, sp, #344	; 0x158
 8008ffc:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8009000:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8009004:	3501      	adds	r5, #1
 8009006:	3804      	subs	r0, #4
 8009008:	e723      	b.n	8008e52 <__kernel_rem_pio2f+0x20e>
 800900a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800900c:	2a03      	cmp	r2, #3
 800900e:	d84d      	bhi.n	80090ac <__kernel_rem_pio2f+0x468>
 8009010:	e8df f002 	tbb	[pc, r2]
 8009014:	021f1f3e 	.word	0x021f1f3e
 8009018:	aa56      	add	r2, sp, #344	; 0x158
 800901a:	4411      	add	r1, r2
 800901c:	399c      	subs	r1, #156	; 0x9c
 800901e:	4608      	mov	r0, r1
 8009020:	461c      	mov	r4, r3
 8009022:	2c00      	cmp	r4, #0
 8009024:	dc5f      	bgt.n	80090e6 <__kernel_rem_pio2f+0x4a2>
 8009026:	4608      	mov	r0, r1
 8009028:	461c      	mov	r4, r3
 800902a:	2c01      	cmp	r4, #1
 800902c:	dc6b      	bgt.n	8009106 <__kernel_rem_pio2f+0x4c2>
 800902e:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8008f5c <__kernel_rem_pio2f+0x318>
 8009032:	2b01      	cmp	r3, #1
 8009034:	dc77      	bgt.n	8009126 <__kernel_rem_pio2f+0x4e2>
 8009036:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800903a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800903e:	f1b8 0f00 	cmp.w	r8, #0
 8009042:	d176      	bne.n	8009132 <__kernel_rem_pio2f+0x4ee>
 8009044:	edc6 6a00 	vstr	s13, [r6]
 8009048:	ed86 7a01 	vstr	s14, [r6, #4]
 800904c:	edc6 7a02 	vstr	s15, [r6, #8]
 8009050:	e02c      	b.n	80090ac <__kernel_rem_pio2f+0x468>
 8009052:	aa56      	add	r2, sp, #344	; 0x158
 8009054:	4411      	add	r1, r2
 8009056:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8008f5c <__kernel_rem_pio2f+0x318>
 800905a:	399c      	subs	r1, #156	; 0x9c
 800905c:	4618      	mov	r0, r3
 800905e:	2800      	cmp	r0, #0
 8009060:	da32      	bge.n	80090c8 <__kernel_rem_pio2f+0x484>
 8009062:	f1b8 0f00 	cmp.w	r8, #0
 8009066:	d035      	beq.n	80090d4 <__kernel_rem_pio2f+0x490>
 8009068:	eef1 7a47 	vneg.f32	s15, s14
 800906c:	edc6 7a00 	vstr	s15, [r6]
 8009070:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8009074:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009078:	a82f      	add	r0, sp, #188	; 0xbc
 800907a:	2101      	movs	r1, #1
 800907c:	428b      	cmp	r3, r1
 800907e:	da2c      	bge.n	80090da <__kernel_rem_pio2f+0x496>
 8009080:	f1b8 0f00 	cmp.w	r8, #0
 8009084:	d001      	beq.n	800908a <__kernel_rem_pio2f+0x446>
 8009086:	eef1 7a67 	vneg.f32	s15, s15
 800908a:	edc6 7a01 	vstr	s15, [r6, #4]
 800908e:	e00d      	b.n	80090ac <__kernel_rem_pio2f+0x468>
 8009090:	aa56      	add	r2, sp, #344	; 0x158
 8009092:	4411      	add	r1, r2
 8009094:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8008f5c <__kernel_rem_pio2f+0x318>
 8009098:	399c      	subs	r1, #156	; 0x9c
 800909a:	2b00      	cmp	r3, #0
 800909c:	da0e      	bge.n	80090bc <__kernel_rem_pio2f+0x478>
 800909e:	f1b8 0f00 	cmp.w	r8, #0
 80090a2:	d001      	beq.n	80090a8 <__kernel_rem_pio2f+0x464>
 80090a4:	eef1 7a67 	vneg.f32	s15, s15
 80090a8:	edc6 7a00 	vstr	s15, [r6]
 80090ac:	9b01      	ldr	r3, [sp, #4]
 80090ae:	f003 0007 	and.w	r0, r3, #7
 80090b2:	b057      	add	sp, #348	; 0x15c
 80090b4:	ecbd 8b04 	vpop	{d8-d9}
 80090b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090bc:	ed31 7a01 	vldmdb	r1!, {s14}
 80090c0:	3b01      	subs	r3, #1
 80090c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80090c6:	e7e8      	b.n	800909a <__kernel_rem_pio2f+0x456>
 80090c8:	ed71 7a01 	vldmdb	r1!, {s15}
 80090cc:	3801      	subs	r0, #1
 80090ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80090d2:	e7c4      	b.n	800905e <__kernel_rem_pio2f+0x41a>
 80090d4:	eef0 7a47 	vmov.f32	s15, s14
 80090d8:	e7c8      	b.n	800906c <__kernel_rem_pio2f+0x428>
 80090da:	ecb0 7a01 	vldmia	r0!, {s14}
 80090de:	3101      	adds	r1, #1
 80090e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80090e4:	e7ca      	b.n	800907c <__kernel_rem_pio2f+0x438>
 80090e6:	ed50 7a02 	vldr	s15, [r0, #-8]
 80090ea:	ed70 6a01 	vldmdb	r0!, {s13}
 80090ee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80090f2:	3c01      	subs	r4, #1
 80090f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80090f8:	ed00 7a01 	vstr	s14, [r0, #-4]
 80090fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009100:	edc0 7a00 	vstr	s15, [r0]
 8009104:	e78d      	b.n	8009022 <__kernel_rem_pio2f+0x3de>
 8009106:	ed50 7a02 	vldr	s15, [r0, #-8]
 800910a:	ed70 6a01 	vldmdb	r0!, {s13}
 800910e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009112:	3c01      	subs	r4, #1
 8009114:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009118:	ed00 7a01 	vstr	s14, [r0, #-4]
 800911c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009120:	edc0 7a00 	vstr	s15, [r0]
 8009124:	e781      	b.n	800902a <__kernel_rem_pio2f+0x3e6>
 8009126:	ed31 7a01 	vldmdb	r1!, {s14}
 800912a:	3b01      	subs	r3, #1
 800912c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009130:	e77f      	b.n	8009032 <__kernel_rem_pio2f+0x3ee>
 8009132:	eef1 6a66 	vneg.f32	s13, s13
 8009136:	eeb1 7a47 	vneg.f32	s14, s14
 800913a:	edc6 6a00 	vstr	s13, [r6]
 800913e:	ed86 7a01 	vstr	s14, [r6, #4]
 8009142:	eef1 7a67 	vneg.f32	s15, s15
 8009146:	e781      	b.n	800904c <__kernel_rem_pio2f+0x408>

08009148 <__kernel_sinf>:
 8009148:	ee10 3a10 	vmov	r3, s0
 800914c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009150:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009154:	da04      	bge.n	8009160 <__kernel_sinf+0x18>
 8009156:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800915a:	ee17 3a90 	vmov	r3, s15
 800915e:	b35b      	cbz	r3, 80091b8 <__kernel_sinf+0x70>
 8009160:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009164:	eddf 7a15 	vldr	s15, [pc, #84]	; 80091bc <__kernel_sinf+0x74>
 8009168:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80091c0 <__kernel_sinf+0x78>
 800916c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009170:	eddf 7a14 	vldr	s15, [pc, #80]	; 80091c4 <__kernel_sinf+0x7c>
 8009174:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009178:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80091c8 <__kernel_sinf+0x80>
 800917c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009180:	eddf 7a12 	vldr	s15, [pc, #72]	; 80091cc <__kernel_sinf+0x84>
 8009184:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009188:	eee6 7a07 	vfma.f32	s15, s12, s14
 800918c:	b930      	cbnz	r0, 800919c <__kernel_sinf+0x54>
 800918e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80091d0 <__kernel_sinf+0x88>
 8009192:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009196:	eea6 0a26 	vfma.f32	s0, s12, s13
 800919a:	4770      	bx	lr
 800919c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80091a0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80091a4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80091a8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80091ac:	eddf 7a09 	vldr	s15, [pc, #36]	; 80091d4 <__kernel_sinf+0x8c>
 80091b0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80091b4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	2f2ec9d3 	.word	0x2f2ec9d3
 80091c0:	b2d72f34 	.word	0xb2d72f34
 80091c4:	3638ef1b 	.word	0x3638ef1b
 80091c8:	b9500d01 	.word	0xb9500d01
 80091cc:	3c088889 	.word	0x3c088889
 80091d0:	be2aaaab 	.word	0xbe2aaaab
 80091d4:	3e2aaaab 	.word	0x3e2aaaab

080091d8 <fabsf>:
 80091d8:	ee10 3a10 	vmov	r3, s0
 80091dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091e0:	ee00 3a10 	vmov	s0, r3
 80091e4:	4770      	bx	lr
	...

080091e8 <floorf>:
 80091e8:	ee10 3a10 	vmov	r3, s0
 80091ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80091f0:	0dca      	lsrs	r2, r1, #23
 80091f2:	3a7f      	subs	r2, #127	; 0x7f
 80091f4:	2a16      	cmp	r2, #22
 80091f6:	dc2a      	bgt.n	800924e <floorf+0x66>
 80091f8:	2a00      	cmp	r2, #0
 80091fa:	da11      	bge.n	8009220 <floorf+0x38>
 80091fc:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009260 <floorf+0x78>
 8009200:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009204:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800920c:	dd05      	ble.n	800921a <floorf+0x32>
 800920e:	2b00      	cmp	r3, #0
 8009210:	da23      	bge.n	800925a <floorf+0x72>
 8009212:	4a14      	ldr	r2, [pc, #80]	; (8009264 <floorf+0x7c>)
 8009214:	2900      	cmp	r1, #0
 8009216:	bf18      	it	ne
 8009218:	4613      	movne	r3, r2
 800921a:	ee00 3a10 	vmov	s0, r3
 800921e:	4770      	bx	lr
 8009220:	4911      	ldr	r1, [pc, #68]	; (8009268 <floorf+0x80>)
 8009222:	4111      	asrs	r1, r2
 8009224:	420b      	tst	r3, r1
 8009226:	d0fa      	beq.n	800921e <floorf+0x36>
 8009228:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009260 <floorf+0x78>
 800922c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009230:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009238:	ddef      	ble.n	800921a <floorf+0x32>
 800923a:	2b00      	cmp	r3, #0
 800923c:	bfbe      	ittt	lt
 800923e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8009242:	fa40 f202 	asrlt.w	r2, r0, r2
 8009246:	189b      	addlt	r3, r3, r2
 8009248:	ea23 0301 	bic.w	r3, r3, r1
 800924c:	e7e5      	b.n	800921a <floorf+0x32>
 800924e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009252:	d3e4      	bcc.n	800921e <floorf+0x36>
 8009254:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009258:	4770      	bx	lr
 800925a:	2300      	movs	r3, #0
 800925c:	e7dd      	b.n	800921a <floorf+0x32>
 800925e:	bf00      	nop
 8009260:	7149f2ca 	.word	0x7149f2ca
 8009264:	bf800000 	.word	0xbf800000
 8009268:	007fffff 	.word	0x007fffff

0800926c <scalbnf>:
 800926c:	b508      	push	{r3, lr}
 800926e:	ee10 2a10 	vmov	r2, s0
 8009272:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8009276:	ed2d 8b02 	vpush	{d8}
 800927a:	eef0 0a40 	vmov.f32	s1, s0
 800927e:	d004      	beq.n	800928a <scalbnf+0x1e>
 8009280:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009284:	d306      	bcc.n	8009294 <scalbnf+0x28>
 8009286:	ee70 0a00 	vadd.f32	s1, s0, s0
 800928a:	ecbd 8b02 	vpop	{d8}
 800928e:	eeb0 0a60 	vmov.f32	s0, s1
 8009292:	bd08      	pop	{r3, pc}
 8009294:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009298:	d21c      	bcs.n	80092d4 <scalbnf+0x68>
 800929a:	4b1f      	ldr	r3, [pc, #124]	; (8009318 <scalbnf+0xac>)
 800929c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800931c <scalbnf+0xb0>
 80092a0:	4298      	cmp	r0, r3
 80092a2:	ee60 0a27 	vmul.f32	s1, s0, s15
 80092a6:	db10      	blt.n	80092ca <scalbnf+0x5e>
 80092a8:	ee10 2a90 	vmov	r2, s1
 80092ac:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80092b0:	3b19      	subs	r3, #25
 80092b2:	4403      	add	r3, r0
 80092b4:	2bfe      	cmp	r3, #254	; 0xfe
 80092b6:	dd0f      	ble.n	80092d8 <scalbnf+0x6c>
 80092b8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8009320 <scalbnf+0xb4>
 80092bc:	eeb0 0a48 	vmov.f32	s0, s16
 80092c0:	f000 f834 	bl	800932c <copysignf>
 80092c4:	ee60 0a08 	vmul.f32	s1, s0, s16
 80092c8:	e7df      	b.n	800928a <scalbnf+0x1e>
 80092ca:	eddf 7a16 	vldr	s15, [pc, #88]	; 8009324 <scalbnf+0xb8>
 80092ce:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80092d2:	e7da      	b.n	800928a <scalbnf+0x1e>
 80092d4:	0ddb      	lsrs	r3, r3, #23
 80092d6:	e7ec      	b.n	80092b2 <scalbnf+0x46>
 80092d8:	2b00      	cmp	r3, #0
 80092da:	dd06      	ble.n	80092ea <scalbnf+0x7e>
 80092dc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80092e0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80092e4:	ee00 3a90 	vmov	s1, r3
 80092e8:	e7cf      	b.n	800928a <scalbnf+0x1e>
 80092ea:	f113 0f16 	cmn.w	r3, #22
 80092ee:	da06      	bge.n	80092fe <scalbnf+0x92>
 80092f0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80092f4:	4298      	cmp	r0, r3
 80092f6:	dcdf      	bgt.n	80092b8 <scalbnf+0x4c>
 80092f8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8009324 <scalbnf+0xb8>
 80092fc:	e7de      	b.n	80092bc <scalbnf+0x50>
 80092fe:	3319      	adds	r3, #25
 8009300:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009304:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009308:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009328 <scalbnf+0xbc>
 800930c:	ee07 3a10 	vmov	s14, r3
 8009310:	ee67 0a27 	vmul.f32	s1, s14, s15
 8009314:	e7b9      	b.n	800928a <scalbnf+0x1e>
 8009316:	bf00      	nop
 8009318:	ffff3cb0 	.word	0xffff3cb0
 800931c:	4c000000 	.word	0x4c000000
 8009320:	7149f2ca 	.word	0x7149f2ca
 8009324:	0da24260 	.word	0x0da24260
 8009328:	33000000 	.word	0x33000000

0800932c <copysignf>:
 800932c:	ee10 3a10 	vmov	r3, s0
 8009330:	ee10 2a90 	vmov	r2, s1
 8009334:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009338:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800933c:	4313      	orrs	r3, r2
 800933e:	ee00 3a10 	vmov	s0, r3
 8009342:	4770      	bx	lr

08009344 <_init>:
 8009344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009346:	bf00      	nop
 8009348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800934a:	bc08      	pop	{r3}
 800934c:	469e      	mov	lr, r3
 800934e:	4770      	bx	lr

08009350 <_fini>:
 8009350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009352:	bf00      	nop
 8009354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009356:	bc08      	pop	{r3}
 8009358:	469e      	mov	lr, r3
 800935a:	4770      	bx	lr
