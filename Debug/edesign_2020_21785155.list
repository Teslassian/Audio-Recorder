
edesign_2020_21785155.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004828  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e3c  08004e3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e3c  08004e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e44  08004e44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e44  08004e44  00014e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e48  08004e48  00014e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b48  2000000c  08004e58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b54  08004e58  00020b54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd09  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002040  00000000  00000000  0002dd45  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  0002fd88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c80  00000000  00000000  00030b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002239d  00000000  00000000  00031790  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a7f9  00000000  00000000  00053b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d02d0  00000000  00000000  0005e326  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012e5f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a08  00000000  00000000  0012e674  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080049d4 	.word	0x080049d4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080049d4 	.word	0x080049d4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b09a      	sub	sp, #104	; 0x68
 8000508:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */


	state = Idle;
 800050a:	4bad      	ldr	r3, [pc, #692]	; (80007c0 <main+0x2bc>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
	state_start = off;
 8000510:	4bac      	ldr	r3, [pc, #688]	; (80007c4 <main+0x2c0>)
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
	exti = off;
 8000516:	4bac      	ldr	r3, [pc, #688]	; (80007c8 <main+0x2c4>)
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
	exti_start = off;
 800051c:	4bab      	ldr	r3, [pc, #684]	; (80007cc <main+0x2c8>)
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]

	buttOne = off;
 8000522:	4bab      	ldr	r3, [pc, #684]	; (80007d0 <main+0x2cc>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
	buttTwo	= off;
 8000528:	4baa      	ldr	r3, [pc, #680]	; (80007d4 <main+0x2d0>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
	buttThree = off;
 800052e:	4baa      	ldr	r3, [pc, #680]	; (80007d8 <main+0x2d4>)
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
	buttRec = off;
 8000534:	4ba9      	ldr	r3, [pc, #676]	; (80007dc <main+0x2d8>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
	buttStop = off;
 800053a:	4ba9      	ldr	r3, [pc, #676]	; (80007e0 <main+0x2dc>)
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]

	wave_init();
 8000540:	f000 fcda 	bl	8000ef8 <wave_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 ff56 	bl	80013f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 fb02 	bl	8000b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 fc18 	bl	8000d80 <MX_GPIO_Init>
  MX_DMA_Init();
 8000550:	f000 fbf6 	bl	8000d40 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000554:	f000 fbca 	bl	8000cec <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000558:	f000 fb68 	bl	8000c2c <MX_DAC_Init>
  MX_TIM6_Init();
 800055c:	f000 fb90 	bl	8000c80 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  uint8_t msg[10] = {127, 128, '2','1','7','8','5','1','5','5'};
 8000560:	4aa0      	ldr	r2, [pc, #640]	; (80007e4 <main+0x2e0>)
 8000562:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000566:	ca07      	ldmia	r2, {r0, r1, r2}
 8000568:	c303      	stmia	r3!, {r0, r1}
 800056a:	801a      	strh	r2, [r3, #0]
   HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 800056c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000570:	2364      	movs	r3, #100	; 0x64
 8000572:	220a      	movs	r2, #10
 8000574:	489c      	ldr	r0, [pc, #624]	; (80007e8 <main+0x2e4>)
 8000576:	f003 f856 	bl	8003626 <HAL_UART_Transmit>

   HAL_TIM_Base_Start(&htim6);
 800057a:	489c      	ldr	r0, [pc, #624]	; (80007ec <main+0x2e8>)
 800057c:	f002 fd77 	bl	800306e <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /////////////////////////////////////////////////////////////////////
	  if (exti){
 8000580:	4b91      	ldr	r3, [pc, #580]	; (80007c8 <main+0x2c4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d06b      	beq.n	8000660 <main+0x15c>

		  if (!exti_start) Ri = HAL_GetTick();
 8000588:	4b90      	ldr	r3, [pc, #576]	; (80007cc <main+0x2c8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d105      	bne.n	800059c <main+0x98>
 8000590:	f000 ff96 	bl	80014c0 <HAL_GetTick>
 8000594:	4603      	mov	r3, r0
 8000596:	461a      	mov	r2, r3
 8000598:	4b95      	ldr	r3, [pc, #596]	; (80007f0 <main+0x2ec>)
 800059a:	601a      	str	r2, [r3, #0]
		  exti_start = on;
 800059c:	4b8b      	ldr	r3, [pc, #556]	; (80007cc <main+0x2c8>)
 800059e:	2201      	movs	r2, #1
 80005a0:	601a      	str	r2, [r3, #0]
		  Rf = HAL_GetTick();
 80005a2:	f000 ff8d 	bl	80014c0 <HAL_GetTick>
 80005a6:	4603      	mov	r3, r0
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b92      	ldr	r3, [pc, #584]	; (80007f4 <main+0x2f0>)
 80005ac:	601a      	str	r2, [r3, #0]

		  	if (Rf - Ri > 10){
 80005ae:	4b91      	ldr	r3, [pc, #580]	; (80007f4 <main+0x2f0>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	4b8f      	ldr	r3, [pc, #572]	; (80007f0 <main+0x2ec>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	2b0a      	cmp	r3, #10
 80005ba:	dd51      	ble.n	8000660 <main+0x15c>
		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) buttOne = on;
 80005bc:	2140      	movs	r1, #64	; 0x40
 80005be:	488e      	ldr	r0, [pc, #568]	; (80007f8 <main+0x2f4>)
 80005c0:	f001 ffc0 	bl	8002544 <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d003      	beq.n	80005d2 <main+0xce>
 80005ca:	4b81      	ldr	r3, [pc, #516]	; (80007d0 <main+0x2cc>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	e002      	b.n	80005d8 <main+0xd4>
		  		else buttOne = off;
 80005d2:	4b7f      	ldr	r3, [pc, #508]	; (80007d0 <main+0x2cc>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]

			  	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) buttTwo = on;
 80005d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005dc:	4886      	ldr	r0, [pc, #536]	; (80007f8 <main+0x2f4>)
 80005de:	f001 ffb1 	bl	8002544 <HAL_GPIO_ReadPin>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d003      	beq.n	80005f0 <main+0xec>
 80005e8:	4b7a      	ldr	r3, [pc, #488]	; (80007d4 <main+0x2d0>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	e002      	b.n	80005f6 <main+0xf2>
			  	else buttTwo = off;
 80005f0:	4b78      	ldr	r3, [pc, #480]	; (80007d4 <main+0x2d0>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)) buttThree = on;
 80005f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fa:	487f      	ldr	r0, [pc, #508]	; (80007f8 <main+0x2f4>)
 80005fc:	f001 ffa2 	bl	8002544 <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d003      	beq.n	800060e <main+0x10a>
 8000606:	4b74      	ldr	r3, [pc, #464]	; (80007d8 <main+0x2d4>)
 8000608:	2201      	movs	r2, #1
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	e002      	b.n	8000614 <main+0x110>
		  		else buttThree = off;
 800060e:	4b72      	ldr	r3, [pc, #456]	; (80007d8 <main+0x2d4>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) buttRec = on;
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	4878      	ldr	r0, [pc, #480]	; (80007f8 <main+0x2f4>)
 8000618:	f001 ff94 	bl	8002544 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d003      	beq.n	800062a <main+0x126>
 8000622:	4b6e      	ldr	r3, [pc, #440]	; (80007dc <main+0x2d8>)
 8000624:	2201      	movs	r2, #1
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	e002      	b.n	8000630 <main+0x12c>
		  		else buttRec = off;
 800062a:	4b6c      	ldr	r3, [pc, #432]	; (80007dc <main+0x2d8>)
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) buttStop = on;
 8000630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000634:	4871      	ldr	r0, [pc, #452]	; (80007fc <main+0x2f8>)
 8000636:	f001 ff85 	bl	8002544 <HAL_GPIO_ReadPin>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d003      	beq.n	8000648 <main+0x144>
 8000640:	4b67      	ldr	r3, [pc, #412]	; (80007e0 <main+0x2dc>)
 8000642:	2201      	movs	r2, #1
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	e002      	b.n	800064e <main+0x14a>
		  		else buttStop = off;
 8000648:	4b65      	ldr	r3, [pc, #404]	; (80007e0 <main+0x2dc>)
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]

		  		exti = off;
 800064e:	4b5e      	ldr	r3, [pc, #376]	; (80007c8 <main+0x2c4>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
		  		state_start = off;
 8000654:	4b5b      	ldr	r3, [pc, #364]	; (80007c4 <main+0x2c0>)
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
		  		exti_start = off;
 800065a:	4b5c      	ldr	r3, [pc, #368]	; (80007cc <main+0x2c8>)
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
		  	}
	  }
	  /////////////////////////////////////////////////////////////////////

	  if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))){
 8000660:	2140      	movs	r1, #64	; 0x40
 8000662:	4865      	ldr	r0, [pc, #404]	; (80007f8 <main+0x2f4>)
 8000664:	f001 ff6e 	bl	8002544 <HAL_GPIO_ReadPin>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	f040 8130 	bne.w	80008d0 <main+0x3cc>
 8000670:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000674:	4860      	ldr	r0, [pc, #384]	; (80007f8 <main+0x2f4>)
 8000676:	f001 ff65 	bl	8002544 <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	f040 8127 	bne.w	80008d0 <main+0x3cc>
 8000682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000686:	485c      	ldr	r0, [pc, #368]	; (80007f8 <main+0x2f4>)
 8000688:	f001 ff5c 	bl	8002544 <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	f040 811e 	bne.w	80008d0 <main+0x3cc>
 8000694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000698:	4858      	ldr	r0, [pc, #352]	; (80007fc <main+0x2f8>)
 800069a:	f001 ff53 	bl	8002544 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	f040 8115 	bne.w	80008d0 <main+0x3cc>
		  if (!state_start){
 80006a6:	4b47      	ldr	r3, [pc, #284]	; (80007c4 <main+0x2c0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	f040 8110 	bne.w	80008d0 <main+0x3cc>
			  if (buttOne || buttTwo || buttThree) state_start = on;
 80006b0:	4b47      	ldr	r3, [pc, #284]	; (80007d0 <main+0x2cc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d107      	bne.n	80006c8 <main+0x1c4>
 80006b8:	4b46      	ldr	r3, [pc, #280]	; (80007d4 <main+0x2d0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d103      	bne.n	80006c8 <main+0x1c4>
 80006c0:	4b45      	ldr	r3, [pc, #276]	; (80007d8 <main+0x2d4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d002      	beq.n	80006ce <main+0x1ca>
 80006c8:	4b3e      	ldr	r3, [pc, #248]	; (80007c4 <main+0x2c0>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
			  if (!buttRec && buttOne){
 80006ce:	4b43      	ldr	r3, [pc, #268]	; (80007dc <main+0x2d8>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d123      	bne.n	800071e <main+0x21a>
 80006d6:	4b3e      	ldr	r3, [pc, #248]	; (80007d0 <main+0x2cc>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d01f      	beq.n	800071e <main+0x21a>
				  state = PlayOne;
 80006de:	4b38      	ldr	r3, [pc, #224]	; (80007c0 <main+0x2bc>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'P','l','a','y','_','_','_','1'};
 80006e4:	4a46      	ldr	r2, [pc, #280]	; (8000800 <main+0x2fc>)
 80006e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ec:	c303      	stmia	r3!, {r0, r1}
 80006ee:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80006f0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80006f4:	2364      	movs	r3, #100	; 0x64
 80006f6:	220a      	movs	r2, #10
 80006f8:	483b      	ldr	r0, [pc, #236]	; (80007e8 <main+0x2e4>)
 80006fa:	f002 ff94 	bl	8003626 <HAL_UART_Transmit>
		  		  wave_fillbuffer(dac_buffer, 1, 1024);
 80006fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000702:	2101      	movs	r1, #1
 8000704:	483f      	ldr	r0, [pc, #252]	; (8000804 <main+0x300>)
 8000706:	f000 fc33 	bl	8000f70 <wave_fillbuffer>
		  		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 800070a:	2300      	movs	r3, #0
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000712:	4a3c      	ldr	r2, [pc, #240]	; (8000804 <main+0x300>)
 8000714:	2100      	movs	r1, #0
 8000716:	483c      	ldr	r0, [pc, #240]	; (8000808 <main+0x304>)
 8000718:	f001 f812 	bl	8001740 <HAL_DAC_Start_DMA>
			  if (!buttRec && buttOne){
 800071c:	e0d8      	b.n	80008d0 <main+0x3cc>
			  }
			  else if (!buttRec && buttTwo){
 800071e:	4b2f      	ldr	r3, [pc, #188]	; (80007dc <main+0x2d8>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d123      	bne.n	800076e <main+0x26a>
 8000726:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <main+0x2d0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d01f      	beq.n	800076e <main+0x26a>
				  state = PlayTwo;
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <main+0x2bc>)
 8000730:	2202      	movs	r2, #2
 8000732:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'P','l','a','y','_','_','_','2'};
 8000734:	4a35      	ldr	r2, [pc, #212]	; (800080c <main+0x308>)
 8000736:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800073a:	ca07      	ldmia	r2, {r0, r1, r2}
 800073c:	c303      	stmia	r3!, {r0, r1}
 800073e:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000740:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000744:	2364      	movs	r3, #100	; 0x64
 8000746:	220a      	movs	r2, #10
 8000748:	4827      	ldr	r0, [pc, #156]	; (80007e8 <main+0x2e4>)
 800074a:	f002 ff6c 	bl	8003626 <HAL_UART_Transmit>
		  		  wave_fillbuffer(dac_buffer, 2, 1024);
 800074e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000752:	2102      	movs	r1, #2
 8000754:	482b      	ldr	r0, [pc, #172]	; (8000804 <main+0x300>)
 8000756:	f000 fc0b 	bl	8000f70 <wave_fillbuffer>
		  		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 800075a:	2300      	movs	r3, #0
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000762:	4a28      	ldr	r2, [pc, #160]	; (8000804 <main+0x300>)
 8000764:	2100      	movs	r1, #0
 8000766:	4828      	ldr	r0, [pc, #160]	; (8000808 <main+0x304>)
 8000768:	f000 ffea 	bl	8001740 <HAL_DAC_Start_DMA>
			  else if (!buttRec && buttTwo){
 800076c:	e0b0      	b.n	80008d0 <main+0x3cc>
			  }
			  else if (!buttRec && buttThree){
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <main+0x2d8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d14e      	bne.n	8000814 <main+0x310>
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <main+0x2d4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d04a      	beq.n	8000814 <main+0x310>
				  state = PlayThree;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <main+0x2bc>)
 8000780:	2203      	movs	r2, #3
 8000782:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'P','l','a','y','_','_','_','3'};
 8000784:	4a22      	ldr	r2, [pc, #136]	; (8000810 <main+0x30c>)
 8000786:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800078a:	ca07      	ldmia	r2, {r0, r1, r2}
 800078c:	c303      	stmia	r3!, {r0, r1}
 800078e:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000790:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000794:	2364      	movs	r3, #100	; 0x64
 8000796:	220a      	movs	r2, #10
 8000798:	4813      	ldr	r0, [pc, #76]	; (80007e8 <main+0x2e4>)
 800079a:	f002 ff44 	bl	8003626 <HAL_UART_Transmit>
		  		  wave_fillbuffer(dac_buffer, 3, 1024);
 800079e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007a2:	2103      	movs	r1, #3
 80007a4:	4817      	ldr	r0, [pc, #92]	; (8000804 <main+0x300>)
 80007a6:	f000 fbe3 	bl	8000f70 <wave_fillbuffer>
		  		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 80007aa:	2300      	movs	r3, #0
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b2:	4a14      	ldr	r2, [pc, #80]	; (8000804 <main+0x300>)
 80007b4:	2100      	movs	r1, #0
 80007b6:	4814      	ldr	r0, [pc, #80]	; (8000808 <main+0x304>)
 80007b8:	f000 ffc2 	bl	8001740 <HAL_DAC_Start_DMA>
			  else if (!buttRec && buttThree){
 80007bc:	e088      	b.n	80008d0 <main+0x3cc>
 80007be:	bf00      	nop
 80007c0:	2000003c 	.word	0x2000003c
 80007c4:	20000904 	.word	0x20000904
 80007c8:	200000a0 	.word	0x200000a0
 80007cc:	200000a8 	.word	0x200000a8
 80007d0:	20000034 	.word	0x20000034
 80007d4:	20000028 	.word	0x20000028
 80007d8:	200000a4 	.word	0x200000a4
 80007dc:	20000948 	.word	0x20000948
 80007e0:	20000038 	.word	0x20000038
 80007e4:	080049ec 	.word	0x080049ec
 80007e8:	20000908 	.word	0x20000908
 80007ec:	200008c0 	.word	0x200008c0
 80007f0:	20000900 	.word	0x20000900
 80007f4:	20000030 	.word	0x20000030
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40020400 	.word	0x40020400
 8000800:	080049f8 	.word	0x080049f8
 8000804:	200000c0 	.word	0x200000c0
 8000808:	200000ac 	.word	0x200000ac
 800080c:	08004a04 	.word	0x08004a04
 8000810:	08004a10 	.word	0x08004a10
			  }
			  else if (buttRec && buttOne){
 8000814:	4bb5      	ldr	r3, [pc, #724]	; (8000aec <main+0x5e8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d014      	beq.n	8000846 <main+0x342>
 800081c:	4bb4      	ldr	r3, [pc, #720]	; (8000af0 <main+0x5ec>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d010      	beq.n	8000846 <main+0x342>
				  state = RecOne;
 8000824:	4bb3      	ldr	r3, [pc, #716]	; (8000af4 <main+0x5f0>)
 8000826:	2204      	movs	r2, #4
 8000828:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'R','e','c','o','r','d','_','1'};
 800082a:	4ab3      	ldr	r2, [pc, #716]	; (8000af8 <main+0x5f4>)
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	ca07      	ldmia	r2, {r0, r1, r2}
 8000832:	c303      	stmia	r3!, {r0, r1}
 8000834:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000836:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800083a:	2364      	movs	r3, #100	; 0x64
 800083c:	220a      	movs	r2, #10
 800083e:	48af      	ldr	r0, [pc, #700]	; (8000afc <main+0x5f8>)
 8000840:	f002 fef1 	bl	8003626 <HAL_UART_Transmit>
			  else if (buttRec && buttOne){
 8000844:	e044      	b.n	80008d0 <main+0x3cc>
			  }
			  else if (buttRec && buttTwo){
 8000846:	4ba9      	ldr	r3, [pc, #676]	; (8000aec <main+0x5e8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d014      	beq.n	8000878 <main+0x374>
 800084e:	4bac      	ldr	r3, [pc, #688]	; (8000b00 <main+0x5fc>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d010      	beq.n	8000878 <main+0x374>
				  state = RecTwo;
 8000856:	4ba7      	ldr	r3, [pc, #668]	; (8000af4 <main+0x5f0>)
 8000858:	2205      	movs	r2, #5
 800085a:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'R','e','c','o','r','d','_','2'};
 800085c:	4aa9      	ldr	r2, [pc, #676]	; (8000b04 <main+0x600>)
 800085e:	f107 0318 	add.w	r3, r7, #24
 8000862:	ca07      	ldmia	r2, {r0, r1, r2}
 8000864:	c303      	stmia	r3!, {r0, r1}
 8000866:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000868:	f107 0118 	add.w	r1, r7, #24
 800086c:	2364      	movs	r3, #100	; 0x64
 800086e:	220a      	movs	r2, #10
 8000870:	48a2      	ldr	r0, [pc, #648]	; (8000afc <main+0x5f8>)
 8000872:	f002 fed8 	bl	8003626 <HAL_UART_Transmit>
			  else if (buttRec && buttTwo){
 8000876:	e02b      	b.n	80008d0 <main+0x3cc>
			  }
			  else if (buttRec && buttThree){
 8000878:	4b9c      	ldr	r3, [pc, #624]	; (8000aec <main+0x5e8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d014      	beq.n	80008aa <main+0x3a6>
 8000880:	4ba1      	ldr	r3, [pc, #644]	; (8000b08 <main+0x604>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d010      	beq.n	80008aa <main+0x3a6>
				  state = RecThree;
 8000888:	4b9a      	ldr	r3, [pc, #616]	; (8000af4 <main+0x5f0>)
 800088a:	2206      	movs	r2, #6
 800088c:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'R','e','c','o','r','d','_','3'};
 800088e:	4a9f      	ldr	r2, [pc, #636]	; (8000b0c <main+0x608>)
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	ca07      	ldmia	r2, {r0, r1, r2}
 8000896:	c303      	stmia	r3!, {r0, r1}
 8000898:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 800089a:	f107 010c 	add.w	r1, r7, #12
 800089e:	2364      	movs	r3, #100	; 0x64
 80008a0:	220a      	movs	r2, #10
 80008a2:	4896      	ldr	r0, [pc, #600]	; (8000afc <main+0x5f8>)
 80008a4:	f002 febf 	bl	8003626 <HAL_UART_Transmit>
			  else if (buttRec && buttThree){
 80008a8:	e012      	b.n	80008d0 <main+0x3cc>
			  }
			  else if (buttStop){
 80008aa:	4b99      	ldr	r3, [pc, #612]	; (8000b10 <main+0x60c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d00e      	beq.n	80008d0 <main+0x3cc>
				  state = Idle;
 80008b2:	4b90      	ldr	r3, [pc, #576]	; (8000af4 <main+0x5f0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'S','t','o','p','_','_','_','_'};
 80008b8:	4a96      	ldr	r2, [pc, #600]	; (8000b14 <main+0x610>)
 80008ba:	463b      	mov	r3, r7
 80008bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80008be:	c303      	stmia	r3!, {r0, r1}
 80008c0:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 1000);
 80008c2:	4639      	mov	r1, r7
 80008c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c8:	220a      	movs	r2, #10
 80008ca:	488c      	ldr	r0, [pc, #560]	; (8000afc <main+0x5f8>)
 80008cc:	f002 feab 	bl	8003626 <HAL_UART_Transmit>
			  }
		  }
	  }

	  ticky = HAL_GetTick();
 80008d0:	f000 fdf6 	bl	80014c0 <HAL_GetTick>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b8f      	ldr	r3, [pc, #572]	; (8000b18 <main+0x614>)
 80008da:	601a      	str	r2, [r3, #0]
	  ///////////////////////////////////////////////////////////////////////////////////
	  if (state == PlayOne || state == PlayTwo || state == PlayThree || state == Idle){
 80008dc:	4b85      	ldr	r3, [pc, #532]	; (8000af4 <main+0x5f0>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d00e      	beq.n	8000904 <main+0x400>
 80008e6:	4b83      	ldr	r3, [pc, #524]	; (8000af4 <main+0x5f0>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d009      	beq.n	8000904 <main+0x400>
 80008f0:	4b80      	ldr	r3, [pc, #512]	; (8000af4 <main+0x5f0>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d004      	beq.n	8000904 <main+0x400>
 80008fa:	4b7e      	ldr	r3, [pc, #504]	; (8000af4 <main+0x5f0>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d174      	bne.n	80009ee <main+0x4ea>
	  	  if (state == PlayOne){
 8000904:	4b7b      	ldr	r3, [pc, #492]	; (8000af4 <main+0x5f0>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b01      	cmp	r3, #1
 800090c:	d11c      	bne.n	8000948 <main+0x444>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, on);
 800090e:	4b82      	ldr	r3, [pc, #520]	; (8000b18 <main+0x614>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	4b82      	ldr	r3, [pc, #520]	; (8000b1c <main+0x618>)
 8000914:	fb83 1302 	smull	r1, r3, r3, r2
 8000918:	1159      	asrs	r1, r3, #5
 800091a:	17d3      	asrs	r3, r2, #31
 800091c:	1acb      	subs	r3, r1, r3
 800091e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000922:	fb01 f303 	mul.w	r3, r1, r3
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	2bf9      	cmp	r3, #249	; 0xf9
 800092a:	dc06      	bgt.n	800093a <main+0x436>
 800092c:	2201      	movs	r2, #1
 800092e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000932:	487b      	ldr	r0, [pc, #492]	; (8000b20 <main+0x61c>)
 8000934:	f001 fe1e 	bl	8002574 <HAL_GPIO_WritePin>
 8000938:	e00c      	b.n	8000954 <main+0x450>
	  		  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000940:	4877      	ldr	r0, [pc, #476]	; (8000b20 <main+0x61c>)
 8000942:	f001 fe17 	bl	8002574 <HAL_GPIO_WritePin>
 8000946:	e005      	b.n	8000954 <main+0x450>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800094e:	4874      	ldr	r0, [pc, #464]	; (8000b20 <main+0x61c>)
 8000950:	f001 fe10 	bl	8002574 <HAL_GPIO_WritePin>

	  	  if (state == PlayTwo){
 8000954:	4b67      	ldr	r3, [pc, #412]	; (8000af4 <main+0x5f0>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b02      	cmp	r3, #2
 800095c:	d11c      	bne.n	8000998 <main+0x494>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, on);
 800095e:	4b6e      	ldr	r3, [pc, #440]	; (8000b18 <main+0x614>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	4b6e      	ldr	r3, [pc, #440]	; (8000b1c <main+0x618>)
 8000964:	fb83 1302 	smull	r1, r3, r3, r2
 8000968:	1159      	asrs	r1, r3, #5
 800096a:	17d3      	asrs	r3, r2, #31
 800096c:	1acb      	subs	r3, r1, r3
 800096e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000972:	fb01 f303 	mul.w	r3, r1, r3
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	2bf9      	cmp	r3, #249	; 0xf9
 800097a:	dc06      	bgt.n	800098a <main+0x486>
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000982:	4868      	ldr	r0, [pc, #416]	; (8000b24 <main+0x620>)
 8000984:	f001 fdf6 	bl	8002574 <HAL_GPIO_WritePin>
 8000988:	e00c      	b.n	80009a4 <main+0x4a0>
	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000990:	4864      	ldr	r0, [pc, #400]	; (8000b24 <main+0x620>)
 8000992:	f001 fdef 	bl	8002574 <HAL_GPIO_WritePin>
 8000996:	e005      	b.n	80009a4 <main+0x4a0>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800099e:	4861      	ldr	r0, [pc, #388]	; (8000b24 <main+0x620>)
 80009a0:	f001 fde8 	bl	8002574 <HAL_GPIO_WritePin>

	  	  if (state == PlayThree){
 80009a4:	4b53      	ldr	r3, [pc, #332]	; (8000af4 <main+0x5f0>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	d11a      	bne.n	80009e4 <main+0x4e0>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, on);
 80009ae:	4b5a      	ldr	r3, [pc, #360]	; (8000b18 <main+0x614>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	4b5a      	ldr	r3, [pc, #360]	; (8000b1c <main+0x618>)
 80009b4:	fb83 1302 	smull	r1, r3, r3, r2
 80009b8:	1159      	asrs	r1, r3, #5
 80009ba:	17d3      	asrs	r3, r2, #31
 80009bc:	1acb      	subs	r3, r1, r3
 80009be:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009c2:	fb01 f303 	mul.w	r3, r1, r3
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	2bf9      	cmp	r3, #249	; 0xf9
 80009ca:	dc05      	bgt.n	80009d8 <main+0x4d4>
 80009cc:	2201      	movs	r2, #1
 80009ce:	2110      	movs	r1, #16
 80009d0:	4854      	ldr	r0, [pc, #336]	; (8000b24 <main+0x620>)
 80009d2:	f001 fdcf 	bl	8002574 <HAL_GPIO_WritePin>
 80009d6:	e00a      	b.n	80009ee <main+0x4ea>
	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 80009d8:	2200      	movs	r2, #0
 80009da:	2110      	movs	r1, #16
 80009dc:	4851      	ldr	r0, [pc, #324]	; (8000b24 <main+0x620>)
 80009de:	f001 fdc9 	bl	8002574 <HAL_GPIO_WritePin>
 80009e2:	e004      	b.n	80009ee <main+0x4ea>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2110      	movs	r1, #16
 80009e8:	484e      	ldr	r0, [pc, #312]	; (8000b24 <main+0x620>)
 80009ea:	f001 fdc3 	bl	8002574 <HAL_GPIO_WritePin>
	  }
	  ///////////////////////////////////////////////////////////////////////////////////
  	  if (state == RecOne || state == RecTwo || state == RecThree){
 80009ee:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <main+0x5f0>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b04      	cmp	r3, #4
 80009f6:	d00a      	beq.n	8000a0e <main+0x50a>
 80009f8:	4b3e      	ldr	r3, [pc, #248]	; (8000af4 <main+0x5f0>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b05      	cmp	r3, #5
 8000a00:	d005      	beq.n	8000a0e <main+0x50a>
 8000a02:	4b3c      	ldr	r3, [pc, #240]	; (8000af4 <main+0x5f0>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b06      	cmp	r3, #6
 8000a0a:	f040 8099 	bne.w	8000b40 <main+0x63c>
  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, on);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2120      	movs	r1, #32
 8000a12:	4844      	ldr	r0, [pc, #272]	; (8000b24 <main+0x620>)
 8000a14:	f001 fdae 	bl	8002574 <HAL_GPIO_WritePin>

  	  	  if (state == RecOne){
 8000a18:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <main+0x5f0>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	d11c      	bne.n	8000a5c <main+0x558>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, on);
 8000a22:	4b3d      	ldr	r3, [pc, #244]	; (8000b18 <main+0x614>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	4b3d      	ldr	r3, [pc, #244]	; (8000b1c <main+0x618>)
 8000a28:	fb83 1302 	smull	r1, r3, r3, r2
 8000a2c:	1159      	asrs	r1, r3, #5
 8000a2e:	17d3      	asrs	r3, r2, #31
 8000a30:	1acb      	subs	r3, r1, r3
 8000a32:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a36:	fb01 f303 	mul.w	r3, r1, r3
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	2bf9      	cmp	r3, #249	; 0xf9
 8000a3e:	dc06      	bgt.n	8000a4e <main+0x54a>
 8000a40:	2201      	movs	r2, #1
 8000a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a46:	4836      	ldr	r0, [pc, #216]	; (8000b20 <main+0x61c>)
 8000a48:	f001 fd94 	bl	8002574 <HAL_GPIO_WritePin>
 8000a4c:	e00c      	b.n	8000a68 <main+0x564>
  	  		  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a54:	4832      	ldr	r0, [pc, #200]	; (8000b20 <main+0x61c>)
 8000a56:	f001 fd8d 	bl	8002574 <HAL_GPIO_WritePin>
 8000a5a:	e005      	b.n	8000a68 <main+0x564>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a62:	482f      	ldr	r0, [pc, #188]	; (8000b20 <main+0x61c>)
 8000a64:	f001 fd86 	bl	8002574 <HAL_GPIO_WritePin>

  	  	  if (state == RecTwo){
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <main+0x5f0>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	2b05      	cmp	r3, #5
 8000a70:	d11c      	bne.n	8000aac <main+0x5a8>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, on);
 8000a72:	4b29      	ldr	r3, [pc, #164]	; (8000b18 <main+0x614>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <main+0x618>)
 8000a78:	fb83 1302 	smull	r1, r3, r3, r2
 8000a7c:	1159      	asrs	r1, r3, #5
 8000a7e:	17d3      	asrs	r3, r2, #31
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a86:	fb01 f303 	mul.w	r3, r1, r3
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	2bf9      	cmp	r3, #249	; 0xf9
 8000a8e:	dc06      	bgt.n	8000a9e <main+0x59a>
 8000a90:	2201      	movs	r2, #1
 8000a92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a96:	4823      	ldr	r0, [pc, #140]	; (8000b24 <main+0x620>)
 8000a98:	f001 fd6c 	bl	8002574 <HAL_GPIO_WritePin>
 8000a9c:	e00c      	b.n	8000ab8 <main+0x5b4>
  	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa4:	481f      	ldr	r0, [pc, #124]	; (8000b24 <main+0x620>)
 8000aa6:	f001 fd65 	bl	8002574 <HAL_GPIO_WritePin>
 8000aaa:	e005      	b.n	8000ab8 <main+0x5b4>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab2:	481c      	ldr	r0, [pc, #112]	; (8000b24 <main+0x620>)
 8000ab4:	f001 fd5e 	bl	8002574 <HAL_GPIO_WritePin>

  	  	  if (state == RecThree){
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <main+0x5f0>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d138      	bne.n	8000b34 <main+0x630>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, on);
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <main+0x614>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <main+0x618>)
 8000ac8:	fb83 1302 	smull	r1, r3, r3, r2
 8000acc:	1159      	asrs	r1, r3, #5
 8000ace:	17d3      	asrs	r3, r2, #31
 8000ad0:	1acb      	subs	r3, r1, r3
 8000ad2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ad6:	fb01 f303 	mul.w	r3, r1, r3
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	2bf9      	cmp	r3, #249	; 0xf9
 8000ade:	dc23      	bgt.n	8000b28 <main+0x624>
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	480f      	ldr	r0, [pc, #60]	; (8000b24 <main+0x620>)
 8000ae6:	f001 fd45 	bl	8002574 <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8000aea:	e02e      	b.n	8000b4a <main+0x646>
 8000aec:	20000948 	.word	0x20000948
 8000af0:	20000034 	.word	0x20000034
 8000af4:	2000003c 	.word	0x2000003c
 8000af8:	08004a1c 	.word	0x08004a1c
 8000afc:	20000908 	.word	0x20000908
 8000b00:	20000028 	.word	0x20000028
 8000b04:	08004a28 	.word	0x08004a28
 8000b08:	200000a4 	.word	0x200000a4
 8000b0c:	08004a34 	.word	0x08004a34
 8000b10:	20000038 	.word	0x20000038
 8000b14:	08004a40 	.word	0x08004a40
 8000b18:	2000002c 	.word	0x2000002c
 8000b1c:	10624dd3 	.word	0x10624dd3
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020400 	.word	0x40020400
  	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2110      	movs	r1, #16
 8000b2c:	4807      	ldr	r0, [pc, #28]	; (8000b4c <main+0x648>)
 8000b2e:	f001 fd21 	bl	8002574 <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8000b32:	e00a      	b.n	8000b4a <main+0x646>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2110      	movs	r1, #16
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <main+0x648>)
 8000b3a:	f001 fd1b 	bl	8002574 <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8000b3e:	e004      	b.n	8000b4a <main+0x646>
  	  }
  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, off);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2120      	movs	r1, #32
 8000b44:	4801      	ldr	r0, [pc, #4]	; (8000b4c <main+0x648>)
 8000b46:	f001 fd15 	bl	8002574 <HAL_GPIO_WritePin>
	  if (exti){
 8000b4a:	e519      	b.n	8000580 <main+0x7c>
 8000b4c:	40020400 	.word	0x40020400

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b094      	sub	sp, #80	; 0x50
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	2234      	movs	r2, #52	; 0x34
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f003 f9e4 	bl	8003f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <SystemClock_Config+0xd4>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	4a29      	ldr	r2, [pc, #164]	; (8000c24 <SystemClock_Config+0xd4>)
 8000b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b82:	6413      	str	r3, [r2, #64]	; 0x40
 8000b84:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <SystemClock_Config+0xd4>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b90:	2300      	movs	r3, #0
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <SystemClock_Config+0xd8>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b9c:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <SystemClock_Config+0xd8>)
 8000b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <SystemClock_Config+0xd8>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb8:	2310      	movs	r3, #16
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bc8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bcc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 ffc0 	bl	8002b64 <HAL_RCC_OscConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bea:	f000 f97d 	bl	8000ee8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bee:	230f      	movs	r3, #15
 8000bf0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c04:	f107 0308 	add.w	r3, r7, #8
 8000c08:	2102      	movs	r1, #2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 fcf0 	bl	80025f0 <HAL_RCC_ClockConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c16:	f000 f967 	bl	8000ee8 <Error_Handler>
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	3750      	adds	r7, #80	; 0x50
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40007000 	.word	0x40007000

08000c2c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c32:	463b      	mov	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_DAC_Init+0x4c>)
 8000c3c:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <MX_DAC_Init+0x50>)
 8000c3e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_DAC_Init+0x4c>)
 8000c42:	f000 fd5a 	bl	80016fa <HAL_DAC_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000c4c:	f000 f94c 	bl	8000ee8 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000c50:	2304      	movs	r3, #4
 8000c52:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c58:	463b      	mov	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <MX_DAC_Init+0x4c>)
 8000c60:	f000 fe8e 	bl	8001980 <HAL_DAC_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000c6a:	f000 f93d 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000ac 	.word	0x200000ac
 8000c7c:	40007400 	.word	0x40007400

08000c80 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c86:	463b      	mov	r3, r7
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_TIM6_Init+0x64>)
 8000c90:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <MX_TIM6_Init+0x68>)
 8000c92:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1905;
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_TIM6_Init+0x64>)
 8000c96:	f240 7271 	movw	r2, #1905	; 0x771
 8000c9a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_TIM6_Init+0x64>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <MX_TIM6_Init+0x64>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_TIM6_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <MX_TIM6_Init+0x64>)
 8000cb0:	f002 f9b2 	bl	8003018 <HAL_TIM_Base_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000cba:	f000 f915 	bl	8000ee8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <MX_TIM6_Init+0x64>)
 8000ccc:	f002 fbce 	bl	800346c <HAL_TIMEx_MasterConfigSynchronization>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000cd6:	f000 f907 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200008c0 	.word	0x200008c0
 8000ce8:	40001000 	.word	0x40001000

08000cec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <MX_USART2_UART_Init+0x48>)
 8000cf2:	4a11      	ldr	r2, [pc, #68]	; (8000d38 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_USART2_UART_Init+0x48>)
 8000cf8:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <MX_USART2_UART_Init+0x50>)
 8000cfa:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <MX_USART2_UART_Init+0x48>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <MX_USART2_UART_Init+0x48>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <MX_USART2_UART_Init+0x48>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <MX_USART2_UART_Init+0x48>)
 8000d10:	220c      	movs	r2, #12
 8000d12:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <MX_USART2_UART_Init+0x48>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_USART2_UART_Init+0x48>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_USART2_UART_Init+0x48>)
 8000d22:	f002 fc33 	bl	800358c <HAL_UART_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000d2c:	f000 f8dc 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000908 	.word	0x20000908
 8000d38:	40004400 	.word	0x40004400
 8000d3c:	0007a120 	.word	0x0007a120

08000d40 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_DMA_Init+0x3c>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <MX_DMA_Init+0x3c>)
 8000d50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_DMA_Init+0x3c>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2010      	movs	r0, #16
 8000d68:	f000 fc91 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d6c:	2010      	movs	r0, #16
 8000d6e:	f000 fcaa 	bl	80016c6 <HAL_NVIC_EnableIRQ>

}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	4b4d      	ldr	r3, [pc, #308]	; (8000ed0 <MX_GPIO_Init+0x150>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a4c      	ldr	r2, [pc, #304]	; (8000ed0 <MX_GPIO_Init+0x150>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b4a      	ldr	r3, [pc, #296]	; (8000ed0 <MX_GPIO_Init+0x150>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b46      	ldr	r3, [pc, #280]	; (8000ed0 <MX_GPIO_Init+0x150>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a45      	ldr	r2, [pc, #276]	; (8000ed0 <MX_GPIO_Init+0x150>)
 8000dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b43      	ldr	r3, [pc, #268]	; (8000ed0 <MX_GPIO_Init+0x150>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	4b3f      	ldr	r3, [pc, #252]	; (8000ed0 <MX_GPIO_Init+0x150>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a3e      	ldr	r2, [pc, #248]	; (8000ed0 <MX_GPIO_Init+0x150>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b3c      	ldr	r3, [pc, #240]	; (8000ed0 <MX_GPIO_Init+0x150>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	4b38      	ldr	r3, [pc, #224]	; (8000ed0 <MX_GPIO_Init+0x150>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a37      	ldr	r2, [pc, #220]	; (8000ed0 <MX_GPIO_Init+0x150>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <MX_GPIO_Init+0x150>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000e0c:	4831      	ldr	r0, [pc, #196]	; (8000ed4 <MX_GPIO_Init+0x154>)
 8000e0e:	f001 fbb1 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000e18:	482f      	ldr	r0, [pc, #188]	; (8000ed8 <MX_GPIO_Init+0x158>)
 8000e1a:	f001 fbab 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e24:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <MX_GPIO_Init+0x15c>)
 8000e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	482b      	ldr	r0, [pc, #172]	; (8000ee0 <MX_GPIO_Init+0x160>)
 8000e34:	f001 f9f4 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8000e38:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4820      	ldr	r0, [pc, #128]	; (8000ed4 <MX_GPIO_Init+0x154>)
 8000e52:	f001 f9e5 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 8000e56:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 8000e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e5c:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <MX_GPIO_Init+0x164>)
 8000e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	481a      	ldr	r0, [pc, #104]	; (8000ed4 <MX_GPIO_Init+0x154>)
 8000e6c:	f001 f9d8 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8000e70:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4813      	ldr	r0, [pc, #76]	; (8000ed8 <MX_GPIO_Init+0x158>)
 8000e8a:	f001 f9c9 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <MX_GPIO_Init+0x164>)
 8000e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <MX_GPIO_Init+0x158>)
 8000ea4:	f001 f9bc 	bl	8002220 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2017      	movs	r0, #23
 8000eae:	f000 fbee 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000eb2:	2017      	movs	r0, #23
 8000eb4:	f000 fc07 	bl	80016c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2028      	movs	r0, #40	; 0x28
 8000ebe:	f000 fbe6 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ec2:	2028      	movs	r0, #40	; 0x28
 8000ec4:	f000 fbff 	bl	80016c6 <HAL_NVIC_EnableIRQ>

}
 8000ec8:	bf00      	nop
 8000eca:	3728      	adds	r7, #40	; 0x28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	10210000 	.word	0x10210000
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	10110000 	.word	0x10110000

08000ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <wave_init>:
int16_t sintab[256];
uint16_t offset_440hz;
uint16_t offset_523hz;

void wave_init()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 256; i++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	e01e      	b.n	8000f42 <wave_init+0x4a>
		sintab[i] = (int) (1500.0f * sinf(i * 0.02454369261f));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000f5c <wave_init+0x64>
 8000f12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f16:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1a:	f003 f80f 	bl	8003f3c <sinf>
 8000f1e:	eeb0 7a40 	vmov.f32	s14, s0
 8000f22:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8000f60 <wave_init+0x68>
 8000f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f2e:	ee17 3a90 	vmov	r3, s15
 8000f32:	b219      	sxth	r1, r3
 8000f34:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <wave_init+0x6c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 256; i++)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2bff      	cmp	r3, #255	; 0xff
 8000f46:	dddd      	ble.n	8000f04 <wave_init+0xc>

	offset_440hz = 0;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <wave_init+0x70>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	801a      	strh	r2, [r3, #0]
	offset_523hz = 0;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <wave_init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	801a      	strh	r2, [r3, #0]
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	3cc90fdb 	.word	0x3cc90fdb
 8000f60:	44bb8000 	.word	0x44bb8000
 8000f64:	20000950 	.word	0x20000950
 8000f68:	2000094e 	.word	0x2000094e
 8000f6c:	2000094c 	.word	0x2000094c

08000f70 <wave_fillbuffer>:


void wave_fillbuffer(uint16_t* buffer, uint8_t type, uint16_t len)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	803b      	strh	r3, [r7, #0]
	for (int i = 0; i < len; i++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e05e      	b.n	8001044 <wave_fillbuffer+0xd4>
	{
		int16_t sample = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	817b      	strh	r3, [r7, #10]
		switch (type)
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d014      	beq.n	8000fba <wave_fillbuffer+0x4a>
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d023      	beq.n	8000fdc <wave_fillbuffer+0x6c>
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d149      	bne.n	800102c <wave_fillbuffer+0xbc>
		{
			case 1:
				sample = sintab[offset_440hz >> 8];
 8000f98:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <wave_fillbuffer+0xe8>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b2e      	ldr	r3, [pc, #184]	; (800105c <wave_fillbuffer+0xec>)
 8000fa4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000fa8:	817b      	strh	r3, [r7, #10]
				offset_440hz += 654;
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <wave_fillbuffer+0xe8>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	f203 238e 	addw	r3, r3, #654	; 0x28e
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <wave_fillbuffer+0xe8>)
 8000fb6:	801a      	strh	r2, [r3, #0]
				break;
 8000fb8:	e038      	b.n	800102c <wave_fillbuffer+0xbc>
			case 2:
				sample = sintab[offset_523hz >> 8];
 8000fba:	4b29      	ldr	r3, [pc, #164]	; (8001060 <wave_fillbuffer+0xf0>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	0a1b      	lsrs	r3, r3, #8
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b25      	ldr	r3, [pc, #148]	; (800105c <wave_fillbuffer+0xec>)
 8000fc6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000fca:	817b      	strh	r3, [r7, #10]
				offset_523hz += 777;
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <wave_fillbuffer+0xf0>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	f203 3309 	addw	r3, r3, #777	; 0x309
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b22      	ldr	r3, [pc, #136]	; (8001060 <wave_fillbuffer+0xf0>)
 8000fd8:	801a      	strh	r2, [r3, #0]
				break;
 8000fda:	e027      	b.n	800102c <wave_fillbuffer+0xbc>
			case 3:
				sample = (sintab[offset_440hz >> 8] >> 1) + (sintab[offset_523hz >> 8] >> 1);
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <wave_fillbuffer+0xe8>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	; (800105c <wave_fillbuffer+0xec>)
 8000fe8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000fec:	105b      	asrs	r3, r3, #1
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <wave_fillbuffer+0xf0>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <wave_fillbuffer+0xec>)
 8000ffe:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8001002:	105b      	asrs	r3, r3, #1
 8001004:	b21b      	sxth	r3, r3
 8001006:	b29b      	uxth	r3, r3
 8001008:	4413      	add	r3, r2
 800100a:	b29b      	uxth	r3, r3
 800100c:	817b      	strh	r3, [r7, #10]
				offset_440hz += 654;
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <wave_fillbuffer+0xe8>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	f203 238e 	addw	r3, r3, #654	; 0x28e
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <wave_fillbuffer+0xe8>)
 800101a:	801a      	strh	r2, [r3, #0]
				offset_523hz += 777;
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <wave_fillbuffer+0xf0>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	f203 3309 	addw	r3, r3, #777	; 0x309
 8001024:	b29a      	uxth	r2, r3
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <wave_fillbuffer+0xf0>)
 8001028:	801a      	strh	r2, [r3, #0]
				break;
 800102a:	bf00      	nop
		}
		buffer[i] = (uint16_t)(sample + 2048);
 800102c:	897a      	ldrh	r2, [r7, #10]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	440b      	add	r3, r1
 8001036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800103a:	b292      	uxth	r2, r2
 800103c:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3301      	adds	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	883b      	ldrh	r3, [r7, #0]
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	db9c      	blt.n	8000f86 <wave_fillbuffer+0x16>
	}
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	2000094e 	.word	0x2000094e
 800105c:	20000950 	.word	0x20000950
 8001060:	2000094c 	.word	0x2000094c

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <HAL_MspInit+0x4c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a0f      	ldr	r2, [pc, #60]	; (80010b0 <HAL_MspInit+0x4c>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <HAL_MspInit+0x4c>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_MspInit+0x4c>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <HAL_MspInit+0x4c>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_MspInit+0x4c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010a2:	2007      	movs	r0, #7
 80010a4:	f000 fae8 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800

080010b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a33      	ldr	r2, [pc, #204]	; (80011a0 <HAL_DAC_MspInit+0xec>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d160      	bne.n	8001198 <HAL_DAC_MspInit+0xe4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b32      	ldr	r3, [pc, #200]	; (80011a4 <HAL_DAC_MspInit+0xf0>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a31      	ldr	r2, [pc, #196]	; (80011a4 <HAL_DAC_MspInit+0xf0>)
 80010e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <HAL_DAC_MspInit+0xf0>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <HAL_DAC_MspInit+0xf0>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a2a      	ldr	r2, [pc, #168]	; (80011a4 <HAL_DAC_MspInit+0xf0>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <HAL_DAC_MspInit+0xf0>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800110e:	2310      	movs	r3, #16
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001112:	2303      	movs	r3, #3
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	4821      	ldr	r0, [pc, #132]	; (80011a8 <HAL_DAC_MspInit+0xf4>)
 8001122:	f001 f87d 	bl	8002220 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <HAL_DAC_MspInit+0xf8>)
 8001128:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <HAL_DAC_MspInit+0xfc>)
 800112a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <HAL_DAC_MspInit+0xf8>)
 800112e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001132:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <HAL_DAC_MspInit+0xf8>)
 8001136:	2240      	movs	r2, #64	; 0x40
 8001138:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_DAC_MspInit+0xf8>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <HAL_DAC_MspInit+0xf8>)
 8001142:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001146:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_DAC_MspInit+0xf8>)
 800114a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800114e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <HAL_DAC_MspInit+0xf8>)
 8001152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001156:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <HAL_DAC_MspInit+0xf8>)
 800115a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_DAC_MspInit+0xf8>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_DAC_MspInit+0xf8>)
 8001168:	2200      	movs	r2, #0
 800116a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800116c:	480f      	ldr	r0, [pc, #60]	; (80011ac <HAL_DAC_MspInit+0xf8>)
 800116e:	f000 fce9 	bl	8001b44 <HAL_DMA_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001178:	f7ff feb6 	bl	8000ee8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <HAL_DAC_MspInit+0xf8>)
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <HAL_DAC_MspInit+0xf8>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	2036      	movs	r0, #54	; 0x36
 800118e:	f000 fa7e 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001192:	2036      	movs	r0, #54	; 0x36
 8001194:	f000 fa97 	bl	80016c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40007400 	.word	0x40007400
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020000 	.word	0x40020000
 80011ac:	20000040 	.word	0x20000040
 80011b0:	40026088 	.word	0x40026088

080011b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_TIM_Base_MspInit+0x48>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d115      	bne.n	80011f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <HAL_TIM_Base_MspInit+0x4c>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <HAL_TIM_Base_MspInit+0x4c>)
 80011d0:	f043 0310 	orr.w	r3, r3, #16
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_TIM_Base_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	2036      	movs	r0, #54	; 0x36
 80011e8:	f000 fa51 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011ec:	2036      	movs	r0, #54	; 0x36
 80011ee:	f000 fa6a 	bl	80016c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40001000 	.word	0x40001000
 8001200:	40023800 	.word	0x40023800

08001204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a19      	ldr	r2, [pc, #100]	; (8001288 <HAL_UART_MspInit+0x84>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d12b      	bne.n	800127e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <HAL_UART_MspInit+0x88>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <HAL_UART_MspInit+0x88>)
 8001230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_UART_MspInit+0x88>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_UART_MspInit+0x88>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a10      	ldr	r2, [pc, #64]	; (800128c <HAL_UART_MspInit+0x88>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_UART_MspInit+0x88>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800125e:	230c      	movs	r3, #12
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800126e:	2307      	movs	r3, #7
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <HAL_UART_MspInit+0x8c>)
 800127a:	f000 ffd1 	bl	8002220 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40004400 	.word	0x40004400
 800128c:	40023800 	.word	0x40023800
 8001290:	40020000 	.word	0x40020000

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <MemManage_Handler+0x4>

080012ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <UsageFault_Handler+0x4>

080012ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e8:	f000 f8d6 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <DMA1_Stream5_IRQHandler+0x10>)
 80012f6:	f000 fd2b 	bl	8001d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000040 	.word	0x20000040

08001304 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	exti = on;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <EXTI9_5_IRQHandler+0x2c>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800130e:	2040      	movs	r0, #64	; 0x40
 8001310:	f001 f94a 	bl	80025a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001314:	2080      	movs	r0, #128	; 0x80
 8001316:	f001 f947 	bl	80025a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800131a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800131e:	f001 f943 	bl	80025a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001322:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001326:	f001 f93f 	bl	80025a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200000a0 	.word	0x200000a0

08001334 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	exti = on;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <EXTI15_10_IRQHandler+0x20>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800133e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001342:	f001 f931 	bl	80025a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001346:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800134a:	f001 f92d 	bl	80025a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200000a0 	.word	0x200000a0

08001358 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <TIM6_DAC_IRQHandler+0x14>)
 800135e:	f000 fa9d 	bl	800189c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001362:	4803      	ldr	r0, [pc, #12]	; (8001370 <TIM6_DAC_IRQHandler+0x18>)
 8001364:	f001 fea7 	bl	80030b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200000ac 	.word	0x200000ac
 8001370:	200008c0 	.word	0x200008c0

08001374 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <SystemInit+0x28>)
 800137a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137e:	4a07      	ldr	r2, [pc, #28]	; (800139c <SystemInit+0x28>)
 8001380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <SystemInit+0x28>)
 800138a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800138e:	609a      	str	r2, [r3, #8]
#endif
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013a6:	e003      	b.n	80013b0 <LoopCopyDataInit>

080013a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013ae:	3104      	adds	r1, #4

080013b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013b0:	480b      	ldr	r0, [pc, #44]	; (80013e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013b8:	d3f6      	bcc.n	80013a8 <CopyDataInit>
  ldr  r2, =_sbss
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013bc:	e002      	b.n	80013c4 <LoopFillZerobss>

080013be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013c0:	f842 3b04 	str.w	r3, [r2], #4

080013c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013c8:	d3f9      	bcc.n	80013be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013ca:	f7ff ffd3 	bl	8001374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ce:	f002 fd89 	bl	8003ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d2:	f7ff f897 	bl	8000504 <main>
  bx  lr    
 80013d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013dc:	08004e4c 	.word	0x08004e4c
  ldr  r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013e4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80013e8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80013ec:	20000b54 	.word	0x20000b54

080013f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f0:	e7fe      	b.n	80013f0 <ADC_IRQHandler>
	...

080013f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_Init+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <HAL_Init+0x40>)
 80013fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001402:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_Init+0x40>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_Init+0x40>)
 800140a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_Init+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a07      	ldr	r2, [pc, #28]	; (8001434 <HAL_Init+0x40>)
 8001416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141c:	2003      	movs	r0, #3
 800141e:	f000 f92b 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001422:	2000      	movs	r0, #0
 8001424:	f000 f808 	bl	8001438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001428:	f7ff fe1c 	bl	8001064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023c00 	.word	0x40023c00

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x54>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x58>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f943 	bl	80016e2 <HAL_SYSTICK_Config>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e00e      	b.n	8001484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d80a      	bhi.n	8001482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146c:	2200      	movs	r2, #0
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f000 f90b 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001478:	4a06      	ldr	r2, [pc, #24]	; (8001494 <HAL_InitTick+0x5c>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	e000      	b.n	8001484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000000 	.word	0x20000000
 8001490:	20000008 	.word	0x20000008
 8001494:	20000004 	.word	0x20000004

08001498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x20>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x24>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_IncTick+0x24>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000b50 	.word	0x20000b50

080014c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b03      	ldr	r3, [pc, #12]	; (80014d4 <HAL_GetTick+0x14>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000b50 	.word	0x20000b50

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4907      	ldr	r1, [pc, #28]	; (8001574 <__NVIC_EnableIRQ+0x38>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff8e 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff29 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff3e 	bl	8001520 <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff8e 	bl	80015cc <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5d 	bl	8001578 <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff31 	bl	800153c <__NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffa2 	bl	8001634 <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e014      	b.n	8001736 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	791b      	ldrb	r3, [r3, #4]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d105      	bne.n	8001722 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff fcc9 	bl	80010b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2202      	movs	r2, #2
 8001726:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	795b      	ldrb	r3, [r3, #5]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_DAC_Start_DMA+0x1e>
 800175a:	2302      	movs	r3, #2
 800175c:	e08e      	b.n	800187c <HAL_DAC_Start_DMA+0x13c>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2201      	movs	r2, #1
 8001762:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2202      	movs	r2, #2
 8001768:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d12a      	bne.n	80017c6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	4a43      	ldr	r2, [pc, #268]	; (8001884 <HAL_DAC_Start_DMA+0x144>)
 8001776:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a42      	ldr	r2, [pc, #264]	; (8001888 <HAL_DAC_Start_DMA+0x148>)
 800177e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a41      	ldr	r2, [pc, #260]	; (800188c <HAL_DAC_Start_DMA+0x14c>)
 8001786:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001796:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	2b04      	cmp	r3, #4
 800179c:	d009      	beq.n	80017b2 <HAL_DAC_Start_DMA+0x72>
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d00c      	beq.n	80017bc <HAL_DAC_Start_DMA+0x7c>
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d000      	beq.n	80017a8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80017a6:	e039      	b.n	800181c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3308      	adds	r3, #8
 80017ae:	617b      	str	r3, [r7, #20]
        break;
 80017b0:	e034      	b.n	800181c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	330c      	adds	r3, #12
 80017b8:	617b      	str	r3, [r7, #20]
        break;
 80017ba:	e02f      	b.n	800181c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	3310      	adds	r3, #16
 80017c2:	617b      	str	r3, [r7, #20]
        break;
 80017c4:	e02a      	b.n	800181c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	4a31      	ldr	r2, [pc, #196]	; (8001890 <HAL_DAC_Start_DMA+0x150>)
 80017cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	4a30      	ldr	r2, [pc, #192]	; (8001894 <HAL_DAC_Start_DMA+0x154>)
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	4a2f      	ldr	r2, [pc, #188]	; (8001898 <HAL_DAC_Start_DMA+0x158>)
 80017dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017ec:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d009      	beq.n	8001808 <HAL_DAC_Start_DMA+0xc8>
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d00c      	beq.n	8001812 <HAL_DAC_Start_DMA+0xd2>
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d000      	beq.n	80017fe <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80017fc:	e00e      	b.n	800181c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	3314      	adds	r3, #20
 8001804:	617b      	str	r3, [r7, #20]
        break;
 8001806:	e009      	b.n	800181c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3318      	adds	r3, #24
 800180e:	617b      	str	r3, [r7, #20]
        break;
 8001810:	e004      	b.n	800181c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	331c      	adds	r3, #28
 8001818:	617b      	str	r3, [r7, #20]
        break;
 800181a:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10f      	bne.n	8001842 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001830:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6898      	ldr	r0, [r3, #8]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	f000 fa30 	bl	8001ca0 <HAL_DMA_Start_IT>
 8001840:	e00e      	b.n	8001860 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001850:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	68d8      	ldr	r0, [r3, #12]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	f000 fa20 	bl	8001ca0 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6819      	ldr	r1, [r3, #0]
 8001866:	2201      	movs	r2, #1
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	409a      	lsls	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2200      	movs	r2, #0
 8001878:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	08001a1b 	.word	0x08001a1b
 8001888:	08001a3d 	.word	0x08001a3d
 800188c:	08001a59 	.word	0x08001a59
 8001890:	08001ad7 	.word	0x08001ad7
 8001894:	08001af9 	.word	0x08001af9
 8001898:	08001b15 	.word	0x08001b15

0800189c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018b2:	d118      	bne.n	80018e6 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2204      	movs	r2, #4
 80018b8:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	f043 0201 	orr.w	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018de:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f843 	bl	800196c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018f4:	d118      	bne.n	8001928 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2204      	movs	r2, #4
 80018fa:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	f043 0202 	orr.w	r2, r3, #2
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001910:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001920:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f8cd 	bl	8001ac2 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	795b      	ldrb	r3, [r3, #5]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_DAC_ConfigChannel+0x20>
 800199c:	2302      	movs	r3, #2
 800199e:	e036      	b.n	8001a0e <HAL_DAC_ConfigChannel+0x8e>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2201      	movs	r2, #1
 80019a4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2202      	movs	r2, #2
 80019aa:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80019b4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	4013      	ands	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4313      	orrs	r3, r2
 80019de:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6819      	ldr	r1, [r3, #0]
 80019ee:	22c0      	movs	r2, #192	; 0xc0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	400a      	ands	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	371c      	adds	r7, #28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a26:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f7ff ff81 	bl	8001930 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2201      	movs	r2, #1
 8001a32:	711a      	strb	r2, [r3, #4]
}
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a48:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f7ff ff7a 	bl	8001944 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a50:	bf00      	nop
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a64:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	f043 0204 	orr.w	r2, r3, #4
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f7ff ff70 	bl	8001958 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	711a      	strb	r2, [r3, #4]
}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae2:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f7ff ffce 	bl	8001a86 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	711a      	strb	r2, [r3, #4]
}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b04:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f7ff ffc7 	bl	8001a9a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b20:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	f043 0204 	orr.w	r2, r3, #4
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f7ff ffbd 	bl	8001aae <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2201      	movs	r2, #1
 8001b38:	711a      	strb	r2, [r3, #4]
}
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b50:	f7ff fcb6 	bl	80014c0 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e099      	b.n	8001c94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b80:	e00f      	b.n	8001ba2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b82:	f7ff fc9d 	bl	80014c0 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b05      	cmp	r3, #5
 8001b8e:	d908      	bls.n	8001ba2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2220      	movs	r2, #32
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2203      	movs	r2, #3
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e078      	b.n	8001c94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1e8      	bne.n	8001b82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	4b38      	ldr	r3, [pc, #224]	; (8001c9c <HAL_DMA_Init+0x158>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d107      	bne.n	8001c0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	4313      	orrs	r3, r2
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f023 0307 	bic.w	r3, r3, #7
 8001c22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d117      	bne.n	8001c66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00e      	beq.n	8001c66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 fa6f 	bl	800212c <DMA_CheckFifoParam>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2240      	movs	r2, #64	; 0x40
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c62:	2301      	movs	r3, #1
 8001c64:	e016      	b.n	8001c94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 fa26 	bl	80020c0 <DMA_CalcBaseAndBitshift>
 8001c74:	4603      	mov	r3, r0
 8001c76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7c:	223f      	movs	r2, #63	; 0x3f
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	f010803f 	.word	0xf010803f

08001ca0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_DMA_Start_IT+0x26>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e040      	b.n	8001d48 <HAL_DMA_Start_IT+0xa8>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d12f      	bne.n	8001d3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 f9b8 	bl	8002064 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf8:	223f      	movs	r2, #63	; 0x3f
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0216 	orr.w	r2, r2, #22
 8001d0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0208 	orr.w	r2, r2, #8
 8001d26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	e005      	b.n	8001d46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d42:	2302      	movs	r3, #2
 8001d44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d5c:	4b92      	ldr	r3, [pc, #584]	; (8001fa8 <HAL_DMA_IRQHandler+0x258>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a92      	ldr	r2, [pc, #584]	; (8001fac <HAL_DMA_IRQHandler+0x25c>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	0a9b      	lsrs	r3, r3, #10
 8001d68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d01a      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0204 	bic.w	r2, r2, #4
 8001da2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	2208      	movs	r2, #8
 8001daa:	409a      	lsls	r2, r3
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db4:	f043 0201 	orr.w	r2, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d012      	beq.n	8001df2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00b      	beq.n	8001df2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dde:	2201      	movs	r2, #1
 8001de0:	409a      	lsls	r2, r3
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dea:	f043 0202 	orr.w	r2, r3, #2
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df6:	2204      	movs	r2, #4
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d012      	beq.n	8001e28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00b      	beq.n	8001e28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	2204      	movs	r2, #4
 8001e16:	409a      	lsls	r2, r3
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e20:	f043 0204 	orr.w	r2, r3, #4
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	2210      	movs	r2, #16
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d043      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d03c      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4a:	2210      	movs	r2, #16
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d018      	beq.n	8001e92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d108      	bne.n	8001e80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d024      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	4798      	blx	r3
 8001e7e:	e01f      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01b      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	4798      	blx	r3
 8001e90:	e016      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d107      	bne.n	8001eb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0208 	bic.w	r2, r2, #8
 8001eae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 808e 	beq.w	8001fee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 8086 	beq.w	8001fee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b05      	cmp	r3, #5
 8001ef8:	d136      	bne.n	8001f68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0216 	bic.w	r2, r2, #22
 8001f08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d103      	bne.n	8001f2a <HAL_DMA_IRQHandler+0x1da>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d007      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0208 	bic.w	r2, r2, #8
 8001f38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3e:	223f      	movs	r2, #63	; 0x3f
 8001f40:	409a      	lsls	r2, r3
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d07d      	beq.n	800205a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	4798      	blx	r3
        }
        return;
 8001f66:	e078      	b.n	800205a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d01c      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d108      	bne.n	8001f96 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d030      	beq.n	8001fee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	4798      	blx	r3
 8001f94:	e02b      	b.n	8001fee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d027      	beq.n	8001fee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	4798      	blx	r3
 8001fa6:	e022      	b.n	8001fee <HAL_DMA_IRQHandler+0x29e>
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10f      	bne.n	8001fde <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0210 	bic.w	r2, r2, #16
 8001fcc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d032      	beq.n	800205c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d022      	beq.n	8002048 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2205      	movs	r2, #5
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0201 	bic.w	r2, r2, #1
 8002018:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	3301      	adds	r3, #1
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	429a      	cmp	r2, r3
 8002024:	d307      	bcc.n	8002036 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f2      	bne.n	800201a <HAL_DMA_IRQHandler+0x2ca>
 8002034:	e000      	b.n	8002038 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002036:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4798      	blx	r3
 8002058:	e000      	b.n	800205c <HAL_DMA_IRQHandler+0x30c>
        return;
 800205a:	bf00      	nop
    }
  }
}
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop

08002064 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
 8002070:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002080:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b40      	cmp	r3, #64	; 0x40
 8002090:	d108      	bne.n	80020a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020a2:	e007      	b.n	80020b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	60da      	str	r2, [r3, #12]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	3b10      	subs	r3, #16
 80020d0:	4a14      	ldr	r2, [pc, #80]	; (8002124 <DMA_CalcBaseAndBitshift+0x64>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	091b      	lsrs	r3, r3, #4
 80020d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020da:	4a13      	ldr	r2, [pc, #76]	; (8002128 <DMA_CalcBaseAndBitshift+0x68>)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4413      	add	r3, r2
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d909      	bls.n	8002102 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020f6:	f023 0303 	bic.w	r3, r3, #3
 80020fa:	1d1a      	adds	r2, r3, #4
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	659a      	str	r2, [r3, #88]	; 0x58
 8002100:	e007      	b.n	8002112 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800210a:	f023 0303 	bic.w	r3, r3, #3
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	aaaaaaab 	.word	0xaaaaaaab
 8002128:	08004a64 	.word	0x08004a64

0800212c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d11f      	bne.n	8002186 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b03      	cmp	r3, #3
 800214a:	d855      	bhi.n	80021f8 <DMA_CheckFifoParam+0xcc>
 800214c:	a201      	add	r2, pc, #4	; (adr r2, 8002154 <DMA_CheckFifoParam+0x28>)
 800214e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002152:	bf00      	nop
 8002154:	08002165 	.word	0x08002165
 8002158:	08002177 	.word	0x08002177
 800215c:	08002165 	.word	0x08002165
 8002160:	080021f9 	.word	0x080021f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d045      	beq.n	80021fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002174:	e042      	b.n	80021fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800217e:	d13f      	bne.n	8002200 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002184:	e03c      	b.n	8002200 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800218e:	d121      	bne.n	80021d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b03      	cmp	r3, #3
 8002194:	d836      	bhi.n	8002204 <DMA_CheckFifoParam+0xd8>
 8002196:	a201      	add	r2, pc, #4	; (adr r2, 800219c <DMA_CheckFifoParam+0x70>)
 8002198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219c:	080021ad 	.word	0x080021ad
 80021a0:	080021b3 	.word	0x080021b3
 80021a4:	080021ad 	.word	0x080021ad
 80021a8:	080021c5 	.word	0x080021c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
      break;
 80021b0:	e02f      	b.n	8002212 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d024      	beq.n	8002208 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c2:	e021      	b.n	8002208 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021cc:	d11e      	bne.n	800220c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021d2:	e01b      	b.n	800220c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d902      	bls.n	80021e0 <DMA_CheckFifoParam+0xb4>
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d003      	beq.n	80021e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021de:	e018      	b.n	8002212 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
      break;
 80021e4:	e015      	b.n	8002212 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00e      	beq.n	8002210 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
      break;
 80021f6:	e00b      	b.n	8002210 <DMA_CheckFifoParam+0xe4>
      break;
 80021f8:	bf00      	nop
 80021fa:	e00a      	b.n	8002212 <DMA_CheckFifoParam+0xe6>
      break;
 80021fc:	bf00      	nop
 80021fe:	e008      	b.n	8002212 <DMA_CheckFifoParam+0xe6>
      break;
 8002200:	bf00      	nop
 8002202:	e006      	b.n	8002212 <DMA_CheckFifoParam+0xe6>
      break;
 8002204:	bf00      	nop
 8002206:	e004      	b.n	8002212 <DMA_CheckFifoParam+0xe6>
      break;
 8002208:	bf00      	nop
 800220a:	e002      	b.n	8002212 <DMA_CheckFifoParam+0xe6>
      break;   
 800220c:	bf00      	nop
 800220e:	e000      	b.n	8002212 <DMA_CheckFifoParam+0xe6>
      break;
 8002210:	bf00      	nop
    }
  } 
  
  return status; 
 8002212:	7bfb      	ldrb	r3, [r7, #15]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	e165      	b.n	8002508 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	429a      	cmp	r2, r3
 8002256:	f040 8154 	bne.w	8002502 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d00b      	beq.n	800227a <HAL_GPIO_Init+0x5a>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d007      	beq.n	800227a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800226e:	2b11      	cmp	r3, #17
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b12      	cmp	r3, #18
 8002278:	d130      	bne.n	80022dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	2203      	movs	r2, #3
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b0:	2201      	movs	r2, #1
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 0201 	and.w	r2, r3, #1
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0xfc>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b12      	cmp	r3, #18
 800231a:	d123      	bne.n	8002364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	08da      	lsrs	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3208      	adds	r2, #8
 8002324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	69b9      	ldr	r1, [r7, #24]
 8002360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0203 	and.w	r2, r3, #3
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80ae 	beq.w	8002502 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b5c      	ldr	r3, [pc, #368]	; (800251c <HAL_GPIO_Init+0x2fc>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a5b      	ldr	r2, [pc, #364]	; (800251c <HAL_GPIO_Init+0x2fc>)
 80023b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b59      	ldr	r3, [pc, #356]	; (800251c <HAL_GPIO_Init+0x2fc>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c2:	4a57      	ldr	r2, [pc, #348]	; (8002520 <HAL_GPIO_Init+0x300>)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	3302      	adds	r3, #2
 80023ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	220f      	movs	r2, #15
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4e      	ldr	r2, [pc, #312]	; (8002524 <HAL_GPIO_Init+0x304>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d025      	beq.n	800243a <HAL_GPIO_Init+0x21a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4d      	ldr	r2, [pc, #308]	; (8002528 <HAL_GPIO_Init+0x308>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01f      	beq.n	8002436 <HAL_GPIO_Init+0x216>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4c      	ldr	r2, [pc, #304]	; (800252c <HAL_GPIO_Init+0x30c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d019      	beq.n	8002432 <HAL_GPIO_Init+0x212>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4b      	ldr	r2, [pc, #300]	; (8002530 <HAL_GPIO_Init+0x310>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <HAL_GPIO_Init+0x20e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4a      	ldr	r2, [pc, #296]	; (8002534 <HAL_GPIO_Init+0x314>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00d      	beq.n	800242a <HAL_GPIO_Init+0x20a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a49      	ldr	r2, [pc, #292]	; (8002538 <HAL_GPIO_Init+0x318>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d007      	beq.n	8002426 <HAL_GPIO_Init+0x206>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a48      	ldr	r2, [pc, #288]	; (800253c <HAL_GPIO_Init+0x31c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d101      	bne.n	8002422 <HAL_GPIO_Init+0x202>
 800241e:	2306      	movs	r3, #6
 8002420:	e00c      	b.n	800243c <HAL_GPIO_Init+0x21c>
 8002422:	2307      	movs	r3, #7
 8002424:	e00a      	b.n	800243c <HAL_GPIO_Init+0x21c>
 8002426:	2305      	movs	r3, #5
 8002428:	e008      	b.n	800243c <HAL_GPIO_Init+0x21c>
 800242a:	2304      	movs	r3, #4
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x21c>
 800242e:	2303      	movs	r3, #3
 8002430:	e004      	b.n	800243c <HAL_GPIO_Init+0x21c>
 8002432:	2302      	movs	r3, #2
 8002434:	e002      	b.n	800243c <HAL_GPIO_Init+0x21c>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_GPIO_Init+0x21c>
 800243a:	2300      	movs	r3, #0
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	f002 0203 	and.w	r2, r2, #3
 8002442:	0092      	lsls	r2, r2, #2
 8002444:	4093      	lsls	r3, r2
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800244c:	4934      	ldr	r1, [pc, #208]	; (8002520 <HAL_GPIO_Init+0x300>)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800245a:	4b39      	ldr	r3, [pc, #228]	; (8002540 <HAL_GPIO_Init+0x320>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800247e:	4a30      	ldr	r2, [pc, #192]	; (8002540 <HAL_GPIO_Init+0x320>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002484:	4b2e      	ldr	r3, [pc, #184]	; (8002540 <HAL_GPIO_Init+0x320>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024a8:	4a25      	ldr	r2, [pc, #148]	; (8002540 <HAL_GPIO_Init+0x320>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ae:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_GPIO_Init+0x320>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024d2:	4a1b      	ldr	r2, [pc, #108]	; (8002540 <HAL_GPIO_Init+0x320>)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_GPIO_Init+0x320>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024fc:	4a10      	ldr	r2, [pc, #64]	; (8002540 <HAL_GPIO_Init+0x320>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3301      	adds	r3, #1
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b0f      	cmp	r3, #15
 800250c:	f67f ae96 	bls.w	800223c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002510:	bf00      	nop
 8002512:	3724      	adds	r7, #36	; 0x24
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	40023800 	.word	0x40023800
 8002520:	40013800 	.word	0x40013800
 8002524:	40020000 	.word	0x40020000
 8002528:	40020400 	.word	0x40020400
 800252c:	40020800 	.word	0x40020800
 8002530:	40020c00 	.word	0x40020c00
 8002534:	40021000 	.word	0x40021000
 8002538:	40021400 	.word	0x40021400
 800253c:	40021800 	.word	0x40021800
 8002540:	40013c00 	.word	0x40013c00

08002544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	887b      	ldrh	r3, [r7, #2]
 8002556:	4013      	ands	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
 8002560:	e001      	b.n	8002566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]
 8002580:	4613      	mov	r3, r2
 8002582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002584:	787b      	ldrb	r3, [r7, #1]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800258a:	887a      	ldrh	r2, [r7, #2]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002590:	e003      	b.n	800259a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002592:	887b      	ldrh	r3, [r7, #2]
 8002594:	041a      	lsls	r2, r3, #16
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	619a      	str	r2, [r3, #24]
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025b2:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d006      	beq.n	80025cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025be:	4a05      	ldr	r2, [pc, #20]	; (80025d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 f806 	bl	80025d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40013c00 	.word	0x40013c00

080025d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0cc      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b68      	ldr	r3, [pc, #416]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d90c      	bls.n	800262c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b65      	ldr	r3, [pc, #404]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b63      	ldr	r3, [pc, #396]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b8      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002644:	4b59      	ldr	r3, [pc, #356]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a58      	ldr	r2, [pc, #352]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800264e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800265c:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	4a52      	ldr	r2, [pc, #328]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002668:	4b50      	ldr	r3, [pc, #320]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	494d      	ldr	r1, [pc, #308]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d044      	beq.n	8002710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d119      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e07f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e06f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e067      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b37      	ldr	r3, [pc, #220]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4934      	ldr	r1, [pc, #208]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e0:	f7fe feee 	bl	80014c0 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe feea 	bl	80014c0 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e04f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b25      	ldr	r3, [pc, #148]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d20c      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e032      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4916      	ldr	r1, [pc, #88]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	490e      	ldr	r1, [pc, #56]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002776:	f000 f855 	bl	8002824 <HAL_RCC_GetSysClockFreq>
 800277a:	4601      	mov	r1, r0
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	5cd3      	ldrb	r3, [r2, r3]
 800278a:	fa21 f303 	lsr.w	r3, r1, r3
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fe4e 	bl	8001438 <HAL_InitTick>

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023c00 	.word	0x40023c00
 80027ac:	40023800 	.word	0x40023800
 80027b0:	08004a4c 	.word	0x08004a4c
 80027b4:	20000000 	.word	0x20000000
 80027b8:	20000004 	.word	0x20000004

080027bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000000 	.word	0x20000000

080027d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027d8:	f7ff fff0 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 80027dc:	4601      	mov	r1, r0
 80027de:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	0a9b      	lsrs	r3, r3, #10
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	4a03      	ldr	r2, [pc, #12]	; (80027f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ea:	5cd3      	ldrb	r3, [r2, r3]
 80027ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40023800 	.word	0x40023800
 80027f8:	08004a5c 	.word	0x08004a5c

080027fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002800:	f7ff ffdc 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 8002804:	4601      	mov	r1, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	0b5b      	lsrs	r3, r3, #13
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4a03      	ldr	r2, [pc, #12]	; (8002820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002812:	5cd3      	ldrb	r3, [r2, r3]
 8002814:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	08004a5c 	.word	0x08004a5c

08002824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800283e:	4bc6      	ldr	r3, [pc, #792]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x334>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b0c      	cmp	r3, #12
 8002848:	f200 817e 	bhi.w	8002b48 <HAL_RCC_GetSysClockFreq+0x324>
 800284c:	a201      	add	r2, pc, #4	; (adr r2, 8002854 <HAL_RCC_GetSysClockFreq+0x30>)
 800284e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002852:	bf00      	nop
 8002854:	08002889 	.word	0x08002889
 8002858:	08002b49 	.word	0x08002b49
 800285c:	08002b49 	.word	0x08002b49
 8002860:	08002b49 	.word	0x08002b49
 8002864:	0800288f 	.word	0x0800288f
 8002868:	08002b49 	.word	0x08002b49
 800286c:	08002b49 	.word	0x08002b49
 8002870:	08002b49 	.word	0x08002b49
 8002874:	08002895 	.word	0x08002895
 8002878:	08002b49 	.word	0x08002b49
 800287c:	08002b49 	.word	0x08002b49
 8002880:	08002b49 	.word	0x08002b49
 8002884:	080029f1 	.word	0x080029f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002888:	4bb4      	ldr	r3, [pc, #720]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x338>)
 800288a:	613b      	str	r3, [r7, #16]
       break;
 800288c:	e15f      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800288e:	4bb4      	ldr	r3, [pc, #720]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002890:	613b      	str	r3, [r7, #16]
      break;
 8002892:	e15c      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002894:	4bb0      	ldr	r3, [pc, #704]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x334>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800289c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800289e:	4bae      	ldr	r3, [pc, #696]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x334>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d04a      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028aa:	4bab      	ldr	r3, [pc, #684]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x334>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	099b      	lsrs	r3, r3, #6
 80028b0:	f04f 0400 	mov.w	r4, #0
 80028b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	ea03 0501 	and.w	r5, r3, r1
 80028c0:	ea04 0602 	and.w	r6, r4, r2
 80028c4:	4629      	mov	r1, r5
 80028c6:	4632      	mov	r2, r6
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	f04f 0400 	mov.w	r4, #0
 80028d0:	0154      	lsls	r4, r2, #5
 80028d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028d6:	014b      	lsls	r3, r1, #5
 80028d8:	4619      	mov	r1, r3
 80028da:	4622      	mov	r2, r4
 80028dc:	1b49      	subs	r1, r1, r5
 80028de:	eb62 0206 	sbc.w	r2, r2, r6
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	f04f 0400 	mov.w	r4, #0
 80028ea:	0194      	lsls	r4, r2, #6
 80028ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028f0:	018b      	lsls	r3, r1, #6
 80028f2:	1a5b      	subs	r3, r3, r1
 80028f4:	eb64 0402 	sbc.w	r4, r4, r2
 80028f8:	f04f 0100 	mov.w	r1, #0
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	00e2      	lsls	r2, r4, #3
 8002902:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002906:	00d9      	lsls	r1, r3, #3
 8002908:	460b      	mov	r3, r1
 800290a:	4614      	mov	r4, r2
 800290c:	195b      	adds	r3, r3, r5
 800290e:	eb44 0406 	adc.w	r4, r4, r6
 8002912:	f04f 0100 	mov.w	r1, #0
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	0262      	lsls	r2, r4, #9
 800291c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002920:	0259      	lsls	r1, r3, #9
 8002922:	460b      	mov	r3, r1
 8002924:	4614      	mov	r4, r2
 8002926:	4618      	mov	r0, r3
 8002928:	4621      	mov	r1, r4
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f04f 0400 	mov.w	r4, #0
 8002930:	461a      	mov	r2, r3
 8002932:	4623      	mov	r3, r4
 8002934:	f7fd fc66 	bl	8000204 <__aeabi_uldivmod>
 8002938:	4603      	mov	r3, r0
 800293a:	460c      	mov	r4, r1
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	e049      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002940:	4b85      	ldr	r3, [pc, #532]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x334>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	f04f 0400 	mov.w	r4, #0
 800294a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	ea03 0501 	and.w	r5, r3, r1
 8002956:	ea04 0602 	and.w	r6, r4, r2
 800295a:	4629      	mov	r1, r5
 800295c:	4632      	mov	r2, r6
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	f04f 0400 	mov.w	r4, #0
 8002966:	0154      	lsls	r4, r2, #5
 8002968:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800296c:	014b      	lsls	r3, r1, #5
 800296e:	4619      	mov	r1, r3
 8002970:	4622      	mov	r2, r4
 8002972:	1b49      	subs	r1, r1, r5
 8002974:	eb62 0206 	sbc.w	r2, r2, r6
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	f04f 0400 	mov.w	r4, #0
 8002980:	0194      	lsls	r4, r2, #6
 8002982:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002986:	018b      	lsls	r3, r1, #6
 8002988:	1a5b      	subs	r3, r3, r1
 800298a:	eb64 0402 	sbc.w	r4, r4, r2
 800298e:	f04f 0100 	mov.w	r1, #0
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	00e2      	lsls	r2, r4, #3
 8002998:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800299c:	00d9      	lsls	r1, r3, #3
 800299e:	460b      	mov	r3, r1
 80029a0:	4614      	mov	r4, r2
 80029a2:	195b      	adds	r3, r3, r5
 80029a4:	eb44 0406 	adc.w	r4, r4, r6
 80029a8:	f04f 0100 	mov.w	r1, #0
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	02a2      	lsls	r2, r4, #10
 80029b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029b6:	0299      	lsls	r1, r3, #10
 80029b8:	460b      	mov	r3, r1
 80029ba:	4614      	mov	r4, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	4621      	mov	r1, r4
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f04f 0400 	mov.w	r4, #0
 80029c6:	461a      	mov	r2, r3
 80029c8:	4623      	mov	r3, r4
 80029ca:	f7fd fc1b 	bl	8000204 <__aeabi_uldivmod>
 80029ce:	4603      	mov	r3, r0
 80029d0:	460c      	mov	r4, r1
 80029d2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029d4:	4b60      	ldr	r3, [pc, #384]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x334>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	0c1b      	lsrs	r3, r3, #16
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	3301      	adds	r3, #1
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	613b      	str	r3, [r7, #16]
      break;
 80029ee:	e0ae      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029f0:	4b59      	ldr	r3, [pc, #356]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x334>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029f8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029fa:	4b57      	ldr	r3, [pc, #348]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x334>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d04a      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a06:	4b54      	ldr	r3, [pc, #336]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	099b      	lsrs	r3, r3, #6
 8002a0c:	f04f 0400 	mov.w	r4, #0
 8002a10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	ea03 0501 	and.w	r5, r3, r1
 8002a1c:	ea04 0602 	and.w	r6, r4, r2
 8002a20:	4629      	mov	r1, r5
 8002a22:	4632      	mov	r2, r6
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	f04f 0400 	mov.w	r4, #0
 8002a2c:	0154      	lsls	r4, r2, #5
 8002a2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a32:	014b      	lsls	r3, r1, #5
 8002a34:	4619      	mov	r1, r3
 8002a36:	4622      	mov	r2, r4
 8002a38:	1b49      	subs	r1, r1, r5
 8002a3a:	eb62 0206 	sbc.w	r2, r2, r6
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	f04f 0400 	mov.w	r4, #0
 8002a46:	0194      	lsls	r4, r2, #6
 8002a48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a4c:	018b      	lsls	r3, r1, #6
 8002a4e:	1a5b      	subs	r3, r3, r1
 8002a50:	eb64 0402 	sbc.w	r4, r4, r2
 8002a54:	f04f 0100 	mov.w	r1, #0
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	00e2      	lsls	r2, r4, #3
 8002a5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a62:	00d9      	lsls	r1, r3, #3
 8002a64:	460b      	mov	r3, r1
 8002a66:	4614      	mov	r4, r2
 8002a68:	195b      	adds	r3, r3, r5
 8002a6a:	eb44 0406 	adc.w	r4, r4, r6
 8002a6e:	f04f 0100 	mov.w	r1, #0
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	0262      	lsls	r2, r4, #9
 8002a78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a7c:	0259      	lsls	r1, r3, #9
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4614      	mov	r4, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	4621      	mov	r1, r4
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f04f 0400 	mov.w	r4, #0
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4623      	mov	r3, r4
 8002a90:	f7fd fbb8 	bl	8000204 <__aeabi_uldivmod>
 8002a94:	4603      	mov	r3, r0
 8002a96:	460c      	mov	r4, r1
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	e049      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9c:	4b2e      	ldr	r3, [pc, #184]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	099b      	lsrs	r3, r3, #6
 8002aa2:	f04f 0400 	mov.w	r4, #0
 8002aa6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	ea03 0501 	and.w	r5, r3, r1
 8002ab2:	ea04 0602 	and.w	r6, r4, r2
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	4632      	mov	r2, r6
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	f04f 0400 	mov.w	r4, #0
 8002ac2:	0154      	lsls	r4, r2, #5
 8002ac4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ac8:	014b      	lsls	r3, r1, #5
 8002aca:	4619      	mov	r1, r3
 8002acc:	4622      	mov	r2, r4
 8002ace:	1b49      	subs	r1, r1, r5
 8002ad0:	eb62 0206 	sbc.w	r2, r2, r6
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	f04f 0400 	mov.w	r4, #0
 8002adc:	0194      	lsls	r4, r2, #6
 8002ade:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ae2:	018b      	lsls	r3, r1, #6
 8002ae4:	1a5b      	subs	r3, r3, r1
 8002ae6:	eb64 0402 	sbc.w	r4, r4, r2
 8002aea:	f04f 0100 	mov.w	r1, #0
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	00e2      	lsls	r2, r4, #3
 8002af4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002af8:	00d9      	lsls	r1, r3, #3
 8002afa:	460b      	mov	r3, r1
 8002afc:	4614      	mov	r4, r2
 8002afe:	195b      	adds	r3, r3, r5
 8002b00:	eb44 0406 	adc.w	r4, r4, r6
 8002b04:	f04f 0100 	mov.w	r1, #0
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	02a2      	lsls	r2, r4, #10
 8002b0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b12:	0299      	lsls	r1, r3, #10
 8002b14:	460b      	mov	r3, r1
 8002b16:	4614      	mov	r4, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f04f 0400 	mov.w	r4, #0
 8002b22:	461a      	mov	r2, r3
 8002b24:	4623      	mov	r3, r4
 8002b26:	f7fd fb6d 	bl	8000204 <__aeabi_uldivmod>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	460c      	mov	r4, r1
 8002b2e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	0f1b      	lsrs	r3, r3, #28
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	613b      	str	r3, [r7, #16]
      break;
 8002b46:	e002      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x338>)
 8002b4a:	613b      	str	r3, [r7, #16]
      break;
 8002b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b4e:	693b      	ldr	r3, [r7, #16]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	371c      	adds	r7, #28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	00f42400 	.word	0x00f42400
 8002b60:	007a1200 	.word	0x007a1200

08002b64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 8083 	beq.w	8002c84 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b7e:	4b95      	ldr	r3, [pc, #596]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d019      	beq.n	8002bbe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b8a:	4b92      	ldr	r3, [pc, #584]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d106      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b96:	4b8f      	ldr	r3, [pc, #572]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba2:	d00c      	beq.n	8002bbe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba4:	4b8b      	ldr	r3, [pc, #556]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bac:	2b0c      	cmp	r3, #12
 8002bae:	d112      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb0:	4b88      	ldr	r3, [pc, #544]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbe:	4b85      	ldr	r3, [pc, #532]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d05b      	beq.n	8002c82 <HAL_RCC_OscConfig+0x11e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d157      	bne.n	8002c82 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e216      	b.n	8003004 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x8a>
 8002be0:	4b7c      	ldr	r3, [pc, #496]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a7b      	ldr	r2, [pc, #492]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e01d      	b.n	8002c2a <HAL_RCC_OscConfig+0xc6>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bf6:	d10c      	bne.n	8002c12 <HAL_RCC_OscConfig+0xae>
 8002bf8:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a75      	ldr	r2, [pc, #468]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002bfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4b73      	ldr	r3, [pc, #460]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a72      	ldr	r2, [pc, #456]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	e00b      	b.n	8002c2a <HAL_RCC_OscConfig+0xc6>
 8002c12:	4b70      	ldr	r3, [pc, #448]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a6f      	ldr	r2, [pc, #444]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b6d      	ldr	r3, [pc, #436]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a6c      	ldr	r2, [pc, #432]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d013      	beq.n	8002c5a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c32:	f7fe fc45 	bl	80014c0 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c3a:	f7fe fc41 	bl	80014c0 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b64      	cmp	r3, #100	; 0x64
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e1db      	b.n	8003004 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4c:	4b61      	ldr	r3, [pc, #388]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0xd6>
 8002c58:	e014      	b.n	8002c84 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fe fc31 	bl	80014c0 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c62:	f7fe fc2d 	bl	80014c0 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b64      	cmp	r3, #100	; 0x64
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e1c7      	b.n	8003004 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c74:	4b57      	ldr	r3, [pc, #348]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f0      	bne.n	8002c62 <HAL_RCC_OscConfig+0xfe>
 8002c80:	e000      	b.n	8002c84 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c82:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d06f      	beq.n	8002d70 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c90:	4b50      	ldr	r3, [pc, #320]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 030c 	and.w	r3, r3, #12
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d017      	beq.n	8002ccc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c9c:	4b4d      	ldr	r3, [pc, #308]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d105      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ca8:	4b4a      	ldr	r3, [pc, #296]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00b      	beq.n	8002ccc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb4:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cbc:	2b0c      	cmp	r3, #12
 8002cbe:	d11c      	bne.n	8002cfa <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc0:	4b44      	ldr	r3, [pc, #272]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d116      	bne.n	8002cfa <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ccc:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x180>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e18f      	b.n	8003004 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce4:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4938      	ldr	r1, [pc, #224]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf8:	e03a      	b.n	8002d70 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d020      	beq.n	8002d44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d02:	4b35      	ldr	r3, [pc, #212]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fe fbda 	bl	80014c0 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d10:	f7fe fbd6 	bl	80014c0 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e170      	b.n	8003004 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d22:	4b2c      	ldr	r3, [pc, #176]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2e:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4925      	ldr	r1, [pc, #148]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]
 8002d42:	e015      	b.n	8002d70 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d44:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCC_OscConfig+0x274>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7fe fbb9 	bl	80014c0 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d52:	f7fe fbb5 	bl	80014c0 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e14f      	b.n	8003004 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d64:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f0      	bne.n	8002d52 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d037      	beq.n	8002dec <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d016      	beq.n	8002db2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d84:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <HAL_RCC_OscConfig+0x278>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8a:	f7fe fb99 	bl	80014c0 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d92:	f7fe fb95 	bl	80014c0 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e12f      	b.n	8003004 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCC_OscConfig+0x270>)
 8002da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x22e>
 8002db0:	e01c      	b.n	8002dec <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <HAL_RCC_OscConfig+0x278>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db8:	f7fe fb82 	bl	80014c0 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dbe:	e00f      	b.n	8002de0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc0:	f7fe fb7e 	bl	80014c0 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d908      	bls.n	8002de0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e118      	b.n	8003004 <HAL_RCC_OscConfig+0x4a0>
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	42470000 	.word	0x42470000
 8002ddc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de0:	4b8a      	ldr	r3, [pc, #552]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1e9      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8097 	beq.w	8002f28 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfe:	4b83      	ldr	r3, [pc, #524]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10f      	bne.n	8002e2a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	4b7f      	ldr	r3, [pc, #508]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	4a7e      	ldr	r2, [pc, #504]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1a:	4b7c      	ldr	r3, [pc, #496]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e26:	2301      	movs	r3, #1
 8002e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2a:	4b79      	ldr	r3, [pc, #484]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d118      	bne.n	8002e68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e36:	4b76      	ldr	r3, [pc, #472]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a75      	ldr	r2, [pc, #468]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e42:	f7fe fb3d 	bl	80014c0 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4a:	f7fe fb39 	bl	80014c0 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0d3      	b.n	8003004 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	4b6c      	ldr	r3, [pc, #432]	; (8003010 <HAL_RCC_OscConfig+0x4ac>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d106      	bne.n	8002e7e <HAL_RCC_OscConfig+0x31a>
 8002e70:	4b66      	ldr	r3, [pc, #408]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	4a65      	ldr	r2, [pc, #404]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7c:	e01c      	b.n	8002eb8 <HAL_RCC_OscConfig+0x354>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x33c>
 8002e86:	4b61      	ldr	r3, [pc, #388]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	4a60      	ldr	r2, [pc, #384]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002e8c:	f043 0304 	orr.w	r3, r3, #4
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70
 8002e92:	4b5e      	ldr	r3, [pc, #376]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e96:	4a5d      	ldr	r2, [pc, #372]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9e:	e00b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x354>
 8002ea0:	4b5a      	ldr	r3, [pc, #360]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	4a59      	ldr	r2, [pc, #356]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8002eac:	4b57      	ldr	r3, [pc, #348]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	4a56      	ldr	r2, [pc, #344]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002eb2:	f023 0304 	bic.w	r3, r3, #4
 8002eb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d015      	beq.n	8002eec <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec0:	f7fe fafe 	bl	80014c0 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec8:	f7fe fafa 	bl	80014c0 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e092      	b.n	8003004 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ede:	4b4b      	ldr	r3, [pc, #300]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0ee      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x364>
 8002eea:	e014      	b.n	8002f16 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eec:	f7fe fae8 	bl	80014c0 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef4:	f7fe fae4 	bl	80014c0 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e07c      	b.n	8003004 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0a:	4b40      	ldr	r3, [pc, #256]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1ee      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f16:	7dfb      	ldrb	r3, [r7, #23]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d105      	bne.n	8002f28 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f1c:	4b3b      	ldr	r3, [pc, #236]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	4a3a      	ldr	r2, [pc, #232]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d068      	beq.n	8003002 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f30:	4b36      	ldr	r3, [pc, #216]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d060      	beq.n	8002ffe <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d145      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f44:	4b33      	ldr	r3, [pc, #204]	; (8003014 <HAL_RCC_OscConfig+0x4b0>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4a:	f7fe fab9 	bl	80014c0 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f52:	f7fe fab5 	bl	80014c0 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e04f      	b.n	8003004 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f64:	4b29      	ldr	r3, [pc, #164]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f0      	bne.n	8002f52 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	019b      	lsls	r3, r3, #6
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	041b      	lsls	r3, r3, #16
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	061b      	lsls	r3, r3, #24
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	071b      	lsls	r3, r3, #28
 8002f9c:	491b      	ldr	r1, [pc, #108]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa2:	4b1c      	ldr	r3, [pc, #112]	; (8003014 <HAL_RCC_OscConfig+0x4b0>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fa8a 	bl	80014c0 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7fe fa86 	bl	80014c0 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e020      	b.n	8003004 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc2:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x44c>
 8002fce:	e018      	b.n	8003002 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd0:	4b10      	ldr	r3, [pc, #64]	; (8003014 <HAL_RCC_OscConfig+0x4b0>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd6:	f7fe fa73 	bl	80014c0 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fde:	f7fe fa6f 	bl	80014c0 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e009      	b.n	8003004 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_RCC_OscConfig+0x4a8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f0      	bne.n	8002fde <HAL_RCC_OscConfig+0x47a>
 8002ffc:	e001      	b.n	8003002 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40023800 	.word	0x40023800
 8003010:	40007000 	.word	0x40007000
 8003014:	42470060 	.word	0x42470060

08003018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e01d      	b.n	8003066 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fe f8b8 	bl	80011b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3304      	adds	r3, #4
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f000 f968 	bl	800332c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800306e:	b480      	push	{r7}
 8003070:	b085      	sub	sp, #20
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2202      	movs	r2, #2
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b06      	cmp	r3, #6
 800308e:	d007      	beq.n	80030a0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d122      	bne.n	8003112 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d11b      	bne.n	8003112 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f06f 0202 	mvn.w	r2, #2
 80030e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f8f8 	bl	80032ee <HAL_TIM_IC_CaptureCallback>
 80030fe:	e005      	b.n	800310c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f8ea 	bl	80032da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f8fb 	bl	8003302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b04      	cmp	r3, #4
 800311e:	d122      	bne.n	8003166 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b04      	cmp	r3, #4
 800312c:	d11b      	bne.n	8003166 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f06f 0204 	mvn.w	r2, #4
 8003136:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f8ce 	bl	80032ee <HAL_TIM_IC_CaptureCallback>
 8003152:	e005      	b.n	8003160 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f8c0 	bl	80032da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f8d1 	bl	8003302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b08      	cmp	r3, #8
 8003172:	d122      	bne.n	80031ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b08      	cmp	r3, #8
 8003180:	d11b      	bne.n	80031ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f06f 0208 	mvn.w	r2, #8
 800318a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2204      	movs	r2, #4
 8003190:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f8a4 	bl	80032ee <HAL_TIM_IC_CaptureCallback>
 80031a6:	e005      	b.n	80031b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f896 	bl	80032da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f8a7 	bl	8003302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b10      	cmp	r3, #16
 80031c6:	d122      	bne.n	800320e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	d11b      	bne.n	800320e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f06f 0210 	mvn.w	r2, #16
 80031de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2208      	movs	r2, #8
 80031e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f87a 	bl	80032ee <HAL_TIM_IC_CaptureCallback>
 80031fa:	e005      	b.n	8003208 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f86c 	bl	80032da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f87d 	bl	8003302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d10e      	bne.n	800323a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d107      	bne.n	800323a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f06f 0201 	mvn.w	r2, #1
 8003232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f846 	bl	80032c6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003244:	2b80      	cmp	r3, #128	; 0x80
 8003246:	d10e      	bne.n	8003266 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003252:	2b80      	cmp	r3, #128	; 0x80
 8003254:	d107      	bne.n	8003266 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800325e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f989 	bl	8003578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	d10e      	bne.n	8003292 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327e:	2b40      	cmp	r3, #64	; 0x40
 8003280:	d107      	bne.n	8003292 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800328a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f842 	bl	8003316 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b20      	cmp	r3, #32
 800329e:	d10e      	bne.n	80032be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	d107      	bne.n	80032be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f06f 0220 	mvn.w	r2, #32
 80032b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f953 	bl	8003564 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a40      	ldr	r2, [pc, #256]	; (8003440 <TIM_Base_SetConfig+0x114>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d013      	beq.n	800336c <TIM_Base_SetConfig+0x40>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334a:	d00f      	beq.n	800336c <TIM_Base_SetConfig+0x40>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a3d      	ldr	r2, [pc, #244]	; (8003444 <TIM_Base_SetConfig+0x118>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00b      	beq.n	800336c <TIM_Base_SetConfig+0x40>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a3c      	ldr	r2, [pc, #240]	; (8003448 <TIM_Base_SetConfig+0x11c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d007      	beq.n	800336c <TIM_Base_SetConfig+0x40>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a3b      	ldr	r2, [pc, #236]	; (800344c <TIM_Base_SetConfig+0x120>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <TIM_Base_SetConfig+0x40>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a3a      	ldr	r2, [pc, #232]	; (8003450 <TIM_Base_SetConfig+0x124>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d108      	bne.n	800337e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a2f      	ldr	r2, [pc, #188]	; (8003440 <TIM_Base_SetConfig+0x114>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d02b      	beq.n	80033de <TIM_Base_SetConfig+0xb2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800338c:	d027      	beq.n	80033de <TIM_Base_SetConfig+0xb2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a2c      	ldr	r2, [pc, #176]	; (8003444 <TIM_Base_SetConfig+0x118>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d023      	beq.n	80033de <TIM_Base_SetConfig+0xb2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a2b      	ldr	r2, [pc, #172]	; (8003448 <TIM_Base_SetConfig+0x11c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01f      	beq.n	80033de <TIM_Base_SetConfig+0xb2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a2a      	ldr	r2, [pc, #168]	; (800344c <TIM_Base_SetConfig+0x120>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01b      	beq.n	80033de <TIM_Base_SetConfig+0xb2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a29      	ldr	r2, [pc, #164]	; (8003450 <TIM_Base_SetConfig+0x124>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d017      	beq.n	80033de <TIM_Base_SetConfig+0xb2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a28      	ldr	r2, [pc, #160]	; (8003454 <TIM_Base_SetConfig+0x128>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <TIM_Base_SetConfig+0xb2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a27      	ldr	r2, [pc, #156]	; (8003458 <TIM_Base_SetConfig+0x12c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00f      	beq.n	80033de <TIM_Base_SetConfig+0xb2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a26      	ldr	r2, [pc, #152]	; (800345c <TIM_Base_SetConfig+0x130>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00b      	beq.n	80033de <TIM_Base_SetConfig+0xb2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a25      	ldr	r2, [pc, #148]	; (8003460 <TIM_Base_SetConfig+0x134>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d007      	beq.n	80033de <TIM_Base_SetConfig+0xb2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a24      	ldr	r2, [pc, #144]	; (8003464 <TIM_Base_SetConfig+0x138>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d003      	beq.n	80033de <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a23      	ldr	r2, [pc, #140]	; (8003468 <TIM_Base_SetConfig+0x13c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d108      	bne.n	80033f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <TIM_Base_SetConfig+0x114>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d003      	beq.n	8003424 <TIM_Base_SetConfig+0xf8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a0c      	ldr	r2, [pc, #48]	; (8003450 <TIM_Base_SetConfig+0x124>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d103      	bne.n	800342c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	615a      	str	r2, [r3, #20]
}
 8003432:	bf00      	nop
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40010000 	.word	0x40010000
 8003444:	40000400 	.word	0x40000400
 8003448:	40000800 	.word	0x40000800
 800344c:	40000c00 	.word	0x40000c00
 8003450:	40010400 	.word	0x40010400
 8003454:	40014000 	.word	0x40014000
 8003458:	40014400 	.word	0x40014400
 800345c:	40014800 	.word	0x40014800
 8003460:	40001800 	.word	0x40001800
 8003464:	40001c00 	.word	0x40001c00
 8003468:	40002000 	.word	0x40002000

0800346c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003480:	2302      	movs	r3, #2
 8003482:	e05a      	b.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a21      	ldr	r2, [pc, #132]	; (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d022      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d0:	d01d      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1d      	ldr	r2, [pc, #116]	; (800354c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d018      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d013      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a1a      	ldr	r2, [pc, #104]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00e      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a18      	ldr	r2, [pc, #96]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d009      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a17      	ldr	r2, [pc, #92]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d004      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a15      	ldr	r2, [pc, #84]	; (8003560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10c      	bne.n	8003528 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	4313      	orrs	r3, r2
 800351e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40010000 	.word	0x40010000
 800354c:	40000400 	.word	0x40000400
 8003550:	40000800 	.word	0x40000800
 8003554:	40000c00 	.word	0x40000c00
 8003558:	40010400 	.word	0x40010400
 800355c:	40014000 	.word	0x40014000
 8003560:	40001800 	.word	0x40001800

08003564 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e03f      	b.n	800361e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd fe26 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2224      	movs	r2, #36	; 0x24
 80035bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f90b 	bl	80037ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695a      	ldr	r2, [r3, #20]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003604:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b088      	sub	sp, #32
 800362a:	af02      	add	r7, sp, #8
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	603b      	str	r3, [r7, #0]
 8003632:	4613      	mov	r3, r2
 8003634:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b20      	cmp	r3, #32
 8003644:	f040 8083 	bne.w	800374e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_UART_Transmit+0x2e>
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e07b      	b.n	8003750 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_UART_Transmit+0x40>
 8003662:	2302      	movs	r3, #2
 8003664:	e074      	b.n	8003750 <HAL_UART_Transmit+0x12a>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2221      	movs	r2, #33	; 0x21
 8003678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800367c:	f7fd ff20 	bl	80014c0 <HAL_GetTick>
 8003680:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	88fa      	ldrh	r2, [r7, #6]
 8003686:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	88fa      	ldrh	r2, [r7, #6]
 800368c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003696:	e042      	b.n	800371e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ae:	d122      	bne.n	80036f6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2200      	movs	r2, #0
 80036b8:	2180      	movs	r1, #128	; 0x80
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f84c 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e042      	b.n	8003750 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036dc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d103      	bne.n	80036ee <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	3302      	adds	r3, #2
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	e017      	b.n	800371e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	3301      	adds	r3, #1
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	e013      	b.n	800371e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2200      	movs	r2, #0
 80036fe:	2180      	movs	r1, #128	; 0x80
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f829 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e01f      	b.n	8003750 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	60ba      	str	r2, [r7, #8]
 8003716:	781a      	ldrb	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1b7      	bne.n	8003698 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2200      	movs	r2, #0
 8003730:	2140      	movs	r1, #64	; 0x40
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f810 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e006      	b.n	8003750 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	e000      	b.n	8003750 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800374e:	2302      	movs	r3, #2
  }
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	4613      	mov	r3, r2
 8003766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003768:	e02c      	b.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d028      	beq.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <UART_WaitOnFlagUntilTimeout+0x30>
 8003778:	f7fd fea2 	bl	80014c0 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	429a      	cmp	r2, r3
 8003786:	d21d      	bcs.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003796:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0201 	bic.w	r2, r2, #1
 80037a6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e00f      	b.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4013      	ands	r3, r2
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d0c3      	beq.n	800376a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f0:	b085      	sub	sp, #20
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800382e:	f023 030c 	bic.w	r3, r3, #12
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	68f9      	ldr	r1, [r7, #12]
 8003838:	430b      	orrs	r3, r1
 800383a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699a      	ldr	r2, [r3, #24]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800385a:	f040 818b 	bne.w	8003b74 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4ac1      	ldr	r2, [pc, #772]	; (8003b68 <UART_SetConfig+0x37c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d005      	beq.n	8003874 <UART_SetConfig+0x88>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4abf      	ldr	r2, [pc, #764]	; (8003b6c <UART_SetConfig+0x380>)
 800386e:	4293      	cmp	r3, r2
 8003870:	f040 80bd 	bne.w	80039ee <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003874:	f7fe ffc2 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 8003878:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	461d      	mov	r5, r3
 800387e:	f04f 0600 	mov.w	r6, #0
 8003882:	46a8      	mov	r8, r5
 8003884:	46b1      	mov	r9, r6
 8003886:	eb18 0308 	adds.w	r3, r8, r8
 800388a:	eb49 0409 	adc.w	r4, r9, r9
 800388e:	4698      	mov	r8, r3
 8003890:	46a1      	mov	r9, r4
 8003892:	eb18 0805 	adds.w	r8, r8, r5
 8003896:	eb49 0906 	adc.w	r9, r9, r6
 800389a:	f04f 0100 	mov.w	r1, #0
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80038aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80038ae:	4688      	mov	r8, r1
 80038b0:	4691      	mov	r9, r2
 80038b2:	eb18 0005 	adds.w	r0, r8, r5
 80038b6:	eb49 0106 	adc.w	r1, r9, r6
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	461d      	mov	r5, r3
 80038c0:	f04f 0600 	mov.w	r6, #0
 80038c4:	196b      	adds	r3, r5, r5
 80038c6:	eb46 0406 	adc.w	r4, r6, r6
 80038ca:	461a      	mov	r2, r3
 80038cc:	4623      	mov	r3, r4
 80038ce:	f7fc fc99 	bl	8000204 <__aeabi_uldivmod>
 80038d2:	4603      	mov	r3, r0
 80038d4:	460c      	mov	r4, r1
 80038d6:	461a      	mov	r2, r3
 80038d8:	4ba5      	ldr	r3, [pc, #660]	; (8003b70 <UART_SetConfig+0x384>)
 80038da:	fba3 2302 	umull	r2, r3, r3, r2
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	461d      	mov	r5, r3
 80038e8:	f04f 0600 	mov.w	r6, #0
 80038ec:	46a9      	mov	r9, r5
 80038ee:	46b2      	mov	sl, r6
 80038f0:	eb19 0309 	adds.w	r3, r9, r9
 80038f4:	eb4a 040a 	adc.w	r4, sl, sl
 80038f8:	4699      	mov	r9, r3
 80038fa:	46a2      	mov	sl, r4
 80038fc:	eb19 0905 	adds.w	r9, r9, r5
 8003900:	eb4a 0a06 	adc.w	sl, sl, r6
 8003904:	f04f 0100 	mov.w	r1, #0
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003910:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003914:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003918:	4689      	mov	r9, r1
 800391a:	4692      	mov	sl, r2
 800391c:	eb19 0005 	adds.w	r0, r9, r5
 8003920:	eb4a 0106 	adc.w	r1, sl, r6
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	461d      	mov	r5, r3
 800392a:	f04f 0600 	mov.w	r6, #0
 800392e:	196b      	adds	r3, r5, r5
 8003930:	eb46 0406 	adc.w	r4, r6, r6
 8003934:	461a      	mov	r2, r3
 8003936:	4623      	mov	r3, r4
 8003938:	f7fc fc64 	bl	8000204 <__aeabi_uldivmod>
 800393c:	4603      	mov	r3, r0
 800393e:	460c      	mov	r4, r1
 8003940:	461a      	mov	r2, r3
 8003942:	4b8b      	ldr	r3, [pc, #556]	; (8003b70 <UART_SetConfig+0x384>)
 8003944:	fba3 1302 	umull	r1, r3, r3, r2
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	2164      	movs	r1, #100	; 0x64
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	3332      	adds	r3, #50	; 0x32
 8003956:	4a86      	ldr	r2, [pc, #536]	; (8003b70 <UART_SetConfig+0x384>)
 8003958:	fba2 2303 	umull	r2, r3, r2, r3
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003964:	4498      	add	r8, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	461d      	mov	r5, r3
 800396a:	f04f 0600 	mov.w	r6, #0
 800396e:	46a9      	mov	r9, r5
 8003970:	46b2      	mov	sl, r6
 8003972:	eb19 0309 	adds.w	r3, r9, r9
 8003976:	eb4a 040a 	adc.w	r4, sl, sl
 800397a:	4699      	mov	r9, r3
 800397c:	46a2      	mov	sl, r4
 800397e:	eb19 0905 	adds.w	r9, r9, r5
 8003982:	eb4a 0a06 	adc.w	sl, sl, r6
 8003986:	f04f 0100 	mov.w	r1, #0
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003992:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003996:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800399a:	4689      	mov	r9, r1
 800399c:	4692      	mov	sl, r2
 800399e:	eb19 0005 	adds.w	r0, r9, r5
 80039a2:	eb4a 0106 	adc.w	r1, sl, r6
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	461d      	mov	r5, r3
 80039ac:	f04f 0600 	mov.w	r6, #0
 80039b0:	196b      	adds	r3, r5, r5
 80039b2:	eb46 0406 	adc.w	r4, r6, r6
 80039b6:	461a      	mov	r2, r3
 80039b8:	4623      	mov	r3, r4
 80039ba:	f7fc fc23 	bl	8000204 <__aeabi_uldivmod>
 80039be:	4603      	mov	r3, r0
 80039c0:	460c      	mov	r4, r1
 80039c2:	461a      	mov	r2, r3
 80039c4:	4b6a      	ldr	r3, [pc, #424]	; (8003b70 <UART_SetConfig+0x384>)
 80039c6:	fba3 1302 	umull	r1, r3, r3, r2
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2164      	movs	r1, #100	; 0x64
 80039ce:	fb01 f303 	mul.w	r3, r1, r3
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	3332      	adds	r3, #50	; 0x32
 80039d8:	4a65      	ldr	r2, [pc, #404]	; (8003b70 <UART_SetConfig+0x384>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	f003 0207 	and.w	r2, r3, #7
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4442      	add	r2, r8
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	e26f      	b.n	8003ece <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ee:	f7fe fef1 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 80039f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	461d      	mov	r5, r3
 80039f8:	f04f 0600 	mov.w	r6, #0
 80039fc:	46a8      	mov	r8, r5
 80039fe:	46b1      	mov	r9, r6
 8003a00:	eb18 0308 	adds.w	r3, r8, r8
 8003a04:	eb49 0409 	adc.w	r4, r9, r9
 8003a08:	4698      	mov	r8, r3
 8003a0a:	46a1      	mov	r9, r4
 8003a0c:	eb18 0805 	adds.w	r8, r8, r5
 8003a10:	eb49 0906 	adc.w	r9, r9, r6
 8003a14:	f04f 0100 	mov.w	r1, #0
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a28:	4688      	mov	r8, r1
 8003a2a:	4691      	mov	r9, r2
 8003a2c:	eb18 0005 	adds.w	r0, r8, r5
 8003a30:	eb49 0106 	adc.w	r1, r9, r6
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	461d      	mov	r5, r3
 8003a3a:	f04f 0600 	mov.w	r6, #0
 8003a3e:	196b      	adds	r3, r5, r5
 8003a40:	eb46 0406 	adc.w	r4, r6, r6
 8003a44:	461a      	mov	r2, r3
 8003a46:	4623      	mov	r3, r4
 8003a48:	f7fc fbdc 	bl	8000204 <__aeabi_uldivmod>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	460c      	mov	r4, r1
 8003a50:	461a      	mov	r2, r3
 8003a52:	4b47      	ldr	r3, [pc, #284]	; (8003b70 <UART_SetConfig+0x384>)
 8003a54:	fba3 2302 	umull	r2, r3, r3, r2
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	461d      	mov	r5, r3
 8003a62:	f04f 0600 	mov.w	r6, #0
 8003a66:	46a9      	mov	r9, r5
 8003a68:	46b2      	mov	sl, r6
 8003a6a:	eb19 0309 	adds.w	r3, r9, r9
 8003a6e:	eb4a 040a 	adc.w	r4, sl, sl
 8003a72:	4699      	mov	r9, r3
 8003a74:	46a2      	mov	sl, r4
 8003a76:	eb19 0905 	adds.w	r9, r9, r5
 8003a7a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a7e:	f04f 0100 	mov.w	r1, #0
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a92:	4689      	mov	r9, r1
 8003a94:	4692      	mov	sl, r2
 8003a96:	eb19 0005 	adds.w	r0, r9, r5
 8003a9a:	eb4a 0106 	adc.w	r1, sl, r6
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	461d      	mov	r5, r3
 8003aa4:	f04f 0600 	mov.w	r6, #0
 8003aa8:	196b      	adds	r3, r5, r5
 8003aaa:	eb46 0406 	adc.w	r4, r6, r6
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4623      	mov	r3, r4
 8003ab2:	f7fc fba7 	bl	8000204 <__aeabi_uldivmod>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	460c      	mov	r4, r1
 8003aba:	461a      	mov	r2, r3
 8003abc:	4b2c      	ldr	r3, [pc, #176]	; (8003b70 <UART_SetConfig+0x384>)
 8003abe:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	2164      	movs	r1, #100	; 0x64
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	3332      	adds	r3, #50	; 0x32
 8003ad0:	4a27      	ldr	r2, [pc, #156]	; (8003b70 <UART_SetConfig+0x384>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ade:	4498      	add	r8, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	461d      	mov	r5, r3
 8003ae4:	f04f 0600 	mov.w	r6, #0
 8003ae8:	46a9      	mov	r9, r5
 8003aea:	46b2      	mov	sl, r6
 8003aec:	eb19 0309 	adds.w	r3, r9, r9
 8003af0:	eb4a 040a 	adc.w	r4, sl, sl
 8003af4:	4699      	mov	r9, r3
 8003af6:	46a2      	mov	sl, r4
 8003af8:	eb19 0905 	adds.w	r9, r9, r5
 8003afc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b00:	f04f 0100 	mov.w	r1, #0
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b14:	4689      	mov	r9, r1
 8003b16:	4692      	mov	sl, r2
 8003b18:	eb19 0005 	adds.w	r0, r9, r5
 8003b1c:	eb4a 0106 	adc.w	r1, sl, r6
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	461d      	mov	r5, r3
 8003b26:	f04f 0600 	mov.w	r6, #0
 8003b2a:	196b      	adds	r3, r5, r5
 8003b2c:	eb46 0406 	adc.w	r4, r6, r6
 8003b30:	461a      	mov	r2, r3
 8003b32:	4623      	mov	r3, r4
 8003b34:	f7fc fb66 	bl	8000204 <__aeabi_uldivmod>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	460c      	mov	r4, r1
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <UART_SetConfig+0x384>)
 8003b40:	fba3 1302 	umull	r1, r3, r3, r2
 8003b44:	095b      	lsrs	r3, r3, #5
 8003b46:	2164      	movs	r1, #100	; 0x64
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	3332      	adds	r3, #50	; 0x32
 8003b52:	4a07      	ldr	r2, [pc, #28]	; (8003b70 <UART_SetConfig+0x384>)
 8003b54:	fba2 2303 	umull	r2, r3, r2, r3
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	f003 0207 	and.w	r2, r3, #7
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4442      	add	r2, r8
 8003b64:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003b66:	e1b2      	b.n	8003ece <UART_SetConfig+0x6e2>
 8003b68:	40011000 	.word	0x40011000
 8003b6c:	40011400 	.word	0x40011400
 8003b70:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4ad7      	ldr	r2, [pc, #860]	; (8003ed8 <UART_SetConfig+0x6ec>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d005      	beq.n	8003b8a <UART_SetConfig+0x39e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4ad6      	ldr	r2, [pc, #856]	; (8003edc <UART_SetConfig+0x6f0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	f040 80d1 	bne.w	8003d2c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b8a:	f7fe fe37 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 8003b8e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	469a      	mov	sl, r3
 8003b94:	f04f 0b00 	mov.w	fp, #0
 8003b98:	46d0      	mov	r8, sl
 8003b9a:	46d9      	mov	r9, fp
 8003b9c:	eb18 0308 	adds.w	r3, r8, r8
 8003ba0:	eb49 0409 	adc.w	r4, r9, r9
 8003ba4:	4698      	mov	r8, r3
 8003ba6:	46a1      	mov	r9, r4
 8003ba8:	eb18 080a 	adds.w	r8, r8, sl
 8003bac:	eb49 090b 	adc.w	r9, r9, fp
 8003bb0:	f04f 0100 	mov.w	r1, #0
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bbc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bc0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bc4:	4688      	mov	r8, r1
 8003bc6:	4691      	mov	r9, r2
 8003bc8:	eb1a 0508 	adds.w	r5, sl, r8
 8003bcc:	eb4b 0609 	adc.w	r6, fp, r9
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	f04f 0400 	mov.w	r4, #0
 8003be2:	0094      	lsls	r4, r2, #2
 8003be4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003be8:	008b      	lsls	r3, r1, #2
 8003bea:	461a      	mov	r2, r3
 8003bec:	4623      	mov	r3, r4
 8003bee:	4628      	mov	r0, r5
 8003bf0:	4631      	mov	r1, r6
 8003bf2:	f7fc fb07 	bl	8000204 <__aeabi_uldivmod>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4bb8      	ldr	r3, [pc, #736]	; (8003ee0 <UART_SetConfig+0x6f4>)
 8003bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	469b      	mov	fp, r3
 8003c0c:	f04f 0c00 	mov.w	ip, #0
 8003c10:	46d9      	mov	r9, fp
 8003c12:	46e2      	mov	sl, ip
 8003c14:	eb19 0309 	adds.w	r3, r9, r9
 8003c18:	eb4a 040a 	adc.w	r4, sl, sl
 8003c1c:	4699      	mov	r9, r3
 8003c1e:	46a2      	mov	sl, r4
 8003c20:	eb19 090b 	adds.w	r9, r9, fp
 8003c24:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c28:	f04f 0100 	mov.w	r1, #0
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c3c:	4689      	mov	r9, r1
 8003c3e:	4692      	mov	sl, r2
 8003c40:	eb1b 0509 	adds.w	r5, fp, r9
 8003c44:	eb4c 060a 	adc.w	r6, ip, sl
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	f04f 0400 	mov.w	r4, #0
 8003c5a:	0094      	lsls	r4, r2, #2
 8003c5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c60:	008b      	lsls	r3, r1, #2
 8003c62:	461a      	mov	r2, r3
 8003c64:	4623      	mov	r3, r4
 8003c66:	4628      	mov	r0, r5
 8003c68:	4631      	mov	r1, r6
 8003c6a:	f7fc facb 	bl	8000204 <__aeabi_uldivmod>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	460c      	mov	r4, r1
 8003c72:	461a      	mov	r2, r3
 8003c74:	4b9a      	ldr	r3, [pc, #616]	; (8003ee0 <UART_SetConfig+0x6f4>)
 8003c76:	fba3 1302 	umull	r1, r3, r3, r2
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	2164      	movs	r1, #100	; 0x64
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	3332      	adds	r3, #50	; 0x32
 8003c88:	4a95      	ldr	r2, [pc, #596]	; (8003ee0 <UART_SetConfig+0x6f4>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c94:	4498      	add	r8, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	469b      	mov	fp, r3
 8003c9a:	f04f 0c00 	mov.w	ip, #0
 8003c9e:	46d9      	mov	r9, fp
 8003ca0:	46e2      	mov	sl, ip
 8003ca2:	eb19 0309 	adds.w	r3, r9, r9
 8003ca6:	eb4a 040a 	adc.w	r4, sl, sl
 8003caa:	4699      	mov	r9, r3
 8003cac:	46a2      	mov	sl, r4
 8003cae:	eb19 090b 	adds.w	r9, r9, fp
 8003cb2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cb6:	f04f 0100 	mov.w	r1, #0
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cc2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cca:	4689      	mov	r9, r1
 8003ccc:	4692      	mov	sl, r2
 8003cce:	eb1b 0509 	adds.w	r5, fp, r9
 8003cd2:	eb4c 060a 	adc.w	r6, ip, sl
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4619      	mov	r1, r3
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	f04f 0400 	mov.w	r4, #0
 8003ce8:	0094      	lsls	r4, r2, #2
 8003cea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cee:	008b      	lsls	r3, r1, #2
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4623      	mov	r3, r4
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	4631      	mov	r1, r6
 8003cf8:	f7fc fa84 	bl	8000204 <__aeabi_uldivmod>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	460c      	mov	r4, r1
 8003d00:	461a      	mov	r2, r3
 8003d02:	4b77      	ldr	r3, [pc, #476]	; (8003ee0 <UART_SetConfig+0x6f4>)
 8003d04:	fba3 1302 	umull	r1, r3, r3, r2
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	2164      	movs	r1, #100	; 0x64
 8003d0c:	fb01 f303 	mul.w	r3, r1, r3
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	3332      	adds	r3, #50	; 0x32
 8003d16:	4a72      	ldr	r2, [pc, #456]	; (8003ee0 <UART_SetConfig+0x6f4>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	f003 020f 	and.w	r2, r3, #15
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4442      	add	r2, r8
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	e0d0      	b.n	8003ece <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d2c:	f7fe fd52 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 8003d30:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	469a      	mov	sl, r3
 8003d36:	f04f 0b00 	mov.w	fp, #0
 8003d3a:	46d0      	mov	r8, sl
 8003d3c:	46d9      	mov	r9, fp
 8003d3e:	eb18 0308 	adds.w	r3, r8, r8
 8003d42:	eb49 0409 	adc.w	r4, r9, r9
 8003d46:	4698      	mov	r8, r3
 8003d48:	46a1      	mov	r9, r4
 8003d4a:	eb18 080a 	adds.w	r8, r8, sl
 8003d4e:	eb49 090b 	adc.w	r9, r9, fp
 8003d52:	f04f 0100 	mov.w	r1, #0
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d5e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d62:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d66:	4688      	mov	r8, r1
 8003d68:	4691      	mov	r9, r2
 8003d6a:	eb1a 0508 	adds.w	r5, sl, r8
 8003d6e:	eb4b 0609 	adc.w	r6, fp, r9
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4619      	mov	r1, r3
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	f04f 0400 	mov.w	r4, #0
 8003d84:	0094      	lsls	r4, r2, #2
 8003d86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d8a:	008b      	lsls	r3, r1, #2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4623      	mov	r3, r4
 8003d90:	4628      	mov	r0, r5
 8003d92:	4631      	mov	r1, r6
 8003d94:	f7fc fa36 	bl	8000204 <__aeabi_uldivmod>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	460c      	mov	r4, r1
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4b50      	ldr	r3, [pc, #320]	; (8003ee0 <UART_SetConfig+0x6f4>)
 8003da0:	fba3 2302 	umull	r2, r3, r3, r2
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	469b      	mov	fp, r3
 8003dae:	f04f 0c00 	mov.w	ip, #0
 8003db2:	46d9      	mov	r9, fp
 8003db4:	46e2      	mov	sl, ip
 8003db6:	eb19 0309 	adds.w	r3, r9, r9
 8003dba:	eb4a 040a 	adc.w	r4, sl, sl
 8003dbe:	4699      	mov	r9, r3
 8003dc0:	46a2      	mov	sl, r4
 8003dc2:	eb19 090b 	adds.w	r9, r9, fp
 8003dc6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003dca:	f04f 0100 	mov.w	r1, #0
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dde:	4689      	mov	r9, r1
 8003de0:	4692      	mov	sl, r2
 8003de2:	eb1b 0509 	adds.w	r5, fp, r9
 8003de6:	eb4c 060a 	adc.w	r6, ip, sl
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	4619      	mov	r1, r3
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	f04f 0400 	mov.w	r4, #0
 8003dfc:	0094      	lsls	r4, r2, #2
 8003dfe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e02:	008b      	lsls	r3, r1, #2
 8003e04:	461a      	mov	r2, r3
 8003e06:	4623      	mov	r3, r4
 8003e08:	4628      	mov	r0, r5
 8003e0a:	4631      	mov	r1, r6
 8003e0c:	f7fc f9fa 	bl	8000204 <__aeabi_uldivmod>
 8003e10:	4603      	mov	r3, r0
 8003e12:	460c      	mov	r4, r1
 8003e14:	461a      	mov	r2, r3
 8003e16:	4b32      	ldr	r3, [pc, #200]	; (8003ee0 <UART_SetConfig+0x6f4>)
 8003e18:	fba3 1302 	umull	r1, r3, r3, r2
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	2164      	movs	r1, #100	; 0x64
 8003e20:	fb01 f303 	mul.w	r3, r1, r3
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	3332      	adds	r3, #50	; 0x32
 8003e2a:	4a2d      	ldr	r2, [pc, #180]	; (8003ee0 <UART_SetConfig+0x6f4>)
 8003e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e36:	4498      	add	r8, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	469b      	mov	fp, r3
 8003e3c:	f04f 0c00 	mov.w	ip, #0
 8003e40:	46d9      	mov	r9, fp
 8003e42:	46e2      	mov	sl, ip
 8003e44:	eb19 0309 	adds.w	r3, r9, r9
 8003e48:	eb4a 040a 	adc.w	r4, sl, sl
 8003e4c:	4699      	mov	r9, r3
 8003e4e:	46a2      	mov	sl, r4
 8003e50:	eb19 090b 	adds.w	r9, r9, fp
 8003e54:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e58:	f04f 0100 	mov.w	r1, #0
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e6c:	4689      	mov	r9, r1
 8003e6e:	4692      	mov	sl, r2
 8003e70:	eb1b 0509 	adds.w	r5, fp, r9
 8003e74:	eb4c 060a 	adc.w	r6, ip, sl
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	f04f 0400 	mov.w	r4, #0
 8003e8a:	0094      	lsls	r4, r2, #2
 8003e8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e90:	008b      	lsls	r3, r1, #2
 8003e92:	461a      	mov	r2, r3
 8003e94:	4623      	mov	r3, r4
 8003e96:	4628      	mov	r0, r5
 8003e98:	4631      	mov	r1, r6
 8003e9a:	f7fc f9b3 	bl	8000204 <__aeabi_uldivmod>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	460c      	mov	r4, r1
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <UART_SetConfig+0x6f4>)
 8003ea6:	fba3 1302 	umull	r1, r3, r3, r2
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	2164      	movs	r1, #100	; 0x64
 8003eae:	fb01 f303 	mul.w	r3, r1, r3
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	3332      	adds	r3, #50	; 0x32
 8003eb8:	4a09      	ldr	r2, [pc, #36]	; (8003ee0 <UART_SetConfig+0x6f4>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	f003 020f 	and.w	r2, r3, #15
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4442      	add	r2, r8
 8003eca:	609a      	str	r2, [r3, #8]
}
 8003ecc:	e7ff      	b.n	8003ece <UART_SetConfig+0x6e2>
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ed8:	40011000 	.word	0x40011000
 8003edc:	40011400 	.word	0x40011400
 8003ee0:	51eb851f 	.word	0x51eb851f

08003ee4 <__libc_init_array>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	4e0d      	ldr	r6, [pc, #52]	; (8003f1c <__libc_init_array+0x38>)
 8003ee8:	4c0d      	ldr	r4, [pc, #52]	; (8003f20 <__libc_init_array+0x3c>)
 8003eea:	1ba4      	subs	r4, r4, r6
 8003eec:	10a4      	asrs	r4, r4, #2
 8003eee:	2500      	movs	r5, #0
 8003ef0:	42a5      	cmp	r5, r4
 8003ef2:	d109      	bne.n	8003f08 <__libc_init_array+0x24>
 8003ef4:	4e0b      	ldr	r6, [pc, #44]	; (8003f24 <__libc_init_array+0x40>)
 8003ef6:	4c0c      	ldr	r4, [pc, #48]	; (8003f28 <__libc_init_array+0x44>)
 8003ef8:	f000 fd6c 	bl	80049d4 <_init>
 8003efc:	1ba4      	subs	r4, r4, r6
 8003efe:	10a4      	asrs	r4, r4, #2
 8003f00:	2500      	movs	r5, #0
 8003f02:	42a5      	cmp	r5, r4
 8003f04:	d105      	bne.n	8003f12 <__libc_init_array+0x2e>
 8003f06:	bd70      	pop	{r4, r5, r6, pc}
 8003f08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f0c:	4798      	blx	r3
 8003f0e:	3501      	adds	r5, #1
 8003f10:	e7ee      	b.n	8003ef0 <__libc_init_array+0xc>
 8003f12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f16:	4798      	blx	r3
 8003f18:	3501      	adds	r5, #1
 8003f1a:	e7f2      	b.n	8003f02 <__libc_init_array+0x1e>
 8003f1c:	08004e44 	.word	0x08004e44
 8003f20:	08004e44 	.word	0x08004e44
 8003f24:	08004e44 	.word	0x08004e44
 8003f28:	08004e48 	.word	0x08004e48

08003f2c <memset>:
 8003f2c:	4402      	add	r2, r0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d100      	bne.n	8003f36 <memset+0xa>
 8003f34:	4770      	bx	lr
 8003f36:	f803 1b01 	strb.w	r1, [r3], #1
 8003f3a:	e7f9      	b.n	8003f30 <memset+0x4>

08003f3c <sinf>:
 8003f3c:	ee10 3a10 	vmov	r3, s0
 8003f40:	b507      	push	{r0, r1, r2, lr}
 8003f42:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <sinf+0x7c>)
 8003f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	dc05      	bgt.n	8003f58 <sinf+0x1c>
 8003f4c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003fbc <sinf+0x80>
 8003f50:	2000      	movs	r0, #0
 8003f52:	f000 fc41 	bl	80047d8 <__kernel_sinf>
 8003f56:	e004      	b.n	8003f62 <sinf+0x26>
 8003f58:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003f5c:	db04      	blt.n	8003f68 <sinf+0x2c>
 8003f5e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8003f62:	b003      	add	sp, #12
 8003f64:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f68:	4668      	mov	r0, sp
 8003f6a:	f000 f829 	bl	8003fc0 <__ieee754_rem_pio2f>
 8003f6e:	f000 0003 	and.w	r0, r0, #3
 8003f72:	2801      	cmp	r0, #1
 8003f74:	d008      	beq.n	8003f88 <sinf+0x4c>
 8003f76:	2802      	cmp	r0, #2
 8003f78:	d00d      	beq.n	8003f96 <sinf+0x5a>
 8003f7a:	b9b0      	cbnz	r0, 8003faa <sinf+0x6e>
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	eddd 0a01 	vldr	s1, [sp, #4]
 8003f82:	ed9d 0a00 	vldr	s0, [sp]
 8003f86:	e7e4      	b.n	8003f52 <sinf+0x16>
 8003f88:	eddd 0a01 	vldr	s1, [sp, #4]
 8003f8c:	ed9d 0a00 	vldr	s0, [sp]
 8003f90:	f000 f942 	bl	8004218 <__kernel_cosf>
 8003f94:	e7e5      	b.n	8003f62 <sinf+0x26>
 8003f96:	2001      	movs	r0, #1
 8003f98:	eddd 0a01 	vldr	s1, [sp, #4]
 8003f9c:	ed9d 0a00 	vldr	s0, [sp]
 8003fa0:	f000 fc1a 	bl	80047d8 <__kernel_sinf>
 8003fa4:	eeb1 0a40 	vneg.f32	s0, s0
 8003fa8:	e7db      	b.n	8003f62 <sinf+0x26>
 8003faa:	eddd 0a01 	vldr	s1, [sp, #4]
 8003fae:	ed9d 0a00 	vldr	s0, [sp]
 8003fb2:	f000 f931 	bl	8004218 <__kernel_cosf>
 8003fb6:	e7f5      	b.n	8003fa4 <sinf+0x68>
 8003fb8:	3f490fd8 	.word	0x3f490fd8
 8003fbc:	00000000 	.word	0x00000000

08003fc0 <__ieee754_rem_pio2f>:
 8003fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc2:	ee10 6a10 	vmov	r6, s0
 8003fc6:	4b86      	ldr	r3, [pc, #536]	; (80041e0 <__ieee754_rem_pio2f+0x220>)
 8003fc8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8003fcc:	429c      	cmp	r4, r3
 8003fce:	b087      	sub	sp, #28
 8003fd0:	4605      	mov	r5, r0
 8003fd2:	dc05      	bgt.n	8003fe0 <__ieee754_rem_pio2f+0x20>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	ed85 0a00 	vstr	s0, [r5]
 8003fda:	6043      	str	r3, [r0, #4]
 8003fdc:	2000      	movs	r0, #0
 8003fde:	e020      	b.n	8004022 <__ieee754_rem_pio2f+0x62>
 8003fe0:	4b80      	ldr	r3, [pc, #512]	; (80041e4 <__ieee754_rem_pio2f+0x224>)
 8003fe2:	429c      	cmp	r4, r3
 8003fe4:	dc38      	bgt.n	8004058 <__ieee754_rem_pio2f+0x98>
 8003fe6:	2e00      	cmp	r6, #0
 8003fe8:	f024 040f 	bic.w	r4, r4, #15
 8003fec:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80041e8 <__ieee754_rem_pio2f+0x228>
 8003ff0:	4b7e      	ldr	r3, [pc, #504]	; (80041ec <__ieee754_rem_pio2f+0x22c>)
 8003ff2:	dd18      	ble.n	8004026 <__ieee754_rem_pio2f+0x66>
 8003ff4:	429c      	cmp	r4, r3
 8003ff6:	ee70 7a47 	vsub.f32	s15, s0, s14
 8003ffa:	bf09      	itett	eq
 8003ffc:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80041f0 <__ieee754_rem_pio2f+0x230>
 8004000:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80041f4 <__ieee754_rem_pio2f+0x234>
 8004004:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004008:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80041f8 <__ieee754_rem_pio2f+0x238>
 800400c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004010:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004014:	edc0 6a00 	vstr	s13, [r0]
 8004018:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800401c:	edc0 7a01 	vstr	s15, [r0, #4]
 8004020:	2001      	movs	r0, #1
 8004022:	b007      	add	sp, #28
 8004024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004026:	429c      	cmp	r4, r3
 8004028:	ee70 7a07 	vadd.f32	s15, s0, s14
 800402c:	bf09      	itett	eq
 800402e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80041f0 <__ieee754_rem_pio2f+0x230>
 8004032:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80041f4 <__ieee754_rem_pio2f+0x234>
 8004036:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800403a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80041f8 <__ieee754_rem_pio2f+0x238>
 800403e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004042:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004046:	edc0 6a00 	vstr	s13, [r0]
 800404a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800404e:	edc0 7a01 	vstr	s15, [r0, #4]
 8004052:	f04f 30ff 	mov.w	r0, #4294967295
 8004056:	e7e4      	b.n	8004022 <__ieee754_rem_pio2f+0x62>
 8004058:	4b68      	ldr	r3, [pc, #416]	; (80041fc <__ieee754_rem_pio2f+0x23c>)
 800405a:	429c      	cmp	r4, r3
 800405c:	dc71      	bgt.n	8004142 <__ieee754_rem_pio2f+0x182>
 800405e:	f000 fc03 	bl	8004868 <fabsf>
 8004062:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004200 <__ieee754_rem_pio2f+0x240>
 8004066:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800406a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800406e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004072:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004076:	ee17 0a90 	vmov	r0, s15
 800407a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80041e8 <__ieee754_rem_pio2f+0x228>
 800407e:	eeb1 7a46 	vneg.f32	s14, s12
 8004082:	eea7 0a27 	vfma.f32	s0, s14, s15
 8004086:	281f      	cmp	r0, #31
 8004088:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80041f4 <__ieee754_rem_pio2f+0x234>
 800408c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004090:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004094:	ee16 3a90 	vmov	r3, s13
 8004098:	dc1c      	bgt.n	80040d4 <__ieee754_rem_pio2f+0x114>
 800409a:	1e47      	subs	r7, r0, #1
 800409c:	4959      	ldr	r1, [pc, #356]	; (8004204 <__ieee754_rem_pio2f+0x244>)
 800409e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80040a2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80040a6:	428a      	cmp	r2, r1
 80040a8:	d014      	beq.n	80040d4 <__ieee754_rem_pio2f+0x114>
 80040aa:	602b      	str	r3, [r5, #0]
 80040ac:	ed95 7a00 	vldr	s14, [r5]
 80040b0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80040b4:	2e00      	cmp	r6, #0
 80040b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80040ba:	ed85 0a01 	vstr	s0, [r5, #4]
 80040be:	dab0      	bge.n	8004022 <__ieee754_rem_pio2f+0x62>
 80040c0:	eeb1 7a47 	vneg.f32	s14, s14
 80040c4:	eeb1 0a40 	vneg.f32	s0, s0
 80040c8:	ed85 7a00 	vstr	s14, [r5]
 80040cc:	ed85 0a01 	vstr	s0, [r5, #4]
 80040d0:	4240      	negs	r0, r0
 80040d2:	e7a6      	b.n	8004022 <__ieee754_rem_pio2f+0x62>
 80040d4:	15e4      	asrs	r4, r4, #23
 80040d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80040da:	1aa2      	subs	r2, r4, r2
 80040dc:	2a08      	cmp	r2, #8
 80040de:	dde4      	ble.n	80040aa <__ieee754_rem_pio2f+0xea>
 80040e0:	eddf 7a43 	vldr	s15, [pc, #268]	; 80041f0 <__ieee754_rem_pio2f+0x230>
 80040e4:	eef0 6a40 	vmov.f32	s13, s0
 80040e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80040ec:	ee30 0a66 	vsub.f32	s0, s0, s13
 80040f0:	eea7 0a27 	vfma.f32	s0, s14, s15
 80040f4:	eddf 7a40 	vldr	s15, [pc, #256]	; 80041f8 <__ieee754_rem_pio2f+0x238>
 80040f8:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80040fc:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8004100:	eef0 7a40 	vmov.f32	s15, s0
 8004104:	ee15 3a90 	vmov	r3, s11
 8004108:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800410c:	1aa4      	subs	r4, r4, r2
 800410e:	2c19      	cmp	r4, #25
 8004110:	dc04      	bgt.n	800411c <__ieee754_rem_pio2f+0x15c>
 8004112:	edc5 5a00 	vstr	s11, [r5]
 8004116:	eeb0 0a66 	vmov.f32	s0, s13
 800411a:	e7c7      	b.n	80040ac <__ieee754_rem_pio2f+0xec>
 800411c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004208 <__ieee754_rem_pio2f+0x248>
 8004120:	eeb0 0a66 	vmov.f32	s0, s13
 8004124:	eea7 0a25 	vfma.f32	s0, s14, s11
 8004128:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800412c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004130:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800420c <__ieee754_rem_pio2f+0x24c>
 8004134:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8004138:	ee30 7a67 	vsub.f32	s14, s0, s15
 800413c:	ed85 7a00 	vstr	s14, [r5]
 8004140:	e7b4      	b.n	80040ac <__ieee754_rem_pio2f+0xec>
 8004142:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8004146:	db06      	blt.n	8004156 <__ieee754_rem_pio2f+0x196>
 8004148:	ee70 7a40 	vsub.f32	s15, s0, s0
 800414c:	edc0 7a01 	vstr	s15, [r0, #4]
 8004150:	edc0 7a00 	vstr	s15, [r0]
 8004154:	e742      	b.n	8003fdc <__ieee754_rem_pio2f+0x1c>
 8004156:	15e2      	asrs	r2, r4, #23
 8004158:	3a86      	subs	r2, #134	; 0x86
 800415a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004166:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004210 <__ieee754_rem_pio2f+0x250>
 800416a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800416e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004172:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004176:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800417a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800417e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004182:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004186:	ed8d 7a04 	vstr	s14, [sp, #16]
 800418a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800418e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004196:	edcd 7a05 	vstr	s15, [sp, #20]
 800419a:	d11e      	bne.n	80041da <__ieee754_rem_pio2f+0x21a>
 800419c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80041a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a4:	bf0c      	ite	eq
 80041a6:	2301      	moveq	r3, #1
 80041a8:	2302      	movne	r3, #2
 80041aa:	491a      	ldr	r1, [pc, #104]	; (8004214 <__ieee754_rem_pio2f+0x254>)
 80041ac:	9101      	str	r1, [sp, #4]
 80041ae:	2102      	movs	r1, #2
 80041b0:	9100      	str	r1, [sp, #0]
 80041b2:	a803      	add	r0, sp, #12
 80041b4:	4629      	mov	r1, r5
 80041b6:	f000 f88d 	bl	80042d4 <__kernel_rem_pio2f>
 80041ba:	2e00      	cmp	r6, #0
 80041bc:	f6bf af31 	bge.w	8004022 <__ieee754_rem_pio2f+0x62>
 80041c0:	edd5 7a00 	vldr	s15, [r5]
 80041c4:	eef1 7a67 	vneg.f32	s15, s15
 80041c8:	edc5 7a00 	vstr	s15, [r5]
 80041cc:	edd5 7a01 	vldr	s15, [r5, #4]
 80041d0:	eef1 7a67 	vneg.f32	s15, s15
 80041d4:	edc5 7a01 	vstr	s15, [r5, #4]
 80041d8:	e77a      	b.n	80040d0 <__ieee754_rem_pio2f+0x110>
 80041da:	2303      	movs	r3, #3
 80041dc:	e7e5      	b.n	80041aa <__ieee754_rem_pio2f+0x1ea>
 80041de:	bf00      	nop
 80041e0:	3f490fd8 	.word	0x3f490fd8
 80041e4:	4016cbe3 	.word	0x4016cbe3
 80041e8:	3fc90f80 	.word	0x3fc90f80
 80041ec:	3fc90fd0 	.word	0x3fc90fd0
 80041f0:	37354400 	.word	0x37354400
 80041f4:	37354443 	.word	0x37354443
 80041f8:	2e85a308 	.word	0x2e85a308
 80041fc:	43490f80 	.word	0x43490f80
 8004200:	3f22f984 	.word	0x3f22f984
 8004204:	08004a6c 	.word	0x08004a6c
 8004208:	2e85a300 	.word	0x2e85a300
 800420c:	248d3132 	.word	0x248d3132
 8004210:	43800000 	.word	0x43800000
 8004214:	08004aec 	.word	0x08004aec

08004218 <__kernel_cosf>:
 8004218:	ee10 3a10 	vmov	r3, s0
 800421c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004220:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004224:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004228:	da05      	bge.n	8004236 <__kernel_cosf+0x1e>
 800422a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800422e:	ee17 2a90 	vmov	r2, s15
 8004232:	2a00      	cmp	r2, #0
 8004234:	d03b      	beq.n	80042ae <__kernel_cosf+0x96>
 8004236:	ee20 6a00 	vmul.f32	s12, s0, s0
 800423a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800423e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80042b4 <__kernel_cosf+0x9c>
 8004242:	4a1d      	ldr	r2, [pc, #116]	; (80042b8 <__kernel_cosf+0xa0>)
 8004244:	ee66 7a07 	vmul.f32	s15, s12, s14
 8004248:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80042bc <__kernel_cosf+0xa4>
 800424c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8004250:	4293      	cmp	r3, r2
 8004252:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80042c0 <__kernel_cosf+0xa8>
 8004256:	eee7 5a06 	vfma.f32	s11, s14, s12
 800425a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80042c4 <__kernel_cosf+0xac>
 800425e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8004262:	eddf 5a19 	vldr	s11, [pc, #100]	; 80042c8 <__kernel_cosf+0xb0>
 8004266:	eee7 5a06 	vfma.f32	s11, s14, s12
 800426a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80042cc <__kernel_cosf+0xb4>
 800426e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8004272:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8004276:	ee27 7a06 	vmul.f32	s14, s14, s12
 800427a:	eee6 0a07 	vfma.f32	s1, s12, s14
 800427e:	dc04      	bgt.n	800428a <__kernel_cosf+0x72>
 8004280:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8004284:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8004288:	4770      	bx	lr
 800428a:	4a11      	ldr	r2, [pc, #68]	; (80042d0 <__kernel_cosf+0xb8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	bfda      	itte	le
 8004290:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8004294:	ee07 3a10 	vmovle	s14, r3
 8004298:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800429c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042a0:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80042a4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80042a8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80042ac:	4770      	bx	lr
 80042ae:	eeb0 0a66 	vmov.f32	s0, s13
 80042b2:	4770      	bx	lr
 80042b4:	ad47d74e 	.word	0xad47d74e
 80042b8:	3e999999 	.word	0x3e999999
 80042bc:	310f74f6 	.word	0x310f74f6
 80042c0:	b493f27c 	.word	0xb493f27c
 80042c4:	37d00d01 	.word	0x37d00d01
 80042c8:	bab60b61 	.word	0xbab60b61
 80042cc:	3d2aaaab 	.word	0x3d2aaaab
 80042d0:	3f480000 	.word	0x3f480000

080042d4 <__kernel_rem_pio2f>:
 80042d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d8:	ed2d 8b04 	vpush	{d8-d9}
 80042dc:	b0d7      	sub	sp, #348	; 0x15c
 80042de:	469b      	mov	fp, r3
 80042e0:	460e      	mov	r6, r1
 80042e2:	4bbe      	ldr	r3, [pc, #760]	; (80045dc <__kernel_rem_pio2f+0x308>)
 80042e4:	9964      	ldr	r1, [sp, #400]	; 0x190
 80042e6:	9002      	str	r0, [sp, #8]
 80042e8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80042ec:	9865      	ldr	r0, [sp, #404]	; 0x194
 80042ee:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80045ec <__kernel_rem_pio2f+0x318>
 80042f2:	1ed1      	subs	r1, r2, #3
 80042f4:	2308      	movs	r3, #8
 80042f6:	fb91 f1f3 	sdiv	r1, r1, r3
 80042fa:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80042fe:	f10b 3aff 	add.w	sl, fp, #4294967295
 8004302:	1c4c      	adds	r4, r1, #1
 8004304:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8004308:	eba1 050a 	sub.w	r5, r1, sl
 800430c:	aa1a      	add	r2, sp, #104	; 0x68
 800430e:	eb09 070a 	add.w	r7, r9, sl
 8004312:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8004316:	4696      	mov	lr, r2
 8004318:	2300      	movs	r3, #0
 800431a:	42bb      	cmp	r3, r7
 800431c:	dd0f      	ble.n	800433e <__kernel_rem_pio2f+0x6a>
 800431e:	af42      	add	r7, sp, #264	; 0x108
 8004320:	2200      	movs	r2, #0
 8004322:	454a      	cmp	r2, r9
 8004324:	dc27      	bgt.n	8004376 <__kernel_rem_pio2f+0xa2>
 8004326:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800432a:	eb0b 0302 	add.w	r3, fp, r2
 800432e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8004332:	9d02      	ldr	r5, [sp, #8]
 8004334:	eddf 7aad 	vldr	s15, [pc, #692]	; 80045ec <__kernel_rem_pio2f+0x318>
 8004338:	f04f 0c00 	mov.w	ip, #0
 800433c:	e015      	b.n	800436a <__kernel_rem_pio2f+0x96>
 800433e:	42dd      	cmn	r5, r3
 8004340:	bf5d      	ittte	pl
 8004342:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8004346:	ee07 2a90 	vmovpl	s15, r2
 800434a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800434e:	eef0 7a47 	vmovmi.f32	s15, s14
 8004352:	ecee 7a01 	vstmia	lr!, {s15}
 8004356:	3301      	adds	r3, #1
 8004358:	e7df      	b.n	800431a <__kernel_rem_pio2f+0x46>
 800435a:	ecf5 6a01 	vldmia	r5!, {s13}
 800435e:	ed33 7a01 	vldmdb	r3!, {s14}
 8004362:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004366:	f10c 0c01 	add.w	ip, ip, #1
 800436a:	45d4      	cmp	ip, sl
 800436c:	ddf5      	ble.n	800435a <__kernel_rem_pio2f+0x86>
 800436e:	ece7 7a01 	vstmia	r7!, {s15}
 8004372:	3201      	adds	r2, #1
 8004374:	e7d5      	b.n	8004322 <__kernel_rem_pio2f+0x4e>
 8004376:	ab06      	add	r3, sp, #24
 8004378:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800437c:	9304      	str	r3, [sp, #16]
 800437e:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80045e8 <__kernel_rem_pio2f+0x314>
 8004382:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80045e4 <__kernel_rem_pio2f+0x310>
 8004386:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800438a:	9303      	str	r3, [sp, #12]
 800438c:	464d      	mov	r5, r9
 800438e:	ab56      	add	r3, sp, #344	; 0x158
 8004390:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8004394:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004398:	3f01      	subs	r7, #1
 800439a:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800439e:	00bf      	lsls	r7, r7, #2
 80043a0:	ab56      	add	r3, sp, #344	; 0x158
 80043a2:	19da      	adds	r2, r3, r7
 80043a4:	3a4c      	subs	r2, #76	; 0x4c
 80043a6:	2300      	movs	r3, #0
 80043a8:	1ae9      	subs	r1, r5, r3
 80043aa:	2900      	cmp	r1, #0
 80043ac:	dc4c      	bgt.n	8004448 <__kernel_rem_pio2f+0x174>
 80043ae:	4620      	mov	r0, r4
 80043b0:	f000 faa4 	bl	80048fc <scalbnf>
 80043b4:	eeb0 8a40 	vmov.f32	s16, s0
 80043b8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80043bc:	ee28 0a00 	vmul.f32	s0, s16, s0
 80043c0:	f000 fa5a 	bl	8004878 <floorf>
 80043c4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80043c8:	eea0 8a67 	vfms.f32	s16, s0, s15
 80043cc:	2c00      	cmp	r4, #0
 80043ce:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80043d2:	edcd 7a01 	vstr	s15, [sp, #4]
 80043d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043da:	ee38 8a67 	vsub.f32	s16, s16, s15
 80043de:	dd48      	ble.n	8004472 <__kernel_rem_pio2f+0x19e>
 80043e0:	1e69      	subs	r1, r5, #1
 80043e2:	ab06      	add	r3, sp, #24
 80043e4:	f1c4 0008 	rsb	r0, r4, #8
 80043e8:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80043ec:	9a01      	ldr	r2, [sp, #4]
 80043ee:	fa4c f300 	asr.w	r3, ip, r0
 80043f2:	441a      	add	r2, r3
 80043f4:	4083      	lsls	r3, r0
 80043f6:	9201      	str	r2, [sp, #4]
 80043f8:	ebac 0203 	sub.w	r2, ip, r3
 80043fc:	ab06      	add	r3, sp, #24
 80043fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8004402:	f1c4 0307 	rsb	r3, r4, #7
 8004406:	fa42 f803 	asr.w	r8, r2, r3
 800440a:	f1b8 0f00 	cmp.w	r8, #0
 800440e:	dd41      	ble.n	8004494 <__kernel_rem_pio2f+0x1c0>
 8004410:	9b01      	ldr	r3, [sp, #4]
 8004412:	2000      	movs	r0, #0
 8004414:	3301      	adds	r3, #1
 8004416:	9301      	str	r3, [sp, #4]
 8004418:	4601      	mov	r1, r0
 800441a:	4285      	cmp	r5, r0
 800441c:	dc6d      	bgt.n	80044fa <__kernel_rem_pio2f+0x226>
 800441e:	2c00      	cmp	r4, #0
 8004420:	dd04      	ble.n	800442c <__kernel_rem_pio2f+0x158>
 8004422:	2c01      	cmp	r4, #1
 8004424:	d07e      	beq.n	8004524 <__kernel_rem_pio2f+0x250>
 8004426:	2c02      	cmp	r4, #2
 8004428:	f000 8086 	beq.w	8004538 <__kernel_rem_pio2f+0x264>
 800442c:	f1b8 0f02 	cmp.w	r8, #2
 8004430:	d130      	bne.n	8004494 <__kernel_rem_pio2f+0x1c0>
 8004432:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004436:	ee30 8a48 	vsub.f32	s16, s0, s16
 800443a:	b359      	cbz	r1, 8004494 <__kernel_rem_pio2f+0x1c0>
 800443c:	4620      	mov	r0, r4
 800443e:	f000 fa5d 	bl	80048fc <scalbnf>
 8004442:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004446:	e025      	b.n	8004494 <__kernel_rem_pio2f+0x1c0>
 8004448:	ee60 7a28 	vmul.f32	s15, s0, s17
 800444c:	a806      	add	r0, sp, #24
 800444e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004456:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800445a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800445e:	ee10 1a10 	vmov	r1, s0
 8004462:	ed32 0a01 	vldmdb	r2!, {s0}
 8004466:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800446a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800446e:	3301      	adds	r3, #1
 8004470:	e79a      	b.n	80043a8 <__kernel_rem_pio2f+0xd4>
 8004472:	d106      	bne.n	8004482 <__kernel_rem_pio2f+0x1ae>
 8004474:	1e6b      	subs	r3, r5, #1
 8004476:	aa06      	add	r2, sp, #24
 8004478:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800447c:	ea4f 2822 	mov.w	r8, r2, asr #8
 8004480:	e7c3      	b.n	800440a <__kernel_rem_pio2f+0x136>
 8004482:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004486:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800448a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448e:	da31      	bge.n	80044f4 <__kernel_rem_pio2f+0x220>
 8004490:	f04f 0800 	mov.w	r8, #0
 8004494:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800449c:	f040 80a8 	bne.w	80045f0 <__kernel_rem_pio2f+0x31c>
 80044a0:	1e6b      	subs	r3, r5, #1
 80044a2:	4618      	mov	r0, r3
 80044a4:	2200      	movs	r2, #0
 80044a6:	4548      	cmp	r0, r9
 80044a8:	da4d      	bge.n	8004546 <__kernel_rem_pio2f+0x272>
 80044aa:	2a00      	cmp	r2, #0
 80044ac:	f000 8087 	beq.w	80045be <__kernel_rem_pio2f+0x2ea>
 80044b0:	aa06      	add	r2, sp, #24
 80044b2:	3c08      	subs	r4, #8
 80044b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80044b8:	2900      	cmp	r1, #0
 80044ba:	f000 808d 	beq.w	80045d8 <__kernel_rem_pio2f+0x304>
 80044be:	4620      	mov	r0, r4
 80044c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80044c4:	9302      	str	r3, [sp, #8]
 80044c6:	f000 fa19 	bl	80048fc <scalbnf>
 80044ca:	9b02      	ldr	r3, [sp, #8]
 80044cc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80045e8 <__kernel_rem_pio2f+0x314>
 80044d0:	0099      	lsls	r1, r3, #2
 80044d2:	aa42      	add	r2, sp, #264	; 0x108
 80044d4:	1850      	adds	r0, r2, r1
 80044d6:	1d05      	adds	r5, r0, #4
 80044d8:	461c      	mov	r4, r3
 80044da:	2c00      	cmp	r4, #0
 80044dc:	f280 80b8 	bge.w	8004650 <__kernel_rem_pio2f+0x37c>
 80044e0:	2500      	movs	r5, #0
 80044e2:	1b5c      	subs	r4, r3, r5
 80044e4:	2c00      	cmp	r4, #0
 80044e6:	f2c0 80d8 	blt.w	800469a <__kernel_rem_pio2f+0x3c6>
 80044ea:	4f3d      	ldr	r7, [pc, #244]	; (80045e0 <__kernel_rem_pio2f+0x30c>)
 80044ec:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80045ec <__kernel_rem_pio2f+0x318>
 80044f0:	2400      	movs	r4, #0
 80044f2:	e0c6      	b.n	8004682 <__kernel_rem_pio2f+0x3ae>
 80044f4:	f04f 0802 	mov.w	r8, #2
 80044f8:	e78a      	b.n	8004410 <__kernel_rem_pio2f+0x13c>
 80044fa:	ab06      	add	r3, sp, #24
 80044fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004500:	b949      	cbnz	r1, 8004516 <__kernel_rem_pio2f+0x242>
 8004502:	b12b      	cbz	r3, 8004510 <__kernel_rem_pio2f+0x23c>
 8004504:	aa06      	add	r2, sp, #24
 8004506:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800450a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800450e:	2301      	movs	r3, #1
 8004510:	3001      	adds	r0, #1
 8004512:	4619      	mov	r1, r3
 8004514:	e781      	b.n	800441a <__kernel_rem_pio2f+0x146>
 8004516:	aa06      	add	r2, sp, #24
 8004518:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800451c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8004520:	460b      	mov	r3, r1
 8004522:	e7f5      	b.n	8004510 <__kernel_rem_pio2f+0x23c>
 8004524:	1e68      	subs	r0, r5, #1
 8004526:	ab06      	add	r3, sp, #24
 8004528:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800452c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004530:	aa06      	add	r2, sp, #24
 8004532:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8004536:	e779      	b.n	800442c <__kernel_rem_pio2f+0x158>
 8004538:	1e68      	subs	r0, r5, #1
 800453a:	ab06      	add	r3, sp, #24
 800453c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004544:	e7f4      	b.n	8004530 <__kernel_rem_pio2f+0x25c>
 8004546:	a906      	add	r1, sp, #24
 8004548:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800454c:	3801      	subs	r0, #1
 800454e:	430a      	orrs	r2, r1
 8004550:	e7a9      	b.n	80044a6 <__kernel_rem_pio2f+0x1d2>
 8004552:	f10c 0c01 	add.w	ip, ip, #1
 8004556:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800455a:	2a00      	cmp	r2, #0
 800455c:	d0f9      	beq.n	8004552 <__kernel_rem_pio2f+0x27e>
 800455e:	eb0b 0305 	add.w	r3, fp, r5
 8004562:	aa1a      	add	r2, sp, #104	; 0x68
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	1898      	adds	r0, r3, r2
 8004568:	3004      	adds	r0, #4
 800456a:	1c69      	adds	r1, r5, #1
 800456c:	3704      	adds	r7, #4
 800456e:	2200      	movs	r2, #0
 8004570:	4465      	add	r5, ip
 8004572:	9005      	str	r0, [sp, #20]
 8004574:	428d      	cmp	r5, r1
 8004576:	f6ff af0a 	blt.w	800438e <__kernel_rem_pio2f+0xba>
 800457a:	a81a      	add	r0, sp, #104	; 0x68
 800457c:	eb02 0c03 	add.w	ip, r2, r3
 8004580:	4484      	add	ip, r0
 8004582:	9803      	ldr	r0, [sp, #12]
 8004584:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004588:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800458c:	9001      	str	r0, [sp, #4]
 800458e:	ee07 0a90 	vmov	s15, r0
 8004592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004596:	9805      	ldr	r0, [sp, #20]
 8004598:	edcc 7a00 	vstr	s15, [ip]
 800459c:	eddf 7a13 	vldr	s15, [pc, #76]	; 80045ec <__kernel_rem_pio2f+0x318>
 80045a0:	eb00 0802 	add.w	r8, r0, r2
 80045a4:	f04f 0c00 	mov.w	ip, #0
 80045a8:	45d4      	cmp	ip, sl
 80045aa:	dd0c      	ble.n	80045c6 <__kernel_rem_pio2f+0x2f2>
 80045ac:	eb02 0c07 	add.w	ip, r2, r7
 80045b0:	a842      	add	r0, sp, #264	; 0x108
 80045b2:	4484      	add	ip, r0
 80045b4:	edcc 7a01 	vstr	s15, [ip, #4]
 80045b8:	3101      	adds	r1, #1
 80045ba:	3204      	adds	r2, #4
 80045bc:	e7da      	b.n	8004574 <__kernel_rem_pio2f+0x2a0>
 80045be:	9b04      	ldr	r3, [sp, #16]
 80045c0:	f04f 0c01 	mov.w	ip, #1
 80045c4:	e7c7      	b.n	8004556 <__kernel_rem_pio2f+0x282>
 80045c6:	ecfe 6a01 	vldmia	lr!, {s13}
 80045ca:	ed38 7a01 	vldmdb	r8!, {s14}
 80045ce:	f10c 0c01 	add.w	ip, ip, #1
 80045d2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80045d6:	e7e7      	b.n	80045a8 <__kernel_rem_pio2f+0x2d4>
 80045d8:	3b01      	subs	r3, #1
 80045da:	e769      	b.n	80044b0 <__kernel_rem_pio2f+0x1dc>
 80045dc:	08004e30 	.word	0x08004e30
 80045e0:	08004e04 	.word	0x08004e04
 80045e4:	43800000 	.word	0x43800000
 80045e8:	3b800000 	.word	0x3b800000
 80045ec:	00000000 	.word	0x00000000
 80045f0:	4260      	negs	r0, r4
 80045f2:	eeb0 0a48 	vmov.f32	s0, s16
 80045f6:	f000 f981 	bl	80048fc <scalbnf>
 80045fa:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80045e4 <__kernel_rem_pio2f+0x310>
 80045fe:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004606:	db1a      	blt.n	800463e <__kernel_rem_pio2f+0x36a>
 8004608:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80045e8 <__kernel_rem_pio2f+0x314>
 800460c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004610:	aa06      	add	r2, sp, #24
 8004612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004616:	a906      	add	r1, sp, #24
 8004618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800461c:	3408      	adds	r4, #8
 800461e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004622:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004626:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800462a:	ee10 3a10 	vmov	r3, s0
 800462e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8004632:	1c6b      	adds	r3, r5, #1
 8004634:	ee17 2a90 	vmov	r2, s15
 8004638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800463c:	e73f      	b.n	80044be <__kernel_rem_pio2f+0x1ea>
 800463e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004642:	aa06      	add	r2, sp, #24
 8004644:	ee10 3a10 	vmov	r3, s0
 8004648:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800464c:	462b      	mov	r3, r5
 800464e:	e736      	b.n	80044be <__kernel_rem_pio2f+0x1ea>
 8004650:	aa06      	add	r2, sp, #24
 8004652:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8004656:	9202      	str	r2, [sp, #8]
 8004658:	ee07 2a90 	vmov	s15, r2
 800465c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004660:	3c01      	subs	r4, #1
 8004662:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004666:	ee20 0a07 	vmul.f32	s0, s0, s14
 800466a:	ed65 7a01 	vstmdb	r5!, {s15}
 800466e:	e734      	b.n	80044da <__kernel_rem_pio2f+0x206>
 8004670:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8004674:	ecf7 6a01 	vldmia	r7!, {s13}
 8004678:	ed9c 7a00 	vldr	s14, [ip]
 800467c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004680:	3401      	adds	r4, #1
 8004682:	454c      	cmp	r4, r9
 8004684:	dc01      	bgt.n	800468a <__kernel_rem_pio2f+0x3b6>
 8004686:	42a5      	cmp	r5, r4
 8004688:	daf2      	bge.n	8004670 <__kernel_rem_pio2f+0x39c>
 800468a:	aa56      	add	r2, sp, #344	; 0x158
 800468c:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8004690:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8004694:	3501      	adds	r5, #1
 8004696:	3804      	subs	r0, #4
 8004698:	e723      	b.n	80044e2 <__kernel_rem_pio2f+0x20e>
 800469a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800469c:	2a03      	cmp	r2, #3
 800469e:	d84d      	bhi.n	800473c <__kernel_rem_pio2f+0x468>
 80046a0:	e8df f002 	tbb	[pc, r2]
 80046a4:	021f1f3e 	.word	0x021f1f3e
 80046a8:	aa56      	add	r2, sp, #344	; 0x158
 80046aa:	4411      	add	r1, r2
 80046ac:	399c      	subs	r1, #156	; 0x9c
 80046ae:	4608      	mov	r0, r1
 80046b0:	461c      	mov	r4, r3
 80046b2:	2c00      	cmp	r4, #0
 80046b4:	dc5f      	bgt.n	8004776 <__kernel_rem_pio2f+0x4a2>
 80046b6:	4608      	mov	r0, r1
 80046b8:	461c      	mov	r4, r3
 80046ba:	2c01      	cmp	r4, #1
 80046bc:	dc6b      	bgt.n	8004796 <__kernel_rem_pio2f+0x4c2>
 80046be:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80045ec <__kernel_rem_pio2f+0x318>
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	dc77      	bgt.n	80047b6 <__kernel_rem_pio2f+0x4e2>
 80046c6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80046ca:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80046ce:	f1b8 0f00 	cmp.w	r8, #0
 80046d2:	d176      	bne.n	80047c2 <__kernel_rem_pio2f+0x4ee>
 80046d4:	edc6 6a00 	vstr	s13, [r6]
 80046d8:	ed86 7a01 	vstr	s14, [r6, #4]
 80046dc:	edc6 7a02 	vstr	s15, [r6, #8]
 80046e0:	e02c      	b.n	800473c <__kernel_rem_pio2f+0x468>
 80046e2:	aa56      	add	r2, sp, #344	; 0x158
 80046e4:	4411      	add	r1, r2
 80046e6:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80045ec <__kernel_rem_pio2f+0x318>
 80046ea:	399c      	subs	r1, #156	; 0x9c
 80046ec:	4618      	mov	r0, r3
 80046ee:	2800      	cmp	r0, #0
 80046f0:	da32      	bge.n	8004758 <__kernel_rem_pio2f+0x484>
 80046f2:	f1b8 0f00 	cmp.w	r8, #0
 80046f6:	d035      	beq.n	8004764 <__kernel_rem_pio2f+0x490>
 80046f8:	eef1 7a47 	vneg.f32	s15, s14
 80046fc:	edc6 7a00 	vstr	s15, [r6]
 8004700:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8004704:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004708:	a82f      	add	r0, sp, #188	; 0xbc
 800470a:	2101      	movs	r1, #1
 800470c:	428b      	cmp	r3, r1
 800470e:	da2c      	bge.n	800476a <__kernel_rem_pio2f+0x496>
 8004710:	f1b8 0f00 	cmp.w	r8, #0
 8004714:	d001      	beq.n	800471a <__kernel_rem_pio2f+0x446>
 8004716:	eef1 7a67 	vneg.f32	s15, s15
 800471a:	edc6 7a01 	vstr	s15, [r6, #4]
 800471e:	e00d      	b.n	800473c <__kernel_rem_pio2f+0x468>
 8004720:	aa56      	add	r2, sp, #344	; 0x158
 8004722:	4411      	add	r1, r2
 8004724:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80045ec <__kernel_rem_pio2f+0x318>
 8004728:	399c      	subs	r1, #156	; 0x9c
 800472a:	2b00      	cmp	r3, #0
 800472c:	da0e      	bge.n	800474c <__kernel_rem_pio2f+0x478>
 800472e:	f1b8 0f00 	cmp.w	r8, #0
 8004732:	d001      	beq.n	8004738 <__kernel_rem_pio2f+0x464>
 8004734:	eef1 7a67 	vneg.f32	s15, s15
 8004738:	edc6 7a00 	vstr	s15, [r6]
 800473c:	9b01      	ldr	r3, [sp, #4]
 800473e:	f003 0007 	and.w	r0, r3, #7
 8004742:	b057      	add	sp, #348	; 0x15c
 8004744:	ecbd 8b04 	vpop	{d8-d9}
 8004748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800474c:	ed31 7a01 	vldmdb	r1!, {s14}
 8004750:	3b01      	subs	r3, #1
 8004752:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004756:	e7e8      	b.n	800472a <__kernel_rem_pio2f+0x456>
 8004758:	ed71 7a01 	vldmdb	r1!, {s15}
 800475c:	3801      	subs	r0, #1
 800475e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004762:	e7c4      	b.n	80046ee <__kernel_rem_pio2f+0x41a>
 8004764:	eef0 7a47 	vmov.f32	s15, s14
 8004768:	e7c8      	b.n	80046fc <__kernel_rem_pio2f+0x428>
 800476a:	ecb0 7a01 	vldmia	r0!, {s14}
 800476e:	3101      	adds	r1, #1
 8004770:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004774:	e7ca      	b.n	800470c <__kernel_rem_pio2f+0x438>
 8004776:	ed50 7a02 	vldr	s15, [r0, #-8]
 800477a:	ed70 6a01 	vldmdb	r0!, {s13}
 800477e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004782:	3c01      	subs	r4, #1
 8004784:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004788:	ed00 7a01 	vstr	s14, [r0, #-4]
 800478c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004790:	edc0 7a00 	vstr	s15, [r0]
 8004794:	e78d      	b.n	80046b2 <__kernel_rem_pio2f+0x3de>
 8004796:	ed50 7a02 	vldr	s15, [r0, #-8]
 800479a:	ed70 6a01 	vldmdb	r0!, {s13}
 800479e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80047a2:	3c01      	subs	r4, #1
 80047a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047a8:	ed00 7a01 	vstr	s14, [r0, #-4]
 80047ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b0:	edc0 7a00 	vstr	s15, [r0]
 80047b4:	e781      	b.n	80046ba <__kernel_rem_pio2f+0x3e6>
 80047b6:	ed31 7a01 	vldmdb	r1!, {s14}
 80047ba:	3b01      	subs	r3, #1
 80047bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047c0:	e77f      	b.n	80046c2 <__kernel_rem_pio2f+0x3ee>
 80047c2:	eef1 6a66 	vneg.f32	s13, s13
 80047c6:	eeb1 7a47 	vneg.f32	s14, s14
 80047ca:	edc6 6a00 	vstr	s13, [r6]
 80047ce:	ed86 7a01 	vstr	s14, [r6, #4]
 80047d2:	eef1 7a67 	vneg.f32	s15, s15
 80047d6:	e781      	b.n	80046dc <__kernel_rem_pio2f+0x408>

080047d8 <__kernel_sinf>:
 80047d8:	ee10 3a10 	vmov	r3, s0
 80047dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047e0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80047e4:	da04      	bge.n	80047f0 <__kernel_sinf+0x18>
 80047e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80047ea:	ee17 3a90 	vmov	r3, s15
 80047ee:	b35b      	cbz	r3, 8004848 <__kernel_sinf+0x70>
 80047f0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80047f4:	eddf 7a15 	vldr	s15, [pc, #84]	; 800484c <__kernel_sinf+0x74>
 80047f8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8004850 <__kernel_sinf+0x78>
 80047fc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004800:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004854 <__kernel_sinf+0x7c>
 8004804:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004808:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004858 <__kernel_sinf+0x80>
 800480c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004810:	eddf 7a12 	vldr	s15, [pc, #72]	; 800485c <__kernel_sinf+0x84>
 8004814:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004818:	eee6 7a07 	vfma.f32	s15, s12, s14
 800481c:	b930      	cbnz	r0, 800482c <__kernel_sinf+0x54>
 800481e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8004860 <__kernel_sinf+0x88>
 8004822:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004826:	eea6 0a26 	vfma.f32	s0, s12, s13
 800482a:	4770      	bx	lr
 800482c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004830:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004834:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004838:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800483c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004864 <__kernel_sinf+0x8c>
 8004840:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004844:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	2f2ec9d3 	.word	0x2f2ec9d3
 8004850:	b2d72f34 	.word	0xb2d72f34
 8004854:	3638ef1b 	.word	0x3638ef1b
 8004858:	b9500d01 	.word	0xb9500d01
 800485c:	3c088889 	.word	0x3c088889
 8004860:	be2aaaab 	.word	0xbe2aaaab
 8004864:	3e2aaaab 	.word	0x3e2aaaab

08004868 <fabsf>:
 8004868:	ee10 3a10 	vmov	r3, s0
 800486c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004870:	ee00 3a10 	vmov	s0, r3
 8004874:	4770      	bx	lr
	...

08004878 <floorf>:
 8004878:	ee10 3a10 	vmov	r3, s0
 800487c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004880:	0dca      	lsrs	r2, r1, #23
 8004882:	3a7f      	subs	r2, #127	; 0x7f
 8004884:	2a16      	cmp	r2, #22
 8004886:	dc2a      	bgt.n	80048de <floorf+0x66>
 8004888:	2a00      	cmp	r2, #0
 800488a:	da11      	bge.n	80048b0 <floorf+0x38>
 800488c:	eddf 7a18 	vldr	s15, [pc, #96]	; 80048f0 <floorf+0x78>
 8004890:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004894:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489c:	dd05      	ble.n	80048aa <floorf+0x32>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	da23      	bge.n	80048ea <floorf+0x72>
 80048a2:	4a14      	ldr	r2, [pc, #80]	; (80048f4 <floorf+0x7c>)
 80048a4:	2900      	cmp	r1, #0
 80048a6:	bf18      	it	ne
 80048a8:	4613      	movne	r3, r2
 80048aa:	ee00 3a10 	vmov	s0, r3
 80048ae:	4770      	bx	lr
 80048b0:	4911      	ldr	r1, [pc, #68]	; (80048f8 <floorf+0x80>)
 80048b2:	4111      	asrs	r1, r2
 80048b4:	420b      	tst	r3, r1
 80048b6:	d0fa      	beq.n	80048ae <floorf+0x36>
 80048b8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80048f0 <floorf+0x78>
 80048bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80048c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80048c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c8:	ddef      	ble.n	80048aa <floorf+0x32>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bfbe      	ittt	lt
 80048ce:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80048d2:	fa40 f202 	asrlt.w	r2, r0, r2
 80048d6:	189b      	addlt	r3, r3, r2
 80048d8:	ea23 0301 	bic.w	r3, r3, r1
 80048dc:	e7e5      	b.n	80048aa <floorf+0x32>
 80048de:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80048e2:	d3e4      	bcc.n	80048ae <floorf+0x36>
 80048e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80048e8:	4770      	bx	lr
 80048ea:	2300      	movs	r3, #0
 80048ec:	e7dd      	b.n	80048aa <floorf+0x32>
 80048ee:	bf00      	nop
 80048f0:	7149f2ca 	.word	0x7149f2ca
 80048f4:	bf800000 	.word	0xbf800000
 80048f8:	007fffff 	.word	0x007fffff

080048fc <scalbnf>:
 80048fc:	b508      	push	{r3, lr}
 80048fe:	ee10 2a10 	vmov	r2, s0
 8004902:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8004906:	ed2d 8b02 	vpush	{d8}
 800490a:	eef0 0a40 	vmov.f32	s1, s0
 800490e:	d004      	beq.n	800491a <scalbnf+0x1e>
 8004910:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004914:	d306      	bcc.n	8004924 <scalbnf+0x28>
 8004916:	ee70 0a00 	vadd.f32	s1, s0, s0
 800491a:	ecbd 8b02 	vpop	{d8}
 800491e:	eeb0 0a60 	vmov.f32	s0, s1
 8004922:	bd08      	pop	{r3, pc}
 8004924:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004928:	d21c      	bcs.n	8004964 <scalbnf+0x68>
 800492a:	4b1f      	ldr	r3, [pc, #124]	; (80049a8 <scalbnf+0xac>)
 800492c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80049ac <scalbnf+0xb0>
 8004930:	4298      	cmp	r0, r3
 8004932:	ee60 0a27 	vmul.f32	s1, s0, s15
 8004936:	db10      	blt.n	800495a <scalbnf+0x5e>
 8004938:	ee10 2a90 	vmov	r2, s1
 800493c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8004940:	3b19      	subs	r3, #25
 8004942:	4403      	add	r3, r0
 8004944:	2bfe      	cmp	r3, #254	; 0xfe
 8004946:	dd0f      	ble.n	8004968 <scalbnf+0x6c>
 8004948:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80049b0 <scalbnf+0xb4>
 800494c:	eeb0 0a48 	vmov.f32	s0, s16
 8004950:	f000 f834 	bl	80049bc <copysignf>
 8004954:	ee60 0a08 	vmul.f32	s1, s0, s16
 8004958:	e7df      	b.n	800491a <scalbnf+0x1e>
 800495a:	eddf 7a16 	vldr	s15, [pc, #88]	; 80049b4 <scalbnf+0xb8>
 800495e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8004962:	e7da      	b.n	800491a <scalbnf+0x1e>
 8004964:	0ddb      	lsrs	r3, r3, #23
 8004966:	e7ec      	b.n	8004942 <scalbnf+0x46>
 8004968:	2b00      	cmp	r3, #0
 800496a:	dd06      	ble.n	800497a <scalbnf+0x7e>
 800496c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8004970:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8004974:	ee00 3a90 	vmov	s1, r3
 8004978:	e7cf      	b.n	800491a <scalbnf+0x1e>
 800497a:	f113 0f16 	cmn.w	r3, #22
 800497e:	da06      	bge.n	800498e <scalbnf+0x92>
 8004980:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004984:	4298      	cmp	r0, r3
 8004986:	dcdf      	bgt.n	8004948 <scalbnf+0x4c>
 8004988:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80049b4 <scalbnf+0xb8>
 800498c:	e7de      	b.n	800494c <scalbnf+0x50>
 800498e:	3319      	adds	r3, #25
 8004990:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8004994:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8004998:	eddf 7a07 	vldr	s15, [pc, #28]	; 80049b8 <scalbnf+0xbc>
 800499c:	ee07 3a10 	vmov	s14, r3
 80049a0:	ee67 0a27 	vmul.f32	s1, s14, s15
 80049a4:	e7b9      	b.n	800491a <scalbnf+0x1e>
 80049a6:	bf00      	nop
 80049a8:	ffff3cb0 	.word	0xffff3cb0
 80049ac:	4c000000 	.word	0x4c000000
 80049b0:	7149f2ca 	.word	0x7149f2ca
 80049b4:	0da24260 	.word	0x0da24260
 80049b8:	33000000 	.word	0x33000000

080049bc <copysignf>:
 80049bc:	ee10 3a10 	vmov	r3, s0
 80049c0:	ee10 2a90 	vmov	r2, s1
 80049c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049c8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80049cc:	4313      	orrs	r3, r2
 80049ce:	ee00 3a10 	vmov	s0, r3
 80049d2:	4770      	bx	lr

080049d4 <_init>:
 80049d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d6:	bf00      	nop
 80049d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049da:	bc08      	pop	{r3}
 80049dc:	469e      	mov	lr, r3
 80049de:	4770      	bx	lr

080049e0 <_fini>:
 80049e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e2:	bf00      	nop
 80049e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e6:	bc08      	pop	{r3}
 80049e8:	469e      	mov	lr, r3
 80049ea:	4770      	bx	lr
