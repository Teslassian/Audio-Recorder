
edesign_2020_21785155.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d70  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002f34  08002f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f4c  08002f4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f4c  08002f4c  00012f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f54  08002f54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f54  08002f54  00012f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f58  08002f58  00012f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08002f68  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002f68  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000865e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001667  00000000  00000000  0002869a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000838  00000000  00000000  00029d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000770  00000000  00000000  0002a540  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020ce8  00000000  00000000  0002acb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007472  00000000  00000000  0004b998  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c988a  00000000  00000000  00052e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c694  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020ec  00000000  00000000  0011c710  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002f1c 	.word	0x08002f1c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002f1c 	.word	0x08002f1c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	state = Idle;
 8000508:	4ba0      	ldr	r3, [pc, #640]	; (800078c <main+0x288>)
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
	Start = off;
 800050e:	4ba0      	ldr	r3, [pc, #640]	; (8000790 <main+0x28c>)
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
	exti = off;
 8000514:	4b9f      	ldr	r3, [pc, #636]	; (8000794 <main+0x290>)
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]

	ledOne = off;
 800051a:	4b9f      	ldr	r3, [pc, #636]	; (8000798 <main+0x294>)
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
	ledTwo = off;
 8000520:	4b9e      	ldr	r3, [pc, #632]	; (800079c <main+0x298>)
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
	ledThree = off;
 8000526:	4b9e      	ldr	r3, [pc, #632]	; (80007a0 <main+0x29c>)
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
	ledRec = off;
 800052c:	4b9d      	ldr	r3, [pc, #628]	; (80007a4 <main+0x2a0>)
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]

	buttOne = off;
 8000532:	4b9d      	ldr	r3, [pc, #628]	; (80007a8 <main+0x2a4>)
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
	buttTwo	= off;
 8000538:	4b9c      	ldr	r3, [pc, #624]	; (80007ac <main+0x2a8>)
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
	buttThree = off;
 800053e:	4b9c      	ldr	r3, [pc, #624]	; (80007b0 <main+0x2ac>)
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
	buttRec = off;
 8000544:	4b9b      	ldr	r3, [pc, #620]	; (80007b4 <main+0x2b0>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
	buttStop = off;
 800054a:	4b9b      	ldr	r3, [pc, #620]	; (80007b8 <main+0x2b4>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f000 fd8e 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 fa2c 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 fb3e 	bl	8000bd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055c:	f000 fb12 	bl	8000b84 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000560:	f000 fa94 	bl	8000a8c <MX_ADC1_Init>
  MX_DAC_Init();
 8000564:	f000 fae4 	bl	8000b30 <MX_DAC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /////////////////////////////////////////////////////////////////////
	  if (exti){
 8000568:	4b8a      	ldr	r3, [pc, #552]	; (8000794 <main+0x290>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d068      	beq.n	8000642 <main+0x13e>

		  if (!Start) Ri = HAL_GetTick();
 8000570:	4b87      	ldr	r3, [pc, #540]	; (8000790 <main+0x28c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d105      	bne.n	8000584 <main+0x80>
 8000578:	f000 fde0 	bl	800113c <HAL_GetTick>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	4b8e      	ldr	r3, [pc, #568]	; (80007bc <main+0x2b8>)
 8000582:	601a      	str	r2, [r3, #0]
		  Start = on;
 8000584:	4b82      	ldr	r3, [pc, #520]	; (8000790 <main+0x28c>)
 8000586:	2201      	movs	r2, #1
 8000588:	601a      	str	r2, [r3, #0]
		  Rf = HAL_GetTick();
 800058a:	f000 fdd7 	bl	800113c <HAL_GetTick>
 800058e:	4603      	mov	r3, r0
 8000590:	461a      	mov	r2, r3
 8000592:	4b8b      	ldr	r3, [pc, #556]	; (80007c0 <main+0x2bc>)
 8000594:	601a      	str	r2, [r3, #0]

		  	if (Rf - Ri > 20){
 8000596:	4b8a      	ldr	r3, [pc, #552]	; (80007c0 <main+0x2bc>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	4b88      	ldr	r3, [pc, #544]	; (80007bc <main+0x2b8>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	1ad3      	subs	r3, r2, r3
 80005a0:	2b14      	cmp	r3, #20
 80005a2:	dd4e      	ble.n	8000642 <main+0x13e>
		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) buttOne = on;
 80005a4:	2140      	movs	r1, #64	; 0x40
 80005a6:	4887      	ldr	r0, [pc, #540]	; (80007c4 <main+0x2c0>)
 80005a8:	f001 fb58 	bl	8001c5c <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d003      	beq.n	80005ba <main+0xb6>
 80005b2:	4b7d      	ldr	r3, [pc, #500]	; (80007a8 <main+0x2a4>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	e002      	b.n	80005c0 <main+0xbc>
		  		else buttOne = off;
 80005ba:	4b7b      	ldr	r3, [pc, #492]	; (80007a8 <main+0x2a4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]

			  	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) {buttTwo = on;}
 80005c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c4:	487f      	ldr	r0, [pc, #508]	; (80007c4 <main+0x2c0>)
 80005c6:	f001 fb49 	bl	8001c5c <HAL_GPIO_ReadPin>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d003      	beq.n	80005d8 <main+0xd4>
 80005d0:	4b76      	ldr	r3, [pc, #472]	; (80007ac <main+0x2a8>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	e002      	b.n	80005de <main+0xda>
			  	else {buttTwo = off;}
 80005d8:	4b74      	ldr	r3, [pc, #464]	; (80007ac <main+0x2a8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)) buttThree = on;
 80005de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e2:	4878      	ldr	r0, [pc, #480]	; (80007c4 <main+0x2c0>)
 80005e4:	f001 fb3a 	bl	8001c5c <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d003      	beq.n	80005f6 <main+0xf2>
 80005ee:	4b70      	ldr	r3, [pc, #448]	; (80007b0 <main+0x2ac>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	e002      	b.n	80005fc <main+0xf8>
		  		else buttThree = off;
 80005f6:	4b6e      	ldr	r3, [pc, #440]	; (80007b0 <main+0x2ac>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) buttRec = on;
 80005fc:	2180      	movs	r1, #128	; 0x80
 80005fe:	4871      	ldr	r0, [pc, #452]	; (80007c4 <main+0x2c0>)
 8000600:	f001 fb2c 	bl	8001c5c <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d003      	beq.n	8000612 <main+0x10e>
 800060a:	4b6a      	ldr	r3, [pc, #424]	; (80007b4 <main+0x2b0>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	e002      	b.n	8000618 <main+0x114>
		  		else {buttRec = off;}
 8000612:	4b68      	ldr	r3, [pc, #416]	; (80007b4 <main+0x2b0>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) buttStop = on;
 8000618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061c:	486a      	ldr	r0, [pc, #424]	; (80007c8 <main+0x2c4>)
 800061e:	f001 fb1d 	bl	8001c5c <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d003      	beq.n	8000630 <main+0x12c>
 8000628:	4b63      	ldr	r3, [pc, #396]	; (80007b8 <main+0x2b4>)
 800062a:	2201      	movs	r2, #1
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	e002      	b.n	8000636 <main+0x132>
		  		else buttStop = off;
 8000630:	4b61      	ldr	r3, [pc, #388]	; (80007b8 <main+0x2b4>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]

		  		Start = off;
 8000636:	4b56      	ldr	r3, [pc, #344]	; (8000790 <main+0x28c>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
		  		exti = off;
 800063c:	4b55      	ldr	r3, [pc, #340]	; (8000794 <main+0x290>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
		  	}
	  }
	  /////////////////////////////////////////////////////////////////////

	  if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))){
 8000642:	2140      	movs	r1, #64	; 0x40
 8000644:	485f      	ldr	r0, [pc, #380]	; (80007c4 <main+0x2c0>)
 8000646:	f001 fb09 	bl	8001c5c <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d160      	bne.n	8000712 <main+0x20e>
 8000650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000654:	485b      	ldr	r0, [pc, #364]	; (80007c4 <main+0x2c0>)
 8000656:	f001 fb01 	bl	8001c5c <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d158      	bne.n	8000712 <main+0x20e>
 8000660:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000664:	4857      	ldr	r0, [pc, #348]	; (80007c4 <main+0x2c0>)
 8000666:	f001 faf9 	bl	8001c5c <HAL_GPIO_ReadPin>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d150      	bne.n	8000712 <main+0x20e>
 8000670:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000674:	4854      	ldr	r0, [pc, #336]	; (80007c8 <main+0x2c4>)
 8000676:	f001 faf1 	bl	8001c5c <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d148      	bne.n	8000712 <main+0x20e>
		  /////////////////////////////////////////////
		  if (!buttRec && buttOne) state = PlayOne;
 8000680:	4b4c      	ldr	r3, [pc, #304]	; (80007b4 <main+0x2b0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d106      	bne.n	8000696 <main+0x192>
 8000688:	4b47      	ldr	r3, [pc, #284]	; (80007a8 <main+0x2a4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d002      	beq.n	8000696 <main+0x192>
 8000690:	4b3e      	ldr	r3, [pc, #248]	; (800078c <main+0x288>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
		  if (!buttRec && buttTwo) state = PlayTwo;
 8000696:	4b47      	ldr	r3, [pc, #284]	; (80007b4 <main+0x2b0>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d106      	bne.n	80006ac <main+0x1a8>
 800069e:	4b43      	ldr	r3, [pc, #268]	; (80007ac <main+0x2a8>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d002      	beq.n	80006ac <main+0x1a8>
 80006a6:	4b39      	ldr	r3, [pc, #228]	; (800078c <main+0x288>)
 80006a8:	2202      	movs	r2, #2
 80006aa:	701a      	strb	r2, [r3, #0]
		  if (!buttRec && buttThree) state = PlayThree;
 80006ac:	4b41      	ldr	r3, [pc, #260]	; (80007b4 <main+0x2b0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d106      	bne.n	80006c2 <main+0x1be>
 80006b4:	4b3e      	ldr	r3, [pc, #248]	; (80007b0 <main+0x2ac>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <main+0x1be>
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <main+0x288>)
 80006be:	2203      	movs	r2, #3
 80006c0:	701a      	strb	r2, [r3, #0]
		  /////////////////////////////////////////////
		  if (buttRec && buttOne) state = RecOne;
 80006c2:	4b3c      	ldr	r3, [pc, #240]	; (80007b4 <main+0x2b0>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d006      	beq.n	80006d8 <main+0x1d4>
 80006ca:	4b37      	ldr	r3, [pc, #220]	; (80007a8 <main+0x2a4>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d002      	beq.n	80006d8 <main+0x1d4>
 80006d2:	4b2e      	ldr	r3, [pc, #184]	; (800078c <main+0x288>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	701a      	strb	r2, [r3, #0]
		  if (buttRec && buttTwo) state = RecTwo;
 80006d8:	4b36      	ldr	r3, [pc, #216]	; (80007b4 <main+0x2b0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d006      	beq.n	80006ee <main+0x1ea>
 80006e0:	4b32      	ldr	r3, [pc, #200]	; (80007ac <main+0x2a8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d002      	beq.n	80006ee <main+0x1ea>
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <main+0x288>)
 80006ea:	2205      	movs	r2, #5
 80006ec:	701a      	strb	r2, [r3, #0]
		  if (buttRec && buttThree) state = RecThree;
 80006ee:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <main+0x2b0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d006      	beq.n	8000704 <main+0x200>
 80006f6:	4b2e      	ldr	r3, [pc, #184]	; (80007b0 <main+0x2ac>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d002      	beq.n	8000704 <main+0x200>
 80006fe:	4b23      	ldr	r3, [pc, #140]	; (800078c <main+0x288>)
 8000700:	2206      	movs	r2, #6
 8000702:	701a      	strb	r2, [r3, #0]
		  /////////////////////////////////////////////
		  if (buttStop) state = Idle;
 8000704:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <main+0x2b4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d002      	beq.n	8000712 <main+0x20e>
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <main+0x288>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
		  /////////////////////////////////////////////
	  }

	  ticky = HAL_GetTick();
 8000712:	f000 fd13 	bl	800113c <HAL_GetTick>
 8000716:	4603      	mov	r3, r0
 8000718:	461a      	mov	r2, r3
 800071a:	4b2c      	ldr	r3, [pc, #176]	; (80007cc <main+0x2c8>)
 800071c:	601a      	str	r2, [r3, #0]
	  //////////////////////////////////////////////////////////////////////////
	  if (state == PlayOne || state == PlayTwo || state == PlayThree || state == Idle){
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <main+0x288>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	2b01      	cmp	r3, #1
 8000726:	d00f      	beq.n	8000748 <main+0x244>
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <main+0x288>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2b02      	cmp	r3, #2
 8000730:	d00a      	beq.n	8000748 <main+0x244>
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <main+0x288>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b03      	cmp	r3, #3
 800073a:	d005      	beq.n	8000748 <main+0x244>
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <main+0x288>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8099 	bne.w	800087a <main+0x376>
	  	  if (state == PlayOne){
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <main+0x288>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b01      	cmp	r3, #1
 8000750:	d140      	bne.n	80007d4 <main+0x2d0>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, on);
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <main+0x2c8>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <main+0x2cc>)
 8000758:	fb83 1302 	smull	r1, r3, r3, r2
 800075c:	1159      	asrs	r1, r3, #5
 800075e:	17d3      	asrs	r3, r2, #31
 8000760:	1acb      	subs	r3, r1, r3
 8000762:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000766:	fb01 f303 	mul.w	r3, r1, r3
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	2bf9      	cmp	r3, #249	; 0xf9
 800076e:	dc06      	bgt.n	800077e <main+0x27a>
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000776:	4813      	ldr	r0, [pc, #76]	; (80007c4 <main+0x2c0>)
 8000778:	f001 fa88 	bl	8001c8c <HAL_GPIO_WritePin>
 800077c:	e030      	b.n	80007e0 <main+0x2dc>
	  		  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000784:	480f      	ldr	r0, [pc, #60]	; (80007c4 <main+0x2c0>)
 8000786:	f001 fa81 	bl	8001c8c <HAL_GPIO_WritePin>
 800078a:	e029      	b.n	80007e0 <main+0x2dc>
 800078c:	20000048 	.word	0x20000048
 8000790:	200000f8 	.word	0x200000f8
 8000794:	2000004c 	.word	0x2000004c
 8000798:	2000003c 	.word	0x2000003c
 800079c:	200000f4 	.word	0x200000f4
 80007a0:	20000040 	.word	0x20000040
 80007a4:	20000038 	.word	0x20000038
 80007a8:	20000034 	.word	0x20000034
 80007ac:	20000028 	.word	0x20000028
 80007b0:	20000050 	.word	0x20000050
 80007b4:	200000fc 	.word	0x200000fc
 80007b8:	20000044 	.word	0x20000044
 80007bc:	200000b0 	.word	0x200000b0
 80007c0:	20000030 	.word	0x20000030
 80007c4:	40020000 	.word	0x40020000
 80007c8:	40020400 	.word	0x40020400
 80007cc:	2000002c 	.word	0x2000002c
 80007d0:	10624dd3 	.word	0x10624dd3
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007da:	4870      	ldr	r0, [pc, #448]	; (800099c <main+0x498>)
 80007dc:	f001 fa56 	bl	8001c8c <HAL_GPIO_WritePin>

	  	  if (state == PlayTwo){
 80007e0:	4b6f      	ldr	r3, [pc, #444]	; (80009a0 <main+0x49c>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d11c      	bne.n	8000824 <main+0x320>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, on);
 80007ea:	4b6e      	ldr	r3, [pc, #440]	; (80009a4 <main+0x4a0>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	4b6e      	ldr	r3, [pc, #440]	; (80009a8 <main+0x4a4>)
 80007f0:	fb83 1302 	smull	r1, r3, r3, r2
 80007f4:	1159      	asrs	r1, r3, #5
 80007f6:	17d3      	asrs	r3, r2, #31
 80007f8:	1acb      	subs	r3, r1, r3
 80007fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007fe:	fb01 f303 	mul.w	r3, r1, r3
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	2bf9      	cmp	r3, #249	; 0xf9
 8000806:	dc06      	bgt.n	8000816 <main+0x312>
 8000808:	2201      	movs	r2, #1
 800080a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800080e:	4867      	ldr	r0, [pc, #412]	; (80009ac <main+0x4a8>)
 8000810:	f001 fa3c 	bl	8001c8c <HAL_GPIO_WritePin>
 8000814:	e00c      	b.n	8000830 <main+0x32c>
	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800081c:	4863      	ldr	r0, [pc, #396]	; (80009ac <main+0x4a8>)
 800081e:	f001 fa35 	bl	8001c8c <HAL_GPIO_WritePin>
 8000822:	e005      	b.n	8000830 <main+0x32c>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800082a:	4860      	ldr	r0, [pc, #384]	; (80009ac <main+0x4a8>)
 800082c:	f001 fa2e 	bl	8001c8c <HAL_GPIO_WritePin>

	  	  if (state == PlayThree){
 8000830:	4b5b      	ldr	r3, [pc, #364]	; (80009a0 <main+0x49c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b03      	cmp	r3, #3
 8000838:	d11a      	bne.n	8000870 <main+0x36c>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, on);
 800083a:	4b5a      	ldr	r3, [pc, #360]	; (80009a4 <main+0x4a0>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	4b5a      	ldr	r3, [pc, #360]	; (80009a8 <main+0x4a4>)
 8000840:	fb83 1302 	smull	r1, r3, r3, r2
 8000844:	1159      	asrs	r1, r3, #5
 8000846:	17d3      	asrs	r3, r2, #31
 8000848:	1acb      	subs	r3, r1, r3
 800084a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800084e:	fb01 f303 	mul.w	r3, r1, r3
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	2bf9      	cmp	r3, #249	; 0xf9
 8000856:	dc05      	bgt.n	8000864 <main+0x360>
 8000858:	2201      	movs	r2, #1
 800085a:	2110      	movs	r1, #16
 800085c:	4853      	ldr	r0, [pc, #332]	; (80009ac <main+0x4a8>)
 800085e:	f001 fa15 	bl	8001c8c <HAL_GPIO_WritePin>
 8000862:	e00a      	b.n	800087a <main+0x376>
	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000864:	2200      	movs	r2, #0
 8000866:	2110      	movs	r1, #16
 8000868:	4850      	ldr	r0, [pc, #320]	; (80009ac <main+0x4a8>)
 800086a:	f001 fa0f 	bl	8001c8c <HAL_GPIO_WritePin>
 800086e:	e004      	b.n	800087a <main+0x376>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000870:	2200      	movs	r2, #0
 8000872:	2110      	movs	r1, #16
 8000874:	484d      	ldr	r0, [pc, #308]	; (80009ac <main+0x4a8>)
 8000876:	f001 fa09 	bl	8001c8c <HAL_GPIO_WritePin>
	  }
	  //////////////////////////////////////////////////////////////////////////
  	  if (state == RecOne || state == RecTwo || state == RecThree){
 800087a:	4b49      	ldr	r3, [pc, #292]	; (80009a0 <main+0x49c>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b04      	cmp	r3, #4
 8000882:	d009      	beq.n	8000898 <main+0x394>
 8000884:	4b46      	ldr	r3, [pc, #280]	; (80009a0 <main+0x49c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b05      	cmp	r3, #5
 800088c:	d004      	beq.n	8000898 <main+0x394>
 800088e:	4b44      	ldr	r3, [pc, #272]	; (80009a0 <main+0x49c>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b06      	cmp	r3, #6
 8000896:	d17a      	bne.n	800098e <main+0x48a>
  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, on);
 8000898:	2201      	movs	r2, #1
 800089a:	2120      	movs	r1, #32
 800089c:	4843      	ldr	r0, [pc, #268]	; (80009ac <main+0x4a8>)
 800089e:	f001 f9f5 	bl	8001c8c <HAL_GPIO_WritePin>

  	  	  if (state == RecOne){
 80008a2:	4b3f      	ldr	r3, [pc, #252]	; (80009a0 <main+0x49c>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b04      	cmp	r3, #4
 80008aa:	d11c      	bne.n	80008e6 <main+0x3e2>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, on);
 80008ac:	4b3d      	ldr	r3, [pc, #244]	; (80009a4 <main+0x4a0>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b3d      	ldr	r3, [pc, #244]	; (80009a8 <main+0x4a4>)
 80008b2:	fb83 1302 	smull	r1, r3, r3, r2
 80008b6:	1159      	asrs	r1, r3, #5
 80008b8:	17d3      	asrs	r3, r2, #31
 80008ba:	1acb      	subs	r3, r1, r3
 80008bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008c0:	fb01 f303 	mul.w	r3, r1, r3
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	2bf9      	cmp	r3, #249	; 0xf9
 80008c8:	dc06      	bgt.n	80008d8 <main+0x3d4>
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d0:	4832      	ldr	r0, [pc, #200]	; (800099c <main+0x498>)
 80008d2:	f001 f9db 	bl	8001c8c <HAL_GPIO_WritePin>
 80008d6:	e00c      	b.n	80008f2 <main+0x3ee>
  	  		  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008de:	482f      	ldr	r0, [pc, #188]	; (800099c <main+0x498>)
 80008e0:	f001 f9d4 	bl	8001c8c <HAL_GPIO_WritePin>
 80008e4:	e005      	b.n	80008f2 <main+0x3ee>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ec:	482b      	ldr	r0, [pc, #172]	; (800099c <main+0x498>)
 80008ee:	f001 f9cd 	bl	8001c8c <HAL_GPIO_WritePin>

  	  	  if (state == RecTwo){
 80008f2:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <main+0x49c>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b05      	cmp	r3, #5
 80008fa:	d11c      	bne.n	8000936 <main+0x432>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, on);
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <main+0x4a0>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <main+0x4a4>)
 8000902:	fb83 1302 	smull	r1, r3, r3, r2
 8000906:	1159      	asrs	r1, r3, #5
 8000908:	17d3      	asrs	r3, r2, #31
 800090a:	1acb      	subs	r3, r1, r3
 800090c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000910:	fb01 f303 	mul.w	r3, r1, r3
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	2bf9      	cmp	r3, #249	; 0xf9
 8000918:	dc06      	bgt.n	8000928 <main+0x424>
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000920:	4822      	ldr	r0, [pc, #136]	; (80009ac <main+0x4a8>)
 8000922:	f001 f9b3 	bl	8001c8c <HAL_GPIO_WritePin>
 8000926:	e00c      	b.n	8000942 <main+0x43e>
  	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800092e:	481f      	ldr	r0, [pc, #124]	; (80009ac <main+0x4a8>)
 8000930:	f001 f9ac 	bl	8001c8c <HAL_GPIO_WritePin>
 8000934:	e005      	b.n	8000942 <main+0x43e>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093c:	481b      	ldr	r0, [pc, #108]	; (80009ac <main+0x4a8>)
 800093e:	f001 f9a5 	bl	8001c8c <HAL_GPIO_WritePin>

  	  	  if (state == RecThree){
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <main+0x49c>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b06      	cmp	r3, #6
 800094a:	d11a      	bne.n	8000982 <main+0x47e>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, on);
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <main+0x4a0>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <main+0x4a4>)
 8000952:	fb83 1302 	smull	r1, r3, r3, r2
 8000956:	1159      	asrs	r1, r3, #5
 8000958:	17d3      	asrs	r3, r2, #31
 800095a:	1acb      	subs	r3, r1, r3
 800095c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000960:	fb01 f303 	mul.w	r3, r1, r3
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	2bf9      	cmp	r3, #249	; 0xf9
 8000968:	dc05      	bgt.n	8000976 <main+0x472>
 800096a:	2201      	movs	r2, #1
 800096c:	2110      	movs	r1, #16
 800096e:	480f      	ldr	r0, [pc, #60]	; (80009ac <main+0x4a8>)
 8000970:	f001 f98c 	bl	8001c8c <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8000974:	e010      	b.n	8000998 <main+0x494>
  	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000976:	2200      	movs	r2, #0
 8000978:	2110      	movs	r1, #16
 800097a:	480c      	ldr	r0, [pc, #48]	; (80009ac <main+0x4a8>)
 800097c:	f001 f986 	bl	8001c8c <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8000980:	e00a      	b.n	8000998 <main+0x494>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000982:	2200      	movs	r2, #0
 8000984:	2110      	movs	r1, #16
 8000986:	4809      	ldr	r0, [pc, #36]	; (80009ac <main+0x4a8>)
 8000988:	f001 f980 	bl	8001c8c <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 800098c:	e004      	b.n	8000998 <main+0x494>
  	  }
  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, off);
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <main+0x4a8>)
 8000994:	f001 f97a 	bl	8001c8c <HAL_GPIO_WritePin>
	  if (exti){
 8000998:	e5e6      	b.n	8000568 <main+0x64>
 800099a:	bf00      	nop
 800099c:	40020000 	.word	0x40020000
 80009a0:	20000048 	.word	0x20000048
 80009a4:	2000002c 	.word	0x2000002c
 80009a8:	10624dd3 	.word	0x10624dd3
 80009ac:	40020400 	.word	0x40020400

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b094      	sub	sp, #80	; 0x50
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	2234      	movs	r2, #52	; 0x34
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 faa4 	bl	8002f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <SystemClock_Config+0xd4>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a29      	ldr	r2, [pc, #164]	; (8000a84 <SystemClock_Config+0xd4>)
 80009de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
 80009e4:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <SystemClock_Config+0xd4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009f0:	2300      	movs	r3, #0
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <SystemClock_Config+0xd8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009fc:	4a22      	ldr	r2, [pc, #136]	; (8000a88 <SystemClock_Config+0xd8>)
 80009fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a02:	6013      	str	r3, [r2, #0]
 8000a04:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <SystemClock_Config+0xd8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a14:	2301      	movs	r3, #1
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a18:	2310      	movs	r3, #16
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a20:	2300      	movs	r3, #0
 8000a22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a24:	2310      	movs	r3, #16
 8000a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a28:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 fc1c 	bl	800227c <HAL_RCC_OscConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a4a:	f000 f979 	bl	8000d40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4e:	230f      	movs	r3, #15
 8000a50:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a52:	2302      	movs	r3, #2
 8000a54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a64:	f107 0308 	add.w	r3, r7, #8
 8000a68:	2102      	movs	r1, #2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 f94c 	bl	8001d08 <HAL_RCC_ClockConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a76:	f000 f963 	bl	8000d40 <Error_Handler>
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	3750      	adds	r7, #80	; 0x50
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40007000 	.word	0x40007000

08000a8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a92:	463b      	mov	r3, r7
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <MX_ADC1_Init+0x98>)
 8000aa0:	4a21      	ldr	r2, [pc, #132]	; (8000b28 <MX_ADC1_Init+0x9c>)
 8000aa2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <MX_ADC1_Init+0x98>)
 8000aa6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aaa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <MX_ADC1_Init+0x98>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <MX_ADC1_Init+0x98>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_ADC1_Init+0x98>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <MX_ADC1_Init+0x98>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_ADC1_Init+0x98>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_ADC1_Init+0x98>)
 8000ace:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <MX_ADC1_Init+0xa0>)
 8000ad0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_ADC1_Init+0x98>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_ADC1_Init+0x98>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_ADC1_Init+0x98>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_ADC1_Init+0x98>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aec:	480d      	ldr	r0, [pc, #52]	; (8000b24 <MX_ADC1_Init+0x98>)
 8000aee:	f000 fb31 	bl	8001154 <HAL_ADC_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000af8:	f000 f922 	bl	8000d40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000afc:	230e      	movs	r3, #14
 8000afe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b00:	2301      	movs	r3, #1
 8000b02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b08:	463b      	mov	r3, r7
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_ADC1_Init+0x98>)
 8000b0e:	f000 fb65 	bl	80011dc <HAL_ADC_ConfigChannel>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b18:	f000 f912 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000054 	.word	0x20000054
 8000b28:	40012000 	.word	0x40012000
 8000b2c:	0f000001 	.word	0x0f000001

08000b30 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b36:	463b      	mov	r3, r7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_DAC_Init+0x4c>)
 8000b40:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <MX_DAC_Init+0x50>)
 8000b42:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <MX_DAC_Init+0x4c>)
 8000b46:	f000 fe88 	bl	800185a <HAL_DAC_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000b50:	f000 f8f6 	bl	8000d40 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	4619      	mov	r1, r3
 8000b62:	4806      	ldr	r0, [pc, #24]	; (8000b7c <MX_DAC_Init+0x4c>)
 8000b64:	f000 fe9b 	bl	800189e <HAL_DAC_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000b6e:	f000 f8e7 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000009c 	.word	0x2000009c
 8000b80:	40007400 	.word	0x40007400

08000b84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <MX_USART2_UART_Init+0x48>)
 8000b8a:	4a11      	ldr	r2, [pc, #68]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_USART2_UART_Init+0x48>)
 8000b90:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <MX_USART2_UART_Init+0x50>)
 8000b92:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <MX_USART2_UART_Init+0x48>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <MX_USART2_UART_Init+0x48>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <MX_USART2_UART_Init+0x48>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_USART2_UART_Init+0x48>)
 8000ba8:	220c      	movs	r2, #12
 8000baa:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <MX_USART2_UART_Init+0x48>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_USART2_UART_Init+0x48>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_USART2_UART_Init+0x48>)
 8000bba:	f001 fdb9 	bl	8002730 <HAL_UART_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000bc4:	f000 f8bc 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200000b4 	.word	0x200000b4
 8000bd0:	40004400 	.word	0x40004400
 8000bd4:	0007a120 	.word	0x0007a120

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b4d      	ldr	r3, [pc, #308]	; (8000d28 <MX_GPIO_Init+0x150>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a4c      	ldr	r2, [pc, #304]	; (8000d28 <MX_GPIO_Init+0x150>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b4a      	ldr	r3, [pc, #296]	; (8000d28 <MX_GPIO_Init+0x150>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b46      	ldr	r3, [pc, #280]	; (8000d28 <MX_GPIO_Init+0x150>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a45      	ldr	r2, [pc, #276]	; (8000d28 <MX_GPIO_Init+0x150>)
 8000c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b43      	ldr	r3, [pc, #268]	; (8000d28 <MX_GPIO_Init+0x150>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	4b3f      	ldr	r3, [pc, #252]	; (8000d28 <MX_GPIO_Init+0x150>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a3e      	ldr	r2, [pc, #248]	; (8000d28 <MX_GPIO_Init+0x150>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b3c      	ldr	r3, [pc, #240]	; (8000d28 <MX_GPIO_Init+0x150>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b38      	ldr	r3, [pc, #224]	; (8000d28 <MX_GPIO_Init+0x150>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a37      	ldr	r2, [pc, #220]	; (8000d28 <MX_GPIO_Init+0x150>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b35      	ldr	r3, [pc, #212]	; (8000d28 <MX_GPIO_Init+0x150>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000c64:	4831      	ldr	r0, [pc, #196]	; (8000d2c <MX_GPIO_Init+0x154>)
 8000c66:	f001 f811 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000c70:	482f      	ldr	r0, [pc, #188]	; (8000d30 <MX_GPIO_Init+0x158>)
 8000c72:	f001 f80b 	bl	8001c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c7c:	4b2d      	ldr	r3, [pc, #180]	; (8000d34 <MX_GPIO_Init+0x15c>)
 8000c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	482b      	ldr	r0, [pc, #172]	; (8000d38 <MX_GPIO_Init+0x160>)
 8000c8c:	f000 fe54 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8000c90:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4820      	ldr	r0, [pc, #128]	; (8000d2c <MX_GPIO_Init+0x154>)
 8000caa:	f000 fe45 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 8000cae:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb4:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <MX_GPIO_Init+0x164>)
 8000cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	481a      	ldr	r0, [pc, #104]	; (8000d2c <MX_GPIO_Init+0x154>)
 8000cc4:	f000 fe38 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8000cc8:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4813      	ldr	r0, [pc, #76]	; (8000d30 <MX_GPIO_Init+0x158>)
 8000ce2:	f000 fe29 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_GPIO_Init+0x164>)
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <MX_GPIO_Init+0x158>)
 8000cfc:	f000 fe1c 	bl	8001938 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	2017      	movs	r0, #23
 8000d06:	f000 fd72 	bl	80017ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d0a:	2017      	movs	r0, #23
 8000d0c:	f000 fd8b 	bl	8001826 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	2028      	movs	r0, #40	; 0x28
 8000d16:	f000 fd6a 	bl	80017ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d1a:	2028      	movs	r0, #40	; 0x28
 8000d1c:	f000 fd83 	bl	8001826 <HAL_NVIC_EnableIRQ>

}
 8000d20:	bf00      	nop
 8000d22:	3728      	adds	r7, #40	; 0x28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40020400 	.word	0x40020400
 8000d34:	10210000 	.word	0x10210000
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	10110000 	.word	0x10110000

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d8e:	2007      	movs	r0, #7
 8000d90:	f000 fd22 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40023800 	.word	0x40023800

08000da0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <HAL_ADC_MspInit+0x7c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d127      	bne.n	8000e12 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_ADC_MspInit+0x80>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	4a15      	ldr	r2, [pc, #84]	; (8000e20 <HAL_ADC_MspInit+0x80>)
 8000dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <HAL_ADC_MspInit+0x80>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_ADC_MspInit+0x80>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <HAL_ADC_MspInit+0x80>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <HAL_ADC_MspInit+0x80>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC4     ------> ADC1_IN14 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <HAL_ADC_MspInit+0x84>)
 8000e0e:	f000 fd93 	bl	8001938 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	; 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40012000 	.word	0x40012000
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020800 	.word	0x40020800

08000e28 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a17      	ldr	r2, [pc, #92]	; (8000ea4 <HAL_DAC_MspInit+0x7c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d127      	bne.n	8000e9a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <HAL_DAC_MspInit+0x80>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	4a15      	ldr	r2, [pc, #84]	; (8000ea8 <HAL_DAC_MspInit+0x80>)
 8000e54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e58:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <HAL_DAC_MspInit+0x80>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_DAC_MspInit+0x80>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <HAL_DAC_MspInit+0x80>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_DAC_MspInit+0x80>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e82:	2310      	movs	r3, #16
 8000e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e86:	2303      	movs	r3, #3
 8000e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <HAL_DAC_MspInit+0x84>)
 8000e96:	f000 fd4f 	bl	8001938 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40007400 	.word	0x40007400
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020000 	.word	0x40020000

08000eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <HAL_UART_MspInit+0x84>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d12b      	bne.n	8000f2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_UART_MspInit+0x88>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <HAL_UART_MspInit+0x8c>)
 8000f26:	f000 fd07 	bl	8001938 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3728      	adds	r7, #40	; 0x28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40004400 	.word	0x40004400
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020000 	.word	0x40020000

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <BusFault_Handler+0x4>

08000f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <UsageFault_Handler+0x4>

08000f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f94:	f000 f8be 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	exti = on;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <EXTI9_5_IRQHandler+0x2c>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000fa6:	2040      	movs	r0, #64	; 0x40
 8000fa8:	f000 fe8a 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000fac:	2080      	movs	r0, #128	; 0x80
 8000fae:	f000 fe87 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000fb2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fb6:	f000 fe83 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000fba:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fbe:	f000 fe7f 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000004c 	.word	0x2000004c

08000fcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	exti = on;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <EXTI15_10_IRQHandler+0x20>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000fd6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fda:	f000 fe71 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fde:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fe2:	f000 fe6d 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000004c 	.word	0x2000004c

08000ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <SystemInit+0x28>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a07      	ldr	r2, [pc, #28]	; (8001018 <SystemInit+0x28>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <SystemInit+0x28>)
 8001006:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800100a:	609a      	str	r2, [r3, #8]
#endif
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001020:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001022:	e003      	b.n	800102c <LoopCopyDataInit>

08001024 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001026:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001028:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800102a:	3104      	adds	r1, #4

0800102c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800102c:	480b      	ldr	r0, [pc, #44]	; (800105c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001030:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001032:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001034:	d3f6      	bcc.n	8001024 <CopyDataInit>
  ldr  r2, =_sbss
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001038:	e002      	b.n	8001040 <LoopFillZerobss>

0800103a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800103a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800103c:	f842 3b04 	str.w	r3, [r2], #4

08001040 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001042:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001044:	d3f9      	bcc.n	800103a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001046:	f7ff ffd3 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104a:	f001 ff3b 	bl	8002ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104e:	f7ff fa59 	bl	8000504 <main>
  bx  lr    
 8001052:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001054:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001058:	08002f5c 	.word	0x08002f5c
  ldr  r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001060:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001064:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001068:	20000104 	.word	0x20000104

0800106c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC_IRQHandler>
	...

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_Init+0x40>)
 800107a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_Init+0x40>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_Init+0x40>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 fb9d 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109e:	2000      	movs	r0, #0
 80010a0:	f000 f808 	bl	80010b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a4:	f7ff fe54 	bl	8000d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023c00 	.word	0x40023c00

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x54>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x58>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fbb5 	bl	8001842 <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e00e      	b.n	8001100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d80a      	bhi.n	80010fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f000 fb7d 	bl	80017ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <HAL_InitTick+0x5c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e000      	b.n	8001100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000000 	.word	0x20000000
 800110c:	20000008 	.word	0x20000008
 8001110:	20000004 	.word	0x20000004

08001114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008
 8001138:	20000100 	.word	0x20000100

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000100 	.word	0x20000100

08001154 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e033      	b.n	80011d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	2b00      	cmp	r3, #0
 8001170:	d109      	bne.n	8001186 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fe14 	bl	8000da0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	2b00      	cmp	r3, #0
 8001190:	d118      	bne.n	80011c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800119a:	f023 0302 	bic.w	r3, r3, #2
 800119e:	f043 0202 	orr.w	r2, r3, #2
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 f94a 	bl	8001440 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f023 0303 	bic.w	r3, r3, #3
 80011ba:	f043 0201 	orr.w	r2, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
 80011c2:	e001      	b.n	80011c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d101      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x1c>
 80011f4:	2302      	movs	r3, #2
 80011f6:	e113      	b.n	8001420 <HAL_ADC_ConfigChannel+0x244>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b09      	cmp	r3, #9
 8001206:	d925      	bls.n	8001254 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	68d9      	ldr	r1, [r3, #12]
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	4613      	mov	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4413      	add	r3, r2
 800121c:	3b1e      	subs	r3, #30
 800121e:	2207      	movs	r2, #7
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43da      	mvns	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	400a      	ands	r2, r1
 800122c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68d9      	ldr	r1, [r3, #12]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	b29b      	uxth	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	4603      	mov	r3, r0
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4403      	add	r3, r0
 8001246:	3b1e      	subs	r3, #30
 8001248:	409a      	lsls	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	e022      	b.n	800129a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6919      	ldr	r1, [r3, #16]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	b29b      	uxth	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	4613      	mov	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4413      	add	r3, r2
 8001268:	2207      	movs	r2, #7
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	400a      	ands	r2, r1
 8001276:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6919      	ldr	r1, [r3, #16]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	b29b      	uxth	r3, r3
 8001288:	4618      	mov	r0, r3
 800128a:	4603      	mov	r3, r0
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4403      	add	r3, r0
 8001290:	409a      	lsls	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	430a      	orrs	r2, r1
 8001298:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d824      	bhi.n	80012ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	3b05      	subs	r3, #5
 80012b4:	221f      	movs	r2, #31
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	400a      	ands	r2, r1
 80012c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	3b05      	subs	r3, #5
 80012de:	fa00 f203 	lsl.w	r2, r0, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	635a      	str	r2, [r3, #52]	; 0x34
 80012ea:	e04c      	b.n	8001386 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b0c      	cmp	r3, #12
 80012f2:	d824      	bhi.n	800133e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	3b23      	subs	r3, #35	; 0x23
 8001306:	221f      	movs	r2, #31
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43da      	mvns	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	400a      	ands	r2, r1
 8001314:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	b29b      	uxth	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	3b23      	subs	r3, #35	; 0x23
 8001330:	fa00 f203 	lsl.w	r2, r0, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	631a      	str	r2, [r3, #48]	; 0x30
 800133c:	e023      	b.n	8001386 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	3b41      	subs	r3, #65	; 0x41
 8001350:	221f      	movs	r2, #31
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	400a      	ands	r2, r1
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	4618      	mov	r0, r3
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	4613      	mov	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	3b41      	subs	r3, #65	; 0x41
 800137a:	fa00 f203 	lsl.w	r2, r0, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001386:	4b29      	ldr	r3, [pc, #164]	; (800142c <HAL_ADC_ConfigChannel+0x250>)
 8001388:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a28      	ldr	r2, [pc, #160]	; (8001430 <HAL_ADC_ConfigChannel+0x254>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d10f      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1d8>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b12      	cmp	r3, #18
 800139a:	d10b      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1d      	ldr	r2, [pc, #116]	; (8001430 <HAL_ADC_ConfigChannel+0x254>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d12b      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x23a>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a1c      	ldr	r2, [pc, #112]	; (8001434 <HAL_ADC_ConfigChannel+0x258>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d003      	beq.n	80013d0 <HAL_ADC_ConfigChannel+0x1f4>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b11      	cmp	r3, #17
 80013ce:	d122      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a11      	ldr	r2, [pc, #68]	; (8001434 <HAL_ADC_ConfigChannel+0x258>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d111      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_ADC_ConfigChannel+0x25c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a11      	ldr	r2, [pc, #68]	; (800143c <HAL_ADC_ConfigChannel+0x260>)
 80013f8:	fba2 2303 	umull	r2, r3, r2, r3
 80013fc:	0c9a      	lsrs	r2, r3, #18
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001408:	e002      	b.n	8001410 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	3b01      	subs	r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f9      	bne.n	800140a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	40012300 	.word	0x40012300
 8001430:	40012000 	.word	0x40012000
 8001434:	10000012 	.word	0x10000012
 8001438:	20000000 	.word	0x20000000
 800143c:	431bde83 	.word	0x431bde83

08001440 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001448:	4b79      	ldr	r3, [pc, #484]	; (8001630 <ADC_Init+0x1f0>)
 800144a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	431a      	orrs	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001474:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6859      	ldr	r1, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	021a      	lsls	r2, r3, #8
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001498:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6859      	ldr	r1, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6899      	ldr	r1, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	4a58      	ldr	r2, [pc, #352]	; (8001634 <ADC_Init+0x1f4>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d022      	beq.n	800151e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6899      	ldr	r1, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001508:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6899      	ldr	r1, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	e00f      	b.n	800153e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800152c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800153c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0202 	bic.w	r2, r2, #2
 800154c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6899      	ldr	r1, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7e1b      	ldrb	r3, [r3, #24]
 8001558:	005a      	lsls	r2, r3, #1
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d01b      	beq.n	80015a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800157a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800158a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6859      	ldr	r1, [r3, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	3b01      	subs	r3, #1
 8001598:	035a      	lsls	r2, r3, #13
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	e007      	b.n	80015b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	051a      	lsls	r2, r3, #20
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6899      	ldr	r1, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015f6:	025a      	lsls	r2, r3, #9
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800160e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6899      	ldr	r1, [r3, #8]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	029a      	lsls	r2, r3, #10
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	609a      	str	r2, [r3, #8]
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40012300 	.word	0x40012300
 8001634:	0f000001 	.word	0x0f000001

08001638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001654:	4013      	ands	r3, r2
 8001656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166a:	4a04      	ldr	r2, [pc, #16]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	60d3      	str	r3, [r2, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <__NVIC_GetPriorityGrouping+0x18>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	f003 0307 	and.w	r3, r3, #7
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	db0b      	blt.n	80016c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	f003 021f 	and.w	r2, r3, #31
 80016b4:	4907      	ldr	r1, [pc, #28]	; (80016d4 <__NVIC_EnableIRQ+0x38>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	095b      	lsrs	r3, r3, #5
 80016bc:	2001      	movs	r0, #1
 80016be:	fa00 f202 	lsl.w	r2, r0, r2
 80016c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000e100 	.word	0xe000e100

080016d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	db0a      	blt.n	8001702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	490c      	ldr	r1, [pc, #48]	; (8001724 <__NVIC_SetPriority+0x4c>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	0112      	lsls	r2, r2, #4
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	440b      	add	r3, r1
 80016fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001700:	e00a      	b.n	8001718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4908      	ldr	r1, [pc, #32]	; (8001728 <__NVIC_SetPriority+0x50>)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	3b04      	subs	r3, #4
 8001710:	0112      	lsls	r2, r2, #4
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	440b      	add	r3, r1
 8001716:	761a      	strb	r2, [r3, #24]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000e100 	.word	0xe000e100
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f1c3 0307 	rsb	r3, r3, #7
 8001746:	2b04      	cmp	r3, #4
 8001748:	bf28      	it	cs
 800174a:	2304      	movcs	r3, #4
 800174c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3304      	adds	r3, #4
 8001752:	2b06      	cmp	r3, #6
 8001754:	d902      	bls.n	800175c <NVIC_EncodePriority+0x30>
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3b03      	subs	r3, #3
 800175a:	e000      	b.n	800175e <NVIC_EncodePriority+0x32>
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	401a      	ands	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001774:	f04f 31ff 	mov.w	r1, #4294967295
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43d9      	mvns	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	4313      	orrs	r3, r2
         );
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a4:	d301      	bcc.n	80017aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00f      	b.n	80017ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <SysTick_Config+0x40>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b2:	210f      	movs	r1, #15
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f7ff ff8e 	bl	80016d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <SysTick_Config+0x40>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <SysTick_Config+0x40>)
 80017c4:	2207      	movs	r2, #7
 80017c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	e000e010 	.word	0xe000e010

080017d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff29 	bl	8001638 <__NVIC_SetPriorityGrouping>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001800:	f7ff ff3e 	bl	8001680 <__NVIC_GetPriorityGrouping>
 8001804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f7ff ff8e 	bl	800172c <NVIC_EncodePriority>
 8001810:	4602      	mov	r2, r0
 8001812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff5d 	bl	80016d8 <__NVIC_SetPriority>
}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff31 	bl	800169c <__NVIC_EnableIRQ>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ffa2 	bl	8001794 <SysTick_Config>
 8001850:	4603      	mov	r3, r0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e014      	b.n	8001896 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	791b      	ldrb	r3, [r3, #4]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d105      	bne.n	8001882 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff fad3 	bl	8000e28 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2202      	movs	r2, #2
 8001886:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800189e:	b480      	push	{r7}
 80018a0:	b087      	sub	sp, #28
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	795b      	ldrb	r3, [r3, #5]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_DAC_ConfigChannel+0x20>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e036      	b.n	800192c <HAL_DAC_ConfigChannel+0x8e>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2201      	movs	r2, #1
 80018c2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2202      	movs	r2, #2
 80018c8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80018d2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	4013      	ands	r3, r2
 80018e2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6819      	ldr	r1, [r3, #0]
 800190c:	22c0      	movs	r2, #192	; 0xc0
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43da      	mvns	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	400a      	ands	r2, r1
 800191c:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2201      	movs	r2, #1
 8001922:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	371c      	adds	r7, #28
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	e165      	b.n	8001c20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001954:	2201      	movs	r2, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	429a      	cmp	r2, r3
 800196e:	f040 8154 	bne.w	8001c1a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d00b      	beq.n	8001992 <HAL_GPIO_Init+0x5a>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d007      	beq.n	8001992 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001986:	2b11      	cmp	r3, #17
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b12      	cmp	r3, #18
 8001990:	d130      	bne.n	80019f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	2203      	movs	r2, #3
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c8:	2201      	movs	r2, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 0201 	and.w	r2, r3, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0xfc>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b12      	cmp	r3, #18
 8001a32:	d123      	bne.n	8001a7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	08da      	lsrs	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3208      	adds	r2, #8
 8001a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	08da      	lsrs	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3208      	adds	r2, #8
 8001a76:	69b9      	ldr	r1, [r7, #24]
 8001a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0203 	and.w	r2, r3, #3
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80ae 	beq.w	8001c1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <HAL_GPIO_Init+0x2fc>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	4a5b      	ldr	r2, [pc, #364]	; (8001c34 <HAL_GPIO_Init+0x2fc>)
 8001ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001acc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ace:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <HAL_GPIO_Init+0x2fc>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ada:	4a57      	ldr	r2, [pc, #348]	; (8001c38 <HAL_GPIO_Init+0x300>)
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	089b      	lsrs	r3, r3, #2
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	220f      	movs	r2, #15
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4e      	ldr	r2, [pc, #312]	; (8001c3c <HAL_GPIO_Init+0x304>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d025      	beq.n	8001b52 <HAL_GPIO_Init+0x21a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4d      	ldr	r2, [pc, #308]	; (8001c40 <HAL_GPIO_Init+0x308>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d01f      	beq.n	8001b4e <HAL_GPIO_Init+0x216>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4c      	ldr	r2, [pc, #304]	; (8001c44 <HAL_GPIO_Init+0x30c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d019      	beq.n	8001b4a <HAL_GPIO_Init+0x212>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4b      	ldr	r2, [pc, #300]	; (8001c48 <HAL_GPIO_Init+0x310>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d013      	beq.n	8001b46 <HAL_GPIO_Init+0x20e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4a      	ldr	r2, [pc, #296]	; (8001c4c <HAL_GPIO_Init+0x314>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00d      	beq.n	8001b42 <HAL_GPIO_Init+0x20a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a49      	ldr	r2, [pc, #292]	; (8001c50 <HAL_GPIO_Init+0x318>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d007      	beq.n	8001b3e <HAL_GPIO_Init+0x206>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a48      	ldr	r2, [pc, #288]	; (8001c54 <HAL_GPIO_Init+0x31c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d101      	bne.n	8001b3a <HAL_GPIO_Init+0x202>
 8001b36:	2306      	movs	r3, #6
 8001b38:	e00c      	b.n	8001b54 <HAL_GPIO_Init+0x21c>
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	e00a      	b.n	8001b54 <HAL_GPIO_Init+0x21c>
 8001b3e:	2305      	movs	r3, #5
 8001b40:	e008      	b.n	8001b54 <HAL_GPIO_Init+0x21c>
 8001b42:	2304      	movs	r3, #4
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x21c>
 8001b46:	2303      	movs	r3, #3
 8001b48:	e004      	b.n	8001b54 <HAL_GPIO_Init+0x21c>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e002      	b.n	8001b54 <HAL_GPIO_Init+0x21c>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_GPIO_Init+0x21c>
 8001b52:	2300      	movs	r3, #0
 8001b54:	69fa      	ldr	r2, [r7, #28]
 8001b56:	f002 0203 	and.w	r2, r2, #3
 8001b5a:	0092      	lsls	r2, r2, #2
 8001b5c:	4093      	lsls	r3, r2
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b64:	4934      	ldr	r1, [pc, #208]	; (8001c38 <HAL_GPIO_Init+0x300>)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	089b      	lsrs	r3, r3, #2
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b72:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <HAL_GPIO_Init+0x320>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b96:	4a30      	ldr	r2, [pc, #192]	; (8001c58 <HAL_GPIO_Init+0x320>)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b9c:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <HAL_GPIO_Init+0x320>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc0:	4a25      	ldr	r2, [pc, #148]	; (8001c58 <HAL_GPIO_Init+0x320>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_GPIO_Init+0x320>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bea:	4a1b      	ldr	r2, [pc, #108]	; (8001c58 <HAL_GPIO_Init+0x320>)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_GPIO_Init+0x320>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c14:	4a10      	ldr	r2, [pc, #64]	; (8001c58 <HAL_GPIO_Init+0x320>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	61fb      	str	r3, [r7, #28]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	2b0f      	cmp	r3, #15
 8001c24:	f67f ae96 	bls.w	8001954 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c28:	bf00      	nop
 8001c2a:	3724      	adds	r7, #36	; 0x24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40013800 	.word	0x40013800
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40020c00 	.word	0x40020c00
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40021400 	.word	0x40021400
 8001c54:	40021800 	.word	0x40021800
 8001c58:	40013c00 	.word	0x40013c00

08001c5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e001      	b.n	8001c7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c9c:	787b      	ldrb	r3, [r7, #1]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca2:	887a      	ldrh	r2, [r7, #2]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ca8:	e003      	b.n	8001cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001caa:	887b      	ldrh	r3, [r7, #2]
 8001cac:	041a      	lsls	r2, r3, #16
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	619a      	str	r2, [r3, #24]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cd6:	4a05      	ldr	r2, [pc, #20]	; (8001cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f806 	bl	8001cf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40013c00 	.word	0x40013c00

08001cf0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0cc      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b68      	ldr	r3, [pc, #416]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d90c      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b65      	ldr	r3, [pc, #404]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b63      	ldr	r3, [pc, #396]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0b8      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d5c:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a58      	ldr	r2, [pc, #352]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d74:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4a52      	ldr	r2, [pc, #328]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d80:	4b50      	ldr	r3, [pc, #320]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	494d      	ldr	r1, [pc, #308]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d044      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d119      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e07f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc6:	4b3f      	ldr	r3, [pc, #252]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e06f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e067      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de6:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f023 0203 	bic.w	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4934      	ldr	r1, [pc, #208]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df8:	f7ff f9a0 	bl	800113c <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e00:	f7ff f99c 	bl	800113c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e04f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 020c 	and.w	r2, r3, #12
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1eb      	bne.n	8001e00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d20c      	bcs.n	8001e50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e032      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4916      	ldr	r1, [pc, #88]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	490e      	ldr	r1, [pc, #56]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e8e:	f000 f855 	bl	8001f3c <HAL_RCC_GetSysClockFreq>
 8001e92:	4601      	mov	r1, r0
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	5cd3      	ldrb	r3, [r2, r3]
 8001ea2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f900 	bl	80010b4 <HAL_InitTick>

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023c00 	.word	0x40023c00
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	08002f34 	.word	0x08002f34
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000000 	.word	0x20000000

08001eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ef0:	f7ff fff0 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001ef4:	4601      	mov	r1, r0
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	0a9b      	lsrs	r3, r3, #10
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4a03      	ldr	r2, [pc, #12]	; (8001f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	08002f44 	.word	0x08002f44

08001f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f18:	f7ff ffdc 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001f1c:	4601      	mov	r1, r0
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	0b5b      	lsrs	r3, r3, #13
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40023800 	.word	0x40023800
 8001f38:	08002f44 	.word	0x08002f44

08001f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f56:	4bc6      	ldr	r3, [pc, #792]	; (8002270 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b0c      	cmp	r3, #12
 8001f60:	f200 817e 	bhi.w	8002260 <HAL_RCC_GetSysClockFreq+0x324>
 8001f64:	a201      	add	r2, pc, #4	; (adr r2, 8001f6c <HAL_RCC_GetSysClockFreq+0x30>)
 8001f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6a:	bf00      	nop
 8001f6c:	08001fa1 	.word	0x08001fa1
 8001f70:	08002261 	.word	0x08002261
 8001f74:	08002261 	.word	0x08002261
 8001f78:	08002261 	.word	0x08002261
 8001f7c:	08001fa7 	.word	0x08001fa7
 8001f80:	08002261 	.word	0x08002261
 8001f84:	08002261 	.word	0x08002261
 8001f88:	08002261 	.word	0x08002261
 8001f8c:	08001fad 	.word	0x08001fad
 8001f90:	08002261 	.word	0x08002261
 8001f94:	08002261 	.word	0x08002261
 8001f98:	08002261 	.word	0x08002261
 8001f9c:	08002109 	.word	0x08002109
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fa0:	4bb4      	ldr	r3, [pc, #720]	; (8002274 <HAL_RCC_GetSysClockFreq+0x338>)
 8001fa2:	613b      	str	r3, [r7, #16]
       break;
 8001fa4:	e15f      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fa6:	4bb4      	ldr	r3, [pc, #720]	; (8002278 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001fa8:	613b      	str	r3, [r7, #16]
      break;
 8001faa:	e15c      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fac:	4bb0      	ldr	r3, [pc, #704]	; (8002270 <HAL_RCC_GetSysClockFreq+0x334>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fb4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fb6:	4bae      	ldr	r3, [pc, #696]	; (8002270 <HAL_RCC_GetSysClockFreq+0x334>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d04a      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc2:	4bab      	ldr	r3, [pc, #684]	; (8002270 <HAL_RCC_GetSysClockFreq+0x334>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	099b      	lsrs	r3, r3, #6
 8001fc8:	f04f 0400 	mov.w	r4, #0
 8001fcc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	ea03 0501 	and.w	r5, r3, r1
 8001fd8:	ea04 0602 	and.w	r6, r4, r2
 8001fdc:	4629      	mov	r1, r5
 8001fde:	4632      	mov	r2, r6
 8001fe0:	f04f 0300 	mov.w	r3, #0
 8001fe4:	f04f 0400 	mov.w	r4, #0
 8001fe8:	0154      	lsls	r4, r2, #5
 8001fea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fee:	014b      	lsls	r3, r1, #5
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4622      	mov	r2, r4
 8001ff4:	1b49      	subs	r1, r1, r5
 8001ff6:	eb62 0206 	sbc.w	r2, r2, r6
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	f04f 0400 	mov.w	r4, #0
 8002002:	0194      	lsls	r4, r2, #6
 8002004:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002008:	018b      	lsls	r3, r1, #6
 800200a:	1a5b      	subs	r3, r3, r1
 800200c:	eb64 0402 	sbc.w	r4, r4, r2
 8002010:	f04f 0100 	mov.w	r1, #0
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	00e2      	lsls	r2, r4, #3
 800201a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800201e:	00d9      	lsls	r1, r3, #3
 8002020:	460b      	mov	r3, r1
 8002022:	4614      	mov	r4, r2
 8002024:	195b      	adds	r3, r3, r5
 8002026:	eb44 0406 	adc.w	r4, r4, r6
 800202a:	f04f 0100 	mov.w	r1, #0
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	0262      	lsls	r2, r4, #9
 8002034:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002038:	0259      	lsls	r1, r3, #9
 800203a:	460b      	mov	r3, r1
 800203c:	4614      	mov	r4, r2
 800203e:	4618      	mov	r0, r3
 8002040:	4621      	mov	r1, r4
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f04f 0400 	mov.w	r4, #0
 8002048:	461a      	mov	r2, r3
 800204a:	4623      	mov	r3, r4
 800204c:	f7fe f8da 	bl	8000204 <__aeabi_uldivmod>
 8002050:	4603      	mov	r3, r0
 8002052:	460c      	mov	r4, r1
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e049      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002058:	4b85      	ldr	r3, [pc, #532]	; (8002270 <HAL_RCC_GetSysClockFreq+0x334>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	099b      	lsrs	r3, r3, #6
 800205e:	f04f 0400 	mov.w	r4, #0
 8002062:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	ea03 0501 	and.w	r5, r3, r1
 800206e:	ea04 0602 	and.w	r6, r4, r2
 8002072:	4629      	mov	r1, r5
 8002074:	4632      	mov	r2, r6
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	f04f 0400 	mov.w	r4, #0
 800207e:	0154      	lsls	r4, r2, #5
 8002080:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002084:	014b      	lsls	r3, r1, #5
 8002086:	4619      	mov	r1, r3
 8002088:	4622      	mov	r2, r4
 800208a:	1b49      	subs	r1, r1, r5
 800208c:	eb62 0206 	sbc.w	r2, r2, r6
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	f04f 0400 	mov.w	r4, #0
 8002098:	0194      	lsls	r4, r2, #6
 800209a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800209e:	018b      	lsls	r3, r1, #6
 80020a0:	1a5b      	subs	r3, r3, r1
 80020a2:	eb64 0402 	sbc.w	r4, r4, r2
 80020a6:	f04f 0100 	mov.w	r1, #0
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	00e2      	lsls	r2, r4, #3
 80020b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020b4:	00d9      	lsls	r1, r3, #3
 80020b6:	460b      	mov	r3, r1
 80020b8:	4614      	mov	r4, r2
 80020ba:	195b      	adds	r3, r3, r5
 80020bc:	eb44 0406 	adc.w	r4, r4, r6
 80020c0:	f04f 0100 	mov.w	r1, #0
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	02a2      	lsls	r2, r4, #10
 80020ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020ce:	0299      	lsls	r1, r3, #10
 80020d0:	460b      	mov	r3, r1
 80020d2:	4614      	mov	r4, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	4621      	mov	r1, r4
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f04f 0400 	mov.w	r4, #0
 80020de:	461a      	mov	r2, r3
 80020e0:	4623      	mov	r3, r4
 80020e2:	f7fe f88f 	bl	8000204 <__aeabi_uldivmod>
 80020e6:	4603      	mov	r3, r0
 80020e8:	460c      	mov	r4, r1
 80020ea:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020ec:	4b60      	ldr	r3, [pc, #384]	; (8002270 <HAL_RCC_GetSysClockFreq+0x334>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	3301      	adds	r3, #1
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	613b      	str	r3, [r7, #16]
      break;
 8002106:	e0ae      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002108:	4b59      	ldr	r3, [pc, #356]	; (8002270 <HAL_RCC_GetSysClockFreq+0x334>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002110:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002112:	4b57      	ldr	r3, [pc, #348]	; (8002270 <HAL_RCC_GetSysClockFreq+0x334>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d04a      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211e:	4b54      	ldr	r3, [pc, #336]	; (8002270 <HAL_RCC_GetSysClockFreq+0x334>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	099b      	lsrs	r3, r3, #6
 8002124:	f04f 0400 	mov.w	r4, #0
 8002128:	f240 11ff 	movw	r1, #511	; 0x1ff
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	ea03 0501 	and.w	r5, r3, r1
 8002134:	ea04 0602 	and.w	r6, r4, r2
 8002138:	4629      	mov	r1, r5
 800213a:	4632      	mov	r2, r6
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	f04f 0400 	mov.w	r4, #0
 8002144:	0154      	lsls	r4, r2, #5
 8002146:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800214a:	014b      	lsls	r3, r1, #5
 800214c:	4619      	mov	r1, r3
 800214e:	4622      	mov	r2, r4
 8002150:	1b49      	subs	r1, r1, r5
 8002152:	eb62 0206 	sbc.w	r2, r2, r6
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	f04f 0400 	mov.w	r4, #0
 800215e:	0194      	lsls	r4, r2, #6
 8002160:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002164:	018b      	lsls	r3, r1, #6
 8002166:	1a5b      	subs	r3, r3, r1
 8002168:	eb64 0402 	sbc.w	r4, r4, r2
 800216c:	f04f 0100 	mov.w	r1, #0
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	00e2      	lsls	r2, r4, #3
 8002176:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800217a:	00d9      	lsls	r1, r3, #3
 800217c:	460b      	mov	r3, r1
 800217e:	4614      	mov	r4, r2
 8002180:	195b      	adds	r3, r3, r5
 8002182:	eb44 0406 	adc.w	r4, r4, r6
 8002186:	f04f 0100 	mov.w	r1, #0
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	0262      	lsls	r2, r4, #9
 8002190:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002194:	0259      	lsls	r1, r3, #9
 8002196:	460b      	mov	r3, r1
 8002198:	4614      	mov	r4, r2
 800219a:	4618      	mov	r0, r3
 800219c:	4621      	mov	r1, r4
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f04f 0400 	mov.w	r4, #0
 80021a4:	461a      	mov	r2, r3
 80021a6:	4623      	mov	r3, r4
 80021a8:	f7fe f82c 	bl	8000204 <__aeabi_uldivmod>
 80021ac:	4603      	mov	r3, r0
 80021ae:	460c      	mov	r4, r1
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	e049      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b4:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <HAL_RCC_GetSysClockFreq+0x334>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	f04f 0400 	mov.w	r4, #0
 80021be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	ea03 0501 	and.w	r5, r3, r1
 80021ca:	ea04 0602 	and.w	r6, r4, r2
 80021ce:	4629      	mov	r1, r5
 80021d0:	4632      	mov	r2, r6
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	f04f 0400 	mov.w	r4, #0
 80021da:	0154      	lsls	r4, r2, #5
 80021dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021e0:	014b      	lsls	r3, r1, #5
 80021e2:	4619      	mov	r1, r3
 80021e4:	4622      	mov	r2, r4
 80021e6:	1b49      	subs	r1, r1, r5
 80021e8:	eb62 0206 	sbc.w	r2, r2, r6
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	f04f 0400 	mov.w	r4, #0
 80021f4:	0194      	lsls	r4, r2, #6
 80021f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021fa:	018b      	lsls	r3, r1, #6
 80021fc:	1a5b      	subs	r3, r3, r1
 80021fe:	eb64 0402 	sbc.w	r4, r4, r2
 8002202:	f04f 0100 	mov.w	r1, #0
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	00e2      	lsls	r2, r4, #3
 800220c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002210:	00d9      	lsls	r1, r3, #3
 8002212:	460b      	mov	r3, r1
 8002214:	4614      	mov	r4, r2
 8002216:	195b      	adds	r3, r3, r5
 8002218:	eb44 0406 	adc.w	r4, r4, r6
 800221c:	f04f 0100 	mov.w	r1, #0
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	02a2      	lsls	r2, r4, #10
 8002226:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800222a:	0299      	lsls	r1, r3, #10
 800222c:	460b      	mov	r3, r1
 800222e:	4614      	mov	r4, r2
 8002230:	4618      	mov	r0, r3
 8002232:	4621      	mov	r1, r4
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f04f 0400 	mov.w	r4, #0
 800223a:	461a      	mov	r2, r3
 800223c:	4623      	mov	r3, r4
 800223e:	f7fd ffe1 	bl	8000204 <__aeabi_uldivmod>
 8002242:	4603      	mov	r3, r0
 8002244:	460c      	mov	r4, r1
 8002246:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_GetSysClockFreq+0x334>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	0f1b      	lsrs	r3, r3, #28
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	fbb2 f3f3 	udiv	r3, r2, r3
 800225c:	613b      	str	r3, [r7, #16]
      break;
 800225e:	e002      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <HAL_RCC_GetSysClockFreq+0x338>)
 8002262:	613b      	str	r3, [r7, #16]
      break;
 8002264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002266:	693b      	ldr	r3, [r7, #16]
}
 8002268:	4618      	mov	r0, r3
 800226a:	371c      	adds	r7, #28
 800226c:	46bd      	mov	sp, r7
 800226e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002270:	40023800 	.word	0x40023800
 8002274:	00f42400 	.word	0x00f42400
 8002278:	007a1200 	.word	0x007a1200

0800227c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8083 	beq.w	800239c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002296:	4b95      	ldr	r3, [pc, #596]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d019      	beq.n	80022d6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022a2:	4b92      	ldr	r3, [pc, #584]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d106      	bne.n	80022bc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022ae:	4b8f      	ldr	r3, [pc, #572]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ba:	d00c      	beq.n	80022d6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022bc:	4b8b      	ldr	r3, [pc, #556]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022c4:	2b0c      	cmp	r3, #12
 80022c6:	d112      	bne.n	80022ee <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c8:	4b88      	ldr	r3, [pc, #544]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022d4:	d10b      	bne.n	80022ee <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d6:	4b85      	ldr	r3, [pc, #532]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d05b      	beq.n	800239a <HAL_RCC_OscConfig+0x11e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d157      	bne.n	800239a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e216      	b.n	800271c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f6:	d106      	bne.n	8002306 <HAL_RCC_OscConfig+0x8a>
 80022f8:	4b7c      	ldr	r3, [pc, #496]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a7b      	ldr	r2, [pc, #492]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 80022fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	e01d      	b.n	8002342 <HAL_RCC_OscConfig+0xc6>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800230e:	d10c      	bne.n	800232a <HAL_RCC_OscConfig+0xae>
 8002310:	4b76      	ldr	r3, [pc, #472]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a75      	ldr	r2, [pc, #468]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 8002316:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b73      	ldr	r3, [pc, #460]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a72      	ldr	r2, [pc, #456]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 8002322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	e00b      	b.n	8002342 <HAL_RCC_OscConfig+0xc6>
 800232a:	4b70      	ldr	r3, [pc, #448]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a6f      	ldr	r2, [pc, #444]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 8002330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4b6d      	ldr	r3, [pc, #436]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a6c      	ldr	r2, [pc, #432]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 800233c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002340:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d013      	beq.n	8002372 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234a:	f7fe fef7 	bl	800113c <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002352:	f7fe fef3 	bl	800113c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b64      	cmp	r3, #100	; 0x64
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e1db      	b.n	800271c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002364:	4b61      	ldr	r3, [pc, #388]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0xd6>
 8002370:	e014      	b.n	800239c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002372:	f7fe fee3 	bl	800113c <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800237a:	f7fe fedf 	bl	800113c <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b64      	cmp	r3, #100	; 0x64
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e1c7      	b.n	800271c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238c:	4b57      	ldr	r3, [pc, #348]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f0      	bne.n	800237a <HAL_RCC_OscConfig+0xfe>
 8002398:	e000      	b.n	800239c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d06f      	beq.n	8002488 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023a8:	4b50      	ldr	r3, [pc, #320]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d017      	beq.n	80023e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023b4:	4b4d      	ldr	r3, [pc, #308]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d105      	bne.n	80023cc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023c0:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00b      	beq.n	80023e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023cc:	4b47      	ldr	r3, [pc, #284]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023d4:	2b0c      	cmp	r3, #12
 80023d6:	d11c      	bne.n	8002412 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023d8:	4b44      	ldr	r3, [pc, #272]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d116      	bne.n	8002412 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e4:	4b41      	ldr	r3, [pc, #260]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_OscConfig+0x180>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e18f      	b.n	800271c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fc:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4938      	ldr	r1, [pc, #224]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 800240c:	4313      	orrs	r3, r2
 800240e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002410:	e03a      	b.n	8002488 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d020      	beq.n	800245c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800241a:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7fe fe8c 	bl	800113c <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002428:	f7fe fe88 	bl	800113c <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e170      	b.n	800271c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243a:	4b2c      	ldr	r3, [pc, #176]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002446:	4b29      	ldr	r3, [pc, #164]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4925      	ldr	r1, [pc, #148]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]
 800245a:	e015      	b.n	8002488 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245c:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7fe fe6b 	bl	800113c <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800246a:	f7fe fe67 	bl	800113c <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e14f      	b.n	800271c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f0      	bne.n	800246a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d037      	beq.n	8002504 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d016      	beq.n	80024ca <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249c:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <HAL_RCC_OscConfig+0x278>)
 800249e:	2201      	movs	r2, #1
 80024a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a2:	f7fe fe4b 	bl	800113c <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024aa:	f7fe fe47 	bl	800113c <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e12f      	b.n	800271c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 80024be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x22e>
 80024c8:	e01c      	b.n	8002504 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_RCC_OscConfig+0x278>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d0:	f7fe fe34 	bl	800113c <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d6:	e00f      	b.n	80024f8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d8:	f7fe fe30 	bl	800113c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d908      	bls.n	80024f8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e118      	b.n	800271c <HAL_RCC_OscConfig+0x4a0>
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800
 80024f0:	42470000 	.word	0x42470000
 80024f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f8:	4b8a      	ldr	r3, [pc, #552]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 80024fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e9      	bne.n	80024d8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 8097 	beq.w	8002640 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002512:	2300      	movs	r3, #0
 8002514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002516:	4b83      	ldr	r3, [pc, #524]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10f      	bne.n	8002542 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4b7f      	ldr	r3, [pc, #508]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	4a7e      	ldr	r2, [pc, #504]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 800252c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002530:	6413      	str	r3, [r2, #64]	; 0x40
 8002532:	4b7c      	ldr	r3, [pc, #496]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800253e:	2301      	movs	r3, #1
 8002540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002542:	4b79      	ldr	r3, [pc, #484]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d118      	bne.n	8002580 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800254e:	4b76      	ldr	r3, [pc, #472]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a75      	ldr	r2, [pc, #468]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 8002554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255a:	f7fe fdef 	bl	800113c <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002562:	f7fe fdeb 	bl	800113c <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e0d3      	b.n	800271c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002574:	4b6c      	ldr	r3, [pc, #432]	; (8002728 <HAL_RCC_OscConfig+0x4ac>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d106      	bne.n	8002596 <HAL_RCC_OscConfig+0x31a>
 8002588:	4b66      	ldr	r3, [pc, #408]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 800258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258c:	4a65      	ldr	r2, [pc, #404]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6713      	str	r3, [r2, #112]	; 0x70
 8002594:	e01c      	b.n	80025d0 <HAL_RCC_OscConfig+0x354>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b05      	cmp	r3, #5
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x33c>
 800259e:	4b61      	ldr	r3, [pc, #388]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	4a60      	ldr	r2, [pc, #384]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 80025a4:	f043 0304 	orr.w	r3, r3, #4
 80025a8:	6713      	str	r3, [r2, #112]	; 0x70
 80025aa:	4b5e      	ldr	r3, [pc, #376]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ae:	4a5d      	ldr	r2, [pc, #372]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6713      	str	r3, [r2, #112]	; 0x70
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0x354>
 80025b8:	4b5a      	ldr	r3, [pc, #360]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	4a59      	ldr	r2, [pc, #356]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	6713      	str	r3, [r2, #112]	; 0x70
 80025c4:	4b57      	ldr	r3, [pc, #348]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	4a56      	ldr	r2, [pc, #344]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 80025ca:	f023 0304 	bic.w	r3, r3, #4
 80025ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d015      	beq.n	8002604 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d8:	f7fe fdb0 	bl	800113c <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025de:	e00a      	b.n	80025f6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e0:	f7fe fdac 	bl	800113c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e092      	b.n	800271c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f6:	4b4b      	ldr	r3, [pc, #300]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0ee      	beq.n	80025e0 <HAL_RCC_OscConfig+0x364>
 8002602:	e014      	b.n	800262e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002604:	f7fe fd9a 	bl	800113c <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260a:	e00a      	b.n	8002622 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260c:	f7fe fd96 	bl	800113c <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	; 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e07c      	b.n	800271c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002622:	4b40      	ldr	r3, [pc, #256]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1ee      	bne.n	800260c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800262e:	7dfb      	ldrb	r3, [r7, #23]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d105      	bne.n	8002640 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002634:	4b3b      	ldr	r3, [pc, #236]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	4a3a      	ldr	r2, [pc, #232]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 800263a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d068      	beq.n	800271a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002648:	4b36      	ldr	r3, [pc, #216]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b08      	cmp	r3, #8
 8002652:	d060      	beq.n	8002716 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d145      	bne.n	80026e8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265c:	4b33      	ldr	r3, [pc, #204]	; (800272c <HAL_RCC_OscConfig+0x4b0>)
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002662:	f7fe fd6b 	bl	800113c <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266a:	f7fe fd67 	bl	800113c <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e04f      	b.n	800271c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267c:	4b29      	ldr	r3, [pc, #164]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f0      	bne.n	800266a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69da      	ldr	r2, [r3, #28]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	019b      	lsls	r3, r3, #6
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	085b      	lsrs	r3, r3, #1
 80026a0:	3b01      	subs	r3, #1
 80026a2:	041b      	lsls	r3, r3, #16
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	061b      	lsls	r3, r3, #24
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	071b      	lsls	r3, r3, #28
 80026b4:	491b      	ldr	r1, [pc, #108]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ba:	4b1c      	ldr	r3, [pc, #112]	; (800272c <HAL_RCC_OscConfig+0x4b0>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe fd3c 	bl	800113c <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fe fd38 	bl	800113c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e020      	b.n	800271c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x44c>
 80026e6:	e018      	b.n	800271a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <HAL_RCC_OscConfig+0x4b0>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ee:	f7fe fd25 	bl	800113c <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f6:	f7fe fd21 	bl	800113c <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e009      	b.n	800271c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_RCC_OscConfig+0x4a8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f0      	bne.n	80026f6 <HAL_RCC_OscConfig+0x47a>
 8002714:	e001      	b.n	800271a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40023800 	.word	0x40023800
 8002728:	40007000 	.word	0x40007000
 800272c:	42470060 	.word	0x42470060

08002730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e03f      	b.n	80027c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe fbaa 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2224      	movs	r2, #36	; 0x24
 8002760:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f829 	bl	80027cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d0:	b085      	sub	sp, #20
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	4313      	orrs	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800280e:	f023 030c 	bic.w	r3, r3, #12
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	68f9      	ldr	r1, [r7, #12]
 8002818:	430b      	orrs	r3, r1
 800281a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800283a:	f040 818b 	bne.w	8002b54 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4ac1      	ldr	r2, [pc, #772]	; (8002b48 <UART_SetConfig+0x37c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d005      	beq.n	8002854 <UART_SetConfig+0x88>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4abf      	ldr	r2, [pc, #764]	; (8002b4c <UART_SetConfig+0x380>)
 800284e:	4293      	cmp	r3, r2
 8002850:	f040 80bd 	bne.w	80029ce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002854:	f7ff fb5e 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8002858:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	461d      	mov	r5, r3
 800285e:	f04f 0600 	mov.w	r6, #0
 8002862:	46a8      	mov	r8, r5
 8002864:	46b1      	mov	r9, r6
 8002866:	eb18 0308 	adds.w	r3, r8, r8
 800286a:	eb49 0409 	adc.w	r4, r9, r9
 800286e:	4698      	mov	r8, r3
 8002870:	46a1      	mov	r9, r4
 8002872:	eb18 0805 	adds.w	r8, r8, r5
 8002876:	eb49 0906 	adc.w	r9, r9, r6
 800287a:	f04f 0100 	mov.w	r1, #0
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002886:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800288a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800288e:	4688      	mov	r8, r1
 8002890:	4691      	mov	r9, r2
 8002892:	eb18 0005 	adds.w	r0, r8, r5
 8002896:	eb49 0106 	adc.w	r1, r9, r6
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	461d      	mov	r5, r3
 80028a0:	f04f 0600 	mov.w	r6, #0
 80028a4:	196b      	adds	r3, r5, r5
 80028a6:	eb46 0406 	adc.w	r4, r6, r6
 80028aa:	461a      	mov	r2, r3
 80028ac:	4623      	mov	r3, r4
 80028ae:	f7fd fca9 	bl	8000204 <__aeabi_uldivmod>
 80028b2:	4603      	mov	r3, r0
 80028b4:	460c      	mov	r4, r1
 80028b6:	461a      	mov	r2, r3
 80028b8:	4ba5      	ldr	r3, [pc, #660]	; (8002b50 <UART_SetConfig+0x384>)
 80028ba:	fba3 2302 	umull	r2, r3, r3, r2
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	461d      	mov	r5, r3
 80028c8:	f04f 0600 	mov.w	r6, #0
 80028cc:	46a9      	mov	r9, r5
 80028ce:	46b2      	mov	sl, r6
 80028d0:	eb19 0309 	adds.w	r3, r9, r9
 80028d4:	eb4a 040a 	adc.w	r4, sl, sl
 80028d8:	4699      	mov	r9, r3
 80028da:	46a2      	mov	sl, r4
 80028dc:	eb19 0905 	adds.w	r9, r9, r5
 80028e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80028e4:	f04f 0100 	mov.w	r1, #0
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028f8:	4689      	mov	r9, r1
 80028fa:	4692      	mov	sl, r2
 80028fc:	eb19 0005 	adds.w	r0, r9, r5
 8002900:	eb4a 0106 	adc.w	r1, sl, r6
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	461d      	mov	r5, r3
 800290a:	f04f 0600 	mov.w	r6, #0
 800290e:	196b      	adds	r3, r5, r5
 8002910:	eb46 0406 	adc.w	r4, r6, r6
 8002914:	461a      	mov	r2, r3
 8002916:	4623      	mov	r3, r4
 8002918:	f7fd fc74 	bl	8000204 <__aeabi_uldivmod>
 800291c:	4603      	mov	r3, r0
 800291e:	460c      	mov	r4, r1
 8002920:	461a      	mov	r2, r3
 8002922:	4b8b      	ldr	r3, [pc, #556]	; (8002b50 <UART_SetConfig+0x384>)
 8002924:	fba3 1302 	umull	r1, r3, r3, r2
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	2164      	movs	r1, #100	; 0x64
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	3332      	adds	r3, #50	; 0x32
 8002936:	4a86      	ldr	r2, [pc, #536]	; (8002b50 <UART_SetConfig+0x384>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002944:	4498      	add	r8, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	461d      	mov	r5, r3
 800294a:	f04f 0600 	mov.w	r6, #0
 800294e:	46a9      	mov	r9, r5
 8002950:	46b2      	mov	sl, r6
 8002952:	eb19 0309 	adds.w	r3, r9, r9
 8002956:	eb4a 040a 	adc.w	r4, sl, sl
 800295a:	4699      	mov	r9, r3
 800295c:	46a2      	mov	sl, r4
 800295e:	eb19 0905 	adds.w	r9, r9, r5
 8002962:	eb4a 0a06 	adc.w	sl, sl, r6
 8002966:	f04f 0100 	mov.w	r1, #0
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002972:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002976:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800297a:	4689      	mov	r9, r1
 800297c:	4692      	mov	sl, r2
 800297e:	eb19 0005 	adds.w	r0, r9, r5
 8002982:	eb4a 0106 	adc.w	r1, sl, r6
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	461d      	mov	r5, r3
 800298c:	f04f 0600 	mov.w	r6, #0
 8002990:	196b      	adds	r3, r5, r5
 8002992:	eb46 0406 	adc.w	r4, r6, r6
 8002996:	461a      	mov	r2, r3
 8002998:	4623      	mov	r3, r4
 800299a:	f7fd fc33 	bl	8000204 <__aeabi_uldivmod>
 800299e:	4603      	mov	r3, r0
 80029a0:	460c      	mov	r4, r1
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b6a      	ldr	r3, [pc, #424]	; (8002b50 <UART_SetConfig+0x384>)
 80029a6:	fba3 1302 	umull	r1, r3, r3, r2
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	2164      	movs	r1, #100	; 0x64
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	3332      	adds	r3, #50	; 0x32
 80029b8:	4a65      	ldr	r2, [pc, #404]	; (8002b50 <UART_SetConfig+0x384>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	f003 0207 	and.w	r2, r3, #7
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4442      	add	r2, r8
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	e26f      	b.n	8002eae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029ce:	f7ff fa8d 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 80029d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	461d      	mov	r5, r3
 80029d8:	f04f 0600 	mov.w	r6, #0
 80029dc:	46a8      	mov	r8, r5
 80029de:	46b1      	mov	r9, r6
 80029e0:	eb18 0308 	adds.w	r3, r8, r8
 80029e4:	eb49 0409 	adc.w	r4, r9, r9
 80029e8:	4698      	mov	r8, r3
 80029ea:	46a1      	mov	r9, r4
 80029ec:	eb18 0805 	adds.w	r8, r8, r5
 80029f0:	eb49 0906 	adc.w	r9, r9, r6
 80029f4:	f04f 0100 	mov.w	r1, #0
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a08:	4688      	mov	r8, r1
 8002a0a:	4691      	mov	r9, r2
 8002a0c:	eb18 0005 	adds.w	r0, r8, r5
 8002a10:	eb49 0106 	adc.w	r1, r9, r6
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	461d      	mov	r5, r3
 8002a1a:	f04f 0600 	mov.w	r6, #0
 8002a1e:	196b      	adds	r3, r5, r5
 8002a20:	eb46 0406 	adc.w	r4, r6, r6
 8002a24:	461a      	mov	r2, r3
 8002a26:	4623      	mov	r3, r4
 8002a28:	f7fd fbec 	bl	8000204 <__aeabi_uldivmod>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <UART_SetConfig+0x384>)
 8002a34:	fba3 2302 	umull	r2, r3, r3, r2
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	461d      	mov	r5, r3
 8002a42:	f04f 0600 	mov.w	r6, #0
 8002a46:	46a9      	mov	r9, r5
 8002a48:	46b2      	mov	sl, r6
 8002a4a:	eb19 0309 	adds.w	r3, r9, r9
 8002a4e:	eb4a 040a 	adc.w	r4, sl, sl
 8002a52:	4699      	mov	r9, r3
 8002a54:	46a2      	mov	sl, r4
 8002a56:	eb19 0905 	adds.w	r9, r9, r5
 8002a5a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a5e:	f04f 0100 	mov.w	r1, #0
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a72:	4689      	mov	r9, r1
 8002a74:	4692      	mov	sl, r2
 8002a76:	eb19 0005 	adds.w	r0, r9, r5
 8002a7a:	eb4a 0106 	adc.w	r1, sl, r6
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	461d      	mov	r5, r3
 8002a84:	f04f 0600 	mov.w	r6, #0
 8002a88:	196b      	adds	r3, r5, r5
 8002a8a:	eb46 0406 	adc.w	r4, r6, r6
 8002a8e:	461a      	mov	r2, r3
 8002a90:	4623      	mov	r3, r4
 8002a92:	f7fd fbb7 	bl	8000204 <__aeabi_uldivmod>
 8002a96:	4603      	mov	r3, r0
 8002a98:	460c      	mov	r4, r1
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b2c      	ldr	r3, [pc, #176]	; (8002b50 <UART_SetConfig+0x384>)
 8002a9e:	fba3 1302 	umull	r1, r3, r3, r2
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	2164      	movs	r1, #100	; 0x64
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	3332      	adds	r3, #50	; 0x32
 8002ab0:	4a27      	ldr	r2, [pc, #156]	; (8002b50 <UART_SetConfig+0x384>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002abe:	4498      	add	r8, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	461d      	mov	r5, r3
 8002ac4:	f04f 0600 	mov.w	r6, #0
 8002ac8:	46a9      	mov	r9, r5
 8002aca:	46b2      	mov	sl, r6
 8002acc:	eb19 0309 	adds.w	r3, r9, r9
 8002ad0:	eb4a 040a 	adc.w	r4, sl, sl
 8002ad4:	4699      	mov	r9, r3
 8002ad6:	46a2      	mov	sl, r4
 8002ad8:	eb19 0905 	adds.w	r9, r9, r5
 8002adc:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ae0:	f04f 0100 	mov.w	r1, #0
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002af0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002af4:	4689      	mov	r9, r1
 8002af6:	4692      	mov	sl, r2
 8002af8:	eb19 0005 	adds.w	r0, r9, r5
 8002afc:	eb4a 0106 	adc.w	r1, sl, r6
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	461d      	mov	r5, r3
 8002b06:	f04f 0600 	mov.w	r6, #0
 8002b0a:	196b      	adds	r3, r5, r5
 8002b0c:	eb46 0406 	adc.w	r4, r6, r6
 8002b10:	461a      	mov	r2, r3
 8002b12:	4623      	mov	r3, r4
 8002b14:	f7fd fb76 	bl	8000204 <__aeabi_uldivmod>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	460c      	mov	r4, r1
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <UART_SetConfig+0x384>)
 8002b20:	fba3 1302 	umull	r1, r3, r3, r2
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	2164      	movs	r1, #100	; 0x64
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	3332      	adds	r3, #50	; 0x32
 8002b32:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <UART_SetConfig+0x384>)
 8002b34:	fba2 2303 	umull	r2, r3, r2, r3
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	f003 0207 	and.w	r2, r3, #7
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4442      	add	r2, r8
 8002b44:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002b46:	e1b2      	b.n	8002eae <UART_SetConfig+0x6e2>
 8002b48:	40011000 	.word	0x40011000
 8002b4c:	40011400 	.word	0x40011400
 8002b50:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4ad7      	ldr	r2, [pc, #860]	; (8002eb8 <UART_SetConfig+0x6ec>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d005      	beq.n	8002b6a <UART_SetConfig+0x39e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4ad6      	ldr	r2, [pc, #856]	; (8002ebc <UART_SetConfig+0x6f0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	f040 80d1 	bne.w	8002d0c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b6a:	f7ff f9d3 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8002b6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	469a      	mov	sl, r3
 8002b74:	f04f 0b00 	mov.w	fp, #0
 8002b78:	46d0      	mov	r8, sl
 8002b7a:	46d9      	mov	r9, fp
 8002b7c:	eb18 0308 	adds.w	r3, r8, r8
 8002b80:	eb49 0409 	adc.w	r4, r9, r9
 8002b84:	4698      	mov	r8, r3
 8002b86:	46a1      	mov	r9, r4
 8002b88:	eb18 080a 	adds.w	r8, r8, sl
 8002b8c:	eb49 090b 	adc.w	r9, r9, fp
 8002b90:	f04f 0100 	mov.w	r1, #0
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ba0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ba4:	4688      	mov	r8, r1
 8002ba6:	4691      	mov	r9, r2
 8002ba8:	eb1a 0508 	adds.w	r5, sl, r8
 8002bac:	eb4b 0609 	adc.w	r6, fp, r9
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	f04f 0400 	mov.w	r4, #0
 8002bc2:	0094      	lsls	r4, r2, #2
 8002bc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bc8:	008b      	lsls	r3, r1, #2
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4623      	mov	r3, r4
 8002bce:	4628      	mov	r0, r5
 8002bd0:	4631      	mov	r1, r6
 8002bd2:	f7fd fb17 	bl	8000204 <__aeabi_uldivmod>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	460c      	mov	r4, r1
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4bb8      	ldr	r3, [pc, #736]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002bde:	fba3 2302 	umull	r2, r3, r3, r2
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	469b      	mov	fp, r3
 8002bec:	f04f 0c00 	mov.w	ip, #0
 8002bf0:	46d9      	mov	r9, fp
 8002bf2:	46e2      	mov	sl, ip
 8002bf4:	eb19 0309 	adds.w	r3, r9, r9
 8002bf8:	eb4a 040a 	adc.w	r4, sl, sl
 8002bfc:	4699      	mov	r9, r3
 8002bfe:	46a2      	mov	sl, r4
 8002c00:	eb19 090b 	adds.w	r9, r9, fp
 8002c04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c08:	f04f 0100 	mov.w	r1, #0
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c1c:	4689      	mov	r9, r1
 8002c1e:	4692      	mov	sl, r2
 8002c20:	eb1b 0509 	adds.w	r5, fp, r9
 8002c24:	eb4c 060a 	adc.w	r6, ip, sl
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	f04f 0400 	mov.w	r4, #0
 8002c3a:	0094      	lsls	r4, r2, #2
 8002c3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c40:	008b      	lsls	r3, r1, #2
 8002c42:	461a      	mov	r2, r3
 8002c44:	4623      	mov	r3, r4
 8002c46:	4628      	mov	r0, r5
 8002c48:	4631      	mov	r1, r6
 8002c4a:	f7fd fadb 	bl	8000204 <__aeabi_uldivmod>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	460c      	mov	r4, r1
 8002c52:	461a      	mov	r2, r3
 8002c54:	4b9a      	ldr	r3, [pc, #616]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002c56:	fba3 1302 	umull	r1, r3, r3, r2
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2164      	movs	r1, #100	; 0x64
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	3332      	adds	r3, #50	; 0x32
 8002c68:	4a95      	ldr	r2, [pc, #596]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c74:	4498      	add	r8, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	469b      	mov	fp, r3
 8002c7a:	f04f 0c00 	mov.w	ip, #0
 8002c7e:	46d9      	mov	r9, fp
 8002c80:	46e2      	mov	sl, ip
 8002c82:	eb19 0309 	adds.w	r3, r9, r9
 8002c86:	eb4a 040a 	adc.w	r4, sl, sl
 8002c8a:	4699      	mov	r9, r3
 8002c8c:	46a2      	mov	sl, r4
 8002c8e:	eb19 090b 	adds.w	r9, r9, fp
 8002c92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c96:	f04f 0100 	mov.w	r1, #0
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ca2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ca6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002caa:	4689      	mov	r9, r1
 8002cac:	4692      	mov	sl, r2
 8002cae:	eb1b 0509 	adds.w	r5, fp, r9
 8002cb2:	eb4c 060a 	adc.w	r6, ip, sl
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4619      	mov	r1, r3
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	f04f 0400 	mov.w	r4, #0
 8002cc8:	0094      	lsls	r4, r2, #2
 8002cca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cce:	008b      	lsls	r3, r1, #2
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4623      	mov	r3, r4
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	4631      	mov	r1, r6
 8002cd8:	f7fd fa94 	bl	8000204 <__aeabi_uldivmod>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	460c      	mov	r4, r1
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b77      	ldr	r3, [pc, #476]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce8:	095b      	lsrs	r3, r3, #5
 8002cea:	2164      	movs	r1, #100	; 0x64
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	3332      	adds	r3, #50	; 0x32
 8002cf6:	4a72      	ldr	r2, [pc, #456]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	f003 020f 	and.w	r2, r3, #15
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4442      	add	r2, r8
 8002d08:	609a      	str	r2, [r3, #8]
 8002d0a:	e0d0      	b.n	8002eae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d0c:	f7ff f8ee 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002d10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	469a      	mov	sl, r3
 8002d16:	f04f 0b00 	mov.w	fp, #0
 8002d1a:	46d0      	mov	r8, sl
 8002d1c:	46d9      	mov	r9, fp
 8002d1e:	eb18 0308 	adds.w	r3, r8, r8
 8002d22:	eb49 0409 	adc.w	r4, r9, r9
 8002d26:	4698      	mov	r8, r3
 8002d28:	46a1      	mov	r9, r4
 8002d2a:	eb18 080a 	adds.w	r8, r8, sl
 8002d2e:	eb49 090b 	adc.w	r9, r9, fp
 8002d32:	f04f 0100 	mov.w	r1, #0
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d46:	4688      	mov	r8, r1
 8002d48:	4691      	mov	r9, r2
 8002d4a:	eb1a 0508 	adds.w	r5, sl, r8
 8002d4e:	eb4b 0609 	adc.w	r6, fp, r9
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4619      	mov	r1, r3
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	f04f 0400 	mov.w	r4, #0
 8002d64:	0094      	lsls	r4, r2, #2
 8002d66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d6a:	008b      	lsls	r3, r1, #2
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4623      	mov	r3, r4
 8002d70:	4628      	mov	r0, r5
 8002d72:	4631      	mov	r1, r6
 8002d74:	f7fd fa46 	bl	8000204 <__aeabi_uldivmod>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	460c      	mov	r4, r1
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b50      	ldr	r3, [pc, #320]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002d80:	fba3 2302 	umull	r2, r3, r3, r2
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	469b      	mov	fp, r3
 8002d8e:	f04f 0c00 	mov.w	ip, #0
 8002d92:	46d9      	mov	r9, fp
 8002d94:	46e2      	mov	sl, ip
 8002d96:	eb19 0309 	adds.w	r3, r9, r9
 8002d9a:	eb4a 040a 	adc.w	r4, sl, sl
 8002d9e:	4699      	mov	r9, r3
 8002da0:	46a2      	mov	sl, r4
 8002da2:	eb19 090b 	adds.w	r9, r9, fp
 8002da6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002daa:	f04f 0100 	mov.w	r1, #0
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002db6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dbe:	4689      	mov	r9, r1
 8002dc0:	4692      	mov	sl, r2
 8002dc2:	eb1b 0509 	adds.w	r5, fp, r9
 8002dc6:	eb4c 060a 	adc.w	r6, ip, sl
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	f04f 0400 	mov.w	r4, #0
 8002ddc:	0094      	lsls	r4, r2, #2
 8002dde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002de2:	008b      	lsls	r3, r1, #2
 8002de4:	461a      	mov	r2, r3
 8002de6:	4623      	mov	r3, r4
 8002de8:	4628      	mov	r0, r5
 8002dea:	4631      	mov	r1, r6
 8002dec:	f7fd fa0a 	bl	8000204 <__aeabi_uldivmod>
 8002df0:	4603      	mov	r3, r0
 8002df2:	460c      	mov	r4, r1
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b32      	ldr	r3, [pc, #200]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002df8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	2164      	movs	r1, #100	; 0x64
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	3332      	adds	r3, #50	; 0x32
 8002e0a:	4a2d      	ldr	r2, [pc, #180]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e16:	4498      	add	r8, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	469b      	mov	fp, r3
 8002e1c:	f04f 0c00 	mov.w	ip, #0
 8002e20:	46d9      	mov	r9, fp
 8002e22:	46e2      	mov	sl, ip
 8002e24:	eb19 0309 	adds.w	r3, r9, r9
 8002e28:	eb4a 040a 	adc.w	r4, sl, sl
 8002e2c:	4699      	mov	r9, r3
 8002e2e:	46a2      	mov	sl, r4
 8002e30:	eb19 090b 	adds.w	r9, r9, fp
 8002e34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e38:	f04f 0100 	mov.w	r1, #0
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e4c:	4689      	mov	r9, r1
 8002e4e:	4692      	mov	sl, r2
 8002e50:	eb1b 0509 	adds.w	r5, fp, r9
 8002e54:	eb4c 060a 	adc.w	r6, ip, sl
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	f04f 0400 	mov.w	r4, #0
 8002e6a:	0094      	lsls	r4, r2, #2
 8002e6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e70:	008b      	lsls	r3, r1, #2
 8002e72:	461a      	mov	r2, r3
 8002e74:	4623      	mov	r3, r4
 8002e76:	4628      	mov	r0, r5
 8002e78:	4631      	mov	r1, r6
 8002e7a:	f7fd f9c3 	bl	8000204 <__aeabi_uldivmod>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	460c      	mov	r4, r1
 8002e82:	461a      	mov	r2, r3
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002e86:	fba3 1302 	umull	r1, r3, r3, r2
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	2164      	movs	r1, #100	; 0x64
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	3332      	adds	r3, #50	; 0x32
 8002e98:	4a09      	ldr	r2, [pc, #36]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	f003 020f 	and.w	r2, r3, #15
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4442      	add	r2, r8
 8002eaa:	609a      	str	r2, [r3, #8]
}
 8002eac:	e7ff      	b.n	8002eae <UART_SetConfig+0x6e2>
 8002eae:	bf00      	nop
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eb8:	40011000 	.word	0x40011000
 8002ebc:	40011400 	.word	0x40011400
 8002ec0:	51eb851f 	.word	0x51eb851f

08002ec4 <__libc_init_array>:
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	4e0d      	ldr	r6, [pc, #52]	; (8002efc <__libc_init_array+0x38>)
 8002ec8:	4c0d      	ldr	r4, [pc, #52]	; (8002f00 <__libc_init_array+0x3c>)
 8002eca:	1ba4      	subs	r4, r4, r6
 8002ecc:	10a4      	asrs	r4, r4, #2
 8002ece:	2500      	movs	r5, #0
 8002ed0:	42a5      	cmp	r5, r4
 8002ed2:	d109      	bne.n	8002ee8 <__libc_init_array+0x24>
 8002ed4:	4e0b      	ldr	r6, [pc, #44]	; (8002f04 <__libc_init_array+0x40>)
 8002ed6:	4c0c      	ldr	r4, [pc, #48]	; (8002f08 <__libc_init_array+0x44>)
 8002ed8:	f000 f820 	bl	8002f1c <_init>
 8002edc:	1ba4      	subs	r4, r4, r6
 8002ede:	10a4      	asrs	r4, r4, #2
 8002ee0:	2500      	movs	r5, #0
 8002ee2:	42a5      	cmp	r5, r4
 8002ee4:	d105      	bne.n	8002ef2 <__libc_init_array+0x2e>
 8002ee6:	bd70      	pop	{r4, r5, r6, pc}
 8002ee8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eec:	4798      	blx	r3
 8002eee:	3501      	adds	r5, #1
 8002ef0:	e7ee      	b.n	8002ed0 <__libc_init_array+0xc>
 8002ef2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ef6:	4798      	blx	r3
 8002ef8:	3501      	adds	r5, #1
 8002efa:	e7f2      	b.n	8002ee2 <__libc_init_array+0x1e>
 8002efc:	08002f54 	.word	0x08002f54
 8002f00:	08002f54 	.word	0x08002f54
 8002f04:	08002f54 	.word	0x08002f54
 8002f08:	08002f58 	.word	0x08002f58

08002f0c <memset>:
 8002f0c:	4402      	add	r2, r0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d100      	bne.n	8002f16 <memset+0xa>
 8002f14:	4770      	bx	lr
 8002f16:	f803 1b01 	strb.w	r1, [r3], #1
 8002f1a:	e7f9      	b.n	8002f10 <memset+0x4>

08002f1c <_init>:
 8002f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1e:	bf00      	nop
 8002f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f22:	bc08      	pop	{r3}
 8002f24:	469e      	mov	lr, r3
 8002f26:	4770      	bx	lr

08002f28 <_fini>:
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2a:	bf00      	nop
 8002f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2e:	bc08      	pop	{r3}
 8002f30:	469e      	mov	lr, r3
 8002f32:	4770      	bx	lr
