
edesign_2020_21785155.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bdc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dcc  08003dcc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dd4  08003dd4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dd4  08003dd4  00013dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dd8  08003dd8  00013dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000159d8  2000000c  08003de8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200159e4  08003de8  000259e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca40  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001de4  00000000  00000000  0002ca7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d60  00000000  00000000  0002e860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c68  00000000  00000000  0002f5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021550  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a1b8  00000000  00000000  00051778  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccb8b  00000000  00000000  0005b930  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001284bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003810  00000000  00000000  00128538  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003d88 	.word	0x08003d88

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003d88 	.word	0x08003d88

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	state = Idle;
 800050a:	4b5e      	ldr	r3, [pc, #376]	; (8000684 <main+0x180>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
	Start = off;
 8000510:	4b5d      	ldr	r3, [pc, #372]	; (8000688 <main+0x184>)
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
	exti = off;
 8000516:	4b5d      	ldr	r3, [pc, #372]	; (800068c <main+0x188>)
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]

	ledOne = off;
 800051c:	4b5c      	ldr	r3, [pc, #368]	; (8000690 <main+0x18c>)
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
	ledTwo = off;
 8000522:	4b5c      	ldr	r3, [pc, #368]	; (8000694 <main+0x190>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
	ledThree = off;
 8000528:	4b5b      	ldr	r3, [pc, #364]	; (8000698 <main+0x194>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
	ledRec = off;
 800052e:	4b5b      	ldr	r3, [pc, #364]	; (800069c <main+0x198>)
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]

	buttOne = off;
 8000534:	4b5a      	ldr	r3, [pc, #360]	; (80006a0 <main+0x19c>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
	buttTwo	= off;
 800053a:	4b5a      	ldr	r3, [pc, #360]	; (80006a4 <main+0x1a0>)
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
	buttThree = off;
 8000540:	4b59      	ldr	r3, [pc, #356]	; (80006a8 <main+0x1a4>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
	buttRec = off;
 8000546:	4b59      	ldr	r3, [pc, #356]	; (80006ac <main+0x1a8>)
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
	buttStop = off;
 800054c:	4b58      	ldr	r3, [pc, #352]	; (80006b0 <main+0x1ac>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]

	int i;
	for (i=0;i<44100;i++)
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	e002      	b.n	800055e <main+0x5a>
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	3301      	adds	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	f64a 4243 	movw	r2, #44099	; 0xac43
 8000564:	4293      	cmp	r3, r2
 8000566:	ddf7      	ble.n	8000558 <main+0x54>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fe04 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 fa66 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f000 fb7c 	bl	8000c6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000574:	f000 fb5a 	bl	8000c2c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000578:	f000 fb2e 	bl	8000bd8 <MX_USART2_UART_Init>
  MX_DAC_Init();
 800057c:	f000 facc 	bl	8000b18 <MX_DAC_Init>
  MX_TIM6_Init();
 8000580:	f000 faf4 	bl	8000b6c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  uint8_t msg[10] = {127, 128, '2','1','7','8','5','1','5','5'};
 8000584:	4a4b      	ldr	r2, [pc, #300]	; (80006b4 <main+0x1b0>)
 8000586:	463b      	mov	r3, r7
 8000588:	ca07      	ldmia	r2, {r0, r1, r2}
 800058a:	c303      	stmia	r3!, {r0, r1}
 800058c:	801a      	strh	r2, [r3, #0]
   HAL_UART_Transmit(&huart2, msg, sizeof(msg), 1000);
 800058e:	4639      	mov	r1, r7
 8000590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000594:	220a      	movs	r2, #10
 8000596:	4848      	ldr	r0, [pc, #288]	; (80006b8 <main+0x1b4>)
 8000598:	f002 ff6b 	bl	8003472 <HAL_UART_Transmit>

   HAL_TIM_Base_Start(&htim6);
 800059c:	4847      	ldr	r0, [pc, #284]	; (80006bc <main+0x1b8>)
 800059e:	f002 fc8c 	bl	8002eba <HAL_TIM_Base_Start>
   HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80005a2:	2100      	movs	r1, #0
 80005a4:	4846      	ldr	r0, [pc, #280]	; (80006c0 <main+0x1bc>)
 80005a6:	f000 ff8a 	bl	80014be <HAL_DAC_Start>
   HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)sine440, 32, DAC_ALIGN_12B_R);
 80005aa:	2300      	movs	r3, #0
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2320      	movs	r3, #32
 80005b0:	4a44      	ldr	r2, [pc, #272]	; (80006c4 <main+0x1c0>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	4842      	ldr	r0, [pc, #264]	; (80006c0 <main+0x1bc>)
 80005b6:	f000 ffe9 	bl	800158c <HAL_DAC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /////////////////////////////////////////////////////////////////////
	  if (exti){
 80005ba:	4b34      	ldr	r3, [pc, #208]	; (800068c <main+0x188>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f000 8093 	beq.w	80006ea <main+0x1e6>

		  if (!Start) Ri = HAL_GetTick();
 80005c4:	4b30      	ldr	r3, [pc, #192]	; (8000688 <main+0x184>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d105      	bne.n	80005d8 <main+0xd4>
 80005cc:	f000 fe38 	bl	8001240 <HAL_GetTick>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b3c      	ldr	r3, [pc, #240]	; (80006c8 <main+0x1c4>)
 80005d6:	601a      	str	r2, [r3, #0]
		  Start = on;
 80005d8:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <main+0x184>)
 80005da:	2201      	movs	r2, #1
 80005dc:	601a      	str	r2, [r3, #0]
		  Rf = HAL_GetTick();
 80005de:	f000 fe2f 	bl	8001240 <HAL_GetTick>
 80005e2:	4603      	mov	r3, r0
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <main+0x1c8>)
 80005e8:	601a      	str	r2, [r3, #0]

		  	if (Rf - Ri > 20){
 80005ea:	4b38      	ldr	r3, [pc, #224]	; (80006cc <main+0x1c8>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	4b36      	ldr	r3, [pc, #216]	; (80006c8 <main+0x1c4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	2b14      	cmp	r3, #20
 80005f6:	dd78      	ble.n	80006ea <main+0x1e6>
		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) buttOne = on;
 80005f8:	2140      	movs	r1, #64	; 0x40
 80005fa:	4835      	ldr	r0, [pc, #212]	; (80006d0 <main+0x1cc>)
 80005fc:	f001 fec8 	bl	8002390 <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d003      	beq.n	800060e <main+0x10a>
 8000606:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <main+0x19c>)
 8000608:	2201      	movs	r2, #1
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	e002      	b.n	8000614 <main+0x110>
		  		else buttOne = off;
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <main+0x19c>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]

			  	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) {buttTwo = on;}
 8000614:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000618:	482d      	ldr	r0, [pc, #180]	; (80006d0 <main+0x1cc>)
 800061a:	f001 feb9 	bl	8002390 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d003      	beq.n	800062c <main+0x128>
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <main+0x1a0>)
 8000626:	2201      	movs	r2, #1
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	e002      	b.n	8000632 <main+0x12e>
			  	else {buttTwo = off;}
 800062c:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <main+0x1a0>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)) buttThree = on;
 8000632:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000636:	4826      	ldr	r0, [pc, #152]	; (80006d0 <main+0x1cc>)
 8000638:	f001 feaa 	bl	8002390 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d003      	beq.n	800064a <main+0x146>
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <main+0x1a4>)
 8000644:	2201      	movs	r2, #1
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	e002      	b.n	8000650 <main+0x14c>
		  		else buttThree = off;
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <main+0x1a4>)
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) buttRec = on;
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	481f      	ldr	r0, [pc, #124]	; (80006d0 <main+0x1cc>)
 8000654:	f001 fe9c 	bl	8002390 <HAL_GPIO_ReadPin>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d003      	beq.n	8000666 <main+0x162>
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <main+0x1a8>)
 8000660:	2201      	movs	r2, #1
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	e002      	b.n	800066c <main+0x168>
		  		else {buttRec = off;}
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <main+0x1a8>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) buttStop = on;
 800066c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000670:	4818      	ldr	r0, [pc, #96]	; (80006d4 <main+0x1d0>)
 8000672:	f001 fe8d 	bl	8002390 <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d02d      	beq.n	80006d8 <main+0x1d4>
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <main+0x1ac>)
 800067e:	2201      	movs	r2, #1
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	e02c      	b.n	80006de <main+0x1da>
 8000684:	200158d0 	.word	0x200158d0
 8000688:	200159d8 	.word	0x200159d8
 800068c:	20015934 	.word	0x20015934
 8000690:	2000003c 	.word	0x2000003c
 8000694:	200159d4 	.word	0x200159d4
 8000698:	200158c8 	.word	0x200158c8
 800069c:	20000038 	.word	0x20000038
 80006a0:	20000034 	.word	0x20000034
 80006a4:	20000028 	.word	0x20000028
 80006a8:	20015938 	.word	0x20015938
 80006ac:	200159dc 	.word	0x200159dc
 80006b0:	200158cc 	.word	0x200158cc
 80006b4:	08003da0 	.word	0x08003da0
 80006b8:	20015994 	.word	0x20015994
 80006bc:	20015950 	.word	0x20015950
 80006c0:	2001593c 	.word	0x2001593c
 80006c4:	20000040 	.word	0x20000040
 80006c8:	20015990 	.word	0x20015990
 80006cc:	20000030 	.word	0x20000030
 80006d0:	40020000 	.word	0x40020000
 80006d4:	40020400 	.word	0x40020400
		  		else buttStop = off;
 80006d8:	4baf      	ldr	r3, [pc, #700]	; (8000998 <main+0x494>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]

		  		Start = off;
 80006de:	4baf      	ldr	r3, [pc, #700]	; (800099c <main+0x498>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
		  		exti = off;
 80006e4:	4bae      	ldr	r3, [pc, #696]	; (80009a0 <main+0x49c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
		  	}
	  }
	  /////////////////////////////////////////////////////////////////////

	  if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))){
 80006ea:	2140      	movs	r1, #64	; 0x40
 80006ec:	48ad      	ldr	r0, [pc, #692]	; (80009a4 <main+0x4a0>)
 80006ee:	f001 fe4f 	bl	8002390 <HAL_GPIO_ReadPin>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d160      	bne.n	80007ba <main+0x2b6>
 80006f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006fc:	48a9      	ldr	r0, [pc, #676]	; (80009a4 <main+0x4a0>)
 80006fe:	f001 fe47 	bl	8002390 <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d158      	bne.n	80007ba <main+0x2b6>
 8000708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070c:	48a5      	ldr	r0, [pc, #660]	; (80009a4 <main+0x4a0>)
 800070e:	f001 fe3f 	bl	8002390 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d150      	bne.n	80007ba <main+0x2b6>
 8000718:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071c:	48a2      	ldr	r0, [pc, #648]	; (80009a8 <main+0x4a4>)
 800071e:	f001 fe37 	bl	8002390 <HAL_GPIO_ReadPin>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d148      	bne.n	80007ba <main+0x2b6>

		  if (!buttRec && buttOne) state = PlayOne;
 8000728:	4ba0      	ldr	r3, [pc, #640]	; (80009ac <main+0x4a8>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d106      	bne.n	800073e <main+0x23a>
 8000730:	4b9f      	ldr	r3, [pc, #636]	; (80009b0 <main+0x4ac>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d002      	beq.n	800073e <main+0x23a>
 8000738:	4b9e      	ldr	r3, [pc, #632]	; (80009b4 <main+0x4b0>)
 800073a:	2201      	movs	r2, #1
 800073c:	701a      	strb	r2, [r3, #0]
		  if (!buttRec && buttTwo) state = PlayTwo;
 800073e:	4b9b      	ldr	r3, [pc, #620]	; (80009ac <main+0x4a8>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d106      	bne.n	8000754 <main+0x250>
 8000746:	4b9c      	ldr	r3, [pc, #624]	; (80009b8 <main+0x4b4>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d002      	beq.n	8000754 <main+0x250>
 800074e:	4b99      	ldr	r3, [pc, #612]	; (80009b4 <main+0x4b0>)
 8000750:	2202      	movs	r2, #2
 8000752:	701a      	strb	r2, [r3, #0]
		  if (!buttRec && buttThree) state = PlayThree;
 8000754:	4b95      	ldr	r3, [pc, #596]	; (80009ac <main+0x4a8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d106      	bne.n	800076a <main+0x266>
 800075c:	4b97      	ldr	r3, [pc, #604]	; (80009bc <main+0x4b8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d002      	beq.n	800076a <main+0x266>
 8000764:	4b93      	ldr	r3, [pc, #588]	; (80009b4 <main+0x4b0>)
 8000766:	2203      	movs	r2, #3
 8000768:	701a      	strb	r2, [r3, #0]

		  if (buttRec && buttOne) state = RecOne;
 800076a:	4b90      	ldr	r3, [pc, #576]	; (80009ac <main+0x4a8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d006      	beq.n	8000780 <main+0x27c>
 8000772:	4b8f      	ldr	r3, [pc, #572]	; (80009b0 <main+0x4ac>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d002      	beq.n	8000780 <main+0x27c>
 800077a:	4b8e      	ldr	r3, [pc, #568]	; (80009b4 <main+0x4b0>)
 800077c:	2204      	movs	r2, #4
 800077e:	701a      	strb	r2, [r3, #0]
		  if (buttRec && buttTwo) state = RecTwo;
 8000780:	4b8a      	ldr	r3, [pc, #552]	; (80009ac <main+0x4a8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d006      	beq.n	8000796 <main+0x292>
 8000788:	4b8b      	ldr	r3, [pc, #556]	; (80009b8 <main+0x4b4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d002      	beq.n	8000796 <main+0x292>
 8000790:	4b88      	ldr	r3, [pc, #544]	; (80009b4 <main+0x4b0>)
 8000792:	2205      	movs	r2, #5
 8000794:	701a      	strb	r2, [r3, #0]
		  if (buttRec && buttThree) state = RecThree;
 8000796:	4b85      	ldr	r3, [pc, #532]	; (80009ac <main+0x4a8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d006      	beq.n	80007ac <main+0x2a8>
 800079e:	4b87      	ldr	r3, [pc, #540]	; (80009bc <main+0x4b8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <main+0x2a8>
 80007a6:	4b83      	ldr	r3, [pc, #524]	; (80009b4 <main+0x4b0>)
 80007a8:	2206      	movs	r2, #6
 80007aa:	701a      	strb	r2, [r3, #0]

		  if (buttStop) state = Idle;
 80007ac:	4b7a      	ldr	r3, [pc, #488]	; (8000998 <main+0x494>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d002      	beq.n	80007ba <main+0x2b6>
 80007b4:	4b7f      	ldr	r3, [pc, #508]	; (80009b4 <main+0x4b0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
	  }

	  ticky = HAL_GetTick();
 80007ba:	f000 fd41 	bl	8001240 <HAL_GetTick>
 80007be:	4603      	mov	r3, r0
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b7f      	ldr	r3, [pc, #508]	; (80009c0 <main+0x4bc>)
 80007c4:	601a      	str	r2, [r3, #0]
	  ///////////////////////////////////////////////////////////////////////////////////
	  if (state == PlayOne || state == PlayTwo || state == PlayThree || state == Idle){
 80007c6:	4b7b      	ldr	r3, [pc, #492]	; (80009b4 <main+0x4b0>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d00e      	beq.n	80007ee <main+0x2ea>
 80007d0:	4b78      	ldr	r3, [pc, #480]	; (80009b4 <main+0x4b0>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d009      	beq.n	80007ee <main+0x2ea>
 80007da:	4b76      	ldr	r3, [pc, #472]	; (80009b4 <main+0x4b0>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d004      	beq.n	80007ee <main+0x2ea>
 80007e4:	4b73      	ldr	r3, [pc, #460]	; (80009b4 <main+0x4b0>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d174      	bne.n	80008d8 <main+0x3d4>
	  	  if (state == PlayOne){
 80007ee:	4b71      	ldr	r3, [pc, #452]	; (80009b4 <main+0x4b0>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d11c      	bne.n	8000832 <main+0x32e>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, on);
 80007f8:	4b71      	ldr	r3, [pc, #452]	; (80009c0 <main+0x4bc>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b71      	ldr	r3, [pc, #452]	; (80009c4 <main+0x4c0>)
 80007fe:	fb83 1302 	smull	r1, r3, r3, r2
 8000802:	1159      	asrs	r1, r3, #5
 8000804:	17d3      	asrs	r3, r2, #31
 8000806:	1acb      	subs	r3, r1, r3
 8000808:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800080c:	fb01 f303 	mul.w	r3, r1, r3
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	2bf9      	cmp	r3, #249	; 0xf9
 8000814:	dc06      	bgt.n	8000824 <main+0x320>
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081c:	4861      	ldr	r0, [pc, #388]	; (80009a4 <main+0x4a0>)
 800081e:	f001 fdcf 	bl	80023c0 <HAL_GPIO_WritePin>
 8000822:	e00c      	b.n	800083e <main+0x33a>
	  		  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082a:	485e      	ldr	r0, [pc, #376]	; (80009a4 <main+0x4a0>)
 800082c:	f001 fdc8 	bl	80023c0 <HAL_GPIO_WritePin>
 8000830:	e005      	b.n	800083e <main+0x33a>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000838:	485a      	ldr	r0, [pc, #360]	; (80009a4 <main+0x4a0>)
 800083a:	f001 fdc1 	bl	80023c0 <HAL_GPIO_WritePin>

	  	  if (state == PlayTwo){
 800083e:	4b5d      	ldr	r3, [pc, #372]	; (80009b4 <main+0x4b0>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b02      	cmp	r3, #2
 8000846:	d11c      	bne.n	8000882 <main+0x37e>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, on);
 8000848:	4b5d      	ldr	r3, [pc, #372]	; (80009c0 <main+0x4bc>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b5d      	ldr	r3, [pc, #372]	; (80009c4 <main+0x4c0>)
 800084e:	fb83 1302 	smull	r1, r3, r3, r2
 8000852:	1159      	asrs	r1, r3, #5
 8000854:	17d3      	asrs	r3, r2, #31
 8000856:	1acb      	subs	r3, r1, r3
 8000858:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800085c:	fb01 f303 	mul.w	r3, r1, r3
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	2bf9      	cmp	r3, #249	; 0xf9
 8000864:	dc06      	bgt.n	8000874 <main+0x370>
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800086c:	484e      	ldr	r0, [pc, #312]	; (80009a8 <main+0x4a4>)
 800086e:	f001 fda7 	bl	80023c0 <HAL_GPIO_WritePin>
 8000872:	e00c      	b.n	800088e <main+0x38a>
	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800087a:	484b      	ldr	r0, [pc, #300]	; (80009a8 <main+0x4a4>)
 800087c:	f001 fda0 	bl	80023c0 <HAL_GPIO_WritePin>
 8000880:	e005      	b.n	800088e <main+0x38a>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000888:	4847      	ldr	r0, [pc, #284]	; (80009a8 <main+0x4a4>)
 800088a:	f001 fd99 	bl	80023c0 <HAL_GPIO_WritePin>

	  	  if (state == PlayThree){
 800088e:	4b49      	ldr	r3, [pc, #292]	; (80009b4 <main+0x4b0>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b03      	cmp	r3, #3
 8000896:	d11a      	bne.n	80008ce <main+0x3ca>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, on);
 8000898:	4b49      	ldr	r3, [pc, #292]	; (80009c0 <main+0x4bc>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b49      	ldr	r3, [pc, #292]	; (80009c4 <main+0x4c0>)
 800089e:	fb83 1302 	smull	r1, r3, r3, r2
 80008a2:	1159      	asrs	r1, r3, #5
 80008a4:	17d3      	asrs	r3, r2, #31
 80008a6:	1acb      	subs	r3, r1, r3
 80008a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008ac:	fb01 f303 	mul.w	r3, r1, r3
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	2bf9      	cmp	r3, #249	; 0xf9
 80008b4:	dc05      	bgt.n	80008c2 <main+0x3be>
 80008b6:	2201      	movs	r2, #1
 80008b8:	2110      	movs	r1, #16
 80008ba:	483b      	ldr	r0, [pc, #236]	; (80009a8 <main+0x4a4>)
 80008bc:	f001 fd80 	bl	80023c0 <HAL_GPIO_WritePin>
 80008c0:	e00a      	b.n	80008d8 <main+0x3d4>
	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2110      	movs	r1, #16
 80008c6:	4838      	ldr	r0, [pc, #224]	; (80009a8 <main+0x4a4>)
 80008c8:	f001 fd7a 	bl	80023c0 <HAL_GPIO_WritePin>
 80008cc:	e004      	b.n	80008d8 <main+0x3d4>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2110      	movs	r1, #16
 80008d2:	4835      	ldr	r0, [pc, #212]	; (80009a8 <main+0x4a4>)
 80008d4:	f001 fd74 	bl	80023c0 <HAL_GPIO_WritePin>
	  }
	  ///////////////////////////////////////////////////////////////////////////////////
  	  if (state == RecOne || state == RecTwo || state == RecThree){
 80008d8:	4b36      	ldr	r3, [pc, #216]	; (80009b4 <main+0x4b0>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b04      	cmp	r3, #4
 80008e0:	d00a      	beq.n	80008f8 <main+0x3f4>
 80008e2:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <main+0x4b0>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b05      	cmp	r3, #5
 80008ea:	d005      	beq.n	80008f8 <main+0x3f4>
 80008ec:	4b31      	ldr	r3, [pc, #196]	; (80009b4 <main+0x4b0>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b06      	cmp	r3, #6
 80008f4:	f040 8094 	bne.w	8000a20 <main+0x51c>
  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, on);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2120      	movs	r1, #32
 80008fc:	482a      	ldr	r0, [pc, #168]	; (80009a8 <main+0x4a4>)
 80008fe:	f001 fd5f 	bl	80023c0 <HAL_GPIO_WritePin>

  	  	  if (state == RecOne){
 8000902:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <main+0x4b0>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b04      	cmp	r3, #4
 800090a:	d11c      	bne.n	8000946 <main+0x442>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, on);
 800090c:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <main+0x4bc>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <main+0x4c0>)
 8000912:	fb83 1302 	smull	r1, r3, r3, r2
 8000916:	1159      	asrs	r1, r3, #5
 8000918:	17d3      	asrs	r3, r2, #31
 800091a:	1acb      	subs	r3, r1, r3
 800091c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000920:	fb01 f303 	mul.w	r3, r1, r3
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	2bf9      	cmp	r3, #249	; 0xf9
 8000928:	dc06      	bgt.n	8000938 <main+0x434>
 800092a:	2201      	movs	r2, #1
 800092c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000930:	481c      	ldr	r0, [pc, #112]	; (80009a4 <main+0x4a0>)
 8000932:	f001 fd45 	bl	80023c0 <HAL_GPIO_WritePin>
 8000936:	e00c      	b.n	8000952 <main+0x44e>
  	  		  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093e:	4819      	ldr	r0, [pc, #100]	; (80009a4 <main+0x4a0>)
 8000940:	f001 fd3e 	bl	80023c0 <HAL_GPIO_WritePin>
 8000944:	e005      	b.n	8000952 <main+0x44e>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 7180 	mov.w	r1, #256	; 0x100
 800094c:	4815      	ldr	r0, [pc, #84]	; (80009a4 <main+0x4a0>)
 800094e:	f001 fd37 	bl	80023c0 <HAL_GPIO_WritePin>

  	  	  if (state == RecTwo){
 8000952:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <main+0x4b0>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b05      	cmp	r3, #5
 800095a:	d135      	bne.n	80009c8 <main+0x4c4>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, on);
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <main+0x4bc>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <main+0x4c0>)
 8000962:	fb83 1302 	smull	r1, r3, r3, r2
 8000966:	1159      	asrs	r1, r3, #5
 8000968:	17d3      	asrs	r3, r2, #31
 800096a:	1acb      	subs	r3, r1, r3
 800096c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000970:	fb01 f303 	mul.w	r3, r1, r3
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	2bf9      	cmp	r3, #249	; 0xf9
 8000978:	dc06      	bgt.n	8000988 <main+0x484>
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <main+0x4a4>)
 8000982:	f001 fd1d 	bl	80023c0 <HAL_GPIO_WritePin>
 8000986:	e025      	b.n	80009d4 <main+0x4d0>
  	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098e:	4806      	ldr	r0, [pc, #24]	; (80009a8 <main+0x4a4>)
 8000990:	f001 fd16 	bl	80023c0 <HAL_GPIO_WritePin>
 8000994:	e01e      	b.n	80009d4 <main+0x4d0>
 8000996:	bf00      	nop
 8000998:	200158cc 	.word	0x200158cc
 800099c:	200159d8 	.word	0x200159d8
 80009a0:	20015934 	.word	0x20015934
 80009a4:	40020000 	.word	0x40020000
 80009a8:	40020400 	.word	0x40020400
 80009ac:	200159dc 	.word	0x200159dc
 80009b0:	20000034 	.word	0x20000034
 80009b4:	200158d0 	.word	0x200158d0
 80009b8:	20000028 	.word	0x20000028
 80009bc:	20015938 	.word	0x20015938
 80009c0:	2000002c 	.word	0x2000002c
 80009c4:	10624dd3 	.word	0x10624dd3
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ce:	4817      	ldr	r0, [pc, #92]	; (8000a2c <main+0x528>)
 80009d0:	f001 fcf6 	bl	80023c0 <HAL_GPIO_WritePin>

  	  	  if (state == RecThree){
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <main+0x52c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b06      	cmp	r3, #6
 80009dc:	d11a      	bne.n	8000a14 <main+0x510>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, on);
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <main+0x530>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <main+0x534>)
 80009e4:	fb83 1302 	smull	r1, r3, r3, r2
 80009e8:	1159      	asrs	r1, r3, #5
 80009ea:	17d3      	asrs	r3, r2, #31
 80009ec:	1acb      	subs	r3, r1, r3
 80009ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009f2:	fb01 f303 	mul.w	r3, r1, r3
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	2bf9      	cmp	r3, #249	; 0xf9
 80009fa:	dc05      	bgt.n	8000a08 <main+0x504>
 80009fc:	2201      	movs	r2, #1
 80009fe:	2110      	movs	r1, #16
 8000a00:	480a      	ldr	r0, [pc, #40]	; (8000a2c <main+0x528>)
 8000a02:	f001 fcdd 	bl	80023c0 <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8000a06:	e010      	b.n	8000a2a <main+0x526>
  	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	4807      	ldr	r0, [pc, #28]	; (8000a2c <main+0x528>)
 8000a0e:	f001 fcd7 	bl	80023c0 <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8000a12:	e00a      	b.n	8000a2a <main+0x526>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2110      	movs	r1, #16
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <main+0x528>)
 8000a1a:	f001 fcd1 	bl	80023c0 <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8000a1e:	e004      	b.n	8000a2a <main+0x526>
  	  }
  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, off);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2120      	movs	r1, #32
 8000a24:	4801      	ldr	r0, [pc, #4]	; (8000a2c <main+0x528>)
 8000a26:	f001 fccb 	bl	80023c0 <HAL_GPIO_WritePin>
	  if (exti){
 8000a2a:	e5c6      	b.n	80005ba <main+0xb6>
 8000a2c:	40020400 	.word	0x40020400
 8000a30:	200158d0 	.word	0x200158d0
 8000a34:	2000002c 	.word	0x2000002c
 8000a38:	10624dd3 	.word	0x10624dd3

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b094      	sub	sp, #80	; 0x50
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	2234      	movs	r2, #52	; 0x34
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f003 f994 	bl	8003d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <SystemClock_Config+0xd4>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a29      	ldr	r2, [pc, #164]	; (8000b10 <SystemClock_Config+0xd4>)
 8000a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <SystemClock_Config+0xd4>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <SystemClock_Config+0xd8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a88:	4a22      	ldr	r2, [pc, #136]	; (8000b14 <SystemClock_Config+0xd8>)
 8000a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <SystemClock_Config+0xd8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa4:	2310      	movs	r3, #16
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aac:	2300      	movs	r3, #0
 8000aae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ab4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ab8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aba:	2304      	movs	r3, #4
 8000abc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 ff70 	bl	80029b0 <HAL_RCC_OscConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ad6:	f000 f97d 	bl	8000dd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ada:	230f      	movs	r3, #15
 8000adc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	2102      	movs	r1, #2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 fca0 	bl	800243c <HAL_RCC_ClockConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b02:	f000 f967 	bl	8000dd4 <Error_Handler>
  }
}
 8000b06:	bf00      	nop
 8000b08:	3750      	adds	r7, #80	; 0x50
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40007000 	.word	0x40007000

08000b18 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_DAC_Init+0x4c>)
 8000b28:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <MX_DAC_Init+0x50>)
 8000b2a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000b2c:	480d      	ldr	r0, [pc, #52]	; (8000b64 <MX_DAC_Init+0x4c>)
 8000b2e:	f000 fca4 	bl	800147a <HAL_DAC_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000b38:	f000 f94c 	bl	8000dd4 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b44:	463b      	mov	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4806      	ldr	r0, [pc, #24]	; (8000b64 <MX_DAC_Init+0x4c>)
 8000b4c:	f000 fe3e 	bl	80017cc <HAL_DAC_ConfigChannel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000b56:	f000 f93d 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2001593c 	.word	0x2001593c
 8000b68:	40007400 	.word	0x40007400

08000b6c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b72:	463b      	mov	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_TIM6_Init+0x64>)
 8000b7c:	4a15      	ldr	r2, [pc, #84]	; (8000bd4 <MX_TIM6_Init+0x68>)
 8000b7e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1905;
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <MX_TIM6_Init+0x64>)
 8000b82:	f240 7271 	movw	r2, #1905	; 0x771
 8000b86:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_TIM6_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_TIM6_Init+0x64>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_TIM6_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b9a:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <MX_TIM6_Init+0x64>)
 8000b9c:	f002 f962 	bl	8002e64 <HAL_TIM_Base_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000ba6:	f000 f915 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <MX_TIM6_Init+0x64>)
 8000bb8:	f002 fb7e 	bl	80032b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000bc2:	f000 f907 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20015950 	.word	0x20015950
 8000bd4:	40001000 	.word	0x40001000

08000bd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bdc:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <MX_USART2_UART_Init+0x48>)
 8000bde:	4a11      	ldr	r2, [pc, #68]	; (8000c24 <MX_USART2_UART_Init+0x4c>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_USART2_UART_Init+0x48>)
 8000be4:	4a10      	ldr	r2, [pc, #64]	; (8000c28 <MX_USART2_UART_Init+0x50>)
 8000be6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be8:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <MX_USART2_UART_Init+0x48>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_USART2_UART_Init+0x48>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <MX_USART2_UART_Init+0x48>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_USART2_UART_Init+0x48>)
 8000bfc:	220c      	movs	r2, #12
 8000bfe:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <MX_USART2_UART_Init+0x48>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_USART2_UART_Init+0x48>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <MX_USART2_UART_Init+0x48>)
 8000c0e:	f002 fbe3 	bl	80033d8 <HAL_UART_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000c18:	f000 f8dc 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20015994 	.word	0x20015994
 8000c24:	40004400 	.word	0x40004400
 8000c28:	0007a120 	.word	0x0007a120

08000c2c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_DMA_Init+0x3c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <MX_DMA_Init+0x3c>)
 8000c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_DMA_Init+0x3c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2010      	movs	r0, #16
 8000c54:	f000 fbdb 	bl	800140e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c58:	2010      	movs	r0, #16
 8000c5a:	f000 fbf4 	bl	8001446 <HAL_NVIC_EnableIRQ>

}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b4d      	ldr	r3, [pc, #308]	; (8000dbc <MX_GPIO_Init+0x150>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a4c      	ldr	r2, [pc, #304]	; (8000dbc <MX_GPIO_Init+0x150>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b4a      	ldr	r3, [pc, #296]	; (8000dbc <MX_GPIO_Init+0x150>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b46      	ldr	r3, [pc, #280]	; (8000dbc <MX_GPIO_Init+0x150>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a45      	ldr	r2, [pc, #276]	; (8000dbc <MX_GPIO_Init+0x150>)
 8000ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b43      	ldr	r3, [pc, #268]	; (8000dbc <MX_GPIO_Init+0x150>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	4b3f      	ldr	r3, [pc, #252]	; (8000dbc <MX_GPIO_Init+0x150>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a3e      	ldr	r2, [pc, #248]	; (8000dbc <MX_GPIO_Init+0x150>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b3c      	ldr	r3, [pc, #240]	; (8000dbc <MX_GPIO_Init+0x150>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <MX_GPIO_Init+0x150>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a37      	ldr	r2, [pc, #220]	; (8000dbc <MX_GPIO_Init+0x150>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <MX_GPIO_Init+0x150>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000cf8:	4831      	ldr	r0, [pc, #196]	; (8000dc0 <MX_GPIO_Init+0x154>)
 8000cfa:	f001 fb61 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000d04:	482f      	ldr	r0, [pc, #188]	; (8000dc4 <MX_GPIO_Init+0x158>)
 8000d06:	f001 fb5b 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d10:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <MX_GPIO_Init+0x15c>)
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	482b      	ldr	r0, [pc, #172]	; (8000dcc <MX_GPIO_Init+0x160>)
 8000d20:	f001 f9a4 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8000d24:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4820      	ldr	r0, [pc, #128]	; (8000dc0 <MX_GPIO_Init+0x154>)
 8000d3e:	f001 f995 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 8000d42:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d48:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <MX_GPIO_Init+0x164>)
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	481a      	ldr	r0, [pc, #104]	; (8000dc0 <MX_GPIO_Init+0x154>)
 8000d58:	f001 f988 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8000d5c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4813      	ldr	r0, [pc, #76]	; (8000dc4 <MX_GPIO_Init+0x158>)
 8000d76:	f001 f979 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <MX_GPIO_Init+0x164>)
 8000d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d84:	2302      	movs	r3, #2
 8000d86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_GPIO_Init+0x158>)
 8000d90:	f001 f96c 	bl	800206c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	2017      	movs	r0, #23
 8000d9a:	f000 fb38 	bl	800140e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d9e:	2017      	movs	r0, #23
 8000da0:	f000 fb51 	bl	8001446 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	2028      	movs	r0, #40	; 0x28
 8000daa:	f000 fb30 	bl	800140e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dae:	2028      	movs	r0, #40	; 0x28
 8000db0:	f000 fb49 	bl	8001446 <HAL_NVIC_EnableIRQ>

}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	10210000 	.word	0x10210000
 8000dcc:	40020800 	.word	0x40020800
 8000dd0:	10110000 	.word	0x10110000

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <HAL_MspInit+0x4c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <HAL_MspInit+0x4c>)
 8000df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <HAL_MspInit+0x4c>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <HAL_MspInit+0x4c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <HAL_MspInit+0x4c>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_MspInit+0x4c>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e22:	2007      	movs	r0, #7
 8000e24:	f000 fae8 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40023800 	.word	0x40023800

08000e34 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a33      	ldr	r2, [pc, #204]	; (8000f20 <HAL_DAC_MspInit+0xec>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d160      	bne.n	8000f18 <HAL_DAC_MspInit+0xe4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b32      	ldr	r3, [pc, #200]	; (8000f24 <HAL_DAC_MspInit+0xf0>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a31      	ldr	r2, [pc, #196]	; (8000f24 <HAL_DAC_MspInit+0xf0>)
 8000e60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <HAL_DAC_MspInit+0xf0>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <HAL_DAC_MspInit+0xf0>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a2a      	ldr	r2, [pc, #168]	; (8000f24 <HAL_DAC_MspInit+0xf0>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <HAL_DAC_MspInit+0xf0>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e8e:	2310      	movs	r3, #16
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e92:	2303      	movs	r3, #3
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4821      	ldr	r0, [pc, #132]	; (8000f28 <HAL_DAC_MspInit+0xf4>)
 8000ea2:	f001 f8e3 	bl	800206c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <HAL_DAC_MspInit+0xf8>)
 8000ea8:	4a21      	ldr	r2, [pc, #132]	; (8000f30 <HAL_DAC_MspInit+0xfc>)
 8000eaa:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <HAL_DAC_MspInit+0xf8>)
 8000eae:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000eb2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_DAC_MspInit+0xf8>)
 8000eb6:	2240      	movs	r2, #64	; 0x40
 8000eb8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eba:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <HAL_DAC_MspInit+0xf8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <HAL_DAC_MspInit+0xf8>)
 8000ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <HAL_DAC_MspInit+0xf8>)
 8000eca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ece:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_DAC_MspInit+0xf8>)
 8000ed2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ed6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_DAC_MspInit+0xf8>)
 8000eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ede:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_DAC_MspInit+0xf8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_DAC_MspInit+0xf8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000eec:	480f      	ldr	r0, [pc, #60]	; (8000f2c <HAL_DAC_MspInit+0xf8>)
 8000eee:	f000 fd4f 	bl	8001990 <HAL_DMA_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8000ef8:	f7ff ff6c 	bl	8000dd4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <HAL_DAC_MspInit+0xf8>)
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_DAC_MspInit+0xf8>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2036      	movs	r0, #54	; 0x36
 8000f0e:	f000 fa7e 	bl	800140e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f12:	2036      	movs	r0, #54	; 0x36
 8000f14:	f000 fa97 	bl	8001446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f18:	bf00      	nop
 8000f1a:	3728      	adds	r7, #40	; 0x28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40007400 	.word	0x40007400
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	200158d4 	.word	0x200158d4
 8000f30:	40026088 	.word	0x40026088

08000f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <HAL_TIM_Base_MspInit+0x48>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d115      	bne.n	8000f72 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <HAL_TIM_Base_MspInit+0x4c>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <HAL_TIM_Base_MspInit+0x4c>)
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_TIM_Base_MspInit+0x4c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2036      	movs	r0, #54	; 0x36
 8000f68:	f000 fa51 	bl	800140e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f6c:	2036      	movs	r0, #54	; 0x36
 8000f6e:	f000 fa6a 	bl	8001446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40001000 	.word	0x40001000
 8000f80:	40023800 	.word	0x40023800

08000f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a19      	ldr	r2, [pc, #100]	; (8001008 <HAL_UART_MspInit+0x84>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d12b      	bne.n	8000ffe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <HAL_UART_MspInit+0x88>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	4a17      	ldr	r2, [pc, #92]	; (800100c <HAL_UART_MspInit+0x88>)
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_UART_MspInit+0x88>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_UART_MspInit+0x88>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a10      	ldr	r2, [pc, #64]	; (800100c <HAL_UART_MspInit+0x88>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_UART_MspInit+0x88>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fde:	230c      	movs	r3, #12
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <HAL_UART_MspInit+0x8c>)
 8000ffa:	f001 f837 	bl	800206c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40004400 	.word	0x40004400
 800100c:	40023800 	.word	0x40023800
 8001010:	40020000 	.word	0x40020000

08001014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <MemManage_Handler+0x4>

0800102e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <BusFault_Handler+0x4>

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler+0x4>

0800103a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001068:	f000 f8d6 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <DMA1_Stream5_IRQHandler+0x10>)
 8001076:	f000 fd91 	bl	8001b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200158d4 	.word	0x200158d4

08001084 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	exti = on;
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <EXTI9_5_IRQHandler+0x2c>)
 800108a:	2201      	movs	r2, #1
 800108c:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800108e:	2040      	movs	r0, #64	; 0x40
 8001090:	f001 f9b0 	bl	80023f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001094:	2080      	movs	r0, #128	; 0x80
 8001096:	f001 f9ad 	bl	80023f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800109a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800109e:	f001 f9a9 	bl	80023f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80010a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010a6:	f001 f9a5 	bl	80023f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20015934 	.word	0x20015934

080010b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	exti = on;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <EXTI15_10_IRQHandler+0x20>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80010be:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010c2:	f001 f997 	bl	80023f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80010c6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010ca:	f001 f993 	bl	80023f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20015934 	.word	0x20015934

080010d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <TIM6_DAC_IRQHandler+0x14>)
 80010de:	f000 fb03 	bl	80016e8 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80010e2:	4803      	ldr	r0, [pc, #12]	; (80010f0 <TIM6_DAC_IRQHandler+0x18>)
 80010e4:	f001 ff0d 	bl	8002f02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2001593c 	.word	0x2001593c
 80010f0:	20015950 	.word	0x20015950

080010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <SystemInit+0x28>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a07      	ldr	r2, [pc, #28]	; (800111c <SystemInit+0x28>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <SystemInit+0x28>)
 800110a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800110e:	609a      	str	r2, [r3, #8]
#endif
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001158 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001124:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001126:	e003      	b.n	8001130 <LoopCopyDataInit>

08001128 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800112a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800112c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800112e:	3104      	adds	r1, #4

08001130 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001130:	480b      	ldr	r0, [pc, #44]	; (8001160 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001134:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001136:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001138:	d3f6      	bcc.n	8001128 <CopyDataInit>
  ldr  r2, =_sbss
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800113c:	e002      	b.n	8001144 <LoopFillZerobss>

0800113e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800113e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001140:	f842 3b04 	str.w	r3, [r2], #4

08001144 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001146:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001148:	d3f9      	bcc.n	800113e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800114a:	f7ff ffd3 	bl	80010f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114e:	f002 fdef 	bl	8003d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001152:	f7ff f9d7 	bl	8000504 <main>
  bx  lr    
 8001156:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001158:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800115c:	08003ddc 	.word	0x08003ddc
  ldr  r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001164:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001168:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800116c:	200159e4 	.word	0x200159e4

08001170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC_IRQHandler>
	...

08001174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <HAL_Init+0x40>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_Init+0x40>)
 800118a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_Init+0x40>)
 8001196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 f92b 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f000 f808 	bl	80011b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff fe1c 	bl	8000de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023c00 	.word	0x40023c00

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x54>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x58>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f943 	bl	8001462 <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00e      	b.n	8001204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d80a      	bhi.n	8001202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 f90b 	bl	800140e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_InitTick+0x5c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000000 	.word	0x20000000
 8001210:	20000008 	.word	0x20000008
 8001214:	20000004 	.word	0x20000004

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008
 800123c:	200159e0 	.word	0x200159e0

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	200159e0 	.word	0x200159e0

08001258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001274:	4013      	ands	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128a:	4a04      	ldr	r2, [pc, #16]	; (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	60d3      	str	r3, [r2, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <__NVIC_GetPriorityGrouping+0x18>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	f003 0307 	and.w	r3, r3, #7
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db0b      	blt.n	80012e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f003 021f 	and.w	r2, r3, #31
 80012d4:	4907      	ldr	r1, [pc, #28]	; (80012f4 <__NVIC_EnableIRQ+0x38>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	2001      	movs	r0, #1
 80012de:	fa00 f202 	lsl.w	r2, r0, r2
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000e100 	.word	0xe000e100

080012f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	db0a      	blt.n	8001322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	490c      	ldr	r1, [pc, #48]	; (8001344 <__NVIC_SetPriority+0x4c>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	440b      	add	r3, r1
 800131c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001320:	e00a      	b.n	8001338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4908      	ldr	r1, [pc, #32]	; (8001348 <__NVIC_SetPriority+0x50>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	3b04      	subs	r3, #4
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	440b      	add	r3, r1
 8001336:	761a      	strb	r2, [r3, #24]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f1c3 0307 	rsb	r3, r3, #7
 8001366:	2b04      	cmp	r3, #4
 8001368:	bf28      	it	cs
 800136a:	2304      	movcs	r3, #4
 800136c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3304      	adds	r3, #4
 8001372:	2b06      	cmp	r3, #6
 8001374:	d902      	bls.n	800137c <NVIC_EncodePriority+0x30>
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3b03      	subs	r3, #3
 800137a:	e000      	b.n	800137e <NVIC_EncodePriority+0x32>
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	f04f 32ff 	mov.w	r2, #4294967295
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001394:	f04f 31ff 	mov.w	r1, #4294967295
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43d9      	mvns	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	4313      	orrs	r3, r2
         );
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	; 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c4:	d301      	bcc.n	80013ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00f      	b.n	80013ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <SysTick_Config+0x40>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d2:	210f      	movs	r1, #15
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f7ff ff8e 	bl	80012f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <SysTick_Config+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <SysTick_Config+0x40>)
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff29 	bl	8001258 <__NVIC_SetPriorityGrouping>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001420:	f7ff ff3e 	bl	80012a0 <__NVIC_GetPriorityGrouping>
 8001424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	f7ff ff8e 	bl	800134c <NVIC_EncodePriority>
 8001430:	4602      	mov	r2, r0
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff5d 	bl	80012f8 <__NVIC_SetPriority>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff31 	bl	80012bc <__NVIC_EnableIRQ>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffa2 	bl	80013b4 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e014      	b.n	80014b6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	791b      	ldrb	r3, [r3, #4]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d105      	bne.n	80014a2 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fcc9 	bl	8000e34 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2202      	movs	r2, #2
 80014a6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80014be:	b480      	push	{r7}
 80014c0:	b085      	sub	sp, #20
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	795b      	ldrb	r3, [r3, #5]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_DAC_Start+0x1e>
 80014d8:	2302      	movs	r3, #2
 80014da:	e050      	b.n	800157e <HAL_DAC_Start+0xc0>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2202      	movs	r2, #2
 80014e6:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6819      	ldr	r1, [r3, #0]
 80014ee:	2201      	movs	r2, #1
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	409a      	lsls	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d11a      	bne.n	8001538 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001518:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2b04      	cmp	r3, #4
 800151e:	d127      	bne.n	8001570 <HAL_DAC_Start+0xb2>
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	2b38      	cmp	r3, #56	; 0x38
 8001524:	d124      	bne.n	8001570 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f042 0201 	orr.w	r2, r2, #1
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	e01b      	b.n	8001570 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001542:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800154e:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001556:	d10b      	bne.n	8001570 <HAL_DAC_Start+0xb2>
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800155e:	d107      	bne.n	8001570 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 0202 	orr.w	r2, r2, #2
 800156e:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	795b      	ldrb	r3, [r3, #5]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d101      	bne.n	80015aa <HAL_DAC_Start_DMA+0x1e>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e08e      	b.n	80016c8 <HAL_DAC_Start_DMA+0x13c>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2201      	movs	r2, #1
 80015ae:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2202      	movs	r2, #2
 80015b4:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d12a      	bne.n	8001612 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a43      	ldr	r2, [pc, #268]	; (80016d0 <HAL_DAC_Start_DMA+0x144>)
 80015c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4a42      	ldr	r2, [pc, #264]	; (80016d4 <HAL_DAC_Start_DMA+0x148>)
 80015ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a41      	ldr	r2, [pc, #260]	; (80016d8 <HAL_DAC_Start_DMA+0x14c>)
 80015d2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015e2:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d009      	beq.n	80015fe <HAL_DAC_Start_DMA+0x72>
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d00c      	beq.n	8001608 <HAL_DAC_Start_DMA+0x7c>
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d000      	beq.n	80015f4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80015f2:	e039      	b.n	8001668 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3308      	adds	r3, #8
 80015fa:	617b      	str	r3, [r7, #20]
        break;
 80015fc:	e034      	b.n	8001668 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	330c      	adds	r3, #12
 8001604:	617b      	str	r3, [r7, #20]
        break;
 8001606:	e02f      	b.n	8001668 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3310      	adds	r3, #16
 800160e:	617b      	str	r3, [r7, #20]
        break;
 8001610:	e02a      	b.n	8001668 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	4a31      	ldr	r2, [pc, #196]	; (80016dc <HAL_DAC_Start_DMA+0x150>)
 8001618:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	4a30      	ldr	r2, [pc, #192]	; (80016e0 <HAL_DAC_Start_DMA+0x154>)
 8001620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	4a2f      	ldr	r2, [pc, #188]	; (80016e4 <HAL_DAC_Start_DMA+0x158>)
 8001628:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001638:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	2b04      	cmp	r3, #4
 800163e:	d009      	beq.n	8001654 <HAL_DAC_Start_DMA+0xc8>
 8001640:	2b08      	cmp	r3, #8
 8001642:	d00c      	beq.n	800165e <HAL_DAC_Start_DMA+0xd2>
 8001644:	2b00      	cmp	r3, #0
 8001646:	d000      	beq.n	800164a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001648:	e00e      	b.n	8001668 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	3314      	adds	r3, #20
 8001650:	617b      	str	r3, [r7, #20]
        break;
 8001652:	e009      	b.n	8001668 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	3318      	adds	r3, #24
 800165a:	617b      	str	r3, [r7, #20]
        break;
 800165c:	e004      	b.n	8001668 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	331c      	adds	r3, #28
 8001664:	617b      	str	r3, [r7, #20]
        break;
 8001666:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10f      	bne.n	800168e <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800167c:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6898      	ldr	r0, [r3, #8]
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	f000 fa30 	bl	8001aec <HAL_DMA_Start_IT>
 800168c:	e00e      	b.n	80016ac <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800169c:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	68d8      	ldr	r0, [r3, #12]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	f000 fa20 	bl	8001aec <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6819      	ldr	r1, [r3, #0]
 80016b2:	2201      	movs	r2, #1
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	409a      	lsls	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	08001867 	.word	0x08001867
 80016d4:	08001889 	.word	0x08001889
 80016d8:	080018a5 	.word	0x080018a5
 80016dc:	08001923 	.word	0x08001923
 80016e0:	08001945 	.word	0x08001945
 80016e4:	08001961 	.word	0x08001961

080016e8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016fe:	d118      	bne.n	8001732 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2204      	movs	r2, #4
 8001704:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	f043 0201 	orr.w	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800171a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800172a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f843 	bl	80017b8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800173c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001740:	d118      	bne.n	8001774 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2204      	movs	r2, #4
 8001746:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	f043 0202 	orr.w	r2, r3, #2
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800175c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800176c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f8cd 	bl	800190e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	795b      	ldrb	r3, [r3, #5]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_DAC_ConfigChannel+0x20>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e036      	b.n	800185a <HAL_DAC_ConfigChannel+0x8e>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2201      	movs	r2, #1
 80017f0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2202      	movs	r2, #2
 80017f6:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001800:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	4013      	ands	r3, r2
 8001810:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4313      	orrs	r3, r2
 800182a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6819      	ldr	r1, [r3, #0]
 800183a:	22c0      	movs	r2, #192	; 0xc0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	400a      	ands	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2201      	movs	r2, #1
 8001850:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b084      	sub	sp, #16
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001872:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f7ff ff81 	bl	800177c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2201      	movs	r2, #1
 800187e:	711a      	strb	r2, [r3, #4]
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001894:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f7ff ff7a 	bl	8001790 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800189c:	bf00      	nop
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b0:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	f043 0204 	orr.w	r2, r3, #4
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f7ff ff70 	bl	80017a4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	711a      	strb	r2, [r3, #4]
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192e:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f7ff ffce 	bl	80018d2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2201      	movs	r2, #1
 800193a:	711a      	strb	r2, [r3, #4]
}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001950:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f7ff ffc7 	bl	80018e6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	f043 0204 	orr.w	r2, r3, #4
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f7ff ffbd 	bl	80018fa <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	711a      	strb	r2, [r3, #4]
}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800199c:	f7ff fc50 	bl	8001240 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e099      	b.n	8001ae0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0201 	bic.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019cc:	e00f      	b.n	80019ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ce:	f7ff fc37 	bl	8001240 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b05      	cmp	r3, #5
 80019da:	d908      	bls.n	80019ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2220      	movs	r2, #32
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2203      	movs	r2, #3
 80019e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e078      	b.n	8001ae0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1e8      	bne.n	80019ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <HAL_DMA_Init+0x158>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d107      	bne.n	8001a58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	4313      	orrs	r3, r2
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f023 0307 	bic.w	r3, r3, #7
 8001a6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d117      	bne.n	8001ab2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00e      	beq.n	8001ab2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fa6f 	bl	8001f78 <DMA_CheckFifoParam>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2240      	movs	r2, #64	; 0x40
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e016      	b.n	8001ae0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 fa26 	bl	8001f0c <DMA_CalcBaseAndBitshift>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac8:	223f      	movs	r2, #63	; 0x3f
 8001aca:	409a      	lsls	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	f010803f 	.word	0xf010803f

08001aec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_DMA_Start_IT+0x26>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e040      	b.n	8001b94 <HAL_DMA_Start_IT+0xa8>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d12f      	bne.n	8001b86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2202      	movs	r2, #2
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 f9b8 	bl	8001eb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b44:	223f      	movs	r2, #63	; 0x3f
 8001b46:	409a      	lsls	r2, r3
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0216 	orr.w	r2, r2, #22
 8001b5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0208 	orr.w	r2, r2, #8
 8001b72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	e005      	b.n	8001b92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ba8:	4b92      	ldr	r3, [pc, #584]	; (8001df4 <HAL_DMA_IRQHandler+0x258>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a92      	ldr	r2, [pc, #584]	; (8001df8 <HAL_DMA_IRQHandler+0x25c>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	0a9b      	lsrs	r3, r3, #10
 8001bb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d01a      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d013      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0204 	bic.w	r2, r2, #4
 8001bee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d012      	beq.n	8001c3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00b      	beq.n	8001c3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c36:	f043 0202 	orr.w	r2, r3, #2
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c42:	2204      	movs	r2, #4
 8001c44:	409a      	lsls	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d012      	beq.n	8001c74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00b      	beq.n	8001c74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c60:	2204      	movs	r2, #4
 8001c62:	409a      	lsls	r2, r3
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6c:	f043 0204 	orr.w	r2, r3, #4
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c78:	2210      	movs	r2, #16
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d043      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d03c      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c96:	2210      	movs	r2, #16
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d018      	beq.n	8001cde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d108      	bne.n	8001ccc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d024      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	4798      	blx	r3
 8001cca:	e01f      	b.n	8001d0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01b      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
 8001cdc:	e016      	b.n	8001d0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d107      	bne.n	8001cfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0208 	bic.w	r2, r2, #8
 8001cfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d10:	2220      	movs	r2, #32
 8001d12:	409a      	lsls	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 808e 	beq.w	8001e3a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 8086 	beq.w	8001e3a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d32:	2220      	movs	r2, #32
 8001d34:	409a      	lsls	r2, r3
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d136      	bne.n	8001db4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0216 	bic.w	r2, r2, #22
 8001d54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695a      	ldr	r2, [r3, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d103      	bne.n	8001d76 <HAL_DMA_IRQHandler+0x1da>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d007      	beq.n	8001d86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0208 	bic.w	r2, r2, #8
 8001d84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	223f      	movs	r2, #63	; 0x3f
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d07d      	beq.n	8001ea6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	4798      	blx	r3
        }
        return;
 8001db2:	e078      	b.n	8001ea6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d01c      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d108      	bne.n	8001de2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d030      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	4798      	blx	r3
 8001de0:	e02b      	b.n	8001e3a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d027      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	4798      	blx	r3
 8001df2:	e022      	b.n	8001e3a <HAL_DMA_IRQHandler+0x29e>
 8001df4:	20000000 	.word	0x20000000
 8001df8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10f      	bne.n	8001e2a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0210 	bic.w	r2, r2, #16
 8001e18:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d032      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d022      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2205      	movs	r2, #5
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0201 	bic.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d307      	bcc.n	8001e82 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f2      	bne.n	8001e66 <HAL_DMA_IRQHandler+0x2ca>
 8001e80:	e000      	b.n	8001e84 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001e82:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	4798      	blx	r3
 8001ea4:	e000      	b.n	8001ea8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001ea6:	bf00      	nop
    }
  }
}
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop

08001eb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ecc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b40      	cmp	r3, #64	; 0x40
 8001edc:	d108      	bne.n	8001ef0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001eee:	e007      	b.n	8001f00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	60da      	str	r2, [r3, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	3b10      	subs	r3, #16
 8001f1c:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <DMA_CalcBaseAndBitshift+0x64>)
 8001f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f26:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <DMA_CalcBaseAndBitshift+0x68>)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d909      	bls.n	8001f4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f42:	f023 0303 	bic.w	r3, r3, #3
 8001f46:	1d1a      	adds	r2, r3, #4
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	659a      	str	r2, [r3, #88]	; 0x58
 8001f4c:	e007      	b.n	8001f5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f56:	f023 0303 	bic.w	r3, r3, #3
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	aaaaaaab 	.word	0xaaaaaaab
 8001f74:	08003dc4 	.word	0x08003dc4

08001f78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d11f      	bne.n	8001fd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d855      	bhi.n	8002044 <DMA_CheckFifoParam+0xcc>
 8001f98:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <DMA_CheckFifoParam+0x28>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08001fb1 	.word	0x08001fb1
 8001fa4:	08001fc3 	.word	0x08001fc3
 8001fa8:	08001fb1 	.word	0x08001fb1
 8001fac:	08002045 	.word	0x08002045
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d045      	beq.n	8002048 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc0:	e042      	b.n	8002048 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fca:	d13f      	bne.n	800204c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd0:	e03c      	b.n	800204c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fda:	d121      	bne.n	8002020 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d836      	bhi.n	8002050 <DMA_CheckFifoParam+0xd8>
 8001fe2:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <DMA_CheckFifoParam+0x70>)
 8001fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe8:	08001ff9 	.word	0x08001ff9
 8001fec:	08001fff 	.word	0x08001fff
 8001ff0:	08001ff9 	.word	0x08001ff9
 8001ff4:	08002011 	.word	0x08002011
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8001ffc:	e02f      	b.n	800205e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d024      	beq.n	8002054 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800200e:	e021      	b.n	8002054 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002018:	d11e      	bne.n	8002058 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800201e:	e01b      	b.n	8002058 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d902      	bls.n	800202c <DMA_CheckFifoParam+0xb4>
 8002026:	2b03      	cmp	r3, #3
 8002028:	d003      	beq.n	8002032 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800202a:	e018      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
      break;
 8002030:	e015      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00e      	beq.n	800205c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	73fb      	strb	r3, [r7, #15]
      break;
 8002042:	e00b      	b.n	800205c <DMA_CheckFifoParam+0xe4>
      break;
 8002044:	bf00      	nop
 8002046:	e00a      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      break;
 8002048:	bf00      	nop
 800204a:	e008      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      break;
 800204c:	bf00      	nop
 800204e:	e006      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      break;
 8002050:	bf00      	nop
 8002052:	e004      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      break;
 8002054:	bf00      	nop
 8002056:	e002      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      break;   
 8002058:	bf00      	nop
 800205a:	e000      	b.n	800205e <DMA_CheckFifoParam+0xe6>
      break;
 800205c:	bf00      	nop
    }
  } 
  
  return status; 
 800205e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	e165      	b.n	8002354 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002088:	2201      	movs	r2, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	f040 8154 	bne.w	800234e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d00b      	beq.n	80020c6 <HAL_GPIO_Init+0x5a>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d007      	beq.n	80020c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ba:	2b11      	cmp	r3, #17
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b12      	cmp	r3, #18
 80020c4:	d130      	bne.n	8002128 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 0201 	and.w	r2, r3, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0xfc>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b12      	cmp	r3, #18
 8002166:	d123      	bne.n	80021b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	08da      	lsrs	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3208      	adds	r2, #8
 8002170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	220f      	movs	r2, #15
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	08da      	lsrs	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3208      	adds	r2, #8
 80021aa:	69b9      	ldr	r1, [r7, #24]
 80021ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0203 	and.w	r2, r3, #3
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80ae 	beq.w	800234e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b5c      	ldr	r3, [pc, #368]	; (8002368 <HAL_GPIO_Init+0x2fc>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	4a5b      	ldr	r2, [pc, #364]	; (8002368 <HAL_GPIO_Init+0x2fc>)
 80021fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002200:	6453      	str	r3, [r2, #68]	; 0x44
 8002202:	4b59      	ldr	r3, [pc, #356]	; (8002368 <HAL_GPIO_Init+0x2fc>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800220e:	4a57      	ldr	r2, [pc, #348]	; (800236c <HAL_GPIO_Init+0x300>)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3302      	adds	r3, #2
 8002216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	220f      	movs	r2, #15
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4e      	ldr	r2, [pc, #312]	; (8002370 <HAL_GPIO_Init+0x304>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d025      	beq.n	8002286 <HAL_GPIO_Init+0x21a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4d      	ldr	r2, [pc, #308]	; (8002374 <HAL_GPIO_Init+0x308>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d01f      	beq.n	8002282 <HAL_GPIO_Init+0x216>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4c      	ldr	r2, [pc, #304]	; (8002378 <HAL_GPIO_Init+0x30c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d019      	beq.n	800227e <HAL_GPIO_Init+0x212>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4b      	ldr	r2, [pc, #300]	; (800237c <HAL_GPIO_Init+0x310>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_GPIO_Init+0x20e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4a      	ldr	r2, [pc, #296]	; (8002380 <HAL_GPIO_Init+0x314>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00d      	beq.n	8002276 <HAL_GPIO_Init+0x20a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a49      	ldr	r2, [pc, #292]	; (8002384 <HAL_GPIO_Init+0x318>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d007      	beq.n	8002272 <HAL_GPIO_Init+0x206>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a48      	ldr	r2, [pc, #288]	; (8002388 <HAL_GPIO_Init+0x31c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_GPIO_Init+0x202>
 800226a:	2306      	movs	r3, #6
 800226c:	e00c      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 800226e:	2307      	movs	r3, #7
 8002270:	e00a      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002272:	2305      	movs	r3, #5
 8002274:	e008      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002276:	2304      	movs	r3, #4
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 800227a:	2303      	movs	r3, #3
 800227c:	e004      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 800227e:	2302      	movs	r3, #2
 8002280:	e002      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_GPIO_Init+0x21c>
 8002286:	2300      	movs	r3, #0
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	f002 0203 	and.w	r2, r2, #3
 800228e:	0092      	lsls	r2, r2, #2
 8002290:	4093      	lsls	r3, r2
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002298:	4934      	ldr	r1, [pc, #208]	; (800236c <HAL_GPIO_Init+0x300>)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	3302      	adds	r3, #2
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022a6:	4b39      	ldr	r3, [pc, #228]	; (800238c <HAL_GPIO_Init+0x320>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022ca:	4a30      	ldr	r2, [pc, #192]	; (800238c <HAL_GPIO_Init+0x320>)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022d0:	4b2e      	ldr	r3, [pc, #184]	; (800238c <HAL_GPIO_Init+0x320>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022f4:	4a25      	ldr	r2, [pc, #148]	; (800238c <HAL_GPIO_Init+0x320>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022fa:	4b24      	ldr	r3, [pc, #144]	; (800238c <HAL_GPIO_Init+0x320>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800231e:	4a1b      	ldr	r2, [pc, #108]	; (800238c <HAL_GPIO_Init+0x320>)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_GPIO_Init+0x320>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002348:	4a10      	ldr	r2, [pc, #64]	; (800238c <HAL_GPIO_Init+0x320>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3301      	adds	r3, #1
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b0f      	cmp	r3, #15
 8002358:	f67f ae96 	bls.w	8002088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800235c:	bf00      	nop
 800235e:	3724      	adds	r7, #36	; 0x24
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	40023800 	.word	0x40023800
 800236c:	40013800 	.word	0x40013800
 8002370:	40020000 	.word	0x40020000
 8002374:	40020400 	.word	0x40020400
 8002378:	40020800 	.word	0x40020800
 800237c:	40020c00 	.word	0x40020c00
 8002380:	40021000 	.word	0x40021000
 8002384:	40021400 	.word	0x40021400
 8002388:	40021800 	.word	0x40021800
 800238c:	40013c00 	.word	0x40013c00

08002390 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	887b      	ldrh	r3, [r7, #2]
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023a8:	2301      	movs	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
 80023ac:	e001      	b.n	80023b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]
 80023cc:	4613      	mov	r3, r2
 80023ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d0:	787b      	ldrb	r3, [r7, #1]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d6:	887a      	ldrh	r2, [r7, #2]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023dc:	e003      	b.n	80023e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023de:	887b      	ldrh	r3, [r7, #2]
 80023e0:	041a      	lsls	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	619a      	str	r2, [r3, #24]
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023fe:	4b08      	ldr	r3, [pc, #32]	; (8002420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	4013      	ands	r3, r2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d006      	beq.n	8002418 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800240a:	4a05      	ldr	r2, [pc, #20]	; (8002420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f806 	bl	8002424 <HAL_GPIO_EXTI_Callback>
  }
}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40013c00 	.word	0x40013c00

08002424 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0cc      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002450:	4b68      	ldr	r3, [pc, #416]	; (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d90c      	bls.n	8002478 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b65      	ldr	r3, [pc, #404]	; (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b63      	ldr	r3, [pc, #396]	; (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0b8      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d020      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002490:	4b59      	ldr	r3, [pc, #356]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4a58      	ldr	r2, [pc, #352]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800249a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a8:	4b53      	ldr	r3, [pc, #332]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a52      	ldr	r2, [pc, #328]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b4:	4b50      	ldr	r3, [pc, #320]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	494d      	ldr	r1, [pc, #308]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d044      	beq.n	800255c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b47      	ldr	r3, [pc, #284]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d119      	bne.n	800251a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e07f      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d003      	beq.n	80024fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fa:	4b3f      	ldr	r3, [pc, #252]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e06f      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250a:	4b3b      	ldr	r3, [pc, #236]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e067      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251a:	4b37      	ldr	r3, [pc, #220]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f023 0203 	bic.w	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4934      	ldr	r1, [pc, #208]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	4313      	orrs	r3, r2
 800252a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800252c:	f7fe fe88 	bl	8001240 <HAL_GetTick>
 8002530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	e00a      	b.n	800254a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002534:	f7fe fe84 	bl	8001240 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e04f      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254a:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 020c 	and.w	r2, r3, #12
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	429a      	cmp	r2, r3
 800255a:	d1eb      	bne.n	8002534 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800255c:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d20c      	bcs.n	8002584 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e032      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4916      	ldr	r1, [pc, #88]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	490e      	ldr	r1, [pc, #56]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025c2:	f000 f855 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 80025c6:	4601      	mov	r1, r0
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	5cd3      	ldrb	r3, [r2, r3]
 80025d6:	fa21 f303 	lsr.w	r3, r1, r3
 80025da:	4a09      	ldr	r2, [pc, #36]	; (8002600 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe fde8 	bl	80011b8 <HAL_InitTick>

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023c00 	.word	0x40023c00
 80025f8:	40023800 	.word	0x40023800
 80025fc:	08003dac 	.word	0x08003dac
 8002600:	20000000 	.word	0x20000000
 8002604:	20000004 	.word	0x20000004

08002608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <HAL_RCC_GetHCLKFreq+0x14>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000000 	.word	0x20000000

08002620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002624:	f7ff fff0 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8002628:	4601      	mov	r1, r0
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	0a9b      	lsrs	r3, r3, #10
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4a03      	ldr	r2, [pc, #12]	; (8002644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002636:	5cd3      	ldrb	r3, [r2, r3]
 8002638:	fa21 f303 	lsr.w	r3, r1, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40023800 	.word	0x40023800
 8002644:	08003dbc 	.word	0x08003dbc

08002648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800264c:	f7ff ffdc 	bl	8002608 <HAL_RCC_GetHCLKFreq>
 8002650:	4601      	mov	r1, r0
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	0b5b      	lsrs	r3, r3, #13
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	4a03      	ldr	r2, [pc, #12]	; (800266c <HAL_RCC_GetPCLK2Freq+0x24>)
 800265e:	5cd3      	ldrb	r3, [r2, r3]
 8002660:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40023800 	.word	0x40023800
 800266c:	08003dbc 	.word	0x08003dbc

08002670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800268a:	4bc6      	ldr	r3, [pc, #792]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b0c      	cmp	r3, #12
 8002694:	f200 817e 	bhi.w	8002994 <HAL_RCC_GetSysClockFreq+0x324>
 8002698:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <HAL_RCC_GetSysClockFreq+0x30>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	080026d5 	.word	0x080026d5
 80026a4:	08002995 	.word	0x08002995
 80026a8:	08002995 	.word	0x08002995
 80026ac:	08002995 	.word	0x08002995
 80026b0:	080026db 	.word	0x080026db
 80026b4:	08002995 	.word	0x08002995
 80026b8:	08002995 	.word	0x08002995
 80026bc:	08002995 	.word	0x08002995
 80026c0:	080026e1 	.word	0x080026e1
 80026c4:	08002995 	.word	0x08002995
 80026c8:	08002995 	.word	0x08002995
 80026cc:	08002995 	.word	0x08002995
 80026d0:	0800283d 	.word	0x0800283d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026d4:	4bb4      	ldr	r3, [pc, #720]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x338>)
 80026d6:	613b      	str	r3, [r7, #16]
       break;
 80026d8:	e15f      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026da:	4bb4      	ldr	r3, [pc, #720]	; (80029ac <HAL_RCC_GetSysClockFreq+0x33c>)
 80026dc:	613b      	str	r3, [r7, #16]
      break;
 80026de:	e15c      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026e0:	4bb0      	ldr	r3, [pc, #704]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x334>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026e8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ea:	4bae      	ldr	r3, [pc, #696]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x334>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d04a      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f6:	4bab      	ldr	r3, [pc, #684]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x334>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	099b      	lsrs	r3, r3, #6
 80026fc:	f04f 0400 	mov.w	r4, #0
 8002700:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	ea03 0501 	and.w	r5, r3, r1
 800270c:	ea04 0602 	and.w	r6, r4, r2
 8002710:	4629      	mov	r1, r5
 8002712:	4632      	mov	r2, r6
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	f04f 0400 	mov.w	r4, #0
 800271c:	0154      	lsls	r4, r2, #5
 800271e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002722:	014b      	lsls	r3, r1, #5
 8002724:	4619      	mov	r1, r3
 8002726:	4622      	mov	r2, r4
 8002728:	1b49      	subs	r1, r1, r5
 800272a:	eb62 0206 	sbc.w	r2, r2, r6
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	f04f 0400 	mov.w	r4, #0
 8002736:	0194      	lsls	r4, r2, #6
 8002738:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800273c:	018b      	lsls	r3, r1, #6
 800273e:	1a5b      	subs	r3, r3, r1
 8002740:	eb64 0402 	sbc.w	r4, r4, r2
 8002744:	f04f 0100 	mov.w	r1, #0
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	00e2      	lsls	r2, r4, #3
 800274e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002752:	00d9      	lsls	r1, r3, #3
 8002754:	460b      	mov	r3, r1
 8002756:	4614      	mov	r4, r2
 8002758:	195b      	adds	r3, r3, r5
 800275a:	eb44 0406 	adc.w	r4, r4, r6
 800275e:	f04f 0100 	mov.w	r1, #0
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	0262      	lsls	r2, r4, #9
 8002768:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800276c:	0259      	lsls	r1, r3, #9
 800276e:	460b      	mov	r3, r1
 8002770:	4614      	mov	r4, r2
 8002772:	4618      	mov	r0, r3
 8002774:	4621      	mov	r1, r4
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f04f 0400 	mov.w	r4, #0
 800277c:	461a      	mov	r2, r3
 800277e:	4623      	mov	r3, r4
 8002780:	f7fd fd40 	bl	8000204 <__aeabi_uldivmod>
 8002784:	4603      	mov	r3, r0
 8002786:	460c      	mov	r4, r1
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	e049      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800278c:	4b85      	ldr	r3, [pc, #532]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	f04f 0400 	mov.w	r4, #0
 8002796:	f240 11ff 	movw	r1, #511	; 0x1ff
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	ea03 0501 	and.w	r5, r3, r1
 80027a2:	ea04 0602 	and.w	r6, r4, r2
 80027a6:	4629      	mov	r1, r5
 80027a8:	4632      	mov	r2, r6
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	f04f 0400 	mov.w	r4, #0
 80027b2:	0154      	lsls	r4, r2, #5
 80027b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027b8:	014b      	lsls	r3, r1, #5
 80027ba:	4619      	mov	r1, r3
 80027bc:	4622      	mov	r2, r4
 80027be:	1b49      	subs	r1, r1, r5
 80027c0:	eb62 0206 	sbc.w	r2, r2, r6
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	f04f 0400 	mov.w	r4, #0
 80027cc:	0194      	lsls	r4, r2, #6
 80027ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027d2:	018b      	lsls	r3, r1, #6
 80027d4:	1a5b      	subs	r3, r3, r1
 80027d6:	eb64 0402 	sbc.w	r4, r4, r2
 80027da:	f04f 0100 	mov.w	r1, #0
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	00e2      	lsls	r2, r4, #3
 80027e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027e8:	00d9      	lsls	r1, r3, #3
 80027ea:	460b      	mov	r3, r1
 80027ec:	4614      	mov	r4, r2
 80027ee:	195b      	adds	r3, r3, r5
 80027f0:	eb44 0406 	adc.w	r4, r4, r6
 80027f4:	f04f 0100 	mov.w	r1, #0
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	02a2      	lsls	r2, r4, #10
 80027fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002802:	0299      	lsls	r1, r3, #10
 8002804:	460b      	mov	r3, r1
 8002806:	4614      	mov	r4, r2
 8002808:	4618      	mov	r0, r3
 800280a:	4621      	mov	r1, r4
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f04f 0400 	mov.w	r4, #0
 8002812:	461a      	mov	r2, r3
 8002814:	4623      	mov	r3, r4
 8002816:	f7fd fcf5 	bl	8000204 <__aeabi_uldivmod>
 800281a:	4603      	mov	r3, r0
 800281c:	460c      	mov	r4, r1
 800281e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002820:	4b60      	ldr	r3, [pc, #384]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	3301      	adds	r3, #1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	fbb2 f3f3 	udiv	r3, r2, r3
 8002838:	613b      	str	r3, [r7, #16]
      break;
 800283a:	e0ae      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800283c:	4b59      	ldr	r3, [pc, #356]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002844:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002846:	4b57      	ldr	r3, [pc, #348]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d04a      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002852:	4b54      	ldr	r3, [pc, #336]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	099b      	lsrs	r3, r3, #6
 8002858:	f04f 0400 	mov.w	r4, #0
 800285c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	ea03 0501 	and.w	r5, r3, r1
 8002868:	ea04 0602 	and.w	r6, r4, r2
 800286c:	4629      	mov	r1, r5
 800286e:	4632      	mov	r2, r6
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	f04f 0400 	mov.w	r4, #0
 8002878:	0154      	lsls	r4, r2, #5
 800287a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800287e:	014b      	lsls	r3, r1, #5
 8002880:	4619      	mov	r1, r3
 8002882:	4622      	mov	r2, r4
 8002884:	1b49      	subs	r1, r1, r5
 8002886:	eb62 0206 	sbc.w	r2, r2, r6
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	f04f 0400 	mov.w	r4, #0
 8002892:	0194      	lsls	r4, r2, #6
 8002894:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002898:	018b      	lsls	r3, r1, #6
 800289a:	1a5b      	subs	r3, r3, r1
 800289c:	eb64 0402 	sbc.w	r4, r4, r2
 80028a0:	f04f 0100 	mov.w	r1, #0
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	00e2      	lsls	r2, r4, #3
 80028aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028ae:	00d9      	lsls	r1, r3, #3
 80028b0:	460b      	mov	r3, r1
 80028b2:	4614      	mov	r4, r2
 80028b4:	195b      	adds	r3, r3, r5
 80028b6:	eb44 0406 	adc.w	r4, r4, r6
 80028ba:	f04f 0100 	mov.w	r1, #0
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	0262      	lsls	r2, r4, #9
 80028c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028c8:	0259      	lsls	r1, r3, #9
 80028ca:	460b      	mov	r3, r1
 80028cc:	4614      	mov	r4, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	4621      	mov	r1, r4
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f04f 0400 	mov.w	r4, #0
 80028d8:	461a      	mov	r2, r3
 80028da:	4623      	mov	r3, r4
 80028dc:	f7fd fc92 	bl	8000204 <__aeabi_uldivmod>
 80028e0:	4603      	mov	r3, r0
 80028e2:	460c      	mov	r4, r1
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	e049      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e8:	4b2e      	ldr	r3, [pc, #184]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x334>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	099b      	lsrs	r3, r3, #6
 80028ee:	f04f 0400 	mov.w	r4, #0
 80028f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	ea03 0501 	and.w	r5, r3, r1
 80028fe:	ea04 0602 	and.w	r6, r4, r2
 8002902:	4629      	mov	r1, r5
 8002904:	4632      	mov	r2, r6
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	f04f 0400 	mov.w	r4, #0
 800290e:	0154      	lsls	r4, r2, #5
 8002910:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002914:	014b      	lsls	r3, r1, #5
 8002916:	4619      	mov	r1, r3
 8002918:	4622      	mov	r2, r4
 800291a:	1b49      	subs	r1, r1, r5
 800291c:	eb62 0206 	sbc.w	r2, r2, r6
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	f04f 0400 	mov.w	r4, #0
 8002928:	0194      	lsls	r4, r2, #6
 800292a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800292e:	018b      	lsls	r3, r1, #6
 8002930:	1a5b      	subs	r3, r3, r1
 8002932:	eb64 0402 	sbc.w	r4, r4, r2
 8002936:	f04f 0100 	mov.w	r1, #0
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	00e2      	lsls	r2, r4, #3
 8002940:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002944:	00d9      	lsls	r1, r3, #3
 8002946:	460b      	mov	r3, r1
 8002948:	4614      	mov	r4, r2
 800294a:	195b      	adds	r3, r3, r5
 800294c:	eb44 0406 	adc.w	r4, r4, r6
 8002950:	f04f 0100 	mov.w	r1, #0
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	02a2      	lsls	r2, r4, #10
 800295a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800295e:	0299      	lsls	r1, r3, #10
 8002960:	460b      	mov	r3, r1
 8002962:	4614      	mov	r4, r2
 8002964:	4618      	mov	r0, r3
 8002966:	4621      	mov	r1, r4
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f04f 0400 	mov.w	r4, #0
 800296e:	461a      	mov	r2, r3
 8002970:	4623      	mov	r3, r4
 8002972:	f7fd fc47 	bl	8000204 <__aeabi_uldivmod>
 8002976:	4603      	mov	r3, r0
 8002978:	460c      	mov	r4, r1
 800297a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800297c:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	0f1b      	lsrs	r3, r3, #28
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002990:	613b      	str	r3, [r7, #16]
      break;
 8002992:	e002      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x338>)
 8002996:	613b      	str	r3, [r7, #16]
      break;
 8002998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800299a:	693b      	ldr	r3, [r7, #16]
}
 800299c:	4618      	mov	r0, r3
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029a4:	40023800 	.word	0x40023800
 80029a8:	00f42400 	.word	0x00f42400
 80029ac:	007a1200 	.word	0x007a1200

080029b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8083 	beq.w	8002ad0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029ca:	4b95      	ldr	r3, [pc, #596]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d019      	beq.n	8002a0a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029d6:	4b92      	ldr	r3, [pc, #584]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d106      	bne.n	80029f0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029e2:	4b8f      	ldr	r3, [pc, #572]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ee:	d00c      	beq.n	8002a0a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f0:	4b8b      	ldr	r3, [pc, #556]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029f8:	2b0c      	cmp	r3, #12
 80029fa:	d112      	bne.n	8002a22 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fc:	4b88      	ldr	r3, [pc, #544]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a08:	d10b      	bne.n	8002a22 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0a:	4b85      	ldr	r3, [pc, #532]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d05b      	beq.n	8002ace <HAL_RCC_OscConfig+0x11e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d157      	bne.n	8002ace <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e216      	b.n	8002e50 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2a:	d106      	bne.n	8002a3a <HAL_RCC_OscConfig+0x8a>
 8002a2c:	4b7c      	ldr	r3, [pc, #496]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a7b      	ldr	r2, [pc, #492]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	e01d      	b.n	8002a76 <HAL_RCC_OscConfig+0xc6>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a42:	d10c      	bne.n	8002a5e <HAL_RCC_OscConfig+0xae>
 8002a44:	4b76      	ldr	r3, [pc, #472]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a75      	ldr	r2, [pc, #468]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b73      	ldr	r3, [pc, #460]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a72      	ldr	r2, [pc, #456]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	e00b      	b.n	8002a76 <HAL_RCC_OscConfig+0xc6>
 8002a5e:	4b70      	ldr	r3, [pc, #448]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a6f      	ldr	r2, [pc, #444]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b6d      	ldr	r3, [pc, #436]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a6c      	ldr	r2, [pc, #432]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d013      	beq.n	8002aa6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fbdf 	bl	8001240 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a86:	f7fe fbdb 	bl	8001240 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b64      	cmp	r3, #100	; 0x64
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e1db      	b.n	8002e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a98:	4b61      	ldr	r3, [pc, #388]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0xd6>
 8002aa4:	e014      	b.n	8002ad0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa6:	f7fe fbcb 	bl	8001240 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aae:	f7fe fbc7 	bl	8001240 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b64      	cmp	r3, #100	; 0x64
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e1c7      	b.n	8002e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac0:	4b57      	ldr	r3, [pc, #348]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1f0      	bne.n	8002aae <HAL_RCC_OscConfig+0xfe>
 8002acc:	e000      	b.n	8002ad0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ace:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d06f      	beq.n	8002bbc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002adc:	4b50      	ldr	r3, [pc, #320]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d017      	beq.n	8002b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ae8:	4b4d      	ldr	r3, [pc, #308]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d105      	bne.n	8002b00 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002af4:	4b4a      	ldr	r3, [pc, #296]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00b      	beq.n	8002b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b00:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b08:	2b0c      	cmp	r3, #12
 8002b0a:	d11c      	bne.n	8002b46 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b0c:	4b44      	ldr	r3, [pc, #272]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d116      	bne.n	8002b46 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b18:	4b41      	ldr	r3, [pc, #260]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_OscConfig+0x180>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e18f      	b.n	8002e50 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b30:	4b3b      	ldr	r3, [pc, #236]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4938      	ldr	r1, [pc, #224]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b44:	e03a      	b.n	8002bbc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d020      	beq.n	8002b90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b4e:	4b35      	ldr	r3, [pc, #212]	; (8002c24 <HAL_RCC_OscConfig+0x274>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe fb74 	bl	8001240 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b5c:	f7fe fb70 	bl	8001240 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e170      	b.n	8002e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6e:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7a:	4b29      	ldr	r3, [pc, #164]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4925      	ldr	r1, [pc, #148]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
 8002b8e:	e015      	b.n	8002bbc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b90:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <HAL_RCC_OscConfig+0x274>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b96:	f7fe fb53 	bl	8001240 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b9e:	f7fe fb4f 	bl	8001240 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e14f      	b.n	8002e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f0      	bne.n	8002b9e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d037      	beq.n	8002c38 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d016      	beq.n	8002bfe <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd0:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <HAL_RCC_OscConfig+0x278>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd6:	f7fe fb33 	bl	8001240 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bde:	f7fe fb2f 	bl	8001240 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e12f      	b.n	8002e50 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_RCC_OscConfig+0x270>)
 8002bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x22e>
 8002bfc:	e01c      	b.n	8002c38 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <HAL_RCC_OscConfig+0x278>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c04:	f7fe fb1c 	bl	8001240 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0a:	e00f      	b.n	8002c2c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c0c:	f7fe fb18 	bl	8001240 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d908      	bls.n	8002c2c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e118      	b.n	8002e50 <HAL_RCC_OscConfig+0x4a0>
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800
 8002c24:	42470000 	.word	0x42470000
 8002c28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2c:	4b8a      	ldr	r3, [pc, #552]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e9      	bne.n	8002c0c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8097 	beq.w	8002d74 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4a:	4b83      	ldr	r3, [pc, #524]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10f      	bne.n	8002c76 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	4b7f      	ldr	r3, [pc, #508]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	4a7e      	ldr	r2, [pc, #504]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c64:	6413      	str	r3, [r2, #64]	; 0x40
 8002c66:	4b7c      	ldr	r3, [pc, #496]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c72:	2301      	movs	r3, #1
 8002c74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c76:	4b79      	ldr	r3, [pc, #484]	; (8002e5c <HAL_RCC_OscConfig+0x4ac>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d118      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c82:	4b76      	ldr	r3, [pc, #472]	; (8002e5c <HAL_RCC_OscConfig+0x4ac>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a75      	ldr	r2, [pc, #468]	; (8002e5c <HAL_RCC_OscConfig+0x4ac>)
 8002c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fad7 	bl	8001240 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c96:	f7fe fad3 	bl	8001240 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e0d3      	b.n	8002e50 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	4b6c      	ldr	r3, [pc, #432]	; (8002e5c <HAL_RCC_OscConfig+0x4ac>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_OscConfig+0x31a>
 8002cbc:	4b66      	ldr	r3, [pc, #408]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	4a65      	ldr	r2, [pc, #404]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc8:	e01c      	b.n	8002d04 <HAL_RCC_OscConfig+0x354>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCC_OscConfig+0x33c>
 8002cd2:	4b61      	ldr	r3, [pc, #388]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd6:	4a60      	ldr	r2, [pc, #384]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002cd8:	f043 0304 	orr.w	r3, r3, #4
 8002cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cde:	4b5e      	ldr	r3, [pc, #376]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	4a5d      	ldr	r2, [pc, #372]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cea:	e00b      	b.n	8002d04 <HAL_RCC_OscConfig+0x354>
 8002cec:	4b5a      	ldr	r3, [pc, #360]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	4a59      	ldr	r2, [pc, #356]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002cf2:	f023 0301 	bic.w	r3, r3, #1
 8002cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf8:	4b57      	ldr	r3, [pc, #348]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	4a56      	ldr	r2, [pc, #344]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002cfe:	f023 0304 	bic.w	r3, r3, #4
 8002d02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d015      	beq.n	8002d38 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7fe fa98 	bl	8001240 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d12:	e00a      	b.n	8002d2a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d14:	f7fe fa94 	bl	8001240 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e092      	b.n	8002e50 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2a:	4b4b      	ldr	r3, [pc, #300]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0ee      	beq.n	8002d14 <HAL_RCC_OscConfig+0x364>
 8002d36:	e014      	b.n	8002d62 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7fe fa82 	bl	8001240 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d40:	f7fe fa7e 	bl	8001240 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e07c      	b.n	8002e50 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d56:	4b40      	ldr	r3, [pc, #256]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1ee      	bne.n	8002d40 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d62:	7dfb      	ldrb	r3, [r7, #23]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d105      	bne.n	8002d74 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d68:	4b3b      	ldr	r3, [pc, #236]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	4a3a      	ldr	r2, [pc, #232]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d068      	beq.n	8002e4e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d7c:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d060      	beq.n	8002e4a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d145      	bne.n	8002e1c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d90:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <HAL_RCC_OscConfig+0x4b0>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d96:	f7fe fa53 	bl	8001240 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9e:	f7fe fa4f 	bl	8001240 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e04f      	b.n	8002e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db0:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f0      	bne.n	8002d9e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69da      	ldr	r2, [r3, #28]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	019b      	lsls	r3, r3, #6
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	085b      	lsrs	r3, r3, #1
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	041b      	lsls	r3, r3, #16
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	061b      	lsls	r3, r3, #24
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	071b      	lsls	r3, r3, #28
 8002de8:	491b      	ldr	r1, [pc, #108]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dee:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <HAL_RCC_OscConfig+0x4b0>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7fe fa24 	bl	8001240 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7fe fa20 	bl	8001240 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e020      	b.n	8002e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0e:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0x44c>
 8002e1a:	e018      	b.n	8002e4e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1c:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <HAL_RCC_OscConfig+0x4b0>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7fe fa0d 	bl	8001240 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7fe fa09 	bl	8001240 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e009      	b.n	8002e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_RCC_OscConfig+0x4a8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f0      	bne.n	8002e2a <HAL_RCC_OscConfig+0x47a>
 8002e48:	e001      	b.n	8002e4e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	42470060 	.word	0x42470060

08002e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e01d      	b.n	8002eb2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fe f852 	bl	8000f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	f000 f968 	bl	8003178 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b06      	cmp	r3, #6
 8002eda:	d007      	beq.n	8002eec <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d122      	bne.n	8002f5e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d11b      	bne.n	8002f5e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f06f 0202 	mvn.w	r2, #2
 8002f2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f8f8 	bl	800313a <HAL_TIM_IC_CaptureCallback>
 8002f4a:	e005      	b.n	8002f58 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f8ea 	bl	8003126 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f8fb 	bl	800314e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d122      	bne.n	8002fb2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d11b      	bne.n	8002fb2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f06f 0204 	mvn.w	r2, #4
 8002f82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f8ce 	bl	800313a <HAL_TIM_IC_CaptureCallback>
 8002f9e:	e005      	b.n	8002fac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f8c0 	bl	8003126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f8d1 	bl	800314e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d122      	bne.n	8003006 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d11b      	bne.n	8003006 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f06f 0208 	mvn.w	r2, #8
 8002fd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2204      	movs	r2, #4
 8002fdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f8a4 	bl	800313a <HAL_TIM_IC_CaptureCallback>
 8002ff2:	e005      	b.n	8003000 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f896 	bl	8003126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f8a7 	bl	800314e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b10      	cmp	r3, #16
 8003012:	d122      	bne.n	800305a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b10      	cmp	r3, #16
 8003020:	d11b      	bne.n	800305a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f06f 0210 	mvn.w	r2, #16
 800302a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2208      	movs	r2, #8
 8003030:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f87a 	bl	800313a <HAL_TIM_IC_CaptureCallback>
 8003046:	e005      	b.n	8003054 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f86c 	bl	8003126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f87d 	bl	800314e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b01      	cmp	r3, #1
 8003066:	d10e      	bne.n	8003086 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b01      	cmp	r3, #1
 8003074:	d107      	bne.n	8003086 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f06f 0201 	mvn.w	r2, #1
 800307e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f846 	bl	8003112 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003090:	2b80      	cmp	r3, #128	; 0x80
 8003092:	d10e      	bne.n	80030b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309e:	2b80      	cmp	r3, #128	; 0x80
 80030a0:	d107      	bne.n	80030b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f989 	bl	80033c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d10e      	bne.n	80030de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	d107      	bne.n	80030de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f842 	bl	8003162 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d10e      	bne.n	800310a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b20      	cmp	r3, #32
 80030f8:	d107      	bne.n	800310a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f06f 0220 	mvn.w	r2, #32
 8003102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f953 	bl	80033b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a40      	ldr	r2, [pc, #256]	; (800328c <TIM_Base_SetConfig+0x114>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d013      	beq.n	80031b8 <TIM_Base_SetConfig+0x40>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003196:	d00f      	beq.n	80031b8 <TIM_Base_SetConfig+0x40>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a3d      	ldr	r2, [pc, #244]	; (8003290 <TIM_Base_SetConfig+0x118>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d00b      	beq.n	80031b8 <TIM_Base_SetConfig+0x40>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a3c      	ldr	r2, [pc, #240]	; (8003294 <TIM_Base_SetConfig+0x11c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d007      	beq.n	80031b8 <TIM_Base_SetConfig+0x40>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a3b      	ldr	r2, [pc, #236]	; (8003298 <TIM_Base_SetConfig+0x120>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d003      	beq.n	80031b8 <TIM_Base_SetConfig+0x40>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a3a      	ldr	r2, [pc, #232]	; (800329c <TIM_Base_SetConfig+0x124>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d108      	bne.n	80031ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a2f      	ldr	r2, [pc, #188]	; (800328c <TIM_Base_SetConfig+0x114>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d02b      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d8:	d027      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a2c      	ldr	r2, [pc, #176]	; (8003290 <TIM_Base_SetConfig+0x118>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d023      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a2b      	ldr	r2, [pc, #172]	; (8003294 <TIM_Base_SetConfig+0x11c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01f      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a2a      	ldr	r2, [pc, #168]	; (8003298 <TIM_Base_SetConfig+0x120>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01b      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a29      	ldr	r2, [pc, #164]	; (800329c <TIM_Base_SetConfig+0x124>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d017      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a28      	ldr	r2, [pc, #160]	; (80032a0 <TIM_Base_SetConfig+0x128>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a27      	ldr	r2, [pc, #156]	; (80032a4 <TIM_Base_SetConfig+0x12c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00f      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a26      	ldr	r2, [pc, #152]	; (80032a8 <TIM_Base_SetConfig+0x130>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00b      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a25      	ldr	r2, [pc, #148]	; (80032ac <TIM_Base_SetConfig+0x134>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d007      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a24      	ldr	r2, [pc, #144]	; (80032b0 <TIM_Base_SetConfig+0x138>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d003      	beq.n	800322a <TIM_Base_SetConfig+0xb2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a23      	ldr	r2, [pc, #140]	; (80032b4 <TIM_Base_SetConfig+0x13c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d108      	bne.n	800323c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4313      	orrs	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a0a      	ldr	r2, [pc, #40]	; (800328c <TIM_Base_SetConfig+0x114>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d003      	beq.n	8003270 <TIM_Base_SetConfig+0xf8>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a0c      	ldr	r2, [pc, #48]	; (800329c <TIM_Base_SetConfig+0x124>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d103      	bne.n	8003278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	615a      	str	r2, [r3, #20]
}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40010000 	.word	0x40010000
 8003290:	40000400 	.word	0x40000400
 8003294:	40000800 	.word	0x40000800
 8003298:	40000c00 	.word	0x40000c00
 800329c:	40010400 	.word	0x40010400
 80032a0:	40014000 	.word	0x40014000
 80032a4:	40014400 	.word	0x40014400
 80032a8:	40014800 	.word	0x40014800
 80032ac:	40001800 	.word	0x40001800
 80032b0:	40001c00 	.word	0x40001c00
 80032b4:	40002000 	.word	0x40002000

080032b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e05a      	b.n	8003386 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a21      	ldr	r2, [pc, #132]	; (8003394 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d022      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331c:	d01d      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1d      	ldr	r2, [pc, #116]	; (8003398 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d018      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1b      	ldr	r2, [pc, #108]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1a      	ldr	r2, [pc, #104]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00e      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d009      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a17      	ldr	r2, [pc, #92]	; (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a15      	ldr	r2, [pc, #84]	; (80033ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d10c      	bne.n	8003374 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	4313      	orrs	r3, r2
 800336a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40010000 	.word	0x40010000
 8003398:	40000400 	.word	0x40000400
 800339c:	40000800 	.word	0x40000800
 80033a0:	40000c00 	.word	0x40000c00
 80033a4:	40010400 	.word	0x40010400
 80033a8:	40014000 	.word	0x40014000
 80033ac:	40001800 	.word	0x40001800

080033b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e03f      	b.n	800346a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fd fdc0 	bl	8000f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2224      	movs	r2, #36	; 0x24
 8003408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800341a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f90b 	bl	8003638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695a      	ldr	r2, [r3, #20]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b088      	sub	sp, #32
 8003476:	af02      	add	r7, sp, #8
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	603b      	str	r3, [r7, #0]
 800347e:	4613      	mov	r3, r2
 8003480:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b20      	cmp	r3, #32
 8003490:	f040 8083 	bne.w	800359a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_UART_Transmit+0x2e>
 800349a:	88fb      	ldrh	r3, [r7, #6]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e07b      	b.n	800359c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_UART_Transmit+0x40>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e074      	b.n	800359c <HAL_UART_Transmit+0x12a>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2221      	movs	r2, #33	; 0x21
 80034c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034c8:	f7fd feba 	bl	8001240 <HAL_GetTick>
 80034cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	88fa      	ldrh	r2, [r7, #6]
 80034d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	88fa      	ldrh	r2, [r7, #6]
 80034d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80034e2:	e042      	b.n	800356a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fa:	d122      	bne.n	8003542 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2200      	movs	r2, #0
 8003504:	2180      	movs	r1, #128	; 0x80
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f84c 	bl	80035a4 <UART_WaitOnFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e042      	b.n	800359c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003528:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d103      	bne.n	800353a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	3302      	adds	r3, #2
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	e017      	b.n	800356a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	3301      	adds	r3, #1
 800353e:	60bb      	str	r3, [r7, #8]
 8003540:	e013      	b.n	800356a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2200      	movs	r2, #0
 800354a:	2180      	movs	r1, #128	; 0x80
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f829 	bl	80035a4 <UART_WaitOnFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e01f      	b.n	800359c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	60ba      	str	r2, [r7, #8]
 8003562:	781a      	ldrb	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1b7      	bne.n	80034e4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2200      	movs	r2, #0
 800357c:	2140      	movs	r1, #64	; 0x40
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f810 	bl	80035a4 <UART_WaitOnFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e006      	b.n	800359c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	e000      	b.n	800359c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800359a:	2302      	movs	r3, #2
  }
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	4613      	mov	r3, r2
 80035b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b4:	e02c      	b.n	8003610 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d028      	beq.n	8003610 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d007      	beq.n	80035d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80035c4:	f7fd fe3c 	bl	8001240 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d21d      	bcs.n	8003610 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0201 	bic.w	r2, r2, #1
 80035f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e00f      	b.n	8003630 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	4013      	ands	r3, r2
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	429a      	cmp	r2, r3
 800361e:	bf0c      	ite	eq
 8003620:	2301      	moveq	r3, #1
 8003622:	2300      	movne	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	461a      	mov	r2, r3
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	429a      	cmp	r2, r3
 800362c:	d0c3      	beq.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800363c:	b085      	sub	sp, #20
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800367a:	f023 030c 	bic.w	r3, r3, #12
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	68f9      	ldr	r1, [r7, #12]
 8003684:	430b      	orrs	r3, r1
 8003686:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a6:	f040 818b 	bne.w	80039c0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4ac1      	ldr	r2, [pc, #772]	; (80039b4 <UART_SetConfig+0x37c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d005      	beq.n	80036c0 <UART_SetConfig+0x88>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4abf      	ldr	r2, [pc, #764]	; (80039b8 <UART_SetConfig+0x380>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	f040 80bd 	bne.w	800383a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036c0:	f7fe ffc2 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 80036c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	461d      	mov	r5, r3
 80036ca:	f04f 0600 	mov.w	r6, #0
 80036ce:	46a8      	mov	r8, r5
 80036d0:	46b1      	mov	r9, r6
 80036d2:	eb18 0308 	adds.w	r3, r8, r8
 80036d6:	eb49 0409 	adc.w	r4, r9, r9
 80036da:	4698      	mov	r8, r3
 80036dc:	46a1      	mov	r9, r4
 80036de:	eb18 0805 	adds.w	r8, r8, r5
 80036e2:	eb49 0906 	adc.w	r9, r9, r6
 80036e6:	f04f 0100 	mov.w	r1, #0
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036fa:	4688      	mov	r8, r1
 80036fc:	4691      	mov	r9, r2
 80036fe:	eb18 0005 	adds.w	r0, r8, r5
 8003702:	eb49 0106 	adc.w	r1, r9, r6
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	461d      	mov	r5, r3
 800370c:	f04f 0600 	mov.w	r6, #0
 8003710:	196b      	adds	r3, r5, r5
 8003712:	eb46 0406 	adc.w	r4, r6, r6
 8003716:	461a      	mov	r2, r3
 8003718:	4623      	mov	r3, r4
 800371a:	f7fc fd73 	bl	8000204 <__aeabi_uldivmod>
 800371e:	4603      	mov	r3, r0
 8003720:	460c      	mov	r4, r1
 8003722:	461a      	mov	r2, r3
 8003724:	4ba5      	ldr	r3, [pc, #660]	; (80039bc <UART_SetConfig+0x384>)
 8003726:	fba3 2302 	umull	r2, r3, r3, r2
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	461d      	mov	r5, r3
 8003734:	f04f 0600 	mov.w	r6, #0
 8003738:	46a9      	mov	r9, r5
 800373a:	46b2      	mov	sl, r6
 800373c:	eb19 0309 	adds.w	r3, r9, r9
 8003740:	eb4a 040a 	adc.w	r4, sl, sl
 8003744:	4699      	mov	r9, r3
 8003746:	46a2      	mov	sl, r4
 8003748:	eb19 0905 	adds.w	r9, r9, r5
 800374c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003750:	f04f 0100 	mov.w	r1, #0
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800375c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003760:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003764:	4689      	mov	r9, r1
 8003766:	4692      	mov	sl, r2
 8003768:	eb19 0005 	adds.w	r0, r9, r5
 800376c:	eb4a 0106 	adc.w	r1, sl, r6
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	461d      	mov	r5, r3
 8003776:	f04f 0600 	mov.w	r6, #0
 800377a:	196b      	adds	r3, r5, r5
 800377c:	eb46 0406 	adc.w	r4, r6, r6
 8003780:	461a      	mov	r2, r3
 8003782:	4623      	mov	r3, r4
 8003784:	f7fc fd3e 	bl	8000204 <__aeabi_uldivmod>
 8003788:	4603      	mov	r3, r0
 800378a:	460c      	mov	r4, r1
 800378c:	461a      	mov	r2, r3
 800378e:	4b8b      	ldr	r3, [pc, #556]	; (80039bc <UART_SetConfig+0x384>)
 8003790:	fba3 1302 	umull	r1, r3, r3, r2
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	2164      	movs	r1, #100	; 0x64
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	3332      	adds	r3, #50	; 0x32
 80037a2:	4a86      	ldr	r2, [pc, #536]	; (80039bc <UART_SetConfig+0x384>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037b0:	4498      	add	r8, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	461d      	mov	r5, r3
 80037b6:	f04f 0600 	mov.w	r6, #0
 80037ba:	46a9      	mov	r9, r5
 80037bc:	46b2      	mov	sl, r6
 80037be:	eb19 0309 	adds.w	r3, r9, r9
 80037c2:	eb4a 040a 	adc.w	r4, sl, sl
 80037c6:	4699      	mov	r9, r3
 80037c8:	46a2      	mov	sl, r4
 80037ca:	eb19 0905 	adds.w	r9, r9, r5
 80037ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80037d2:	f04f 0100 	mov.w	r1, #0
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037e6:	4689      	mov	r9, r1
 80037e8:	4692      	mov	sl, r2
 80037ea:	eb19 0005 	adds.w	r0, r9, r5
 80037ee:	eb4a 0106 	adc.w	r1, sl, r6
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	461d      	mov	r5, r3
 80037f8:	f04f 0600 	mov.w	r6, #0
 80037fc:	196b      	adds	r3, r5, r5
 80037fe:	eb46 0406 	adc.w	r4, r6, r6
 8003802:	461a      	mov	r2, r3
 8003804:	4623      	mov	r3, r4
 8003806:	f7fc fcfd 	bl	8000204 <__aeabi_uldivmod>
 800380a:	4603      	mov	r3, r0
 800380c:	460c      	mov	r4, r1
 800380e:	461a      	mov	r2, r3
 8003810:	4b6a      	ldr	r3, [pc, #424]	; (80039bc <UART_SetConfig+0x384>)
 8003812:	fba3 1302 	umull	r1, r3, r3, r2
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	2164      	movs	r1, #100	; 0x64
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	3332      	adds	r3, #50	; 0x32
 8003824:	4a65      	ldr	r2, [pc, #404]	; (80039bc <UART_SetConfig+0x384>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	f003 0207 	and.w	r2, r3, #7
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4442      	add	r2, r8
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	e26f      	b.n	8003d1a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800383a:	f7fe fef1 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 800383e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	461d      	mov	r5, r3
 8003844:	f04f 0600 	mov.w	r6, #0
 8003848:	46a8      	mov	r8, r5
 800384a:	46b1      	mov	r9, r6
 800384c:	eb18 0308 	adds.w	r3, r8, r8
 8003850:	eb49 0409 	adc.w	r4, r9, r9
 8003854:	4698      	mov	r8, r3
 8003856:	46a1      	mov	r9, r4
 8003858:	eb18 0805 	adds.w	r8, r8, r5
 800385c:	eb49 0906 	adc.w	r9, r9, r6
 8003860:	f04f 0100 	mov.w	r1, #0
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800386c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003870:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003874:	4688      	mov	r8, r1
 8003876:	4691      	mov	r9, r2
 8003878:	eb18 0005 	adds.w	r0, r8, r5
 800387c:	eb49 0106 	adc.w	r1, r9, r6
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	461d      	mov	r5, r3
 8003886:	f04f 0600 	mov.w	r6, #0
 800388a:	196b      	adds	r3, r5, r5
 800388c:	eb46 0406 	adc.w	r4, r6, r6
 8003890:	461a      	mov	r2, r3
 8003892:	4623      	mov	r3, r4
 8003894:	f7fc fcb6 	bl	8000204 <__aeabi_uldivmod>
 8003898:	4603      	mov	r3, r0
 800389a:	460c      	mov	r4, r1
 800389c:	461a      	mov	r2, r3
 800389e:	4b47      	ldr	r3, [pc, #284]	; (80039bc <UART_SetConfig+0x384>)
 80038a0:	fba3 2302 	umull	r2, r3, r3, r2
 80038a4:	095b      	lsrs	r3, r3, #5
 80038a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	461d      	mov	r5, r3
 80038ae:	f04f 0600 	mov.w	r6, #0
 80038b2:	46a9      	mov	r9, r5
 80038b4:	46b2      	mov	sl, r6
 80038b6:	eb19 0309 	adds.w	r3, r9, r9
 80038ba:	eb4a 040a 	adc.w	r4, sl, sl
 80038be:	4699      	mov	r9, r3
 80038c0:	46a2      	mov	sl, r4
 80038c2:	eb19 0905 	adds.w	r9, r9, r5
 80038c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80038ca:	f04f 0100 	mov.w	r1, #0
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038de:	4689      	mov	r9, r1
 80038e0:	4692      	mov	sl, r2
 80038e2:	eb19 0005 	adds.w	r0, r9, r5
 80038e6:	eb4a 0106 	adc.w	r1, sl, r6
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	461d      	mov	r5, r3
 80038f0:	f04f 0600 	mov.w	r6, #0
 80038f4:	196b      	adds	r3, r5, r5
 80038f6:	eb46 0406 	adc.w	r4, r6, r6
 80038fa:	461a      	mov	r2, r3
 80038fc:	4623      	mov	r3, r4
 80038fe:	f7fc fc81 	bl	8000204 <__aeabi_uldivmod>
 8003902:	4603      	mov	r3, r0
 8003904:	460c      	mov	r4, r1
 8003906:	461a      	mov	r2, r3
 8003908:	4b2c      	ldr	r3, [pc, #176]	; (80039bc <UART_SetConfig+0x384>)
 800390a:	fba3 1302 	umull	r1, r3, r3, r2
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	2164      	movs	r1, #100	; 0x64
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	3332      	adds	r3, #50	; 0x32
 800391c:	4a27      	ldr	r2, [pc, #156]	; (80039bc <UART_SetConfig+0x384>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800392a:	4498      	add	r8, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	461d      	mov	r5, r3
 8003930:	f04f 0600 	mov.w	r6, #0
 8003934:	46a9      	mov	r9, r5
 8003936:	46b2      	mov	sl, r6
 8003938:	eb19 0309 	adds.w	r3, r9, r9
 800393c:	eb4a 040a 	adc.w	r4, sl, sl
 8003940:	4699      	mov	r9, r3
 8003942:	46a2      	mov	sl, r4
 8003944:	eb19 0905 	adds.w	r9, r9, r5
 8003948:	eb4a 0a06 	adc.w	sl, sl, r6
 800394c:	f04f 0100 	mov.w	r1, #0
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003958:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800395c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003960:	4689      	mov	r9, r1
 8003962:	4692      	mov	sl, r2
 8003964:	eb19 0005 	adds.w	r0, r9, r5
 8003968:	eb4a 0106 	adc.w	r1, sl, r6
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	461d      	mov	r5, r3
 8003972:	f04f 0600 	mov.w	r6, #0
 8003976:	196b      	adds	r3, r5, r5
 8003978:	eb46 0406 	adc.w	r4, r6, r6
 800397c:	461a      	mov	r2, r3
 800397e:	4623      	mov	r3, r4
 8003980:	f7fc fc40 	bl	8000204 <__aeabi_uldivmod>
 8003984:	4603      	mov	r3, r0
 8003986:	460c      	mov	r4, r1
 8003988:	461a      	mov	r2, r3
 800398a:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <UART_SetConfig+0x384>)
 800398c:	fba3 1302 	umull	r1, r3, r3, r2
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	2164      	movs	r1, #100	; 0x64
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	3332      	adds	r3, #50	; 0x32
 800399e:	4a07      	ldr	r2, [pc, #28]	; (80039bc <UART_SetConfig+0x384>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	f003 0207 	and.w	r2, r3, #7
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4442      	add	r2, r8
 80039b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80039b2:	e1b2      	b.n	8003d1a <UART_SetConfig+0x6e2>
 80039b4:	40011000 	.word	0x40011000
 80039b8:	40011400 	.word	0x40011400
 80039bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4ad7      	ldr	r2, [pc, #860]	; (8003d24 <UART_SetConfig+0x6ec>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d005      	beq.n	80039d6 <UART_SetConfig+0x39e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4ad6      	ldr	r2, [pc, #856]	; (8003d28 <UART_SetConfig+0x6f0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	f040 80d1 	bne.w	8003b78 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80039d6:	f7fe fe37 	bl	8002648 <HAL_RCC_GetPCLK2Freq>
 80039da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	469a      	mov	sl, r3
 80039e0:	f04f 0b00 	mov.w	fp, #0
 80039e4:	46d0      	mov	r8, sl
 80039e6:	46d9      	mov	r9, fp
 80039e8:	eb18 0308 	adds.w	r3, r8, r8
 80039ec:	eb49 0409 	adc.w	r4, r9, r9
 80039f0:	4698      	mov	r8, r3
 80039f2:	46a1      	mov	r9, r4
 80039f4:	eb18 080a 	adds.w	r8, r8, sl
 80039f8:	eb49 090b 	adc.w	r9, r9, fp
 80039fc:	f04f 0100 	mov.w	r1, #0
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a08:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a0c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a10:	4688      	mov	r8, r1
 8003a12:	4691      	mov	r9, r2
 8003a14:	eb1a 0508 	adds.w	r5, sl, r8
 8003a18:	eb4b 0609 	adc.w	r6, fp, r9
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	4619      	mov	r1, r3
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	f04f 0400 	mov.w	r4, #0
 8003a2e:	0094      	lsls	r4, r2, #2
 8003a30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a34:	008b      	lsls	r3, r1, #2
 8003a36:	461a      	mov	r2, r3
 8003a38:	4623      	mov	r3, r4
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	4631      	mov	r1, r6
 8003a3e:	f7fc fbe1 	bl	8000204 <__aeabi_uldivmod>
 8003a42:	4603      	mov	r3, r0
 8003a44:	460c      	mov	r4, r1
 8003a46:	461a      	mov	r2, r3
 8003a48:	4bb8      	ldr	r3, [pc, #736]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	469b      	mov	fp, r3
 8003a58:	f04f 0c00 	mov.w	ip, #0
 8003a5c:	46d9      	mov	r9, fp
 8003a5e:	46e2      	mov	sl, ip
 8003a60:	eb19 0309 	adds.w	r3, r9, r9
 8003a64:	eb4a 040a 	adc.w	r4, sl, sl
 8003a68:	4699      	mov	r9, r3
 8003a6a:	46a2      	mov	sl, r4
 8003a6c:	eb19 090b 	adds.w	r9, r9, fp
 8003a70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a74:	f04f 0100 	mov.w	r1, #0
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a88:	4689      	mov	r9, r1
 8003a8a:	4692      	mov	sl, r2
 8003a8c:	eb1b 0509 	adds.w	r5, fp, r9
 8003a90:	eb4c 060a 	adc.w	r6, ip, sl
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	f04f 0400 	mov.w	r4, #0
 8003aa6:	0094      	lsls	r4, r2, #2
 8003aa8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003aac:	008b      	lsls	r3, r1, #2
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4623      	mov	r3, r4
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	4631      	mov	r1, r6
 8003ab6:	f7fc fba5 	bl	8000204 <__aeabi_uldivmod>
 8003aba:	4603      	mov	r3, r0
 8003abc:	460c      	mov	r4, r1
 8003abe:	461a      	mov	r2, r3
 8003ac0:	4b9a      	ldr	r3, [pc, #616]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003ac2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	2164      	movs	r1, #100	; 0x64
 8003aca:	fb01 f303 	mul.w	r3, r1, r3
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	3332      	adds	r3, #50	; 0x32
 8003ad4:	4a95      	ldr	r2, [pc, #596]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae0:	4498      	add	r8, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	469b      	mov	fp, r3
 8003ae6:	f04f 0c00 	mov.w	ip, #0
 8003aea:	46d9      	mov	r9, fp
 8003aec:	46e2      	mov	sl, ip
 8003aee:	eb19 0309 	adds.w	r3, r9, r9
 8003af2:	eb4a 040a 	adc.w	r4, sl, sl
 8003af6:	4699      	mov	r9, r3
 8003af8:	46a2      	mov	sl, r4
 8003afa:	eb19 090b 	adds.w	r9, r9, fp
 8003afe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b02:	f04f 0100 	mov.w	r1, #0
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b16:	4689      	mov	r9, r1
 8003b18:	4692      	mov	sl, r2
 8003b1a:	eb1b 0509 	adds.w	r5, fp, r9
 8003b1e:	eb4c 060a 	adc.w	r6, ip, sl
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4619      	mov	r1, r3
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	f04f 0400 	mov.w	r4, #0
 8003b34:	0094      	lsls	r4, r2, #2
 8003b36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b3a:	008b      	lsls	r3, r1, #2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4623      	mov	r3, r4
 8003b40:	4628      	mov	r0, r5
 8003b42:	4631      	mov	r1, r6
 8003b44:	f7fc fb5e 	bl	8000204 <__aeabi_uldivmod>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	460c      	mov	r4, r1
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4b77      	ldr	r3, [pc, #476]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003b50:	fba3 1302 	umull	r1, r3, r3, r2
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	2164      	movs	r1, #100	; 0x64
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	3332      	adds	r3, #50	; 0x32
 8003b62:	4a72      	ldr	r2, [pc, #456]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	f003 020f 	and.w	r2, r3, #15
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4442      	add	r2, r8
 8003b74:	609a      	str	r2, [r3, #8]
 8003b76:	e0d0      	b.n	8003d1a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b78:	f7fe fd52 	bl	8002620 <HAL_RCC_GetPCLK1Freq>
 8003b7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	469a      	mov	sl, r3
 8003b82:	f04f 0b00 	mov.w	fp, #0
 8003b86:	46d0      	mov	r8, sl
 8003b88:	46d9      	mov	r9, fp
 8003b8a:	eb18 0308 	adds.w	r3, r8, r8
 8003b8e:	eb49 0409 	adc.w	r4, r9, r9
 8003b92:	4698      	mov	r8, r3
 8003b94:	46a1      	mov	r9, r4
 8003b96:	eb18 080a 	adds.w	r8, r8, sl
 8003b9a:	eb49 090b 	adc.w	r9, r9, fp
 8003b9e:	f04f 0100 	mov.w	r1, #0
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003baa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bb2:	4688      	mov	r8, r1
 8003bb4:	4691      	mov	r9, r2
 8003bb6:	eb1a 0508 	adds.w	r5, sl, r8
 8003bba:	eb4b 0609 	adc.w	r6, fp, r9
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	f04f 0400 	mov.w	r4, #0
 8003bd0:	0094      	lsls	r4, r2, #2
 8003bd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bd6:	008b      	lsls	r3, r1, #2
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4623      	mov	r3, r4
 8003bdc:	4628      	mov	r0, r5
 8003bde:	4631      	mov	r1, r6
 8003be0:	f7fc fb10 	bl	8000204 <__aeabi_uldivmod>
 8003be4:	4603      	mov	r3, r0
 8003be6:	460c      	mov	r4, r1
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b50      	ldr	r3, [pc, #320]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003bec:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	469b      	mov	fp, r3
 8003bfa:	f04f 0c00 	mov.w	ip, #0
 8003bfe:	46d9      	mov	r9, fp
 8003c00:	46e2      	mov	sl, ip
 8003c02:	eb19 0309 	adds.w	r3, r9, r9
 8003c06:	eb4a 040a 	adc.w	r4, sl, sl
 8003c0a:	4699      	mov	r9, r3
 8003c0c:	46a2      	mov	sl, r4
 8003c0e:	eb19 090b 	adds.w	r9, r9, fp
 8003c12:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c16:	f04f 0100 	mov.w	r1, #0
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c2a:	4689      	mov	r9, r1
 8003c2c:	4692      	mov	sl, r2
 8003c2e:	eb1b 0509 	adds.w	r5, fp, r9
 8003c32:	eb4c 060a 	adc.w	r6, ip, sl
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	f04f 0400 	mov.w	r4, #0
 8003c48:	0094      	lsls	r4, r2, #2
 8003c4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c4e:	008b      	lsls	r3, r1, #2
 8003c50:	461a      	mov	r2, r3
 8003c52:	4623      	mov	r3, r4
 8003c54:	4628      	mov	r0, r5
 8003c56:	4631      	mov	r1, r6
 8003c58:	f7fc fad4 	bl	8000204 <__aeabi_uldivmod>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	460c      	mov	r4, r1
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003c64:	fba3 1302 	umull	r1, r3, r3, r2
 8003c68:	095b      	lsrs	r3, r3, #5
 8003c6a:	2164      	movs	r1, #100	; 0x64
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	3332      	adds	r3, #50	; 0x32
 8003c76:	4a2d      	ldr	r2, [pc, #180]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003c78:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7c:	095b      	lsrs	r3, r3, #5
 8003c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c82:	4498      	add	r8, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	469b      	mov	fp, r3
 8003c88:	f04f 0c00 	mov.w	ip, #0
 8003c8c:	46d9      	mov	r9, fp
 8003c8e:	46e2      	mov	sl, ip
 8003c90:	eb19 0309 	adds.w	r3, r9, r9
 8003c94:	eb4a 040a 	adc.w	r4, sl, sl
 8003c98:	4699      	mov	r9, r3
 8003c9a:	46a2      	mov	sl, r4
 8003c9c:	eb19 090b 	adds.w	r9, r9, fp
 8003ca0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ca4:	f04f 0100 	mov.w	r1, #0
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cb8:	4689      	mov	r9, r1
 8003cba:	4692      	mov	sl, r2
 8003cbc:	eb1b 0509 	adds.w	r5, fp, r9
 8003cc0:	eb4c 060a 	adc.w	r6, ip, sl
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	f04f 0400 	mov.w	r4, #0
 8003cd6:	0094      	lsls	r4, r2, #2
 8003cd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cdc:	008b      	lsls	r3, r1, #2
 8003cde:	461a      	mov	r2, r3
 8003ce0:	4623      	mov	r3, r4
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	4631      	mov	r1, r6
 8003ce6:	f7fc fa8d 	bl	8000204 <__aeabi_uldivmod>
 8003cea:	4603      	mov	r3, r0
 8003cec:	460c      	mov	r4, r1
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	2164      	movs	r1, #100	; 0x64
 8003cfa:	fb01 f303 	mul.w	r3, r1, r3
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	3332      	adds	r3, #50	; 0x32
 8003d04:	4a09      	ldr	r2, [pc, #36]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	f003 020f 	and.w	r2, r3, #15
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4442      	add	r2, r8
 8003d16:	609a      	str	r2, [r3, #8]
}
 8003d18:	e7ff      	b.n	8003d1a <UART_SetConfig+0x6e2>
 8003d1a:	bf00      	nop
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d24:	40011000 	.word	0x40011000
 8003d28:	40011400 	.word	0x40011400
 8003d2c:	51eb851f 	.word	0x51eb851f

08003d30 <__libc_init_array>:
 8003d30:	b570      	push	{r4, r5, r6, lr}
 8003d32:	4e0d      	ldr	r6, [pc, #52]	; (8003d68 <__libc_init_array+0x38>)
 8003d34:	4c0d      	ldr	r4, [pc, #52]	; (8003d6c <__libc_init_array+0x3c>)
 8003d36:	1ba4      	subs	r4, r4, r6
 8003d38:	10a4      	asrs	r4, r4, #2
 8003d3a:	2500      	movs	r5, #0
 8003d3c:	42a5      	cmp	r5, r4
 8003d3e:	d109      	bne.n	8003d54 <__libc_init_array+0x24>
 8003d40:	4e0b      	ldr	r6, [pc, #44]	; (8003d70 <__libc_init_array+0x40>)
 8003d42:	4c0c      	ldr	r4, [pc, #48]	; (8003d74 <__libc_init_array+0x44>)
 8003d44:	f000 f820 	bl	8003d88 <_init>
 8003d48:	1ba4      	subs	r4, r4, r6
 8003d4a:	10a4      	asrs	r4, r4, #2
 8003d4c:	2500      	movs	r5, #0
 8003d4e:	42a5      	cmp	r5, r4
 8003d50:	d105      	bne.n	8003d5e <__libc_init_array+0x2e>
 8003d52:	bd70      	pop	{r4, r5, r6, pc}
 8003d54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d58:	4798      	blx	r3
 8003d5a:	3501      	adds	r5, #1
 8003d5c:	e7ee      	b.n	8003d3c <__libc_init_array+0xc>
 8003d5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d62:	4798      	blx	r3
 8003d64:	3501      	adds	r5, #1
 8003d66:	e7f2      	b.n	8003d4e <__libc_init_array+0x1e>
 8003d68:	08003dd4 	.word	0x08003dd4
 8003d6c:	08003dd4 	.word	0x08003dd4
 8003d70:	08003dd4 	.word	0x08003dd4
 8003d74:	08003dd8 	.word	0x08003dd8

08003d78 <memset>:
 8003d78:	4402      	add	r2, r0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d100      	bne.n	8003d82 <memset+0xa>
 8003d80:	4770      	bx	lr
 8003d82:	f803 1b01 	strb.w	r1, [r3], #1
 8003d86:	e7f9      	b.n	8003d7c <memset+0x4>

08003d88 <_init>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr

08003d94 <_fini>:
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	bf00      	nop
 8003d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d9a:	bc08      	pop	{r3}
 8003d9c:	469e      	mov	lr, r3
 8003d9e:	4770      	bx	lr
