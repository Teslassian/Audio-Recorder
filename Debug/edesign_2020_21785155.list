
edesign_2020_21785155.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004698  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800485c  0800485c  0001485c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cac  08004cac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cac  08004cac  00014cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cb4  08004cb4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cb4  08004cb4  00014cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cb8  08004cb8  00014cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b4c  2000000c  08004cc8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b58  08004cc8  00020b58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d721  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000200c  00000000  00000000  0002d75d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d90  00000000  00000000  0002f770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c88  00000000  00000000  00030500  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002239d  00000000  00000000  00031188  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a816  00000000  00000000  00053525  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d02c0  00000000  00000000  0005dd3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012dffb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a38  00000000  00000000  0012e078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004844 	.word	0x08004844

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004844 	.word	0x08004844

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b09a      	sub	sp, #104	; 0x68
 8000508:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */


	state = Idle;
 800050a:	4b9e      	ldr	r3, [pc, #632]	; (8000784 <main+0x280>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
	state_start = off;
 8000510:	4b9d      	ldr	r3, [pc, #628]	; (8000788 <main+0x284>)
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
	exti = off;
 8000516:	4b9d      	ldr	r3, [pc, #628]	; (800078c <main+0x288>)
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
	exti_start = off;
 800051c:	4b9c      	ldr	r3, [pc, #624]	; (8000790 <main+0x28c>)
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
	buttOne = off;
 8000522:	4b9c      	ldr	r3, [pc, #624]	; (8000794 <main+0x290>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
	buttTwo	= off;
 8000528:	4b9b      	ldr	r3, [pc, #620]	; (8000798 <main+0x294>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
	buttThree = off;
 800052e:	4b9b      	ldr	r3, [pc, #620]	; (800079c <main+0x298>)
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
	buttRec = off;
 8000534:	4b9a      	ldr	r3, [pc, #616]	; (80007a0 <main+0x29c>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
	buttStop = off;
 800053a:	4b9a      	ldr	r3, [pc, #616]	; (80007a4 <main+0x2a0>)
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]

	wave_init();
 8000540:	f000 fd3e 	bl	8000fc0 <wave_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 ff9e 	bl	8001484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 fb30 	bl	8000bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 fc46 	bl	8000ddc <MX_GPIO_Init>
  MX_DMA_Init();
 8000550:	f000 fc24 	bl	8000d9c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000554:	f000 fbf8 	bl	8000d48 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000558:	f000 fb96 	bl	8000c88 <MX_DAC_Init>
  MX_TIM6_Init();
 800055c:	f000 fbbe 	bl	8000cdc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  uint8_t msg[10] = {127, 128, '2','1','7','8','5','1','5','5'};
 8000560:	4a91      	ldr	r2, [pc, #580]	; (80007a8 <main+0x2a4>)
 8000562:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000566:	ca07      	ldmia	r2, {r0, r1, r2}
 8000568:	c303      	stmia	r3!, {r0, r1}
 800056a:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 800056c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000570:	2364      	movs	r3, #100	; 0x64
 8000572:	220a      	movs	r2, #10
 8000574:	488d      	ldr	r0, [pc, #564]	; (80007ac <main+0x2a8>)
 8000576:	f002 ff8e 	bl	8003496 <HAL_UART_Transmit>
  HAL_TIM_Base_Start(&htim6);
 800057a:	488d      	ldr	r0, [pc, #564]	; (80007b0 <main+0x2ac>)
 800057c:	f002 fdfd 	bl	800317a <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /////////////////////////////////////////////////////////////////////
	  if (exti){
 8000580:	4b82      	ldr	r3, [pc, #520]	; (800078c <main+0x288>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d06b      	beq.n	8000660 <main+0x15c>

		  if (!exti_start) Ri = HAL_GetTick();
 8000588:	4b81      	ldr	r3, [pc, #516]	; (8000790 <main+0x28c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d105      	bne.n	800059c <main+0x98>
 8000590:	f000 ffde 	bl	8001550 <HAL_GetTick>
 8000594:	4603      	mov	r3, r0
 8000596:	461a      	mov	r2, r3
 8000598:	4b86      	ldr	r3, [pc, #536]	; (80007b4 <main+0x2b0>)
 800059a:	601a      	str	r2, [r3, #0]
		  exti_start = on;
 800059c:	4b7c      	ldr	r3, [pc, #496]	; (8000790 <main+0x28c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	601a      	str	r2, [r3, #0]
		  Rf = HAL_GetTick();
 80005a2:	f000 ffd5 	bl	8001550 <HAL_GetTick>
 80005a6:	4603      	mov	r3, r0
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b83      	ldr	r3, [pc, #524]	; (80007b8 <main+0x2b4>)
 80005ac:	601a      	str	r2, [r3, #0]

		  	if (Rf - Ri > 10){
 80005ae:	4b82      	ldr	r3, [pc, #520]	; (80007b8 <main+0x2b4>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	4b80      	ldr	r3, [pc, #512]	; (80007b4 <main+0x2b0>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	2b0a      	cmp	r3, #10
 80005ba:	dd51      	ble.n	8000660 <main+0x15c>
		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) buttOne = on;
 80005bc:	2140      	movs	r1, #64	; 0x40
 80005be:	487f      	ldr	r0, [pc, #508]	; (80007bc <main+0x2b8>)
 80005c0:	f002 f846 	bl	8002650 <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d003      	beq.n	80005d2 <main+0xce>
 80005ca:	4b72      	ldr	r3, [pc, #456]	; (8000794 <main+0x290>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	e002      	b.n	80005d8 <main+0xd4>
		  		else buttOne = off;
 80005d2:	4b70      	ldr	r3, [pc, #448]	; (8000794 <main+0x290>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]

			  	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) buttTwo = on;
 80005d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005dc:	4877      	ldr	r0, [pc, #476]	; (80007bc <main+0x2b8>)
 80005de:	f002 f837 	bl	8002650 <HAL_GPIO_ReadPin>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d003      	beq.n	80005f0 <main+0xec>
 80005e8:	4b6b      	ldr	r3, [pc, #428]	; (8000798 <main+0x294>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	e002      	b.n	80005f6 <main+0xf2>
			  	else buttTwo = off;
 80005f0:	4b69      	ldr	r3, [pc, #420]	; (8000798 <main+0x294>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)) buttThree = on;
 80005f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fa:	4870      	ldr	r0, [pc, #448]	; (80007bc <main+0x2b8>)
 80005fc:	f002 f828 	bl	8002650 <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d003      	beq.n	800060e <main+0x10a>
 8000606:	4b65      	ldr	r3, [pc, #404]	; (800079c <main+0x298>)
 8000608:	2201      	movs	r2, #1
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	e002      	b.n	8000614 <main+0x110>
		  		else buttThree = off;
 800060e:	4b63      	ldr	r3, [pc, #396]	; (800079c <main+0x298>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) buttRec = on;
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	4869      	ldr	r0, [pc, #420]	; (80007bc <main+0x2b8>)
 8000618:	f002 f81a 	bl	8002650 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d003      	beq.n	800062a <main+0x126>
 8000622:	4b5f      	ldr	r3, [pc, #380]	; (80007a0 <main+0x29c>)
 8000624:	2201      	movs	r2, #1
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	e002      	b.n	8000630 <main+0x12c>
		  		else buttRec = off;
 800062a:	4b5d      	ldr	r3, [pc, #372]	; (80007a0 <main+0x29c>)
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) buttStop = on;
 8000630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000634:	4862      	ldr	r0, [pc, #392]	; (80007c0 <main+0x2bc>)
 8000636:	f002 f80b 	bl	8002650 <HAL_GPIO_ReadPin>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d003      	beq.n	8000648 <main+0x144>
 8000640:	4b58      	ldr	r3, [pc, #352]	; (80007a4 <main+0x2a0>)
 8000642:	2201      	movs	r2, #1
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	e002      	b.n	800064e <main+0x14a>
		  		else buttStop = off;
 8000648:	4b56      	ldr	r3, [pc, #344]	; (80007a4 <main+0x2a0>)
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]

		  		exti = off;
 800064e:	4b4f      	ldr	r3, [pc, #316]	; (800078c <main+0x288>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
		  		state_start = off;
 8000654:	4b4c      	ldr	r3, [pc, #304]	; (8000788 <main+0x284>)
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
		  		exti_start = off;
 800065a:	4b4d      	ldr	r3, [pc, #308]	; (8000790 <main+0x28c>)
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
		  	}
	  }
	  /////////////////////////////////////////////////////////////////////

	  if (!state_start && !(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))){
 8000660:	4b49      	ldr	r3, [pc, #292]	; (8000788 <main+0x284>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	f040 8150 	bne.w	800090a <main+0x406>
 800066a:	2140      	movs	r1, #64	; 0x40
 800066c:	4853      	ldr	r0, [pc, #332]	; (80007bc <main+0x2b8>)
 800066e:	f001 ffef 	bl	8002650 <HAL_GPIO_ReadPin>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	f040 8148 	bne.w	800090a <main+0x406>
 800067a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067e:	484f      	ldr	r0, [pc, #316]	; (80007bc <main+0x2b8>)
 8000680:	f001 ffe6 	bl	8002650 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	f040 813f 	bne.w	800090a <main+0x406>
 800068c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000690:	484a      	ldr	r0, [pc, #296]	; (80007bc <main+0x2b8>)
 8000692:	f001 ffdd 	bl	8002650 <HAL_GPIO_ReadPin>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	f040 8136 	bne.w	800090a <main+0x406>
 800069e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a2:	4847      	ldr	r0, [pc, #284]	; (80007c0 <main+0x2bc>)
 80006a4:	f001 ffd4 	bl	8002650 <HAL_GPIO_ReadPin>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	f040 812d 	bne.w	800090a <main+0x406>
			  if (buttOne || buttTwo || buttThree || buttStop) state_start = on;
 80006b0:	4b38      	ldr	r3, [pc, #224]	; (8000794 <main+0x290>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d10b      	bne.n	80006d0 <main+0x1cc>
 80006b8:	4b37      	ldr	r3, [pc, #220]	; (8000798 <main+0x294>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d107      	bne.n	80006d0 <main+0x1cc>
 80006c0:	4b36      	ldr	r3, [pc, #216]	; (800079c <main+0x298>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d103      	bne.n	80006d0 <main+0x1cc>
 80006c8:	4b36      	ldr	r3, [pc, #216]	; (80007a4 <main+0x2a0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d002      	beq.n	80006d6 <main+0x1d2>
 80006d0:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <main+0x284>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
			  if (!buttRec && buttOne){
 80006d6:	4b32      	ldr	r3, [pc, #200]	; (80007a0 <main+0x29c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d126      	bne.n	800072c <main+0x228>
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <main+0x290>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d022      	beq.n	800072c <main+0x228>
				  state = PlayOne;
 80006e6:	4b27      	ldr	r3, [pc, #156]	; (8000784 <main+0x280>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
				  wave = 1;
 80006ec:	4b35      	ldr	r3, [pc, #212]	; (80007c4 <main+0x2c0>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	601a      	str	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'P','l','a','y','_','_','_','1'};
 80006f2:	4a35      	ldr	r2, [pc, #212]	; (80007c8 <main+0x2c4>)
 80006f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80006fa:	c303      	stmia	r3!, {r0, r1}
 80006fc:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80006fe:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	220a      	movs	r2, #10
 8000706:	4829      	ldr	r0, [pc, #164]	; (80007ac <main+0x2a8>)
 8000708:	f002 fec5 	bl	8003496 <HAL_UART_Transmit>
		  		  wave_fillbuffer(dac_buffer, 1, 1024);
 800070c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000710:	2101      	movs	r1, #1
 8000712:	482e      	ldr	r0, [pc, #184]	; (80007cc <main+0x2c8>)
 8000714:	f000 fc90 	bl	8001038 <wave_fillbuffer>
		  		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 8000718:	2300      	movs	r3, #0
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000720:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <main+0x2c8>)
 8000722:	2100      	movs	r1, #0
 8000724:	482a      	ldr	r0, [pc, #168]	; (80007d0 <main+0x2cc>)
 8000726:	f001 f853 	bl	80017d0 <HAL_DAC_Start_DMA>
			  if (!buttRec && buttOne){
 800072a:	e0ee      	b.n	800090a <main+0x406>
			  }
			  else if (!buttRec && buttTwo){
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <main+0x29c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d151      	bne.n	80007d8 <main+0x2d4>
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <main+0x294>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d04d      	beq.n	80007d8 <main+0x2d4>
				  state = PlayTwo;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <main+0x280>)
 800073e:	2202      	movs	r2, #2
 8000740:	701a      	strb	r2, [r3, #0]
				  wave = 2;
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <main+0x2c0>)
 8000744:	2202      	movs	r2, #2
 8000746:	601a      	str	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'P','l','a','y','_','_','_','2'};
 8000748:	4a22      	ldr	r2, [pc, #136]	; (80007d4 <main+0x2d0>)
 800074a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800074e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000750:	c303      	stmia	r3!, {r0, r1}
 8000752:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000754:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000758:	2364      	movs	r3, #100	; 0x64
 800075a:	220a      	movs	r2, #10
 800075c:	4813      	ldr	r0, [pc, #76]	; (80007ac <main+0x2a8>)
 800075e:	f002 fe9a 	bl	8003496 <HAL_UART_Transmit>
		  		  wave_fillbuffer(dac_buffer, 2, 1024);
 8000762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000766:	2102      	movs	r1, #2
 8000768:	4818      	ldr	r0, [pc, #96]	; (80007cc <main+0x2c8>)
 800076a:	f000 fc65 	bl	8001038 <wave_fillbuffer>
		  		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 800076e:	2300      	movs	r3, #0
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000776:	4a15      	ldr	r2, [pc, #84]	; (80007cc <main+0x2c8>)
 8000778:	2100      	movs	r1, #0
 800077a:	4815      	ldr	r0, [pc, #84]	; (80007d0 <main+0x2cc>)
 800077c:	f001 f828 	bl	80017d0 <HAL_DAC_Start_DMA>
			  else if (!buttRec && buttTwo){
 8000780:	e0c3      	b.n	800090a <main+0x406>
 8000782:	bf00      	nop
 8000784:	20000040 	.word	0x20000040
 8000788:	20000908 	.word	0x20000908
 800078c:	200000a4 	.word	0x200000a4
 8000790:	200000ac 	.word	0x200000ac
 8000794:	20000034 	.word	0x20000034
 8000798:	20000028 	.word	0x20000028
 800079c:	200000a8 	.word	0x200000a8
 80007a0:	2000094c 	.word	0x2000094c
 80007a4:	2000003c 	.word	0x2000003c
 80007a8:	0800485c 	.word	0x0800485c
 80007ac:	2000090c 	.word	0x2000090c
 80007b0:	200008c4 	.word	0x200008c4
 80007b4:	20000904 	.word	0x20000904
 80007b8:	20000030 	.word	0x20000030
 80007bc:	40020000 	.word	0x40020000
 80007c0:	40020400 	.word	0x40020400
 80007c4:	20000038 	.word	0x20000038
 80007c8:	08004868 	.word	0x08004868
 80007cc:	200000c4 	.word	0x200000c4
 80007d0:	200000b0 	.word	0x200000b0
 80007d4:	08004874 	.word	0x08004874
			  }
			  else if (!buttRec && buttThree){
 80007d8:	4baf      	ldr	r3, [pc, #700]	; (8000a98 <main+0x594>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d126      	bne.n	800082e <main+0x32a>
 80007e0:	4bae      	ldr	r3, [pc, #696]	; (8000a9c <main+0x598>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d022      	beq.n	800082e <main+0x32a>
				  state = PlayThree;
 80007e8:	4bad      	ldr	r3, [pc, #692]	; (8000aa0 <main+0x59c>)
 80007ea:	2203      	movs	r2, #3
 80007ec:	701a      	strb	r2, [r3, #0]
				  wave = 3;
 80007ee:	4bad      	ldr	r3, [pc, #692]	; (8000aa4 <main+0x5a0>)
 80007f0:	2203      	movs	r2, #3
 80007f2:	601a      	str	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'P','l','a','y','_','_','_','3'};
 80007f4:	4aac      	ldr	r2, [pc, #688]	; (8000aa8 <main+0x5a4>)
 80007f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80007fc:	c303      	stmia	r3!, {r0, r1}
 80007fe:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000800:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	220a      	movs	r2, #10
 8000808:	48a8      	ldr	r0, [pc, #672]	; (8000aac <main+0x5a8>)
 800080a:	f002 fe44 	bl	8003496 <HAL_UART_Transmit>
		  		  wave_fillbuffer(dac_buffer, 3, 1024);
 800080e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000812:	2103      	movs	r1, #3
 8000814:	48a6      	ldr	r0, [pc, #664]	; (8000ab0 <main+0x5ac>)
 8000816:	f000 fc0f 	bl	8001038 <wave_fillbuffer>
		  		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 800081a:	2300      	movs	r3, #0
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000822:	4aa3      	ldr	r2, [pc, #652]	; (8000ab0 <main+0x5ac>)
 8000824:	2100      	movs	r1, #0
 8000826:	48a3      	ldr	r0, [pc, #652]	; (8000ab4 <main+0x5b0>)
 8000828:	f000 ffd2 	bl	80017d0 <HAL_DAC_Start_DMA>
			  else if (!buttRec && buttThree){
 800082c:	e06d      	b.n	800090a <main+0x406>
			  }
			  else if (buttRec && buttOne){
 800082e:	4b9a      	ldr	r3, [pc, #616]	; (8000a98 <main+0x594>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d018      	beq.n	8000868 <main+0x364>
 8000836:	4ba0      	ldr	r3, [pc, #640]	; (8000ab8 <main+0x5b4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d014      	beq.n	8000868 <main+0x364>
				  state = RecOne;
 800083e:	4b98      	ldr	r3, [pc, #608]	; (8000aa0 <main+0x59c>)
 8000840:	2204      	movs	r2, #4
 8000842:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'R','e','c','o','r','d','_','1'};
 8000844:	4a9d      	ldr	r2, [pc, #628]	; (8000abc <main+0x5b8>)
 8000846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084a:	ca07      	ldmia	r2, {r0, r1, r2}
 800084c:	c303      	stmia	r3!, {r0, r1}
 800084e:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000850:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000854:	2364      	movs	r3, #100	; 0x64
 8000856:	220a      	movs	r2, #10
 8000858:	4894      	ldr	r0, [pc, #592]	; (8000aac <main+0x5a8>)
 800085a:	f002 fe1c 	bl	8003496 <HAL_UART_Transmit>
		  		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800085e:	2100      	movs	r1, #0
 8000860:	4894      	ldr	r0, [pc, #592]	; (8000ab4 <main+0x5b0>)
 8000862:	f001 f863 	bl	800192c <HAL_DAC_Stop_DMA>
			  else if (buttRec && buttOne){
 8000866:	e050      	b.n	800090a <main+0x406>
			  }
			  else if (buttRec && buttTwo){
 8000868:	4b8b      	ldr	r3, [pc, #556]	; (8000a98 <main+0x594>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d018      	beq.n	80008a2 <main+0x39e>
 8000870:	4b93      	ldr	r3, [pc, #588]	; (8000ac0 <main+0x5bc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d014      	beq.n	80008a2 <main+0x39e>
				  state = RecTwo;
 8000878:	4b89      	ldr	r3, [pc, #548]	; (8000aa0 <main+0x59c>)
 800087a:	2205      	movs	r2, #5
 800087c:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'R','e','c','o','r','d','_','2'};
 800087e:	4a91      	ldr	r2, [pc, #580]	; (8000ac4 <main+0x5c0>)
 8000880:	f107 0318 	add.w	r3, r7, #24
 8000884:	ca07      	ldmia	r2, {r0, r1, r2}
 8000886:	c303      	stmia	r3!, {r0, r1}
 8000888:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 800088a:	f107 0118 	add.w	r1, r7, #24
 800088e:	2364      	movs	r3, #100	; 0x64
 8000890:	220a      	movs	r2, #10
 8000892:	4886      	ldr	r0, [pc, #536]	; (8000aac <main+0x5a8>)
 8000894:	f002 fdff 	bl	8003496 <HAL_UART_Transmit>
		  		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000898:	2100      	movs	r1, #0
 800089a:	4886      	ldr	r0, [pc, #536]	; (8000ab4 <main+0x5b0>)
 800089c:	f001 f846 	bl	800192c <HAL_DAC_Stop_DMA>
			  else if (buttRec && buttTwo){
 80008a0:	e033      	b.n	800090a <main+0x406>
			  }
			  else if (buttRec && buttThree){
 80008a2:	4b7d      	ldr	r3, [pc, #500]	; (8000a98 <main+0x594>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d018      	beq.n	80008dc <main+0x3d8>
 80008aa:	4b7c      	ldr	r3, [pc, #496]	; (8000a9c <main+0x598>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d014      	beq.n	80008dc <main+0x3d8>
				  state = RecThree;
 80008b2:	4b7b      	ldr	r3, [pc, #492]	; (8000aa0 <main+0x59c>)
 80008b4:	2206      	movs	r2, #6
 80008b6:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'R','e','c','o','r','d','_','3'};
 80008b8:	4a83      	ldr	r2, [pc, #524]	; (8000ac8 <main+0x5c4>)
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	ca07      	ldmia	r2, {r0, r1, r2}
 80008c0:	c303      	stmia	r3!, {r0, r1}
 80008c2:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80008c4:	f107 010c 	add.w	r1, r7, #12
 80008c8:	2364      	movs	r3, #100	; 0x64
 80008ca:	220a      	movs	r2, #10
 80008cc:	4877      	ldr	r0, [pc, #476]	; (8000aac <main+0x5a8>)
 80008ce:	f002 fde2 	bl	8003496 <HAL_UART_Transmit>
		  		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80008d2:	2100      	movs	r1, #0
 80008d4:	4877      	ldr	r0, [pc, #476]	; (8000ab4 <main+0x5b0>)
 80008d6:	f001 f829 	bl	800192c <HAL_DAC_Stop_DMA>
			  else if (buttRec && buttThree){
 80008da:	e016      	b.n	800090a <main+0x406>
			  }
			  else if (buttStop){
 80008dc:	4b7b      	ldr	r3, [pc, #492]	; (8000acc <main+0x5c8>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d012      	beq.n	800090a <main+0x406>
				  state = Idle;
 80008e4:	4b6e      	ldr	r3, [pc, #440]	; (8000aa0 <main+0x59c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'S','t','o','p','_','_','_','_'};
 80008ea:	4a79      	ldr	r2, [pc, #484]	; (8000ad0 <main+0x5cc>)
 80008ec:	463b      	mov	r3, r7
 80008ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80008f0:	c303      	stmia	r3!, {r0, r1}
 80008f2:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 1000);
 80008f4:	4639      	mov	r1, r7
 80008f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fa:	220a      	movs	r2, #10
 80008fc:	486b      	ldr	r0, [pc, #428]	; (8000aac <main+0x5a8>)
 80008fe:	f002 fdca 	bl	8003496 <HAL_UART_Transmit>
		  		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000902:	2100      	movs	r1, #0
 8000904:	486b      	ldr	r0, [pc, #428]	; (8000ab4 <main+0x5b0>)
 8000906:	f001 f811 	bl	800192c <HAL_DAC_Stop_DMA>
			  }
	  }

	  ticky = HAL_GetTick();
 800090a:	f000 fe21 	bl	8001550 <HAL_GetTick>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	4b70      	ldr	r3, [pc, #448]	; (8000ad4 <main+0x5d0>)
 8000914:	601a      	str	r2, [r3, #0]
	  ///////////////////////////////////////////////////////////////////////////////////
	  if (state == PlayOne || state == PlayTwo || state == PlayThree || state == Idle){
 8000916:	4b62      	ldr	r3, [pc, #392]	; (8000aa0 <main+0x59c>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	2b01      	cmp	r3, #1
 800091e:	d00e      	beq.n	800093e <main+0x43a>
 8000920:	4b5f      	ldr	r3, [pc, #380]	; (8000aa0 <main+0x59c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b02      	cmp	r3, #2
 8000928:	d009      	beq.n	800093e <main+0x43a>
 800092a:	4b5d      	ldr	r3, [pc, #372]	; (8000aa0 <main+0x59c>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b03      	cmp	r3, #3
 8000932:	d004      	beq.n	800093e <main+0x43a>
 8000934:	4b5a      	ldr	r3, [pc, #360]	; (8000aa0 <main+0x59c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d174      	bne.n	8000a28 <main+0x524>
	  	  if (state == PlayOne){
 800093e:	4b58      	ldr	r3, [pc, #352]	; (8000aa0 <main+0x59c>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b01      	cmp	r3, #1
 8000946:	d11c      	bne.n	8000982 <main+0x47e>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, on);
 8000948:	4b62      	ldr	r3, [pc, #392]	; (8000ad4 <main+0x5d0>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b62      	ldr	r3, [pc, #392]	; (8000ad8 <main+0x5d4>)
 800094e:	fb83 1302 	smull	r1, r3, r3, r2
 8000952:	1159      	asrs	r1, r3, #5
 8000954:	17d3      	asrs	r3, r2, #31
 8000956:	1acb      	subs	r3, r1, r3
 8000958:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800095c:	fb01 f303 	mul.w	r3, r1, r3
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	2bf9      	cmp	r3, #249	; 0xf9
 8000964:	dc06      	bgt.n	8000974 <main+0x470>
 8000966:	2201      	movs	r2, #1
 8000968:	f44f 7180 	mov.w	r1, #256	; 0x100
 800096c:	485b      	ldr	r0, [pc, #364]	; (8000adc <main+0x5d8>)
 800096e:	f001 fe87 	bl	8002680 <HAL_GPIO_WritePin>
 8000972:	e00c      	b.n	800098e <main+0x48a>
	  		  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097a:	4858      	ldr	r0, [pc, #352]	; (8000adc <main+0x5d8>)
 800097c:	f001 fe80 	bl	8002680 <HAL_GPIO_WritePin>
 8000980:	e005      	b.n	800098e <main+0x48a>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000988:	4854      	ldr	r0, [pc, #336]	; (8000adc <main+0x5d8>)
 800098a:	f001 fe79 	bl	8002680 <HAL_GPIO_WritePin>

	  	  if (state == PlayTwo){
 800098e:	4b44      	ldr	r3, [pc, #272]	; (8000aa0 <main+0x59c>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b02      	cmp	r3, #2
 8000996:	d11c      	bne.n	80009d2 <main+0x4ce>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, on);
 8000998:	4b4e      	ldr	r3, [pc, #312]	; (8000ad4 <main+0x5d0>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b4e      	ldr	r3, [pc, #312]	; (8000ad8 <main+0x5d4>)
 800099e:	fb83 1302 	smull	r1, r3, r3, r2
 80009a2:	1159      	asrs	r1, r3, #5
 80009a4:	17d3      	asrs	r3, r2, #31
 80009a6:	1acb      	subs	r3, r1, r3
 80009a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009ac:	fb01 f303 	mul.w	r3, r1, r3
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	2bf9      	cmp	r3, #249	; 0xf9
 80009b4:	dc06      	bgt.n	80009c4 <main+0x4c0>
 80009b6:	2201      	movs	r2, #1
 80009b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009bc:	4848      	ldr	r0, [pc, #288]	; (8000ae0 <main+0x5dc>)
 80009be:	f001 fe5f 	bl	8002680 <HAL_GPIO_WritePin>
 80009c2:	e00c      	b.n	80009de <main+0x4da>
	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ca:	4845      	ldr	r0, [pc, #276]	; (8000ae0 <main+0x5dc>)
 80009cc:	f001 fe58 	bl	8002680 <HAL_GPIO_WritePin>
 80009d0:	e005      	b.n	80009de <main+0x4da>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d8:	4841      	ldr	r0, [pc, #260]	; (8000ae0 <main+0x5dc>)
 80009da:	f001 fe51 	bl	8002680 <HAL_GPIO_WritePin>

	  	  if (state == PlayThree){
 80009de:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <main+0x59c>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	d11a      	bne.n	8000a1e <main+0x51a>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, on);
 80009e8:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <main+0x5d0>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b3a      	ldr	r3, [pc, #232]	; (8000ad8 <main+0x5d4>)
 80009ee:	fb83 1302 	smull	r1, r3, r3, r2
 80009f2:	1159      	asrs	r1, r3, #5
 80009f4:	17d3      	asrs	r3, r2, #31
 80009f6:	1acb      	subs	r3, r1, r3
 80009f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009fc:	fb01 f303 	mul.w	r3, r1, r3
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	2bf9      	cmp	r3, #249	; 0xf9
 8000a04:	dc05      	bgt.n	8000a12 <main+0x50e>
 8000a06:	2201      	movs	r2, #1
 8000a08:	2110      	movs	r1, #16
 8000a0a:	4835      	ldr	r0, [pc, #212]	; (8000ae0 <main+0x5dc>)
 8000a0c:	f001 fe38 	bl	8002680 <HAL_GPIO_WritePin>
 8000a10:	e00a      	b.n	8000a28 <main+0x524>
	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2110      	movs	r1, #16
 8000a16:	4832      	ldr	r0, [pc, #200]	; (8000ae0 <main+0x5dc>)
 8000a18:	f001 fe32 	bl	8002680 <HAL_GPIO_WritePin>
 8000a1c:	e004      	b.n	8000a28 <main+0x524>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2110      	movs	r1, #16
 8000a22:	482f      	ldr	r0, [pc, #188]	; (8000ae0 <main+0x5dc>)
 8000a24:	f001 fe2c 	bl	8002680 <HAL_GPIO_WritePin>
	  }
	  ///////////////////////////////////////////////////////////////////////////////////
  	  if (state == RecOne || state == RecTwo || state == RecThree){
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <main+0x59c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	d00a      	beq.n	8000a48 <main+0x544>
 8000a32:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <main+0x59c>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b05      	cmp	r3, #5
 8000a3a:	d005      	beq.n	8000a48 <main+0x544>
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <main+0x59c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	f040 80a2 	bne.w	8000b8c <main+0x688>
  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, on);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2120      	movs	r1, #32
 8000a4c:	4824      	ldr	r0, [pc, #144]	; (8000ae0 <main+0x5dc>)
 8000a4e:	f001 fe17 	bl	8002680 <HAL_GPIO_WritePin>

  	  	  if (state == RecOne){
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <main+0x59c>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d143      	bne.n	8000ae4 <main+0x5e0>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, on);
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <main+0x5d0>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <main+0x5d4>)
 8000a62:	fb83 1302 	smull	r1, r3, r3, r2
 8000a66:	1159      	asrs	r1, r3, #5
 8000a68:	17d3      	asrs	r3, r2, #31
 8000a6a:	1acb      	subs	r3, r1, r3
 8000a6c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a70:	fb01 f303 	mul.w	r3, r1, r3
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	2bf9      	cmp	r3, #249	; 0xf9
 8000a78:	dc06      	bgt.n	8000a88 <main+0x584>
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a80:	4816      	ldr	r0, [pc, #88]	; (8000adc <main+0x5d8>)
 8000a82:	f001 fdfd 	bl	8002680 <HAL_GPIO_WritePin>
 8000a86:	e033      	b.n	8000af0 <main+0x5ec>
  	  		  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8e:	4813      	ldr	r0, [pc, #76]	; (8000adc <main+0x5d8>)
 8000a90:	f001 fdf6 	bl	8002680 <HAL_GPIO_WritePin>
 8000a94:	e02c      	b.n	8000af0 <main+0x5ec>
 8000a96:	bf00      	nop
 8000a98:	2000094c 	.word	0x2000094c
 8000a9c:	200000a8 	.word	0x200000a8
 8000aa0:	20000040 	.word	0x20000040
 8000aa4:	20000038 	.word	0x20000038
 8000aa8:	08004880 	.word	0x08004880
 8000aac:	2000090c 	.word	0x2000090c
 8000ab0:	200000c4 	.word	0x200000c4
 8000ab4:	200000b0 	.word	0x200000b0
 8000ab8:	20000034 	.word	0x20000034
 8000abc:	0800488c 	.word	0x0800488c
 8000ac0:	20000028 	.word	0x20000028
 8000ac4:	08004898 	.word	0x08004898
 8000ac8:	080048a4 	.word	0x080048a4
 8000acc:	2000003c 	.word	0x2000003c
 8000ad0:	080048b0 	.word	0x080048b0
 8000ad4:	2000002c 	.word	0x2000002c
 8000ad8:	10624dd3 	.word	0x10624dd3
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020400 	.word	0x40020400
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aea:	482b      	ldr	r0, [pc, #172]	; (8000b98 <main+0x694>)
 8000aec:	f001 fdc8 	bl	8002680 <HAL_GPIO_WritePin>

  	  	  if (state == RecTwo){
 8000af0:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <main+0x698>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b05      	cmp	r3, #5
 8000af8:	d11c      	bne.n	8000b34 <main+0x630>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, on);
 8000afa:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <main+0x69c>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <main+0x6a0>)
 8000b00:	fb83 1302 	smull	r1, r3, r3, r2
 8000b04:	1159      	asrs	r1, r3, #5
 8000b06:	17d3      	asrs	r3, r2, #31
 8000b08:	1acb      	subs	r3, r1, r3
 8000b0a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b0e:	fb01 f303 	mul.w	r3, r1, r3
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	2bf9      	cmp	r3, #249	; 0xf9
 8000b16:	dc06      	bgt.n	8000b26 <main+0x622>
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1e:	4822      	ldr	r0, [pc, #136]	; (8000ba8 <main+0x6a4>)
 8000b20:	f001 fdae 	bl	8002680 <HAL_GPIO_WritePin>
 8000b24:	e00c      	b.n	8000b40 <main+0x63c>
  	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2c:	481e      	ldr	r0, [pc, #120]	; (8000ba8 <main+0x6a4>)
 8000b2e:	f001 fda7 	bl	8002680 <HAL_GPIO_WritePin>
 8000b32:	e005      	b.n	8000b40 <main+0x63c>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3a:	481b      	ldr	r0, [pc, #108]	; (8000ba8 <main+0x6a4>)
 8000b3c:	f001 fda0 	bl	8002680 <HAL_GPIO_WritePin>

  	  	  if (state == RecThree){
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <main+0x698>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	d11a      	bne.n	8000b80 <main+0x67c>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, on);
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <main+0x69c>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <main+0x6a0>)
 8000b50:	fb83 1302 	smull	r1, r3, r3, r2
 8000b54:	1159      	asrs	r1, r3, #5
 8000b56:	17d3      	asrs	r3, r2, #31
 8000b58:	1acb      	subs	r3, r1, r3
 8000b5a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b5e:	fb01 f303 	mul.w	r3, r1, r3
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	2bf9      	cmp	r3, #249	; 0xf9
 8000b66:	dc05      	bgt.n	8000b74 <main+0x670>
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2110      	movs	r1, #16
 8000b6c:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <main+0x6a4>)
 8000b6e:	f001 fd87 	bl	8002680 <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8000b72:	e010      	b.n	8000b96 <main+0x692>
  	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2110      	movs	r1, #16
 8000b78:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <main+0x6a4>)
 8000b7a:	f001 fd81 	bl	8002680 <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8000b7e:	e00a      	b.n	8000b96 <main+0x692>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2110      	movs	r1, #16
 8000b84:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <main+0x6a4>)
 8000b86:	f001 fd7b 	bl	8002680 <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8000b8a:	e004      	b.n	8000b96 <main+0x692>
  	  }
  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, off);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2120      	movs	r1, #32
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <main+0x6a4>)
 8000b92:	f001 fd75 	bl	8002680 <HAL_GPIO_WritePin>
	  if (exti){
 8000b96:	e4f3      	b.n	8000580 <main+0x7c>
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	20000040 	.word	0x20000040
 8000ba0:	2000002c 	.word	0x2000002c
 8000ba4:	10624dd3 	.word	0x10624dd3
 8000ba8:	40020400 	.word	0x40020400

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b094      	sub	sp, #80	; 0x50
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	2234      	movs	r2, #52	; 0x34
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f003 f8ee 	bl	8003d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <SystemClock_Config+0xd4>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	4a29      	ldr	r2, [pc, #164]	; (8000c80 <SystemClock_Config+0xd4>)
 8000bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bde:	6413      	str	r3, [r2, #64]	; 0x40
 8000be0:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <SystemClock_Config+0xd4>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bec:	2300      	movs	r3, #0
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <SystemClock_Config+0xd8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bf8:	4a22      	ldr	r2, [pc, #136]	; (8000c84 <SystemClock_Config+0xd8>)
 8000bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <SystemClock_Config+0xd8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c10:	2301      	movs	r3, #1
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c14:	2310      	movs	r3, #16
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c20:	2310      	movs	r3, #16
 8000c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c24:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f002 f818 	bl	8002c70 <HAL_RCC_OscConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c46:	f000 f9b3 	bl	8000fb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	2102      	movs	r1, #2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 fd48 	bl	80026fc <HAL_RCC_ClockConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c72:	f000 f99d 	bl	8000fb0 <Error_Handler>
  }
}
 8000c76:	bf00      	nop
 8000c78:	3750      	adds	r7, #80	; 0x50
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40007000 	.word	0x40007000

08000c88 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c8e:	463b      	mov	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_DAC_Init+0x4c>)
 8000c98:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <MX_DAC_Init+0x50>)
 8000c9a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c9c:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <MX_DAC_Init+0x4c>)
 8000c9e:	f000 fd74 	bl	800178a <HAL_DAC_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ca8:	f000 f982 	bl	8000fb0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000cac:	2304      	movs	r3, #4
 8000cae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <MX_DAC_Init+0x4c>)
 8000cbc:	f000 fe81 	bl	80019c2 <HAL_DAC_ConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000cc6:	f000 f973 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000b0 	.word	0x200000b0
 8000cd8:	40007400 	.word	0x40007400

08000cdc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_TIM6_Init+0x64>)
 8000cec:	4a15      	ldr	r2, [pc, #84]	; (8000d44 <MX_TIM6_Init+0x68>)
 8000cee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <MX_TIM6_Init+0x64>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_TIM6_Init+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1905;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_TIM6_Init+0x64>)
 8000cfe:	f240 7271 	movw	r2, #1905	; 0x771
 8000d02:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_TIM6_Init+0x64>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d0a:	480d      	ldr	r0, [pc, #52]	; (8000d40 <MX_TIM6_Init+0x64>)
 8000d0c:	f002 fa0a 	bl	8003124 <HAL_TIM_Base_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d16:	f000 f94b 	bl	8000fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d1a:	2320      	movs	r3, #32
 8000d1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d22:	463b      	mov	r3, r7
 8000d24:	4619      	mov	r1, r3
 8000d26:	4806      	ldr	r0, [pc, #24]	; (8000d40 <MX_TIM6_Init+0x64>)
 8000d28:	f002 faec 	bl	8003304 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000d32:	f000 f93d 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200008c4 	.word	0x200008c4
 8000d44:	40001000 	.word	0x40001000

08000d48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <MX_USART2_UART_Init+0x48>)
 8000d4e:	4a11      	ldr	r2, [pc, #68]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_USART2_UART_Init+0x48>)
 8000d54:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <MX_USART2_UART_Init+0x50>)
 8000d56:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <MX_USART2_UART_Init+0x48>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_USART2_UART_Init+0x48>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <MX_USART2_UART_Init+0x48>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_USART2_UART_Init+0x48>)
 8000d6c:	220c      	movs	r2, #12
 8000d6e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <MX_USART2_UART_Init+0x48>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_USART2_UART_Init+0x48>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7c:	4804      	ldr	r0, [pc, #16]	; (8000d90 <MX_USART2_UART_Init+0x48>)
 8000d7e:	f002 fb3d 	bl	80033fc <HAL_UART_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000d88:	f000 f912 	bl	8000fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2000090c 	.word	0x2000090c
 8000d94:	40004400 	.word	0x40004400
 8000d98:	0007a120 	.word	0x0007a120

08000d9c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_DMA_Init+0x3c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <MX_DMA_Init+0x3c>)
 8000dac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_DMA_Init+0x3c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2010      	movs	r0, #16
 8000dc4:	f000 fcab 	bl	800171e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000dc8:	2010      	movs	r0, #16
 8000dca:	f000 fcc4 	bl	8001756 <HAL_NVIC_EnableIRQ>

}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800

08000ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b4d      	ldr	r3, [pc, #308]	; (8000f2c <MX_GPIO_Init+0x150>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a4c      	ldr	r2, [pc, #304]	; (8000f2c <MX_GPIO_Init+0x150>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b4a      	ldr	r3, [pc, #296]	; (8000f2c <MX_GPIO_Init+0x150>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b46      	ldr	r3, [pc, #280]	; (8000f2c <MX_GPIO_Init+0x150>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a45      	ldr	r2, [pc, #276]	; (8000f2c <MX_GPIO_Init+0x150>)
 8000e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b43      	ldr	r3, [pc, #268]	; (8000f2c <MX_GPIO_Init+0x150>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	4b3f      	ldr	r3, [pc, #252]	; (8000f2c <MX_GPIO_Init+0x150>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a3e      	ldr	r2, [pc, #248]	; (8000f2c <MX_GPIO_Init+0x150>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b3c      	ldr	r3, [pc, #240]	; (8000f2c <MX_GPIO_Init+0x150>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	4b38      	ldr	r3, [pc, #224]	; (8000f2c <MX_GPIO_Init+0x150>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a37      	ldr	r2, [pc, #220]	; (8000f2c <MX_GPIO_Init+0x150>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b35      	ldr	r3, [pc, #212]	; (8000f2c <MX_GPIO_Init+0x150>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000e68:	4831      	ldr	r0, [pc, #196]	; (8000f30 <MX_GPIO_Init+0x154>)
 8000e6a:	f001 fc09 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000e74:	482f      	ldr	r0, [pc, #188]	; (8000f34 <MX_GPIO_Init+0x158>)
 8000e76:	f001 fc03 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e80:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <MX_GPIO_Init+0x15c>)
 8000e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	482b      	ldr	r0, [pc, #172]	; (8000f3c <MX_GPIO_Init+0x160>)
 8000e90:	f001 fa4c 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8000e94:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4820      	ldr	r0, [pc, #128]	; (8000f30 <MX_GPIO_Init+0x154>)
 8000eae:	f001 fa3d 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 8000eb2:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb8:	4b21      	ldr	r3, [pc, #132]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	481a      	ldr	r0, [pc, #104]	; (8000f30 <MX_GPIO_Init+0x154>)
 8000ec8:	f001 fa30 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8000ecc:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4813      	ldr	r0, [pc, #76]	; (8000f34 <MX_GPIO_Init+0x158>)
 8000ee6:	f001 fa21 	bl	800232c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000eea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MX_GPIO_Init+0x164>)
 8000ef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	480d      	ldr	r0, [pc, #52]	; (8000f34 <MX_GPIO_Init+0x158>)
 8000f00:	f001 fa14 	bl	800232c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	2017      	movs	r0, #23
 8000f0a:	f000 fc08 	bl	800171e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f0e:	2017      	movs	r0, #23
 8000f10:	f000 fc21 	bl	8001756 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2100      	movs	r1, #0
 8000f18:	2028      	movs	r0, #40	; 0x28
 8000f1a:	f000 fc00 	bl	800171e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f1e:	2028      	movs	r0, #40	; 0x28
 8000f20:	f000 fc19 	bl	8001756 <HAL_NVIC_EnableIRQ>

}
 8000f24:	bf00      	nop
 8000f26:	3728      	adds	r7, #40	; 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020000 	.word	0x40020000
 8000f34:	40020400 	.word	0x40020400
 8000f38:	10210000 	.word	0x10210000
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	10110000 	.word	0x10110000

08000f44 <HAL_DAC_ConvCpltCallbackCh1>:

/* USER CODE BEGIN 4 */
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	6078      	str	r0, [r7, #4]
	  HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f54:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <HAL_DAC_ConvCpltCallbackCh1+0x34>)
 8000f56:	2100      	movs	r1, #0
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 fc39 	bl	80017d0 <HAL_DAC_Start_DMA>
	  wave_fillbuffer(dac_buffer+512, wave, 512);
 8000f5e:	4807      	ldr	r0, [pc, #28]	; (8000f7c <HAL_DAC_ConvCpltCallbackCh1+0x38>)
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <HAL_DAC_ConvCpltCallbackCh1+0x3c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f000 f864 	bl	8001038 <wave_fillbuffer>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200000c4 	.word	0x200000c4
 8000f7c:	200004c4 	.word	0x200004c4
 8000f80:	20000038 	.word	0x20000038

08000f84 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	  wave_fillbuffer(dac_buffer, wave, 512);
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x24>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f96:	4619      	mov	r1, r3
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <HAL_DAC_ConvHalfCpltCallbackCh1+0x28>)
 8000f9a:	f000 f84d 	bl	8001038 <wave_fillbuffer>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000038 	.word	0x20000038
 8000fac:	200000c4 	.word	0x200000c4

08000fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <wave_init>:
int16_t sintab[256];
uint16_t offset_440hz;
uint16_t offset_523hz;

void wave_init()
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 256; i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	e01e      	b.n	800100a <wave_init+0x4a>
		sintab[i] = (int) (800.0f * sinf(i * 0.02454369261f));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001024 <wave_init+0x64>
 8000fda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fde:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe2:	f002 fee3 	bl	8003dac <sinf>
 8000fe6:	eeb0 7a40 	vmov.f32	s14, s0
 8000fea:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001028 <wave_init+0x68>
 8000fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff6:	ee17 3a90 	vmov	r3, s15
 8000ffa:	b219      	sxth	r1, r3
 8000ffc:	4a0b      	ldr	r2, [pc, #44]	; (800102c <wave_init+0x6c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 256; i++)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3301      	adds	r3, #1
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2bff      	cmp	r3, #255	; 0xff
 800100e:	dddd      	ble.n	8000fcc <wave_init+0xc>

	offset_440hz = 0;
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <wave_init+0x70>)
 8001012:	2200      	movs	r2, #0
 8001014:	801a      	strh	r2, [r3, #0]
	offset_523hz = 0;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <wave_init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	801a      	strh	r2, [r3, #0]
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	3cc90fdb 	.word	0x3cc90fdb
 8001028:	44480000 	.word	0x44480000
 800102c:	20000954 	.word	0x20000954
 8001030:	20000952 	.word	0x20000952
 8001034:	20000950 	.word	0x20000950

08001038 <wave_fillbuffer>:


void wave_fillbuffer(uint16_t* buffer, uint8_t type, uint16_t len)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
 8001044:	4613      	mov	r3, r2
 8001046:	803b      	strh	r3, [r7, #0]
	for (int i = 0; i < len; i++)
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	e05e      	b.n	800110c <wave_fillbuffer+0xd4>
	{
		int16_t sample = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	817b      	strh	r3, [r7, #10]
		switch (type)
 8001052:	78fb      	ldrb	r3, [r7, #3]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d014      	beq.n	8001082 <wave_fillbuffer+0x4a>
 8001058:	2b03      	cmp	r3, #3
 800105a:	d023      	beq.n	80010a4 <wave_fillbuffer+0x6c>
 800105c:	2b01      	cmp	r3, #1
 800105e:	d149      	bne.n	80010f4 <wave_fillbuffer+0xbc>
		{
			case 1:
				sample = sintab[offset_440hz >> 8];
 8001060:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <wave_fillbuffer+0xe8>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	0a1b      	lsrs	r3, r3, #8
 8001066:	b29b      	uxth	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <wave_fillbuffer+0xec>)
 800106c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001070:	817b      	strh	r3, [r7, #10]
				offset_440hz += 654;
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <wave_fillbuffer+0xe8>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	f203 238e 	addw	r3, r3, #654	; 0x28e
 800107a:	b29a      	uxth	r2, r3
 800107c:	4b28      	ldr	r3, [pc, #160]	; (8001120 <wave_fillbuffer+0xe8>)
 800107e:	801a      	strh	r2, [r3, #0]
				break;
 8001080:	e038      	b.n	80010f4 <wave_fillbuffer+0xbc>
			case 2:
				sample = sintab[offset_523hz >> 8];
 8001082:	4b29      	ldr	r3, [pc, #164]	; (8001128 <wave_fillbuffer+0xf0>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	0a1b      	lsrs	r3, r3, #8
 8001088:	b29b      	uxth	r3, r3
 800108a:	461a      	mov	r2, r3
 800108c:	4b25      	ldr	r3, [pc, #148]	; (8001124 <wave_fillbuffer+0xec>)
 800108e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001092:	817b      	strh	r3, [r7, #10]
				offset_523hz += 777;
 8001094:	4b24      	ldr	r3, [pc, #144]	; (8001128 <wave_fillbuffer+0xf0>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	f203 3309 	addw	r3, r3, #777	; 0x309
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <wave_fillbuffer+0xf0>)
 80010a0:	801a      	strh	r2, [r3, #0]
				break;
 80010a2:	e027      	b.n	80010f4 <wave_fillbuffer+0xbc>
			case 3:
				sample = (sintab[offset_440hz >> 8] >> 1) + (sintab[offset_523hz >> 8] >> 1);
 80010a4:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <wave_fillbuffer+0xe8>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <wave_fillbuffer+0xec>)
 80010b0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <wave_fillbuffer+0xf0>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	4619      	mov	r1, r3
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <wave_fillbuffer+0xec>)
 80010c6:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80010ca:	105b      	asrs	r3, r3, #1
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4413      	add	r3, r2
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	817b      	strh	r3, [r7, #10]
				offset_440hz += 654;
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <wave_fillbuffer+0xe8>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	f203 238e 	addw	r3, r3, #654	; 0x28e
 80010de:	b29a      	uxth	r2, r3
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <wave_fillbuffer+0xe8>)
 80010e2:	801a      	strh	r2, [r3, #0]
				offset_523hz += 777;
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <wave_fillbuffer+0xf0>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	f203 3309 	addw	r3, r3, #777	; 0x309
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <wave_fillbuffer+0xf0>)
 80010f0:	801a      	strh	r2, [r3, #0]
				break;
 80010f2:	bf00      	nop
		}
		buffer[i] = (uint16_t)(sample + 2048);
 80010f4:	897a      	ldrh	r2, [r7, #10]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	440b      	add	r3, r1
 80010fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001102:	b292      	uxth	r2, r2
 8001104:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3301      	adds	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	883b      	ldrh	r3, [r7, #0]
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	db9c      	blt.n	800104e <wave_fillbuffer+0x16>
	}
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	20000952 	.word	0x20000952
 8001124:	20000954 	.word	0x20000954
 8001128:	20000950 	.word	0x20000950

0800112c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <HAL_MspInit+0x4c>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <HAL_MspInit+0x4c>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001140:	6453      	str	r3, [r2, #68]	; 0x44
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_MspInit+0x4c>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <HAL_MspInit+0x4c>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a08      	ldr	r2, [pc, #32]	; (8001178 <HAL_MspInit+0x4c>)
 8001158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_MspInit+0x4c>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800116a:	2007      	movs	r0, #7
 800116c:	f000 facc 	bl	8001708 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800

0800117c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <HAL_DAC_MspInit+0xdc>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d157      	bne.n	800124e <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b2e      	ldr	r3, [pc, #184]	; (800125c <HAL_DAC_MspInit+0xe0>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	4a2d      	ldr	r2, [pc, #180]	; (800125c <HAL_DAC_MspInit+0xe0>)
 80011a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
 80011ae:	4b2b      	ldr	r3, [pc, #172]	; (800125c <HAL_DAC_MspInit+0xe0>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b27      	ldr	r3, [pc, #156]	; (800125c <HAL_DAC_MspInit+0xe0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a26      	ldr	r2, [pc, #152]	; (800125c <HAL_DAC_MspInit+0xe0>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b24      	ldr	r3, [pc, #144]	; (800125c <HAL_DAC_MspInit+0xe0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011d6:	2310      	movs	r3, #16
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011da:	2303      	movs	r3, #3
 80011dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	481d      	ldr	r0, [pc, #116]	; (8001260 <HAL_DAC_MspInit+0xe4>)
 80011ea:	f001 f89f 	bl	800232c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80011ee:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 80011f0:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <HAL_DAC_MspInit+0xec>)
 80011f2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 80011f6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80011fa:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 80011fe:	2240      	movs	r2, #64	; 0x40
 8001200:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 800120a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800120e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 8001212:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001216:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 800121a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800121e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001232:	480c      	ldr	r0, [pc, #48]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 8001234:	f000 fc9c 	bl	8001b70 <HAL_DMA_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 800123e:	f7ff feb7 	bl	8000fb0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_DAC_MspInit+0xe8>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40007400 	.word	0x40007400
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000
 8001264:	20000044 	.word	0x20000044
 8001268:	40026088 	.word	0x40026088

0800126c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <HAL_TIM_Base_MspInit+0x3c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d10d      	bne.n	800129a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_TIM_Base_MspInit+0x40>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a09      	ldr	r2, [pc, #36]	; (80012ac <HAL_TIM_Base_MspInit+0x40>)
 8001288:	f043 0310 	orr.w	r3, r3, #16
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <HAL_TIM_Base_MspInit+0x40>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 0310 	and.w	r3, r3, #16
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40001000 	.word	0x40001000
 80012ac:	40023800 	.word	0x40023800

080012b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a19      	ldr	r2, [pc, #100]	; (8001334 <HAL_UART_MspInit+0x84>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d12b      	bne.n	800132a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_UART_MspInit+0x88>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <HAL_UART_MspInit+0x88>)
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_UART_MspInit+0x88>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_UART_MspInit+0x88>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a10      	ldr	r2, [pc, #64]	; (8001338 <HAL_UART_MspInit+0x88>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_UART_MspInit+0x88>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800130a:	230c      	movs	r3, #12
 800130c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800131a:	2307      	movs	r3, #7
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <HAL_UART_MspInit+0x8c>)
 8001326:	f001 f801 	bl	800232c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	; 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40004400 	.word	0x40004400
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001394:	f000 f8c8 	bl	8001528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <DMA1_Stream5_IRQHandler+0x10>)
 80013a2:	f000 fd5b 	bl	8001e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000044 	.word	0x20000044

080013b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	exti = on;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <EXTI9_5_IRQHandler+0x2c>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80013ba:	2040      	movs	r0, #64	; 0x40
 80013bc:	f001 f97a 	bl	80026b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80013c0:	2080      	movs	r0, #128	; 0x80
 80013c2:	f001 f977 	bl	80026b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80013c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013ca:	f001 f973 	bl	80026b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80013ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013d2:	f001 f96f 	bl	80026b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200000a4 	.word	0x200000a4

080013e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	exti = on;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <EXTI15_10_IRQHandler+0x20>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80013ea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013ee:	f001 f961 	bl	80026b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013f2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013f6:	f001 f95d 	bl	80026b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200000a4 	.word	0x200000a4

08001404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <SystemInit+0x28>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a07      	ldr	r2, [pc, #28]	; (800142c <SystemInit+0x28>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <SystemInit+0x28>)
 800141a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800141e:	609a      	str	r2, [r3, #8]
#endif
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001468 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001434:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001436:	e003      	b.n	8001440 <LoopCopyDataInit>

08001438 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800143a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800143c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800143e:	3104      	adds	r1, #4

08001440 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001440:	480b      	ldr	r0, [pc, #44]	; (8001470 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001444:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001446:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001448:	d3f6      	bcc.n	8001438 <CopyDataInit>
  ldr  r2, =_sbss
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800144c:	e002      	b.n	8001454 <LoopFillZerobss>

0800144e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800144e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001450:	f842 3b04 	str.w	r3, [r2], #4

08001454 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001456:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001458:	d3f9      	bcc.n	800144e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800145a:	f7ff ffd3 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800145e:	f002 fc79 	bl	8003d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001462:	f7ff f84f 	bl	8000504 <main>
  bx  lr    
 8001466:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001468:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800146c:	08004cbc 	.word	0x08004cbc
  ldr  r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001474:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001478:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800147c:	20000b58 	.word	0x20000b58

08001480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC_IRQHandler>
	...

08001484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001488:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <HAL_Init+0x40>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <HAL_Init+0x40>)
 800148e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001492:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <HAL_Init+0x40>)
 800149a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800149e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_Init+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <HAL_Init+0x40>)
 80014a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f000 f92b 	bl	8001708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 f808 	bl	80014c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b8:	f7ff fe38 	bl	800112c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023c00 	.word	0x40023c00

080014c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_InitTick+0x54>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_InitTick+0x58>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014de:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f943 	bl	8001772 <HAL_SYSTICK_Config>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00e      	b.n	8001514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d80a      	bhi.n	8001512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fc:	2200      	movs	r2, #0
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f000 f90b 	bl	800171e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001508:	4a06      	ldr	r2, [pc, #24]	; (8001524 <HAL_InitTick+0x5c>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e000      	b.n	8001514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000000 	.word	0x20000000
 8001520:	20000008 	.word	0x20000008
 8001524:	20000004 	.word	0x20000004

08001528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_IncTick+0x20>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_IncTick+0x24>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	4a04      	ldr	r2, [pc, #16]	; (800154c <HAL_IncTick+0x24>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008
 800154c:	20000b54 	.word	0x20000b54

08001550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <HAL_GetTick+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000b54 	.word	0x20000b54

08001568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001584:	4013      	ands	r3, r2
 8001586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <__NVIC_GetPriorityGrouping+0x18>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 0307 	and.w	r3, r3, #7
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	db0b      	blt.n	80015f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	f003 021f 	and.w	r2, r3, #31
 80015e4:	4907      	ldr	r1, [pc, #28]	; (8001604 <__NVIC_EnableIRQ+0x38>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	2001      	movs	r0, #1
 80015ee:	fa00 f202 	lsl.w	r2, r0, r2
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000e100 	.word	0xe000e100

08001608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db0a      	blt.n	8001632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	490c      	ldr	r1, [pc, #48]	; (8001654 <__NVIC_SetPriority+0x4c>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	0112      	lsls	r2, r2, #4
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	440b      	add	r3, r1
 800162c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001630:	e00a      	b.n	8001648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4908      	ldr	r1, [pc, #32]	; (8001658 <__NVIC_SetPriority+0x50>)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	3b04      	subs	r3, #4
 8001640:	0112      	lsls	r2, r2, #4
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	440b      	add	r3, r1
 8001646:	761a      	strb	r2, [r3, #24]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f1c3 0307 	rsb	r3, r3, #7
 8001676:	2b04      	cmp	r3, #4
 8001678:	bf28      	it	cs
 800167a:	2304      	movcs	r3, #4
 800167c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3304      	adds	r3, #4
 8001682:	2b06      	cmp	r3, #6
 8001684:	d902      	bls.n	800168c <NVIC_EncodePriority+0x30>
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3b03      	subs	r3, #3
 800168a:	e000      	b.n	800168e <NVIC_EncodePriority+0x32>
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	f04f 32ff 	mov.w	r2, #4294967295
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	401a      	ands	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43d9      	mvns	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	4313      	orrs	r3, r2
         );
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3724      	adds	r7, #36	; 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d4:	d301      	bcc.n	80016da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00f      	b.n	80016fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <SysTick_Config+0x40>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e2:	210f      	movs	r1, #15
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f7ff ff8e 	bl	8001608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <SysTick_Config+0x40>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <SysTick_Config+0x40>)
 80016f4:	2207      	movs	r2, #7
 80016f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	e000e010 	.word	0xe000e010

08001708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff29 	bl	8001568 <__NVIC_SetPriorityGrouping>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001730:	f7ff ff3e 	bl	80015b0 <__NVIC_GetPriorityGrouping>
 8001734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	6978      	ldr	r0, [r7, #20]
 800173c:	f7ff ff8e 	bl	800165c <NVIC_EncodePriority>
 8001740:	4602      	mov	r2, r0
 8001742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff5d 	bl	8001608 <__NVIC_SetPriority>
}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff31 	bl	80015cc <__NVIC_EnableIRQ>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffa2 	bl	80016c4 <SysTick_Config>
 8001780:	4603      	mov	r3, r0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e014      	b.n	80017c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	791b      	ldrb	r3, [r3, #4]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d105      	bne.n	80017b2 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fce5 	bl	800117c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2202      	movs	r2, #2
 80017b6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	795b      	ldrb	r3, [r3, #5]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_DAC_Start_DMA+0x1e>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e08e      	b.n	800190c <HAL_DAC_Start_DMA+0x13c>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2201      	movs	r2, #1
 80017f2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2202      	movs	r2, #2
 80017f8:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d12a      	bne.n	8001856 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a43      	ldr	r2, [pc, #268]	; (8001914 <HAL_DAC_Start_DMA+0x144>)
 8001806:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a42      	ldr	r2, [pc, #264]	; (8001918 <HAL_DAC_Start_DMA+0x148>)
 800180e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a41      	ldr	r2, [pc, #260]	; (800191c <HAL_DAC_Start_DMA+0x14c>)
 8001816:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001826:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	2b04      	cmp	r3, #4
 800182c:	d009      	beq.n	8001842 <HAL_DAC_Start_DMA+0x72>
 800182e:	2b08      	cmp	r3, #8
 8001830:	d00c      	beq.n	800184c <HAL_DAC_Start_DMA+0x7c>
 8001832:	2b00      	cmp	r3, #0
 8001834:	d000      	beq.n	8001838 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001836:	e039      	b.n	80018ac <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3308      	adds	r3, #8
 800183e:	617b      	str	r3, [r7, #20]
        break;
 8001840:	e034      	b.n	80018ac <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	330c      	adds	r3, #12
 8001848:	617b      	str	r3, [r7, #20]
        break;
 800184a:	e02f      	b.n	80018ac <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	3310      	adds	r3, #16
 8001852:	617b      	str	r3, [r7, #20]
        break;
 8001854:	e02a      	b.n	80018ac <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	4a31      	ldr	r2, [pc, #196]	; (8001920 <HAL_DAC_Start_DMA+0x150>)
 800185c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	4a30      	ldr	r2, [pc, #192]	; (8001924 <HAL_DAC_Start_DMA+0x154>)
 8001864:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	4a2f      	ldr	r2, [pc, #188]	; (8001928 <HAL_DAC_Start_DMA+0x158>)
 800186c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800187c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	2b04      	cmp	r3, #4
 8001882:	d009      	beq.n	8001898 <HAL_DAC_Start_DMA+0xc8>
 8001884:	2b08      	cmp	r3, #8
 8001886:	d00c      	beq.n	80018a2 <HAL_DAC_Start_DMA+0xd2>
 8001888:	2b00      	cmp	r3, #0
 800188a:	d000      	beq.n	800188e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800188c:	e00e      	b.n	80018ac <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	3314      	adds	r3, #20
 8001894:	617b      	str	r3, [r7, #20]
        break;
 8001896:	e009      	b.n	80018ac <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	3318      	adds	r3, #24
 800189e:	617b      	str	r3, [r7, #20]
        break;
 80018a0:	e004      	b.n	80018ac <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	331c      	adds	r3, #28
 80018a8:	617b      	str	r3, [r7, #20]
        break;
 80018aa:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10f      	bne.n	80018d2 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018c0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6898      	ldr	r0, [r3, #8]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	f000 f9fe 	bl	8001ccc <HAL_DMA_Start_IT>
 80018d0:	e00e      	b.n	80018f0 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80018e0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	68d8      	ldr	r0, [r3, #12]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	f000 f9ee 	bl	8001ccc <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	2201      	movs	r2, #1
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	409a      	lsls	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	08001a5d 	.word	0x08001a5d
 8001918:	08001a7f 	.word	0x08001a7f
 800191c:	08001a9b 	.word	0x08001a9b
 8001920:	08001b05 	.word	0x08001b05
 8001924:	08001b27 	.word	0x08001b27
 8001928:	08001b43 	.word	0x08001b43

0800192c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6819      	ldr	r1, [r3, #0]
 8001940:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	400a      	ands	r2, r1
 8001952:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6819      	ldr	r1, [r3, #0]
 800195a:	2201      	movs	r2, #1
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	400a      	ands	r2, r1
 800196a:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d107      	bne.n	8001982 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fa00 	bl	8001d7c <HAL_DMA_Abort>
 800197c:	4603      	mov	r3, r0
 800197e:	73fb      	strb	r3, [r7, #15]
 8001980:	e006      	b.n	8001990 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f9f8 	bl	8001d7c <HAL_DMA_Abort>
 800198c:	4603      	mov	r3, r0
 800198e:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2204      	movs	r2, #4
 800199a:	711a      	strb	r2, [r3, #4]
 800199c:	e002      	b.n	80019a4 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b087      	sub	sp, #28
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	795b      	ldrb	r3, [r3, #5]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_DAC_ConfigChannel+0x20>
 80019de:	2302      	movs	r3, #2
 80019e0:	e036      	b.n	8001a50 <HAL_DAC_ConfigChannel+0x8e>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2201      	movs	r2, #1
 80019e6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2202      	movs	r2, #2
 80019ec:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80019f6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4013      	ands	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6819      	ldr	r1, [r3, #0]
 8001a30:	22c0      	movs	r2, #192	; 0xc0
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43da      	mvns	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	400a      	ands	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2201      	movs	r2, #1
 8001a46:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	371c      	adds	r7, #28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a68:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f7ff fa6a 	bl	8000f44 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2201      	movs	r2, #1
 8001a74:	711a      	strb	r2, [r3, #4]
}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b084      	sub	sp, #16
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8a:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f7ff fa79 	bl	8000f84 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b084      	sub	sp, #16
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa6:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	f043 0204 	orr.w	r2, r3, #4
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff ff7a 	bl	80019ae <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2201      	movs	r2, #1
 8001abe:	711a      	strb	r2, [r3, #4]
}
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b10:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f7ff ffd8 	bl	8001ac8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	711a      	strb	r2, [r3, #4]
}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b32:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff ffd1 	bl	8001adc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4e:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	f043 0204 	orr.w	r2, r3, #4
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f7ff ffc7 	bl	8001af0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	711a      	strb	r2, [r3, #4]
}
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b7c:	f7ff fce8 	bl	8001550 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e099      	b.n	8001cc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0201 	bic.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bac:	e00f      	b.n	8001bce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bae:	f7ff fccf 	bl	8001550 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d908      	bls.n	8001bce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e078      	b.n	8001cc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1e8      	bne.n	8001bae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	4b38      	ldr	r3, [pc, #224]	; (8001cc8 <HAL_DMA_Init+0x158>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d107      	bne.n	8001c38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	4313      	orrs	r3, r2
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f023 0307 	bic.w	r3, r3, #7
 8001c4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d117      	bne.n	8001c92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00e      	beq.n	8001c92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 fadf 	bl	8002238 <DMA_CheckFifoParam>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d008      	beq.n	8001c92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2240      	movs	r2, #64	; 0x40
 8001c84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e016      	b.n	8001cc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 fa96 	bl	80021cc <DMA_CalcBaseAndBitshift>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca8:	223f      	movs	r2, #63	; 0x3f
 8001caa:	409a      	lsls	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	f010803f 	.word	0xf010803f

08001ccc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_DMA_Start_IT+0x26>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e040      	b.n	8001d74 <HAL_DMA_Start_IT+0xa8>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d12f      	bne.n	8001d66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	68b9      	ldr	r1, [r7, #8]
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 fa28 	bl	8002170 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	223f      	movs	r2, #63	; 0x3f
 8001d26:	409a      	lsls	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0216 	orr.w	r2, r2, #22
 8001d3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d007      	beq.n	8001d54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0208 	orr.w	r2, r2, #8
 8001d52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	e005      	b.n	8001d72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d8a:	f7ff fbe1 	bl	8001550 <HAL_GetTick>
 8001d8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d008      	beq.n	8001dae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2280      	movs	r2, #128	; 0x80
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e052      	b.n	8001e54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0216 	bic.w	r2, r2, #22
 8001dbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	695a      	ldr	r2, [r3, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dcc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d103      	bne.n	8001dde <HAL_DMA_Abort+0x62>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0208 	bic.w	r2, r2, #8
 8001dec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0201 	bic.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dfe:	e013      	b.n	8001e28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e00:	f7ff fba6 	bl	8001550 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b05      	cmp	r3, #5
 8001e0c:	d90c      	bls.n	8001e28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2220      	movs	r2, #32
 8001e12:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2203      	movs	r2, #3
 8001e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e015      	b.n	8001e54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1e4      	bne.n	8001e00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3a:	223f      	movs	r2, #63	; 0x3f
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e68:	4b92      	ldr	r3, [pc, #584]	; (80020b4 <HAL_DMA_IRQHandler+0x258>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a92      	ldr	r2, [pc, #584]	; (80020b8 <HAL_DMA_IRQHandler+0x25c>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	0a9b      	lsrs	r3, r3, #10
 8001e74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	2208      	movs	r2, #8
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d01a      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d013      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0204 	bic.w	r2, r2, #4
 8001eae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ecc:	2201      	movs	r2, #1
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d012      	beq.n	8001efe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00b      	beq.n	8001efe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eea:	2201      	movs	r2, #1
 8001eec:	409a      	lsls	r2, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef6:	f043 0202 	orr.w	r2, r3, #2
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f02:	2204      	movs	r2, #4
 8001f04:	409a      	lsls	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d012      	beq.n	8001f34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00b      	beq.n	8001f34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	2204      	movs	r2, #4
 8001f22:	409a      	lsls	r2, r3
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	f043 0204 	orr.w	r2, r3, #4
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f38:	2210      	movs	r2, #16
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d043      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d03c      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f56:	2210      	movs	r2, #16
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d018      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d108      	bne.n	8001f8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d024      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	4798      	blx	r3
 8001f8a:	e01f      	b.n	8001fcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01b      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
 8001f9c:	e016      	b.n	8001fcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d107      	bne.n	8001fbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0208 	bic.w	r2, r2, #8
 8001fba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 808e 	beq.w	80020fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 8086 	beq.w	80020fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b05      	cmp	r3, #5
 8002004:	d136      	bne.n	8002074 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0216 	bic.w	r2, r2, #22
 8002014:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002024:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	2b00      	cmp	r3, #0
 800202c:	d103      	bne.n	8002036 <HAL_DMA_IRQHandler+0x1da>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0208 	bic.w	r2, r2, #8
 8002044:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204a:	223f      	movs	r2, #63	; 0x3f
 800204c:	409a      	lsls	r2, r3
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002066:	2b00      	cmp	r3, #0
 8002068:	d07d      	beq.n	8002166 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4798      	blx	r3
        }
        return;
 8002072:	e078      	b.n	8002166 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01c      	beq.n	80020bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d108      	bne.n	80020a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	2b00      	cmp	r3, #0
 8002096:	d030      	beq.n	80020fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
 80020a0:	e02b      	b.n	80020fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d027      	beq.n	80020fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	4798      	blx	r3
 80020b2:	e022      	b.n	80020fa <HAL_DMA_IRQHandler+0x29e>
 80020b4:	20000000 	.word	0x20000000
 80020b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10f      	bne.n	80020ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0210 	bic.w	r2, r2, #16
 80020d8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d032      	beq.n	8002168 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d022      	beq.n	8002154 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2205      	movs	r2, #5
 8002112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0201 	bic.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3301      	adds	r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	429a      	cmp	r2, r3
 8002130:	d307      	bcc.n	8002142 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f2      	bne.n	8002126 <HAL_DMA_IRQHandler+0x2ca>
 8002140:	e000      	b.n	8002144 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002142:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	4798      	blx	r3
 8002164:	e000      	b.n	8002168 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002166:	bf00      	nop
    }
  }
}
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop

08002170 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800218c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b40      	cmp	r3, #64	; 0x40
 800219c:	d108      	bne.n	80021b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021ae:	e007      	b.n	80021c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	60da      	str	r2, [r3, #12]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	3b10      	subs	r3, #16
 80021dc:	4a14      	ldr	r2, [pc, #80]	; (8002230 <DMA_CalcBaseAndBitshift+0x64>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021e6:	4a13      	ldr	r2, [pc, #76]	; (8002234 <DMA_CalcBaseAndBitshift+0x68>)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d909      	bls.n	800220e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002202:	f023 0303 	bic.w	r3, r3, #3
 8002206:	1d1a      	adds	r2, r3, #4
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	659a      	str	r2, [r3, #88]	; 0x58
 800220c:	e007      	b.n	800221e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002216:	f023 0303 	bic.w	r3, r3, #3
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	aaaaaaab 	.word	0xaaaaaaab
 8002234:	080048d4 	.word	0x080048d4

08002238 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002240:	2300      	movs	r3, #0
 8002242:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d11f      	bne.n	8002292 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d855      	bhi.n	8002304 <DMA_CheckFifoParam+0xcc>
 8002258:	a201      	add	r2, pc, #4	; (adr r2, 8002260 <DMA_CheckFifoParam+0x28>)
 800225a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225e:	bf00      	nop
 8002260:	08002271 	.word	0x08002271
 8002264:	08002283 	.word	0x08002283
 8002268:	08002271 	.word	0x08002271
 800226c:	08002305 	.word	0x08002305
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d045      	beq.n	8002308 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002280:	e042      	b.n	8002308 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800228a:	d13f      	bne.n	800230c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002290:	e03c      	b.n	800230c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800229a:	d121      	bne.n	80022e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d836      	bhi.n	8002310 <DMA_CheckFifoParam+0xd8>
 80022a2:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <DMA_CheckFifoParam+0x70>)
 80022a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a8:	080022b9 	.word	0x080022b9
 80022ac:	080022bf 	.word	0x080022bf
 80022b0:	080022b9 	.word	0x080022b9
 80022b4:	080022d1 	.word	0x080022d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
      break;
 80022bc:	e02f      	b.n	800231e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d024      	beq.n	8002314 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022ce:	e021      	b.n	8002314 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022d8:	d11e      	bne.n	8002318 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022de:	e01b      	b.n	8002318 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d902      	bls.n	80022ec <DMA_CheckFifoParam+0xb4>
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d003      	beq.n	80022f2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022ea:	e018      	b.n	800231e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
      break;
 80022f0:	e015      	b.n	800231e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00e      	beq.n	800231c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
      break;
 8002302:	e00b      	b.n	800231c <DMA_CheckFifoParam+0xe4>
      break;
 8002304:	bf00      	nop
 8002306:	e00a      	b.n	800231e <DMA_CheckFifoParam+0xe6>
      break;
 8002308:	bf00      	nop
 800230a:	e008      	b.n	800231e <DMA_CheckFifoParam+0xe6>
      break;
 800230c:	bf00      	nop
 800230e:	e006      	b.n	800231e <DMA_CheckFifoParam+0xe6>
      break;
 8002310:	bf00      	nop
 8002312:	e004      	b.n	800231e <DMA_CheckFifoParam+0xe6>
      break;
 8002314:	bf00      	nop
 8002316:	e002      	b.n	800231e <DMA_CheckFifoParam+0xe6>
      break;   
 8002318:	bf00      	nop
 800231a:	e000      	b.n	800231e <DMA_CheckFifoParam+0xe6>
      break;
 800231c:	bf00      	nop
    }
  } 
  
  return status; 
 800231e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	e165      	b.n	8002614 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002348:	2201      	movs	r2, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	429a      	cmp	r2, r3
 8002362:	f040 8154 	bne.w	800260e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d00b      	beq.n	8002386 <HAL_GPIO_Init+0x5a>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d007      	beq.n	8002386 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800237a:	2b11      	cmp	r3, #17
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b12      	cmp	r3, #18
 8002384:	d130      	bne.n	80023e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	2203      	movs	r2, #3
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023bc:	2201      	movs	r2, #1
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 0201 	and.w	r2, r3, #1
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	2203      	movs	r2, #3
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0xfc>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b12      	cmp	r3, #18
 8002426:	d123      	bne.n	8002470 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	08da      	lsrs	r2, r3, #3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3208      	adds	r2, #8
 8002430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	220f      	movs	r2, #15
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	08da      	lsrs	r2, r3, #3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3208      	adds	r2, #8
 800246a:	69b9      	ldr	r1, [r7, #24]
 800246c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	2203      	movs	r2, #3
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0203 	and.w	r2, r3, #3
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80ae 	beq.w	800260e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	4b5c      	ldr	r3, [pc, #368]	; (8002628 <HAL_GPIO_Init+0x2fc>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	4a5b      	ldr	r2, [pc, #364]	; (8002628 <HAL_GPIO_Init+0x2fc>)
 80024bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c0:	6453      	str	r3, [r2, #68]	; 0x44
 80024c2:	4b59      	ldr	r3, [pc, #356]	; (8002628 <HAL_GPIO_Init+0x2fc>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ce:	4a57      	ldr	r2, [pc, #348]	; (800262c <HAL_GPIO_Init+0x300>)
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	3302      	adds	r3, #2
 80024d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	220f      	movs	r2, #15
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4e      	ldr	r2, [pc, #312]	; (8002630 <HAL_GPIO_Init+0x304>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d025      	beq.n	8002546 <HAL_GPIO_Init+0x21a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4d      	ldr	r2, [pc, #308]	; (8002634 <HAL_GPIO_Init+0x308>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d01f      	beq.n	8002542 <HAL_GPIO_Init+0x216>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4c      	ldr	r2, [pc, #304]	; (8002638 <HAL_GPIO_Init+0x30c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d019      	beq.n	800253e <HAL_GPIO_Init+0x212>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a4b      	ldr	r2, [pc, #300]	; (800263c <HAL_GPIO_Init+0x310>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d013      	beq.n	800253a <HAL_GPIO_Init+0x20e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a4a      	ldr	r2, [pc, #296]	; (8002640 <HAL_GPIO_Init+0x314>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d00d      	beq.n	8002536 <HAL_GPIO_Init+0x20a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a49      	ldr	r2, [pc, #292]	; (8002644 <HAL_GPIO_Init+0x318>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d007      	beq.n	8002532 <HAL_GPIO_Init+0x206>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a48      	ldr	r2, [pc, #288]	; (8002648 <HAL_GPIO_Init+0x31c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d101      	bne.n	800252e <HAL_GPIO_Init+0x202>
 800252a:	2306      	movs	r3, #6
 800252c:	e00c      	b.n	8002548 <HAL_GPIO_Init+0x21c>
 800252e:	2307      	movs	r3, #7
 8002530:	e00a      	b.n	8002548 <HAL_GPIO_Init+0x21c>
 8002532:	2305      	movs	r3, #5
 8002534:	e008      	b.n	8002548 <HAL_GPIO_Init+0x21c>
 8002536:	2304      	movs	r3, #4
 8002538:	e006      	b.n	8002548 <HAL_GPIO_Init+0x21c>
 800253a:	2303      	movs	r3, #3
 800253c:	e004      	b.n	8002548 <HAL_GPIO_Init+0x21c>
 800253e:	2302      	movs	r3, #2
 8002540:	e002      	b.n	8002548 <HAL_GPIO_Init+0x21c>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <HAL_GPIO_Init+0x21c>
 8002546:	2300      	movs	r3, #0
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	f002 0203 	and.w	r2, r2, #3
 800254e:	0092      	lsls	r2, r2, #2
 8002550:	4093      	lsls	r3, r2
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002558:	4934      	ldr	r1, [pc, #208]	; (800262c <HAL_GPIO_Init+0x300>)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	089b      	lsrs	r3, r3, #2
 800255e:	3302      	adds	r3, #2
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002566:	4b39      	ldr	r3, [pc, #228]	; (800264c <HAL_GPIO_Init+0x320>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800258a:	4a30      	ldr	r2, [pc, #192]	; (800264c <HAL_GPIO_Init+0x320>)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002590:	4b2e      	ldr	r3, [pc, #184]	; (800264c <HAL_GPIO_Init+0x320>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025b4:	4a25      	ldr	r2, [pc, #148]	; (800264c <HAL_GPIO_Init+0x320>)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ba:	4b24      	ldr	r3, [pc, #144]	; (800264c <HAL_GPIO_Init+0x320>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025de:	4a1b      	ldr	r2, [pc, #108]	; (800264c <HAL_GPIO_Init+0x320>)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_GPIO_Init+0x320>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002608:	4a10      	ldr	r2, [pc, #64]	; (800264c <HAL_GPIO_Init+0x320>)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3301      	adds	r3, #1
 8002612:	61fb      	str	r3, [r7, #28]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	2b0f      	cmp	r3, #15
 8002618:	f67f ae96 	bls.w	8002348 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800261c:	bf00      	nop
 800261e:	3724      	adds	r7, #36	; 0x24
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	40023800 	.word	0x40023800
 800262c:	40013800 	.word	0x40013800
 8002630:	40020000 	.word	0x40020000
 8002634:	40020400 	.word	0x40020400
 8002638:	40020800 	.word	0x40020800
 800263c:	40020c00 	.word	0x40020c00
 8002640:	40021000 	.word	0x40021000
 8002644:	40021400 	.word	0x40021400
 8002648:	40021800 	.word	0x40021800
 800264c:	40013c00 	.word	0x40013c00

08002650 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	887b      	ldrh	r3, [r7, #2]
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
 800266c:	e001      	b.n	8002672 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002672:	7bfb      	ldrb	r3, [r7, #15]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800269c:	e003      	b.n	80026a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	041a      	lsls	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d006      	beq.n	80026d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ca:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f806 	bl	80026e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40013c00 	.word	0x40013c00

080026e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0cc      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4b68      	ldr	r3, [pc, #416]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d90c      	bls.n	8002738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b65      	ldr	r3, [pc, #404]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b63      	ldr	r3, [pc, #396]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0b8      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d020      	beq.n	8002786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002750:	4b59      	ldr	r3, [pc, #356]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4a58      	ldr	r2, [pc, #352]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800275a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002768:	4b53      	ldr	r3, [pc, #332]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4a52      	ldr	r2, [pc, #328]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002774:	4b50      	ldr	r3, [pc, #320]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	494d      	ldr	r1, [pc, #308]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d044      	beq.n	800281c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	4b47      	ldr	r3, [pc, #284]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d119      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e07f      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d003      	beq.n	80027ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	4b3f      	ldr	r3, [pc, #252]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e06f      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ca:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e067      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027da:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f023 0203 	bic.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4934      	ldr	r1, [pc, #208]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ec:	f7fe feb0 	bl	8001550 <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	e00a      	b.n	800280a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f4:	f7fe feac 	bl	8001550 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e04f      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 020c 	and.w	r2, r3, #12
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	429a      	cmp	r2, r3
 800281a:	d1eb      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800281c:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d20c      	bcs.n	8002844 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e032      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002850:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4916      	ldr	r1, [pc, #88]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	490e      	ldr	r1, [pc, #56]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002882:	f000 f855 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 8002886:	4601      	mov	r1, r0
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	5cd3      	ldrb	r3, [r2, r3]
 8002896:	fa21 f303 	lsr.w	r3, r1, r3
 800289a:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fe10 	bl	80014c8 <HAL_InitTick>

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40023c00 	.word	0x40023c00
 80028b8:	40023800 	.word	0x40023800
 80028bc:	080048bc 	.word	0x080048bc
 80028c0:	20000000 	.word	0x20000000
 80028c4:	20000004 	.word	0x20000004

080028c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000000 	.word	0x20000000

080028e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028e4:	f7ff fff0 	bl	80028c8 <HAL_RCC_GetHCLKFreq>
 80028e8:	4601      	mov	r1, r0
 80028ea:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	0a9b      	lsrs	r3, r3, #10
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	4a03      	ldr	r2, [pc, #12]	; (8002904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028f6:	5cd3      	ldrb	r3, [r2, r3]
 80028f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40023800 	.word	0x40023800
 8002904:	080048cc 	.word	0x080048cc

08002908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800290c:	f7ff ffdc 	bl	80028c8 <HAL_RCC_GetHCLKFreq>
 8002910:	4601      	mov	r1, r0
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	0b5b      	lsrs	r3, r3, #13
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4a03      	ldr	r2, [pc, #12]	; (800292c <HAL_RCC_GetPCLK2Freq+0x24>)
 800291e:	5cd3      	ldrb	r3, [r2, r3]
 8002920:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002924:	4618      	mov	r0, r3
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	080048cc 	.word	0x080048cc

08002930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800294a:	4bc6      	ldr	r3, [pc, #792]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x334>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b0c      	cmp	r3, #12
 8002954:	f200 817e 	bhi.w	8002c54 <HAL_RCC_GetSysClockFreq+0x324>
 8002958:	a201      	add	r2, pc, #4	; (adr r2, 8002960 <HAL_RCC_GetSysClockFreq+0x30>)
 800295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295e:	bf00      	nop
 8002960:	08002995 	.word	0x08002995
 8002964:	08002c55 	.word	0x08002c55
 8002968:	08002c55 	.word	0x08002c55
 800296c:	08002c55 	.word	0x08002c55
 8002970:	0800299b 	.word	0x0800299b
 8002974:	08002c55 	.word	0x08002c55
 8002978:	08002c55 	.word	0x08002c55
 800297c:	08002c55 	.word	0x08002c55
 8002980:	080029a1 	.word	0x080029a1
 8002984:	08002c55 	.word	0x08002c55
 8002988:	08002c55 	.word	0x08002c55
 800298c:	08002c55 	.word	0x08002c55
 8002990:	08002afd 	.word	0x08002afd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002994:	4bb4      	ldr	r3, [pc, #720]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x338>)
 8002996:	613b      	str	r3, [r7, #16]
       break;
 8002998:	e15f      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800299a:	4bb4      	ldr	r3, [pc, #720]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x33c>)
 800299c:	613b      	str	r3, [r7, #16]
      break;
 800299e:	e15c      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029a0:	4bb0      	ldr	r3, [pc, #704]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x334>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029a8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029aa:	4bae      	ldr	r3, [pc, #696]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x334>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d04a      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b6:	4bab      	ldr	r3, [pc, #684]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x334>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	099b      	lsrs	r3, r3, #6
 80029bc:	f04f 0400 	mov.w	r4, #0
 80029c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	ea03 0501 	and.w	r5, r3, r1
 80029cc:	ea04 0602 	and.w	r6, r4, r2
 80029d0:	4629      	mov	r1, r5
 80029d2:	4632      	mov	r2, r6
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	f04f 0400 	mov.w	r4, #0
 80029dc:	0154      	lsls	r4, r2, #5
 80029de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029e2:	014b      	lsls	r3, r1, #5
 80029e4:	4619      	mov	r1, r3
 80029e6:	4622      	mov	r2, r4
 80029e8:	1b49      	subs	r1, r1, r5
 80029ea:	eb62 0206 	sbc.w	r2, r2, r6
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	f04f 0400 	mov.w	r4, #0
 80029f6:	0194      	lsls	r4, r2, #6
 80029f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029fc:	018b      	lsls	r3, r1, #6
 80029fe:	1a5b      	subs	r3, r3, r1
 8002a00:	eb64 0402 	sbc.w	r4, r4, r2
 8002a04:	f04f 0100 	mov.w	r1, #0
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	00e2      	lsls	r2, r4, #3
 8002a0e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a12:	00d9      	lsls	r1, r3, #3
 8002a14:	460b      	mov	r3, r1
 8002a16:	4614      	mov	r4, r2
 8002a18:	195b      	adds	r3, r3, r5
 8002a1a:	eb44 0406 	adc.w	r4, r4, r6
 8002a1e:	f04f 0100 	mov.w	r1, #0
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	0262      	lsls	r2, r4, #9
 8002a28:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a2c:	0259      	lsls	r1, r3, #9
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4614      	mov	r4, r2
 8002a32:	4618      	mov	r0, r3
 8002a34:	4621      	mov	r1, r4
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f04f 0400 	mov.w	r4, #0
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4623      	mov	r3, r4
 8002a40:	f7fd fbe0 	bl	8000204 <__aeabi_uldivmod>
 8002a44:	4603      	mov	r3, r0
 8002a46:	460c      	mov	r4, r1
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	e049      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4c:	4b85      	ldr	r3, [pc, #532]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	099b      	lsrs	r3, r3, #6
 8002a52:	f04f 0400 	mov.w	r4, #0
 8002a56:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	ea03 0501 	and.w	r5, r3, r1
 8002a62:	ea04 0602 	and.w	r6, r4, r2
 8002a66:	4629      	mov	r1, r5
 8002a68:	4632      	mov	r2, r6
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	f04f 0400 	mov.w	r4, #0
 8002a72:	0154      	lsls	r4, r2, #5
 8002a74:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a78:	014b      	lsls	r3, r1, #5
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4622      	mov	r2, r4
 8002a7e:	1b49      	subs	r1, r1, r5
 8002a80:	eb62 0206 	sbc.w	r2, r2, r6
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	f04f 0400 	mov.w	r4, #0
 8002a8c:	0194      	lsls	r4, r2, #6
 8002a8e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a92:	018b      	lsls	r3, r1, #6
 8002a94:	1a5b      	subs	r3, r3, r1
 8002a96:	eb64 0402 	sbc.w	r4, r4, r2
 8002a9a:	f04f 0100 	mov.w	r1, #0
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	00e2      	lsls	r2, r4, #3
 8002aa4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002aa8:	00d9      	lsls	r1, r3, #3
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4614      	mov	r4, r2
 8002aae:	195b      	adds	r3, r3, r5
 8002ab0:	eb44 0406 	adc.w	r4, r4, r6
 8002ab4:	f04f 0100 	mov.w	r1, #0
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	02a2      	lsls	r2, r4, #10
 8002abe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ac2:	0299      	lsls	r1, r3, #10
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4614      	mov	r4, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	4621      	mov	r1, r4
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f04f 0400 	mov.w	r4, #0
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4623      	mov	r3, r4
 8002ad6:	f7fd fb95 	bl	8000204 <__aeabi_uldivmod>
 8002ada:	4603      	mov	r3, r0
 8002adc:	460c      	mov	r4, r1
 8002ade:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ae0:	4b60      	ldr	r3, [pc, #384]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x334>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	0c1b      	lsrs	r3, r3, #16
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	3301      	adds	r3, #1
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	613b      	str	r3, [r7, #16]
      break;
 8002afa:	e0ae      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002afc:	4b59      	ldr	r3, [pc, #356]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x334>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b04:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b06:	4b57      	ldr	r3, [pc, #348]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d04a      	beq.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b12:	4b54      	ldr	r3, [pc, #336]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	099b      	lsrs	r3, r3, #6
 8002b18:	f04f 0400 	mov.w	r4, #0
 8002b1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	ea03 0501 	and.w	r5, r3, r1
 8002b28:	ea04 0602 	and.w	r6, r4, r2
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	4632      	mov	r2, r6
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	f04f 0400 	mov.w	r4, #0
 8002b38:	0154      	lsls	r4, r2, #5
 8002b3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b3e:	014b      	lsls	r3, r1, #5
 8002b40:	4619      	mov	r1, r3
 8002b42:	4622      	mov	r2, r4
 8002b44:	1b49      	subs	r1, r1, r5
 8002b46:	eb62 0206 	sbc.w	r2, r2, r6
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	f04f 0400 	mov.w	r4, #0
 8002b52:	0194      	lsls	r4, r2, #6
 8002b54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b58:	018b      	lsls	r3, r1, #6
 8002b5a:	1a5b      	subs	r3, r3, r1
 8002b5c:	eb64 0402 	sbc.w	r4, r4, r2
 8002b60:	f04f 0100 	mov.w	r1, #0
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	00e2      	lsls	r2, r4, #3
 8002b6a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b6e:	00d9      	lsls	r1, r3, #3
 8002b70:	460b      	mov	r3, r1
 8002b72:	4614      	mov	r4, r2
 8002b74:	195b      	adds	r3, r3, r5
 8002b76:	eb44 0406 	adc.w	r4, r4, r6
 8002b7a:	f04f 0100 	mov.w	r1, #0
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	0262      	lsls	r2, r4, #9
 8002b84:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b88:	0259      	lsls	r1, r3, #9
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4614      	mov	r4, r2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	4621      	mov	r1, r4
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f04f 0400 	mov.w	r4, #0
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4623      	mov	r3, r4
 8002b9c:	f7fd fb32 	bl	8000204 <__aeabi_uldivmod>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	460c      	mov	r4, r1
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	e049      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba8:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x334>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	099b      	lsrs	r3, r3, #6
 8002bae:	f04f 0400 	mov.w	r4, #0
 8002bb2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	ea03 0501 	and.w	r5, r3, r1
 8002bbe:	ea04 0602 	and.w	r6, r4, r2
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	4632      	mov	r2, r6
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	f04f 0400 	mov.w	r4, #0
 8002bce:	0154      	lsls	r4, r2, #5
 8002bd0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bd4:	014b      	lsls	r3, r1, #5
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4622      	mov	r2, r4
 8002bda:	1b49      	subs	r1, r1, r5
 8002bdc:	eb62 0206 	sbc.w	r2, r2, r6
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	f04f 0400 	mov.w	r4, #0
 8002be8:	0194      	lsls	r4, r2, #6
 8002bea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bee:	018b      	lsls	r3, r1, #6
 8002bf0:	1a5b      	subs	r3, r3, r1
 8002bf2:	eb64 0402 	sbc.w	r4, r4, r2
 8002bf6:	f04f 0100 	mov.w	r1, #0
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	00e2      	lsls	r2, r4, #3
 8002c00:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c04:	00d9      	lsls	r1, r3, #3
 8002c06:	460b      	mov	r3, r1
 8002c08:	4614      	mov	r4, r2
 8002c0a:	195b      	adds	r3, r3, r5
 8002c0c:	eb44 0406 	adc.w	r4, r4, r6
 8002c10:	f04f 0100 	mov.w	r1, #0
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	02a2      	lsls	r2, r4, #10
 8002c1a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c1e:	0299      	lsls	r1, r3, #10
 8002c20:	460b      	mov	r3, r1
 8002c22:	4614      	mov	r4, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	4621      	mov	r1, r4
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f04f 0400 	mov.w	r4, #0
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4623      	mov	r3, r4
 8002c32:	f7fd fae7 	bl	8000204 <__aeabi_uldivmod>
 8002c36:	4603      	mov	r3, r0
 8002c38:	460c      	mov	r4, r1
 8002c3a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x334>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	0f1b      	lsrs	r3, r3, #28
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c50:	613b      	str	r3, [r7, #16]
      break;
 8002c52:	e002      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x338>)
 8002c56:	613b      	str	r3, [r7, #16]
      break;
 8002c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c5a:	693b      	ldr	r3, [r7, #16]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c64:	40023800 	.word	0x40023800
 8002c68:	00f42400 	.word	0x00f42400
 8002c6c:	007a1200 	.word	0x007a1200

08002c70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8083 	beq.w	8002d90 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c8a:	4b95      	ldr	r3, [pc, #596]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d019      	beq.n	8002cca <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c96:	4b92      	ldr	r3, [pc, #584]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d106      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ca2:	4b8f      	ldr	r3, [pc, #572]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002caa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cae:	d00c      	beq.n	8002cca <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb0:	4b8b      	ldr	r3, [pc, #556]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cb8:	2b0c      	cmp	r3, #12
 8002cba:	d112      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cbc:	4b88      	ldr	r3, [pc, #544]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cc8:	d10b      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cca:	4b85      	ldr	r3, [pc, #532]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d05b      	beq.n	8002d8e <HAL_RCC_OscConfig+0x11e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d157      	bne.n	8002d8e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e216      	b.n	8003110 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cea:	d106      	bne.n	8002cfa <HAL_RCC_OscConfig+0x8a>
 8002cec:	4b7c      	ldr	r3, [pc, #496]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a7b      	ldr	r2, [pc, #492]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	e01d      	b.n	8002d36 <HAL_RCC_OscConfig+0xc6>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d02:	d10c      	bne.n	8002d1e <HAL_RCC_OscConfig+0xae>
 8002d04:	4b76      	ldr	r3, [pc, #472]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a75      	ldr	r2, [pc, #468]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002d0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	4b73      	ldr	r3, [pc, #460]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a72      	ldr	r2, [pc, #456]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	e00b      	b.n	8002d36 <HAL_RCC_OscConfig+0xc6>
 8002d1e:	4b70      	ldr	r3, [pc, #448]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a6f      	ldr	r2, [pc, #444]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b6d      	ldr	r3, [pc, #436]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a6c      	ldr	r2, [pc, #432]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d013      	beq.n	8002d66 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fe fc07 	bl	8001550 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d46:	f7fe fc03 	bl	8001550 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b64      	cmp	r3, #100	; 0x64
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e1db      	b.n	8003110 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d58:	4b61      	ldr	r3, [pc, #388]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0xd6>
 8002d64:	e014      	b.n	8002d90 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d66:	f7fe fbf3 	bl	8001550 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d6e:	f7fe fbef 	bl	8001550 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b64      	cmp	r3, #100	; 0x64
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e1c7      	b.n	8003110 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d80:	4b57      	ldr	r3, [pc, #348]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0xfe>
 8002d8c:	e000      	b.n	8002d90 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d06f      	beq.n	8002e7c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d9c:	4b50      	ldr	r3, [pc, #320]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d017      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002da8:	4b4d      	ldr	r3, [pc, #308]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d105      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002db4:	4b4a      	ldr	r3, [pc, #296]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00b      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc0:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dc8:	2b0c      	cmp	r3, #12
 8002dca:	d11c      	bne.n	8002e06 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dcc:	4b44      	ldr	r3, [pc, #272]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d116      	bne.n	8002e06 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd8:	4b41      	ldr	r3, [pc, #260]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_RCC_OscConfig+0x180>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e18f      	b.n	8003110 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df0:	4b3b      	ldr	r3, [pc, #236]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4938      	ldr	r1, [pc, #224]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e04:	e03a      	b.n	8002e7c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d020      	beq.n	8002e50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e0e:	4b35      	ldr	r3, [pc, #212]	; (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe fb9c 	bl	8001550 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1c:	f7fe fb98 	bl	8001550 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e170      	b.n	8003110 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3a:	4b29      	ldr	r3, [pc, #164]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4925      	ldr	r1, [pc, #148]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
 8002e4e:	e015      	b.n	8002e7c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e50:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e56:	f7fe fb7b 	bl	8001550 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e5e:	f7fe fb77 	bl	8001550 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e14f      	b.n	8003110 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e70:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f0      	bne.n	8002e5e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d037      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d016      	beq.n	8002ebe <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e90:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <HAL_RCC_OscConfig+0x278>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e96:	f7fe fb5b 	bl	8001550 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e9e:	f7fe fb57 	bl	8001550 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e12f      	b.n	8003110 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x22e>
 8002ebc:	e01c      	b.n	8002ef8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <HAL_RCC_OscConfig+0x278>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec4:	f7fe fb44 	bl	8001550 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eca:	e00f      	b.n	8002eec <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ecc:	f7fe fb40 	bl	8001550 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d908      	bls.n	8002eec <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e118      	b.n	8003110 <HAL_RCC_OscConfig+0x4a0>
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	42470000 	.word	0x42470000
 8002ee8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eec:	4b8a      	ldr	r3, [pc, #552]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 8002eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1e9      	bne.n	8002ecc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8097 	beq.w	8003034 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0a:	4b83      	ldr	r3, [pc, #524]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10f      	bne.n	8002f36 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	4b7f      	ldr	r3, [pc, #508]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	4a7e      	ldr	r2, [pc, #504]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
 8002f26:	4b7c      	ldr	r3, [pc, #496]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f36:	4b79      	ldr	r3, [pc, #484]	; (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d118      	bne.n	8002f74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f42:	4b76      	ldr	r3, [pc, #472]	; (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a75      	ldr	r2, [pc, #468]	; (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4e:	f7fe faff 	bl	8001550 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f56:	f7fe fafb 	bl	8001550 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0d3      	b.n	8003110 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f68:	4b6c      	ldr	r3, [pc, #432]	; (800311c <HAL_RCC_OscConfig+0x4ac>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d106      	bne.n	8002f8a <HAL_RCC_OscConfig+0x31a>
 8002f7c:	4b66      	ldr	r3, [pc, #408]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	4a65      	ldr	r2, [pc, #404]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6713      	str	r3, [r2, #112]	; 0x70
 8002f88:	e01c      	b.n	8002fc4 <HAL_RCC_OscConfig+0x354>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b05      	cmp	r3, #5
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x33c>
 8002f92:	4b61      	ldr	r3, [pc, #388]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	4a60      	ldr	r2, [pc, #384]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 8002f98:	f043 0304 	orr.w	r3, r3, #4
 8002f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9e:	4b5e      	ldr	r3, [pc, #376]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	4a5d      	ldr	r2, [pc, #372]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCC_OscConfig+0x354>
 8002fac:	4b5a      	ldr	r3, [pc, #360]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	4a59      	ldr	r2, [pc, #356]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb8:	4b57      	ldr	r3, [pc, #348]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	4a56      	ldr	r2, [pc, #344]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 8002fbe:	f023 0304 	bic.w	r3, r3, #4
 8002fc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d015      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7fe fac0 	bl	8001550 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd2:	e00a      	b.n	8002fea <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd4:	f7fe fabc 	bl	8001550 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e092      	b.n	8003110 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fea:	4b4b      	ldr	r3, [pc, #300]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0ee      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x364>
 8002ff6:	e014      	b.n	8003022 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff8:	f7fe faaa 	bl	8001550 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003000:	f7fe faa6 	bl	8001550 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e07c      	b.n	8003110 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003016:	4b40      	ldr	r3, [pc, #256]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1ee      	bne.n	8003000 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003022:	7dfb      	ldrb	r3, [r7, #23]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d105      	bne.n	8003034 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003028:	4b3b      	ldr	r3, [pc, #236]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	4a3a      	ldr	r2, [pc, #232]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 800302e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003032:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d068      	beq.n	800310e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800303c:	4b36      	ldr	r3, [pc, #216]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b08      	cmp	r3, #8
 8003046:	d060      	beq.n	800310a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d145      	bne.n	80030dc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003050:	4b33      	ldr	r3, [pc, #204]	; (8003120 <HAL_RCC_OscConfig+0x4b0>)
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003056:	f7fe fa7b 	bl	8001550 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305e:	f7fe fa77 	bl	8001550 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e04f      	b.n	8003110 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003070:	4b29      	ldr	r3, [pc, #164]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69da      	ldr	r2, [r3, #28]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	019b      	lsls	r3, r3, #6
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	3b01      	subs	r3, #1
 8003096:	041b      	lsls	r3, r3, #16
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	061b      	lsls	r3, r3, #24
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	071b      	lsls	r3, r3, #28
 80030a8:	491b      	ldr	r1, [pc, #108]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ae:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <HAL_RCC_OscConfig+0x4b0>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe fa4c 	bl	8001550 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fe fa48 	bl	8001550 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e020      	b.n	8003110 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ce:	4b12      	ldr	r3, [pc, #72]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x44c>
 80030da:	e018      	b.n	800310e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030dc:	4b10      	ldr	r3, [pc, #64]	; (8003120 <HAL_RCC_OscConfig+0x4b0>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e2:	f7fe fa35 	bl	8001550 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ea:	f7fe fa31 	bl	8001550 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e009      	b.n	8003110 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_RCC_OscConfig+0x4a8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f0      	bne.n	80030ea <HAL_RCC_OscConfig+0x47a>
 8003108:	e001      	b.n	800310e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40023800 	.word	0x40023800
 800311c:	40007000 	.word	0x40007000
 8003120:	42470060 	.word	0x42470060

08003124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e01d      	b.n	8003172 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fe f88e 	bl	800126c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	4619      	mov	r1, r3
 8003162:	4610      	mov	r0, r2
 8003164:	f000 f82e 	bl	80031c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800317a:	b480      	push	{r7}
 800317c:	b085      	sub	sp, #20
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2202      	movs	r2, #2
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b06      	cmp	r3, #6
 800319a:	d007      	beq.n	80031ac <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a40      	ldr	r2, [pc, #256]	; (80032d8 <TIM_Base_SetConfig+0x114>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d013      	beq.n	8003204 <TIM_Base_SetConfig+0x40>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e2:	d00f      	beq.n	8003204 <TIM_Base_SetConfig+0x40>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a3d      	ldr	r2, [pc, #244]	; (80032dc <TIM_Base_SetConfig+0x118>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00b      	beq.n	8003204 <TIM_Base_SetConfig+0x40>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a3c      	ldr	r2, [pc, #240]	; (80032e0 <TIM_Base_SetConfig+0x11c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d007      	beq.n	8003204 <TIM_Base_SetConfig+0x40>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a3b      	ldr	r2, [pc, #236]	; (80032e4 <TIM_Base_SetConfig+0x120>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d003      	beq.n	8003204 <TIM_Base_SetConfig+0x40>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a3a      	ldr	r2, [pc, #232]	; (80032e8 <TIM_Base_SetConfig+0x124>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d108      	bne.n	8003216 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a2f      	ldr	r2, [pc, #188]	; (80032d8 <TIM_Base_SetConfig+0x114>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d02b      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003224:	d027      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a2c      	ldr	r2, [pc, #176]	; (80032dc <TIM_Base_SetConfig+0x118>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d023      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a2b      	ldr	r2, [pc, #172]	; (80032e0 <TIM_Base_SetConfig+0x11c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d01f      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a2a      	ldr	r2, [pc, #168]	; (80032e4 <TIM_Base_SetConfig+0x120>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01b      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a29      	ldr	r2, [pc, #164]	; (80032e8 <TIM_Base_SetConfig+0x124>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d017      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a28      	ldr	r2, [pc, #160]	; (80032ec <TIM_Base_SetConfig+0x128>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d013      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a27      	ldr	r2, [pc, #156]	; (80032f0 <TIM_Base_SetConfig+0x12c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00f      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a26      	ldr	r2, [pc, #152]	; (80032f4 <TIM_Base_SetConfig+0x130>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00b      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a25      	ldr	r2, [pc, #148]	; (80032f8 <TIM_Base_SetConfig+0x134>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d007      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a24      	ldr	r2, [pc, #144]	; (80032fc <TIM_Base_SetConfig+0x138>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d003      	beq.n	8003276 <TIM_Base_SetConfig+0xb2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a23      	ldr	r2, [pc, #140]	; (8003300 <TIM_Base_SetConfig+0x13c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d108      	bne.n	8003288 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800327c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <TIM_Base_SetConfig+0x114>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <TIM_Base_SetConfig+0xf8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a0c      	ldr	r2, [pc, #48]	; (80032e8 <TIM_Base_SetConfig+0x124>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d103      	bne.n	80032c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	615a      	str	r2, [r3, #20]
}
 80032ca:	bf00      	nop
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40010000 	.word	0x40010000
 80032dc:	40000400 	.word	0x40000400
 80032e0:	40000800 	.word	0x40000800
 80032e4:	40000c00 	.word	0x40000c00
 80032e8:	40010400 	.word	0x40010400
 80032ec:	40014000 	.word	0x40014000
 80032f0:	40014400 	.word	0x40014400
 80032f4:	40014800 	.word	0x40014800
 80032f8:	40001800 	.word	0x40001800
 80032fc:	40001c00 	.word	0x40001c00
 8003300:	40002000 	.word	0x40002000

08003304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003318:	2302      	movs	r3, #2
 800331a:	e05a      	b.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003342:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a21      	ldr	r2, [pc, #132]	; (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d022      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003368:	d01d      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1d      	ldr	r2, [pc, #116]	; (80033e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d018      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1b      	ldr	r2, [pc, #108]	; (80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d013      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1a      	ldr	r2, [pc, #104]	; (80033ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00e      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d009      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a17      	ldr	r2, [pc, #92]	; (80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d004      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10c      	bne.n	80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40010000 	.word	0x40010000
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40000800 	.word	0x40000800
 80033ec:	40000c00 	.word	0x40000c00
 80033f0:	40010400 	.word	0x40010400
 80033f4:	40014000 	.word	0x40014000
 80033f8:	40001800 	.word	0x40001800

080033fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e03f      	b.n	800348e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd ff44 	bl	80012b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800343e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f90b 	bl	800365c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b088      	sub	sp, #32
 800349a:	af02      	add	r7, sp, #8
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	603b      	str	r3, [r7, #0]
 80034a2:	4613      	mov	r3, r2
 80034a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	f040 8083 	bne.w	80035be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_UART_Transmit+0x2e>
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e07b      	b.n	80035c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Transmit+0x40>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e074      	b.n	80035c0 <HAL_UART_Transmit+0x12a>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2221      	movs	r2, #33	; 0x21
 80034e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034ec:	f7fe f830 	bl	8001550 <HAL_GetTick>
 80034f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	88fa      	ldrh	r2, [r7, #6]
 80034f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003506:	e042      	b.n	800358e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351e:	d122      	bne.n	8003566 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2200      	movs	r2, #0
 8003528:	2180      	movs	r1, #128	; 0x80
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f84c 	bl	80035c8 <UART_WaitOnFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e042      	b.n	80035c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800354c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	3302      	adds	r3, #2
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	e017      	b.n	800358e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	3301      	adds	r3, #1
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	e013      	b.n	800358e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2200      	movs	r2, #0
 800356e:	2180      	movs	r1, #128	; 0x80
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f829 	bl	80035c8 <UART_WaitOnFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e01f      	b.n	80035c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	60ba      	str	r2, [r7, #8]
 8003586:	781a      	ldrb	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1b7      	bne.n	8003508 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2200      	movs	r2, #0
 80035a0:	2140      	movs	r1, #64	; 0x40
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f810 	bl	80035c8 <UART_WaitOnFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e006      	b.n	80035c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e000      	b.n	80035c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80035be:	2302      	movs	r3, #2
  }
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d8:	e02c      	b.n	8003634 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d028      	beq.n	8003634 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80035e8:	f7fd ffb2 	bl	8001550 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d21d      	bcs.n	8003634 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003606:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e00f      	b.n	8003654 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	4013      	ands	r3, r2
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	429a      	cmp	r2, r3
 8003642:	bf0c      	ite	eq
 8003644:	2301      	moveq	r3, #1
 8003646:	2300      	movne	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	429a      	cmp	r2, r3
 8003650:	d0c3      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800365c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003660:	b085      	sub	sp, #20
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800369e:	f023 030c 	bic.w	r3, r3, #12
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6812      	ldr	r2, [r2, #0]
 80036a6:	68f9      	ldr	r1, [r7, #12]
 80036a8:	430b      	orrs	r3, r1
 80036aa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ca:	f040 818b 	bne.w	80039e4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4ac1      	ldr	r2, [pc, #772]	; (80039d8 <UART_SetConfig+0x37c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d005      	beq.n	80036e4 <UART_SetConfig+0x88>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4abf      	ldr	r2, [pc, #764]	; (80039dc <UART_SetConfig+0x380>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	f040 80bd 	bne.w	800385e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036e4:	f7ff f910 	bl	8002908 <HAL_RCC_GetPCLK2Freq>
 80036e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	461d      	mov	r5, r3
 80036ee:	f04f 0600 	mov.w	r6, #0
 80036f2:	46a8      	mov	r8, r5
 80036f4:	46b1      	mov	r9, r6
 80036f6:	eb18 0308 	adds.w	r3, r8, r8
 80036fa:	eb49 0409 	adc.w	r4, r9, r9
 80036fe:	4698      	mov	r8, r3
 8003700:	46a1      	mov	r9, r4
 8003702:	eb18 0805 	adds.w	r8, r8, r5
 8003706:	eb49 0906 	adc.w	r9, r9, r6
 800370a:	f04f 0100 	mov.w	r1, #0
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003716:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800371a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800371e:	4688      	mov	r8, r1
 8003720:	4691      	mov	r9, r2
 8003722:	eb18 0005 	adds.w	r0, r8, r5
 8003726:	eb49 0106 	adc.w	r1, r9, r6
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	461d      	mov	r5, r3
 8003730:	f04f 0600 	mov.w	r6, #0
 8003734:	196b      	adds	r3, r5, r5
 8003736:	eb46 0406 	adc.w	r4, r6, r6
 800373a:	461a      	mov	r2, r3
 800373c:	4623      	mov	r3, r4
 800373e:	f7fc fd61 	bl	8000204 <__aeabi_uldivmod>
 8003742:	4603      	mov	r3, r0
 8003744:	460c      	mov	r4, r1
 8003746:	461a      	mov	r2, r3
 8003748:	4ba5      	ldr	r3, [pc, #660]	; (80039e0 <UART_SetConfig+0x384>)
 800374a:	fba3 2302 	umull	r2, r3, r3, r2
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	461d      	mov	r5, r3
 8003758:	f04f 0600 	mov.w	r6, #0
 800375c:	46a9      	mov	r9, r5
 800375e:	46b2      	mov	sl, r6
 8003760:	eb19 0309 	adds.w	r3, r9, r9
 8003764:	eb4a 040a 	adc.w	r4, sl, sl
 8003768:	4699      	mov	r9, r3
 800376a:	46a2      	mov	sl, r4
 800376c:	eb19 0905 	adds.w	r9, r9, r5
 8003770:	eb4a 0a06 	adc.w	sl, sl, r6
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003780:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003784:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003788:	4689      	mov	r9, r1
 800378a:	4692      	mov	sl, r2
 800378c:	eb19 0005 	adds.w	r0, r9, r5
 8003790:	eb4a 0106 	adc.w	r1, sl, r6
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	461d      	mov	r5, r3
 800379a:	f04f 0600 	mov.w	r6, #0
 800379e:	196b      	adds	r3, r5, r5
 80037a0:	eb46 0406 	adc.w	r4, r6, r6
 80037a4:	461a      	mov	r2, r3
 80037a6:	4623      	mov	r3, r4
 80037a8:	f7fc fd2c 	bl	8000204 <__aeabi_uldivmod>
 80037ac:	4603      	mov	r3, r0
 80037ae:	460c      	mov	r4, r1
 80037b0:	461a      	mov	r2, r3
 80037b2:	4b8b      	ldr	r3, [pc, #556]	; (80039e0 <UART_SetConfig+0x384>)
 80037b4:	fba3 1302 	umull	r1, r3, r3, r2
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	2164      	movs	r1, #100	; 0x64
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	3332      	adds	r3, #50	; 0x32
 80037c6:	4a86      	ldr	r2, [pc, #536]	; (80039e0 <UART_SetConfig+0x384>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037d4:	4498      	add	r8, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	461d      	mov	r5, r3
 80037da:	f04f 0600 	mov.w	r6, #0
 80037de:	46a9      	mov	r9, r5
 80037e0:	46b2      	mov	sl, r6
 80037e2:	eb19 0309 	adds.w	r3, r9, r9
 80037e6:	eb4a 040a 	adc.w	r4, sl, sl
 80037ea:	4699      	mov	r9, r3
 80037ec:	46a2      	mov	sl, r4
 80037ee:	eb19 0905 	adds.w	r9, r9, r5
 80037f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80037f6:	f04f 0100 	mov.w	r1, #0
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003802:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003806:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800380a:	4689      	mov	r9, r1
 800380c:	4692      	mov	sl, r2
 800380e:	eb19 0005 	adds.w	r0, r9, r5
 8003812:	eb4a 0106 	adc.w	r1, sl, r6
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	461d      	mov	r5, r3
 800381c:	f04f 0600 	mov.w	r6, #0
 8003820:	196b      	adds	r3, r5, r5
 8003822:	eb46 0406 	adc.w	r4, r6, r6
 8003826:	461a      	mov	r2, r3
 8003828:	4623      	mov	r3, r4
 800382a:	f7fc fceb 	bl	8000204 <__aeabi_uldivmod>
 800382e:	4603      	mov	r3, r0
 8003830:	460c      	mov	r4, r1
 8003832:	461a      	mov	r2, r3
 8003834:	4b6a      	ldr	r3, [pc, #424]	; (80039e0 <UART_SetConfig+0x384>)
 8003836:	fba3 1302 	umull	r1, r3, r3, r2
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2164      	movs	r1, #100	; 0x64
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	3332      	adds	r3, #50	; 0x32
 8003848:	4a65      	ldr	r2, [pc, #404]	; (80039e0 <UART_SetConfig+0x384>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	f003 0207 	and.w	r2, r3, #7
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4442      	add	r2, r8
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	e26f      	b.n	8003d3e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800385e:	f7ff f83f 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 8003862:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	461d      	mov	r5, r3
 8003868:	f04f 0600 	mov.w	r6, #0
 800386c:	46a8      	mov	r8, r5
 800386e:	46b1      	mov	r9, r6
 8003870:	eb18 0308 	adds.w	r3, r8, r8
 8003874:	eb49 0409 	adc.w	r4, r9, r9
 8003878:	4698      	mov	r8, r3
 800387a:	46a1      	mov	r9, r4
 800387c:	eb18 0805 	adds.w	r8, r8, r5
 8003880:	eb49 0906 	adc.w	r9, r9, r6
 8003884:	f04f 0100 	mov.w	r1, #0
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003890:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003894:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003898:	4688      	mov	r8, r1
 800389a:	4691      	mov	r9, r2
 800389c:	eb18 0005 	adds.w	r0, r8, r5
 80038a0:	eb49 0106 	adc.w	r1, r9, r6
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	461d      	mov	r5, r3
 80038aa:	f04f 0600 	mov.w	r6, #0
 80038ae:	196b      	adds	r3, r5, r5
 80038b0:	eb46 0406 	adc.w	r4, r6, r6
 80038b4:	461a      	mov	r2, r3
 80038b6:	4623      	mov	r3, r4
 80038b8:	f7fc fca4 	bl	8000204 <__aeabi_uldivmod>
 80038bc:	4603      	mov	r3, r0
 80038be:	460c      	mov	r4, r1
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b47      	ldr	r3, [pc, #284]	; (80039e0 <UART_SetConfig+0x384>)
 80038c4:	fba3 2302 	umull	r2, r3, r3, r2
 80038c8:	095b      	lsrs	r3, r3, #5
 80038ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	461d      	mov	r5, r3
 80038d2:	f04f 0600 	mov.w	r6, #0
 80038d6:	46a9      	mov	r9, r5
 80038d8:	46b2      	mov	sl, r6
 80038da:	eb19 0309 	adds.w	r3, r9, r9
 80038de:	eb4a 040a 	adc.w	r4, sl, sl
 80038e2:	4699      	mov	r9, r3
 80038e4:	46a2      	mov	sl, r4
 80038e6:	eb19 0905 	adds.w	r9, r9, r5
 80038ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80038ee:	f04f 0100 	mov.w	r1, #0
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003902:	4689      	mov	r9, r1
 8003904:	4692      	mov	sl, r2
 8003906:	eb19 0005 	adds.w	r0, r9, r5
 800390a:	eb4a 0106 	adc.w	r1, sl, r6
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	461d      	mov	r5, r3
 8003914:	f04f 0600 	mov.w	r6, #0
 8003918:	196b      	adds	r3, r5, r5
 800391a:	eb46 0406 	adc.w	r4, r6, r6
 800391e:	461a      	mov	r2, r3
 8003920:	4623      	mov	r3, r4
 8003922:	f7fc fc6f 	bl	8000204 <__aeabi_uldivmod>
 8003926:	4603      	mov	r3, r0
 8003928:	460c      	mov	r4, r1
 800392a:	461a      	mov	r2, r3
 800392c:	4b2c      	ldr	r3, [pc, #176]	; (80039e0 <UART_SetConfig+0x384>)
 800392e:	fba3 1302 	umull	r1, r3, r3, r2
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	2164      	movs	r1, #100	; 0x64
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	3332      	adds	r3, #50	; 0x32
 8003940:	4a27      	ldr	r2, [pc, #156]	; (80039e0 <UART_SetConfig+0x384>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800394e:	4498      	add	r8, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	461d      	mov	r5, r3
 8003954:	f04f 0600 	mov.w	r6, #0
 8003958:	46a9      	mov	r9, r5
 800395a:	46b2      	mov	sl, r6
 800395c:	eb19 0309 	adds.w	r3, r9, r9
 8003960:	eb4a 040a 	adc.w	r4, sl, sl
 8003964:	4699      	mov	r9, r3
 8003966:	46a2      	mov	sl, r4
 8003968:	eb19 0905 	adds.w	r9, r9, r5
 800396c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003970:	f04f 0100 	mov.w	r1, #0
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800397c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003980:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003984:	4689      	mov	r9, r1
 8003986:	4692      	mov	sl, r2
 8003988:	eb19 0005 	adds.w	r0, r9, r5
 800398c:	eb4a 0106 	adc.w	r1, sl, r6
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	461d      	mov	r5, r3
 8003996:	f04f 0600 	mov.w	r6, #0
 800399a:	196b      	adds	r3, r5, r5
 800399c:	eb46 0406 	adc.w	r4, r6, r6
 80039a0:	461a      	mov	r2, r3
 80039a2:	4623      	mov	r3, r4
 80039a4:	f7fc fc2e 	bl	8000204 <__aeabi_uldivmod>
 80039a8:	4603      	mov	r3, r0
 80039aa:	460c      	mov	r4, r1
 80039ac:	461a      	mov	r2, r3
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <UART_SetConfig+0x384>)
 80039b0:	fba3 1302 	umull	r1, r3, r3, r2
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	2164      	movs	r1, #100	; 0x64
 80039b8:	fb01 f303 	mul.w	r3, r1, r3
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	3332      	adds	r3, #50	; 0x32
 80039c2:	4a07      	ldr	r2, [pc, #28]	; (80039e0 <UART_SetConfig+0x384>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	f003 0207 	and.w	r2, r3, #7
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4442      	add	r2, r8
 80039d4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80039d6:	e1b2      	b.n	8003d3e <UART_SetConfig+0x6e2>
 80039d8:	40011000 	.word	0x40011000
 80039dc:	40011400 	.word	0x40011400
 80039e0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4ad7      	ldr	r2, [pc, #860]	; (8003d48 <UART_SetConfig+0x6ec>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d005      	beq.n	80039fa <UART_SetConfig+0x39e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4ad6      	ldr	r2, [pc, #856]	; (8003d4c <UART_SetConfig+0x6f0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	f040 80d1 	bne.w	8003b9c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80039fa:	f7fe ff85 	bl	8002908 <HAL_RCC_GetPCLK2Freq>
 80039fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	469a      	mov	sl, r3
 8003a04:	f04f 0b00 	mov.w	fp, #0
 8003a08:	46d0      	mov	r8, sl
 8003a0a:	46d9      	mov	r9, fp
 8003a0c:	eb18 0308 	adds.w	r3, r8, r8
 8003a10:	eb49 0409 	adc.w	r4, r9, r9
 8003a14:	4698      	mov	r8, r3
 8003a16:	46a1      	mov	r9, r4
 8003a18:	eb18 080a 	adds.w	r8, r8, sl
 8003a1c:	eb49 090b 	adc.w	r9, r9, fp
 8003a20:	f04f 0100 	mov.w	r1, #0
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a2c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a30:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a34:	4688      	mov	r8, r1
 8003a36:	4691      	mov	r9, r2
 8003a38:	eb1a 0508 	adds.w	r5, sl, r8
 8003a3c:	eb4b 0609 	adc.w	r6, fp, r9
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4619      	mov	r1, r3
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	f04f 0400 	mov.w	r4, #0
 8003a52:	0094      	lsls	r4, r2, #2
 8003a54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a58:	008b      	lsls	r3, r1, #2
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	4623      	mov	r3, r4
 8003a5e:	4628      	mov	r0, r5
 8003a60:	4631      	mov	r1, r6
 8003a62:	f7fc fbcf 	bl	8000204 <__aeabi_uldivmod>
 8003a66:	4603      	mov	r3, r0
 8003a68:	460c      	mov	r4, r1
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4bb8      	ldr	r3, [pc, #736]	; (8003d50 <UART_SetConfig+0x6f4>)
 8003a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	469b      	mov	fp, r3
 8003a7c:	f04f 0c00 	mov.w	ip, #0
 8003a80:	46d9      	mov	r9, fp
 8003a82:	46e2      	mov	sl, ip
 8003a84:	eb19 0309 	adds.w	r3, r9, r9
 8003a88:	eb4a 040a 	adc.w	r4, sl, sl
 8003a8c:	4699      	mov	r9, r3
 8003a8e:	46a2      	mov	sl, r4
 8003a90:	eb19 090b 	adds.w	r9, r9, fp
 8003a94:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a98:	f04f 0100 	mov.w	r1, #0
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aa4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003aa8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003aac:	4689      	mov	r9, r1
 8003aae:	4692      	mov	sl, r2
 8003ab0:	eb1b 0509 	adds.w	r5, fp, r9
 8003ab4:	eb4c 060a 	adc.w	r6, ip, sl
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4619      	mov	r1, r3
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	f04f 0400 	mov.w	r4, #0
 8003aca:	0094      	lsls	r4, r2, #2
 8003acc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ad0:	008b      	lsls	r3, r1, #2
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	4623      	mov	r3, r4
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	4631      	mov	r1, r6
 8003ada:	f7fc fb93 	bl	8000204 <__aeabi_uldivmod>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	460c      	mov	r4, r1
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	4b9a      	ldr	r3, [pc, #616]	; (8003d50 <UART_SetConfig+0x6f4>)
 8003ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	2164      	movs	r1, #100	; 0x64
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	3332      	adds	r3, #50	; 0x32
 8003af8:	4a95      	ldr	r2, [pc, #596]	; (8003d50 <UART_SetConfig+0x6f4>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b04:	4498      	add	r8, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	469b      	mov	fp, r3
 8003b0a:	f04f 0c00 	mov.w	ip, #0
 8003b0e:	46d9      	mov	r9, fp
 8003b10:	46e2      	mov	sl, ip
 8003b12:	eb19 0309 	adds.w	r3, r9, r9
 8003b16:	eb4a 040a 	adc.w	r4, sl, sl
 8003b1a:	4699      	mov	r9, r3
 8003b1c:	46a2      	mov	sl, r4
 8003b1e:	eb19 090b 	adds.w	r9, r9, fp
 8003b22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b26:	f04f 0100 	mov.w	r1, #0
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b3a:	4689      	mov	r9, r1
 8003b3c:	4692      	mov	sl, r2
 8003b3e:	eb1b 0509 	adds.w	r5, fp, r9
 8003b42:	eb4c 060a 	adc.w	r6, ip, sl
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	f04f 0400 	mov.w	r4, #0
 8003b58:	0094      	lsls	r4, r2, #2
 8003b5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b5e:	008b      	lsls	r3, r1, #2
 8003b60:	461a      	mov	r2, r3
 8003b62:	4623      	mov	r3, r4
 8003b64:	4628      	mov	r0, r5
 8003b66:	4631      	mov	r1, r6
 8003b68:	f7fc fb4c 	bl	8000204 <__aeabi_uldivmod>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	460c      	mov	r4, r1
 8003b70:	461a      	mov	r2, r3
 8003b72:	4b77      	ldr	r3, [pc, #476]	; (8003d50 <UART_SetConfig+0x6f4>)
 8003b74:	fba3 1302 	umull	r1, r3, r3, r2
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	2164      	movs	r1, #100	; 0x64
 8003b7c:	fb01 f303 	mul.w	r3, r1, r3
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	3332      	adds	r3, #50	; 0x32
 8003b86:	4a72      	ldr	r2, [pc, #456]	; (8003d50 <UART_SetConfig+0x6f4>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	f003 020f 	and.w	r2, r3, #15
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4442      	add	r2, r8
 8003b98:	609a      	str	r2, [r3, #8]
 8003b9a:	e0d0      	b.n	8003d3e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b9c:	f7fe fea0 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 8003ba0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	469a      	mov	sl, r3
 8003ba6:	f04f 0b00 	mov.w	fp, #0
 8003baa:	46d0      	mov	r8, sl
 8003bac:	46d9      	mov	r9, fp
 8003bae:	eb18 0308 	adds.w	r3, r8, r8
 8003bb2:	eb49 0409 	adc.w	r4, r9, r9
 8003bb6:	4698      	mov	r8, r3
 8003bb8:	46a1      	mov	r9, r4
 8003bba:	eb18 080a 	adds.w	r8, r8, sl
 8003bbe:	eb49 090b 	adc.w	r9, r9, fp
 8003bc2:	f04f 0100 	mov.w	r1, #0
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bd6:	4688      	mov	r8, r1
 8003bd8:	4691      	mov	r9, r2
 8003bda:	eb1a 0508 	adds.w	r5, sl, r8
 8003bde:	eb4b 0609 	adc.w	r6, fp, r9
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	4619      	mov	r1, r3
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	f04f 0400 	mov.w	r4, #0
 8003bf4:	0094      	lsls	r4, r2, #2
 8003bf6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bfa:	008b      	lsls	r3, r1, #2
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4623      	mov	r3, r4
 8003c00:	4628      	mov	r0, r5
 8003c02:	4631      	mov	r1, r6
 8003c04:	f7fc fafe 	bl	8000204 <__aeabi_uldivmod>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	460c      	mov	r4, r1
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4b50      	ldr	r3, [pc, #320]	; (8003d50 <UART_SetConfig+0x6f4>)
 8003c10:	fba3 2302 	umull	r2, r3, r3, r2
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	469b      	mov	fp, r3
 8003c1e:	f04f 0c00 	mov.w	ip, #0
 8003c22:	46d9      	mov	r9, fp
 8003c24:	46e2      	mov	sl, ip
 8003c26:	eb19 0309 	adds.w	r3, r9, r9
 8003c2a:	eb4a 040a 	adc.w	r4, sl, sl
 8003c2e:	4699      	mov	r9, r3
 8003c30:	46a2      	mov	sl, r4
 8003c32:	eb19 090b 	adds.w	r9, r9, fp
 8003c36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c3a:	f04f 0100 	mov.w	r1, #0
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c4e:	4689      	mov	r9, r1
 8003c50:	4692      	mov	sl, r2
 8003c52:	eb1b 0509 	adds.w	r5, fp, r9
 8003c56:	eb4c 060a 	adc.w	r6, ip, sl
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	f04f 0400 	mov.w	r4, #0
 8003c6c:	0094      	lsls	r4, r2, #2
 8003c6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c72:	008b      	lsls	r3, r1, #2
 8003c74:	461a      	mov	r2, r3
 8003c76:	4623      	mov	r3, r4
 8003c78:	4628      	mov	r0, r5
 8003c7a:	4631      	mov	r1, r6
 8003c7c:	f7fc fac2 	bl	8000204 <__aeabi_uldivmod>
 8003c80:	4603      	mov	r3, r0
 8003c82:	460c      	mov	r4, r1
 8003c84:	461a      	mov	r2, r3
 8003c86:	4b32      	ldr	r3, [pc, #200]	; (8003d50 <UART_SetConfig+0x6f4>)
 8003c88:	fba3 1302 	umull	r1, r3, r3, r2
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	2164      	movs	r1, #100	; 0x64
 8003c90:	fb01 f303 	mul.w	r3, r1, r3
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	3332      	adds	r3, #50	; 0x32
 8003c9a:	4a2d      	ldr	r2, [pc, #180]	; (8003d50 <UART_SetConfig+0x6f4>)
 8003c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ca6:	4498      	add	r8, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	469b      	mov	fp, r3
 8003cac:	f04f 0c00 	mov.w	ip, #0
 8003cb0:	46d9      	mov	r9, fp
 8003cb2:	46e2      	mov	sl, ip
 8003cb4:	eb19 0309 	adds.w	r3, r9, r9
 8003cb8:	eb4a 040a 	adc.w	r4, sl, sl
 8003cbc:	4699      	mov	r9, r3
 8003cbe:	46a2      	mov	sl, r4
 8003cc0:	eb19 090b 	adds.w	r9, r9, fp
 8003cc4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cc8:	f04f 0100 	mov.w	r1, #0
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cdc:	4689      	mov	r9, r1
 8003cde:	4692      	mov	sl, r2
 8003ce0:	eb1b 0509 	adds.w	r5, fp, r9
 8003ce4:	eb4c 060a 	adc.w	r6, ip, sl
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4619      	mov	r1, r3
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	f04f 0400 	mov.w	r4, #0
 8003cfa:	0094      	lsls	r4, r2, #2
 8003cfc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d00:	008b      	lsls	r3, r1, #2
 8003d02:	461a      	mov	r2, r3
 8003d04:	4623      	mov	r3, r4
 8003d06:	4628      	mov	r0, r5
 8003d08:	4631      	mov	r1, r6
 8003d0a:	f7fc fa7b 	bl	8000204 <__aeabi_uldivmod>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	460c      	mov	r4, r1
 8003d12:	461a      	mov	r2, r3
 8003d14:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <UART_SetConfig+0x6f4>)
 8003d16:	fba3 1302 	umull	r1, r3, r3, r2
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	2164      	movs	r1, #100	; 0x64
 8003d1e:	fb01 f303 	mul.w	r3, r1, r3
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	3332      	adds	r3, #50	; 0x32
 8003d28:	4a09      	ldr	r2, [pc, #36]	; (8003d50 <UART_SetConfig+0x6f4>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	f003 020f 	and.w	r2, r3, #15
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4442      	add	r2, r8
 8003d3a:	609a      	str	r2, [r3, #8]
}
 8003d3c:	e7ff      	b.n	8003d3e <UART_SetConfig+0x6e2>
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d48:	40011000 	.word	0x40011000
 8003d4c:	40011400 	.word	0x40011400
 8003d50:	51eb851f 	.word	0x51eb851f

08003d54 <__libc_init_array>:
 8003d54:	b570      	push	{r4, r5, r6, lr}
 8003d56:	4e0d      	ldr	r6, [pc, #52]	; (8003d8c <__libc_init_array+0x38>)
 8003d58:	4c0d      	ldr	r4, [pc, #52]	; (8003d90 <__libc_init_array+0x3c>)
 8003d5a:	1ba4      	subs	r4, r4, r6
 8003d5c:	10a4      	asrs	r4, r4, #2
 8003d5e:	2500      	movs	r5, #0
 8003d60:	42a5      	cmp	r5, r4
 8003d62:	d109      	bne.n	8003d78 <__libc_init_array+0x24>
 8003d64:	4e0b      	ldr	r6, [pc, #44]	; (8003d94 <__libc_init_array+0x40>)
 8003d66:	4c0c      	ldr	r4, [pc, #48]	; (8003d98 <__libc_init_array+0x44>)
 8003d68:	f000 fd6c 	bl	8004844 <_init>
 8003d6c:	1ba4      	subs	r4, r4, r6
 8003d6e:	10a4      	asrs	r4, r4, #2
 8003d70:	2500      	movs	r5, #0
 8003d72:	42a5      	cmp	r5, r4
 8003d74:	d105      	bne.n	8003d82 <__libc_init_array+0x2e>
 8003d76:	bd70      	pop	{r4, r5, r6, pc}
 8003d78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d7c:	4798      	blx	r3
 8003d7e:	3501      	adds	r5, #1
 8003d80:	e7ee      	b.n	8003d60 <__libc_init_array+0xc>
 8003d82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d86:	4798      	blx	r3
 8003d88:	3501      	adds	r5, #1
 8003d8a:	e7f2      	b.n	8003d72 <__libc_init_array+0x1e>
 8003d8c:	08004cb4 	.word	0x08004cb4
 8003d90:	08004cb4 	.word	0x08004cb4
 8003d94:	08004cb4 	.word	0x08004cb4
 8003d98:	08004cb8 	.word	0x08004cb8

08003d9c <memset>:
 8003d9c:	4402      	add	r2, r0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d100      	bne.n	8003da6 <memset+0xa>
 8003da4:	4770      	bx	lr
 8003da6:	f803 1b01 	strb.w	r1, [r3], #1
 8003daa:	e7f9      	b.n	8003da0 <memset+0x4>

08003dac <sinf>:
 8003dac:	ee10 3a10 	vmov	r3, s0
 8003db0:	b507      	push	{r0, r1, r2, lr}
 8003db2:	4a1d      	ldr	r2, [pc, #116]	; (8003e28 <sinf+0x7c>)
 8003db4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003db8:	4293      	cmp	r3, r2
 8003dba:	dc05      	bgt.n	8003dc8 <sinf+0x1c>
 8003dbc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003e2c <sinf+0x80>
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f000 fc41 	bl	8004648 <__kernel_sinf>
 8003dc6:	e004      	b.n	8003dd2 <sinf+0x26>
 8003dc8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003dcc:	db04      	blt.n	8003dd8 <sinf+0x2c>
 8003dce:	ee30 0a40 	vsub.f32	s0, s0, s0
 8003dd2:	b003      	add	sp, #12
 8003dd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dd8:	4668      	mov	r0, sp
 8003dda:	f000 f829 	bl	8003e30 <__ieee754_rem_pio2f>
 8003dde:	f000 0003 	and.w	r0, r0, #3
 8003de2:	2801      	cmp	r0, #1
 8003de4:	d008      	beq.n	8003df8 <sinf+0x4c>
 8003de6:	2802      	cmp	r0, #2
 8003de8:	d00d      	beq.n	8003e06 <sinf+0x5a>
 8003dea:	b9b0      	cbnz	r0, 8003e1a <sinf+0x6e>
 8003dec:	2001      	movs	r0, #1
 8003dee:	eddd 0a01 	vldr	s1, [sp, #4]
 8003df2:	ed9d 0a00 	vldr	s0, [sp]
 8003df6:	e7e4      	b.n	8003dc2 <sinf+0x16>
 8003df8:	eddd 0a01 	vldr	s1, [sp, #4]
 8003dfc:	ed9d 0a00 	vldr	s0, [sp]
 8003e00:	f000 f942 	bl	8004088 <__kernel_cosf>
 8003e04:	e7e5      	b.n	8003dd2 <sinf+0x26>
 8003e06:	2001      	movs	r0, #1
 8003e08:	eddd 0a01 	vldr	s1, [sp, #4]
 8003e0c:	ed9d 0a00 	vldr	s0, [sp]
 8003e10:	f000 fc1a 	bl	8004648 <__kernel_sinf>
 8003e14:	eeb1 0a40 	vneg.f32	s0, s0
 8003e18:	e7db      	b.n	8003dd2 <sinf+0x26>
 8003e1a:	eddd 0a01 	vldr	s1, [sp, #4]
 8003e1e:	ed9d 0a00 	vldr	s0, [sp]
 8003e22:	f000 f931 	bl	8004088 <__kernel_cosf>
 8003e26:	e7f5      	b.n	8003e14 <sinf+0x68>
 8003e28:	3f490fd8 	.word	0x3f490fd8
 8003e2c:	00000000 	.word	0x00000000

08003e30 <__ieee754_rem_pio2f>:
 8003e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e32:	ee10 6a10 	vmov	r6, s0
 8003e36:	4b86      	ldr	r3, [pc, #536]	; (8004050 <__ieee754_rem_pio2f+0x220>)
 8003e38:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8003e3c:	429c      	cmp	r4, r3
 8003e3e:	b087      	sub	sp, #28
 8003e40:	4605      	mov	r5, r0
 8003e42:	dc05      	bgt.n	8003e50 <__ieee754_rem_pio2f+0x20>
 8003e44:	2300      	movs	r3, #0
 8003e46:	ed85 0a00 	vstr	s0, [r5]
 8003e4a:	6043      	str	r3, [r0, #4]
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	e020      	b.n	8003e92 <__ieee754_rem_pio2f+0x62>
 8003e50:	4b80      	ldr	r3, [pc, #512]	; (8004054 <__ieee754_rem_pio2f+0x224>)
 8003e52:	429c      	cmp	r4, r3
 8003e54:	dc38      	bgt.n	8003ec8 <__ieee754_rem_pio2f+0x98>
 8003e56:	2e00      	cmp	r6, #0
 8003e58:	f024 040f 	bic.w	r4, r4, #15
 8003e5c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8004058 <__ieee754_rem_pio2f+0x228>
 8003e60:	4b7e      	ldr	r3, [pc, #504]	; (800405c <__ieee754_rem_pio2f+0x22c>)
 8003e62:	dd18      	ble.n	8003e96 <__ieee754_rem_pio2f+0x66>
 8003e64:	429c      	cmp	r4, r3
 8003e66:	ee70 7a47 	vsub.f32	s15, s0, s14
 8003e6a:	bf09      	itett	eq
 8003e6c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8004060 <__ieee754_rem_pio2f+0x230>
 8003e70:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8004064 <__ieee754_rem_pio2f+0x234>
 8003e74:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8003e78:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8004068 <__ieee754_rem_pio2f+0x238>
 8003e7c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003e80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003e84:	edc0 6a00 	vstr	s13, [r0]
 8003e88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e8c:	edc0 7a01 	vstr	s15, [r0, #4]
 8003e90:	2001      	movs	r0, #1
 8003e92:	b007      	add	sp, #28
 8003e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e96:	429c      	cmp	r4, r3
 8003e98:	ee70 7a07 	vadd.f32	s15, s0, s14
 8003e9c:	bf09      	itett	eq
 8003e9e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8004060 <__ieee754_rem_pio2f+0x230>
 8003ea2:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8004064 <__ieee754_rem_pio2f+0x234>
 8003ea6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8003eaa:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8004068 <__ieee754_rem_pio2f+0x238>
 8003eae:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003eb2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003eb6:	edc0 6a00 	vstr	s13, [r0]
 8003eba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ebe:	edc0 7a01 	vstr	s15, [r0, #4]
 8003ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec6:	e7e4      	b.n	8003e92 <__ieee754_rem_pio2f+0x62>
 8003ec8:	4b68      	ldr	r3, [pc, #416]	; (800406c <__ieee754_rem_pio2f+0x23c>)
 8003eca:	429c      	cmp	r4, r3
 8003ecc:	dc71      	bgt.n	8003fb2 <__ieee754_rem_pio2f+0x182>
 8003ece:	f000 fc03 	bl	80046d8 <fabsf>
 8003ed2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004070 <__ieee754_rem_pio2f+0x240>
 8003ed6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003eda:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003ede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ee2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003ee6:	ee17 0a90 	vmov	r0, s15
 8003eea:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8004058 <__ieee754_rem_pio2f+0x228>
 8003eee:	eeb1 7a46 	vneg.f32	s14, s12
 8003ef2:	eea7 0a27 	vfma.f32	s0, s14, s15
 8003ef6:	281f      	cmp	r0, #31
 8003ef8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8004064 <__ieee754_rem_pio2f+0x234>
 8003efc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003f00:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003f04:	ee16 3a90 	vmov	r3, s13
 8003f08:	dc1c      	bgt.n	8003f44 <__ieee754_rem_pio2f+0x114>
 8003f0a:	1e47      	subs	r7, r0, #1
 8003f0c:	4959      	ldr	r1, [pc, #356]	; (8004074 <__ieee754_rem_pio2f+0x244>)
 8003f0e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8003f12:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8003f16:	428a      	cmp	r2, r1
 8003f18:	d014      	beq.n	8003f44 <__ieee754_rem_pio2f+0x114>
 8003f1a:	602b      	str	r3, [r5, #0]
 8003f1c:	ed95 7a00 	vldr	s14, [r5]
 8003f20:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003f24:	2e00      	cmp	r6, #0
 8003f26:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003f2a:	ed85 0a01 	vstr	s0, [r5, #4]
 8003f2e:	dab0      	bge.n	8003e92 <__ieee754_rem_pio2f+0x62>
 8003f30:	eeb1 7a47 	vneg.f32	s14, s14
 8003f34:	eeb1 0a40 	vneg.f32	s0, s0
 8003f38:	ed85 7a00 	vstr	s14, [r5]
 8003f3c:	ed85 0a01 	vstr	s0, [r5, #4]
 8003f40:	4240      	negs	r0, r0
 8003f42:	e7a6      	b.n	8003e92 <__ieee754_rem_pio2f+0x62>
 8003f44:	15e4      	asrs	r4, r4, #23
 8003f46:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003f4a:	1aa2      	subs	r2, r4, r2
 8003f4c:	2a08      	cmp	r2, #8
 8003f4e:	dde4      	ble.n	8003f1a <__ieee754_rem_pio2f+0xea>
 8003f50:	eddf 7a43 	vldr	s15, [pc, #268]	; 8004060 <__ieee754_rem_pio2f+0x230>
 8003f54:	eef0 6a40 	vmov.f32	s13, s0
 8003f58:	eee7 6a27 	vfma.f32	s13, s14, s15
 8003f5c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003f60:	eea7 0a27 	vfma.f32	s0, s14, s15
 8003f64:	eddf 7a40 	vldr	s15, [pc, #256]	; 8004068 <__ieee754_rem_pio2f+0x238>
 8003f68:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8003f6c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8003f70:	eef0 7a40 	vmov.f32	s15, s0
 8003f74:	ee15 3a90 	vmov	r3, s11
 8003f78:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003f7c:	1aa4      	subs	r4, r4, r2
 8003f7e:	2c19      	cmp	r4, #25
 8003f80:	dc04      	bgt.n	8003f8c <__ieee754_rem_pio2f+0x15c>
 8003f82:	edc5 5a00 	vstr	s11, [r5]
 8003f86:	eeb0 0a66 	vmov.f32	s0, s13
 8003f8a:	e7c7      	b.n	8003f1c <__ieee754_rem_pio2f+0xec>
 8003f8c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004078 <__ieee754_rem_pio2f+0x248>
 8003f90:	eeb0 0a66 	vmov.f32	s0, s13
 8003f94:	eea7 0a25 	vfma.f32	s0, s14, s11
 8003f98:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003f9c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8003fa0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800407c <__ieee754_rem_pio2f+0x24c>
 8003fa4:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8003fa8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003fac:	ed85 7a00 	vstr	s14, [r5]
 8003fb0:	e7b4      	b.n	8003f1c <__ieee754_rem_pio2f+0xec>
 8003fb2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8003fb6:	db06      	blt.n	8003fc6 <__ieee754_rem_pio2f+0x196>
 8003fb8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003fbc:	edc0 7a01 	vstr	s15, [r0, #4]
 8003fc0:	edc0 7a00 	vstr	s15, [r0]
 8003fc4:	e742      	b.n	8003e4c <__ieee754_rem_pio2f+0x1c>
 8003fc6:	15e2      	asrs	r2, r4, #23
 8003fc8:	3a86      	subs	r2, #134	; 0x86
 8003fca:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003fd6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004080 <__ieee754_rem_pio2f+0x250>
 8003fda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003fde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fe2:	ed8d 7a03 	vstr	s14, [sp, #12]
 8003fe6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003fea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003fee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003ff2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ff6:	ed8d 7a04 	vstr	s14, [sp, #16]
 8003ffa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003ffe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004006:	edcd 7a05 	vstr	s15, [sp, #20]
 800400a:	d11e      	bne.n	800404a <__ieee754_rem_pio2f+0x21a>
 800400c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004014:	bf0c      	ite	eq
 8004016:	2301      	moveq	r3, #1
 8004018:	2302      	movne	r3, #2
 800401a:	491a      	ldr	r1, [pc, #104]	; (8004084 <__ieee754_rem_pio2f+0x254>)
 800401c:	9101      	str	r1, [sp, #4]
 800401e:	2102      	movs	r1, #2
 8004020:	9100      	str	r1, [sp, #0]
 8004022:	a803      	add	r0, sp, #12
 8004024:	4629      	mov	r1, r5
 8004026:	f000 f88d 	bl	8004144 <__kernel_rem_pio2f>
 800402a:	2e00      	cmp	r6, #0
 800402c:	f6bf af31 	bge.w	8003e92 <__ieee754_rem_pio2f+0x62>
 8004030:	edd5 7a00 	vldr	s15, [r5]
 8004034:	eef1 7a67 	vneg.f32	s15, s15
 8004038:	edc5 7a00 	vstr	s15, [r5]
 800403c:	edd5 7a01 	vldr	s15, [r5, #4]
 8004040:	eef1 7a67 	vneg.f32	s15, s15
 8004044:	edc5 7a01 	vstr	s15, [r5, #4]
 8004048:	e77a      	b.n	8003f40 <__ieee754_rem_pio2f+0x110>
 800404a:	2303      	movs	r3, #3
 800404c:	e7e5      	b.n	800401a <__ieee754_rem_pio2f+0x1ea>
 800404e:	bf00      	nop
 8004050:	3f490fd8 	.word	0x3f490fd8
 8004054:	4016cbe3 	.word	0x4016cbe3
 8004058:	3fc90f80 	.word	0x3fc90f80
 800405c:	3fc90fd0 	.word	0x3fc90fd0
 8004060:	37354400 	.word	0x37354400
 8004064:	37354443 	.word	0x37354443
 8004068:	2e85a308 	.word	0x2e85a308
 800406c:	43490f80 	.word	0x43490f80
 8004070:	3f22f984 	.word	0x3f22f984
 8004074:	080048dc 	.word	0x080048dc
 8004078:	2e85a300 	.word	0x2e85a300
 800407c:	248d3132 	.word	0x248d3132
 8004080:	43800000 	.word	0x43800000
 8004084:	0800495c 	.word	0x0800495c

08004088 <__kernel_cosf>:
 8004088:	ee10 3a10 	vmov	r3, s0
 800408c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004090:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004094:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004098:	da05      	bge.n	80040a6 <__kernel_cosf+0x1e>
 800409a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800409e:	ee17 2a90 	vmov	r2, s15
 80040a2:	2a00      	cmp	r2, #0
 80040a4:	d03b      	beq.n	800411e <__kernel_cosf+0x96>
 80040a6:	ee20 6a00 	vmul.f32	s12, s0, s0
 80040aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80040ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004124 <__kernel_cosf+0x9c>
 80040b2:	4a1d      	ldr	r2, [pc, #116]	; (8004128 <__kernel_cosf+0xa0>)
 80040b4:	ee66 7a07 	vmul.f32	s15, s12, s14
 80040b8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800412c <__kernel_cosf+0xa4>
 80040bc:	eea6 7a25 	vfma.f32	s14, s12, s11
 80040c0:	4293      	cmp	r3, r2
 80040c2:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8004130 <__kernel_cosf+0xa8>
 80040c6:	eee7 5a06 	vfma.f32	s11, s14, s12
 80040ca:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004134 <__kernel_cosf+0xac>
 80040ce:	eea5 7a86 	vfma.f32	s14, s11, s12
 80040d2:	eddf 5a19 	vldr	s11, [pc, #100]	; 8004138 <__kernel_cosf+0xb0>
 80040d6:	eee7 5a06 	vfma.f32	s11, s14, s12
 80040da:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800413c <__kernel_cosf+0xb4>
 80040de:	eea5 7a86 	vfma.f32	s14, s11, s12
 80040e2:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80040e6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80040ea:	eee6 0a07 	vfma.f32	s1, s12, s14
 80040ee:	dc04      	bgt.n	80040fa <__kernel_cosf+0x72>
 80040f0:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80040f4:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80040f8:	4770      	bx	lr
 80040fa:	4a11      	ldr	r2, [pc, #68]	; (8004140 <__kernel_cosf+0xb8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	bfda      	itte	le
 8004100:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8004104:	ee07 3a10 	vmovle	s14, r3
 8004108:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800410c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004110:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8004114:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004118:	ee30 0a67 	vsub.f32	s0, s0, s15
 800411c:	4770      	bx	lr
 800411e:	eeb0 0a66 	vmov.f32	s0, s13
 8004122:	4770      	bx	lr
 8004124:	ad47d74e 	.word	0xad47d74e
 8004128:	3e999999 	.word	0x3e999999
 800412c:	310f74f6 	.word	0x310f74f6
 8004130:	b493f27c 	.word	0xb493f27c
 8004134:	37d00d01 	.word	0x37d00d01
 8004138:	bab60b61 	.word	0xbab60b61
 800413c:	3d2aaaab 	.word	0x3d2aaaab
 8004140:	3f480000 	.word	0x3f480000

08004144 <__kernel_rem_pio2f>:
 8004144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004148:	ed2d 8b04 	vpush	{d8-d9}
 800414c:	b0d7      	sub	sp, #348	; 0x15c
 800414e:	469b      	mov	fp, r3
 8004150:	460e      	mov	r6, r1
 8004152:	4bbe      	ldr	r3, [pc, #760]	; (800444c <__kernel_rem_pio2f+0x308>)
 8004154:	9964      	ldr	r1, [sp, #400]	; 0x190
 8004156:	9002      	str	r0, [sp, #8]
 8004158:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800415c:	9865      	ldr	r0, [sp, #404]	; 0x194
 800415e:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800445c <__kernel_rem_pio2f+0x318>
 8004162:	1ed1      	subs	r1, r2, #3
 8004164:	2308      	movs	r3, #8
 8004166:	fb91 f1f3 	sdiv	r1, r1, r3
 800416a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800416e:	f10b 3aff 	add.w	sl, fp, #4294967295
 8004172:	1c4c      	adds	r4, r1, #1
 8004174:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8004178:	eba1 050a 	sub.w	r5, r1, sl
 800417c:	aa1a      	add	r2, sp, #104	; 0x68
 800417e:	eb09 070a 	add.w	r7, r9, sl
 8004182:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8004186:	4696      	mov	lr, r2
 8004188:	2300      	movs	r3, #0
 800418a:	42bb      	cmp	r3, r7
 800418c:	dd0f      	ble.n	80041ae <__kernel_rem_pio2f+0x6a>
 800418e:	af42      	add	r7, sp, #264	; 0x108
 8004190:	2200      	movs	r2, #0
 8004192:	454a      	cmp	r2, r9
 8004194:	dc27      	bgt.n	80041e6 <__kernel_rem_pio2f+0xa2>
 8004196:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800419a:	eb0b 0302 	add.w	r3, fp, r2
 800419e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80041a2:	9d02      	ldr	r5, [sp, #8]
 80041a4:	eddf 7aad 	vldr	s15, [pc, #692]	; 800445c <__kernel_rem_pio2f+0x318>
 80041a8:	f04f 0c00 	mov.w	ip, #0
 80041ac:	e015      	b.n	80041da <__kernel_rem_pio2f+0x96>
 80041ae:	42dd      	cmn	r5, r3
 80041b0:	bf5d      	ittte	pl
 80041b2:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80041b6:	ee07 2a90 	vmovpl	s15, r2
 80041ba:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80041be:	eef0 7a47 	vmovmi.f32	s15, s14
 80041c2:	ecee 7a01 	vstmia	lr!, {s15}
 80041c6:	3301      	adds	r3, #1
 80041c8:	e7df      	b.n	800418a <__kernel_rem_pio2f+0x46>
 80041ca:	ecf5 6a01 	vldmia	r5!, {s13}
 80041ce:	ed33 7a01 	vldmdb	r3!, {s14}
 80041d2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80041d6:	f10c 0c01 	add.w	ip, ip, #1
 80041da:	45d4      	cmp	ip, sl
 80041dc:	ddf5      	ble.n	80041ca <__kernel_rem_pio2f+0x86>
 80041de:	ece7 7a01 	vstmia	r7!, {s15}
 80041e2:	3201      	adds	r2, #1
 80041e4:	e7d5      	b.n	8004192 <__kernel_rem_pio2f+0x4e>
 80041e6:	ab06      	add	r3, sp, #24
 80041e8:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80041ec:	9304      	str	r3, [sp, #16]
 80041ee:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8004458 <__kernel_rem_pio2f+0x314>
 80041f2:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8004454 <__kernel_rem_pio2f+0x310>
 80041f6:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80041fa:	9303      	str	r3, [sp, #12]
 80041fc:	464d      	mov	r5, r9
 80041fe:	ab56      	add	r3, sp, #344	; 0x158
 8004200:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8004204:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004208:	3f01      	subs	r7, #1
 800420a:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800420e:	00bf      	lsls	r7, r7, #2
 8004210:	ab56      	add	r3, sp, #344	; 0x158
 8004212:	19da      	adds	r2, r3, r7
 8004214:	3a4c      	subs	r2, #76	; 0x4c
 8004216:	2300      	movs	r3, #0
 8004218:	1ae9      	subs	r1, r5, r3
 800421a:	2900      	cmp	r1, #0
 800421c:	dc4c      	bgt.n	80042b8 <__kernel_rem_pio2f+0x174>
 800421e:	4620      	mov	r0, r4
 8004220:	f000 faa4 	bl	800476c <scalbnf>
 8004224:	eeb0 8a40 	vmov.f32	s16, s0
 8004228:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800422c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004230:	f000 fa5a 	bl	80046e8 <floorf>
 8004234:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8004238:	eea0 8a67 	vfms.f32	s16, s0, s15
 800423c:	2c00      	cmp	r4, #0
 800423e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004242:	edcd 7a01 	vstr	s15, [sp, #4]
 8004246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800424a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800424e:	dd48      	ble.n	80042e2 <__kernel_rem_pio2f+0x19e>
 8004250:	1e69      	subs	r1, r5, #1
 8004252:	ab06      	add	r3, sp, #24
 8004254:	f1c4 0008 	rsb	r0, r4, #8
 8004258:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800425c:	9a01      	ldr	r2, [sp, #4]
 800425e:	fa4c f300 	asr.w	r3, ip, r0
 8004262:	441a      	add	r2, r3
 8004264:	4083      	lsls	r3, r0
 8004266:	9201      	str	r2, [sp, #4]
 8004268:	ebac 0203 	sub.w	r2, ip, r3
 800426c:	ab06      	add	r3, sp, #24
 800426e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8004272:	f1c4 0307 	rsb	r3, r4, #7
 8004276:	fa42 f803 	asr.w	r8, r2, r3
 800427a:	f1b8 0f00 	cmp.w	r8, #0
 800427e:	dd41      	ble.n	8004304 <__kernel_rem_pio2f+0x1c0>
 8004280:	9b01      	ldr	r3, [sp, #4]
 8004282:	2000      	movs	r0, #0
 8004284:	3301      	adds	r3, #1
 8004286:	9301      	str	r3, [sp, #4]
 8004288:	4601      	mov	r1, r0
 800428a:	4285      	cmp	r5, r0
 800428c:	dc6d      	bgt.n	800436a <__kernel_rem_pio2f+0x226>
 800428e:	2c00      	cmp	r4, #0
 8004290:	dd04      	ble.n	800429c <__kernel_rem_pio2f+0x158>
 8004292:	2c01      	cmp	r4, #1
 8004294:	d07e      	beq.n	8004394 <__kernel_rem_pio2f+0x250>
 8004296:	2c02      	cmp	r4, #2
 8004298:	f000 8086 	beq.w	80043a8 <__kernel_rem_pio2f+0x264>
 800429c:	f1b8 0f02 	cmp.w	r8, #2
 80042a0:	d130      	bne.n	8004304 <__kernel_rem_pio2f+0x1c0>
 80042a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80042a6:	ee30 8a48 	vsub.f32	s16, s0, s16
 80042aa:	b359      	cbz	r1, 8004304 <__kernel_rem_pio2f+0x1c0>
 80042ac:	4620      	mov	r0, r4
 80042ae:	f000 fa5d 	bl	800476c <scalbnf>
 80042b2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80042b6:	e025      	b.n	8004304 <__kernel_rem_pio2f+0x1c0>
 80042b8:	ee60 7a28 	vmul.f32	s15, s0, s17
 80042bc:	a806      	add	r0, sp, #24
 80042be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042c6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80042ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80042ce:	ee10 1a10 	vmov	r1, s0
 80042d2:	ed32 0a01 	vldmdb	r2!, {s0}
 80042d6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80042da:	ee37 0a80 	vadd.f32	s0, s15, s0
 80042de:	3301      	adds	r3, #1
 80042e0:	e79a      	b.n	8004218 <__kernel_rem_pio2f+0xd4>
 80042e2:	d106      	bne.n	80042f2 <__kernel_rem_pio2f+0x1ae>
 80042e4:	1e6b      	subs	r3, r5, #1
 80042e6:	aa06      	add	r2, sp, #24
 80042e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042ec:	ea4f 2822 	mov.w	r8, r2, asr #8
 80042f0:	e7c3      	b.n	800427a <__kernel_rem_pio2f+0x136>
 80042f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80042f6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80042fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fe:	da31      	bge.n	8004364 <__kernel_rem_pio2f+0x220>
 8004300:	f04f 0800 	mov.w	r8, #0
 8004304:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800430c:	f040 80a8 	bne.w	8004460 <__kernel_rem_pio2f+0x31c>
 8004310:	1e6b      	subs	r3, r5, #1
 8004312:	4618      	mov	r0, r3
 8004314:	2200      	movs	r2, #0
 8004316:	4548      	cmp	r0, r9
 8004318:	da4d      	bge.n	80043b6 <__kernel_rem_pio2f+0x272>
 800431a:	2a00      	cmp	r2, #0
 800431c:	f000 8087 	beq.w	800442e <__kernel_rem_pio2f+0x2ea>
 8004320:	aa06      	add	r2, sp, #24
 8004322:	3c08      	subs	r4, #8
 8004324:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004328:	2900      	cmp	r1, #0
 800432a:	f000 808d 	beq.w	8004448 <__kernel_rem_pio2f+0x304>
 800432e:	4620      	mov	r0, r4
 8004330:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004334:	9302      	str	r3, [sp, #8]
 8004336:	f000 fa19 	bl	800476c <scalbnf>
 800433a:	9b02      	ldr	r3, [sp, #8]
 800433c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004458 <__kernel_rem_pio2f+0x314>
 8004340:	0099      	lsls	r1, r3, #2
 8004342:	aa42      	add	r2, sp, #264	; 0x108
 8004344:	1850      	adds	r0, r2, r1
 8004346:	1d05      	adds	r5, r0, #4
 8004348:	461c      	mov	r4, r3
 800434a:	2c00      	cmp	r4, #0
 800434c:	f280 80b8 	bge.w	80044c0 <__kernel_rem_pio2f+0x37c>
 8004350:	2500      	movs	r5, #0
 8004352:	1b5c      	subs	r4, r3, r5
 8004354:	2c00      	cmp	r4, #0
 8004356:	f2c0 80d8 	blt.w	800450a <__kernel_rem_pio2f+0x3c6>
 800435a:	4f3d      	ldr	r7, [pc, #244]	; (8004450 <__kernel_rem_pio2f+0x30c>)
 800435c:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800445c <__kernel_rem_pio2f+0x318>
 8004360:	2400      	movs	r4, #0
 8004362:	e0c6      	b.n	80044f2 <__kernel_rem_pio2f+0x3ae>
 8004364:	f04f 0802 	mov.w	r8, #2
 8004368:	e78a      	b.n	8004280 <__kernel_rem_pio2f+0x13c>
 800436a:	ab06      	add	r3, sp, #24
 800436c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004370:	b949      	cbnz	r1, 8004386 <__kernel_rem_pio2f+0x242>
 8004372:	b12b      	cbz	r3, 8004380 <__kernel_rem_pio2f+0x23c>
 8004374:	aa06      	add	r2, sp, #24
 8004376:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800437a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800437e:	2301      	movs	r3, #1
 8004380:	3001      	adds	r0, #1
 8004382:	4619      	mov	r1, r3
 8004384:	e781      	b.n	800428a <__kernel_rem_pio2f+0x146>
 8004386:	aa06      	add	r2, sp, #24
 8004388:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800438c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8004390:	460b      	mov	r3, r1
 8004392:	e7f5      	b.n	8004380 <__kernel_rem_pio2f+0x23c>
 8004394:	1e68      	subs	r0, r5, #1
 8004396:	ab06      	add	r3, sp, #24
 8004398:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800439c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043a0:	aa06      	add	r2, sp, #24
 80043a2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80043a6:	e779      	b.n	800429c <__kernel_rem_pio2f+0x158>
 80043a8:	1e68      	subs	r0, r5, #1
 80043aa:	ab06      	add	r3, sp, #24
 80043ac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80043b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b4:	e7f4      	b.n	80043a0 <__kernel_rem_pio2f+0x25c>
 80043b6:	a906      	add	r1, sp, #24
 80043b8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80043bc:	3801      	subs	r0, #1
 80043be:	430a      	orrs	r2, r1
 80043c0:	e7a9      	b.n	8004316 <__kernel_rem_pio2f+0x1d2>
 80043c2:	f10c 0c01 	add.w	ip, ip, #1
 80043c6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80043ca:	2a00      	cmp	r2, #0
 80043cc:	d0f9      	beq.n	80043c2 <__kernel_rem_pio2f+0x27e>
 80043ce:	eb0b 0305 	add.w	r3, fp, r5
 80043d2:	aa1a      	add	r2, sp, #104	; 0x68
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	1898      	adds	r0, r3, r2
 80043d8:	3004      	adds	r0, #4
 80043da:	1c69      	adds	r1, r5, #1
 80043dc:	3704      	adds	r7, #4
 80043de:	2200      	movs	r2, #0
 80043e0:	4465      	add	r5, ip
 80043e2:	9005      	str	r0, [sp, #20]
 80043e4:	428d      	cmp	r5, r1
 80043e6:	f6ff af0a 	blt.w	80041fe <__kernel_rem_pio2f+0xba>
 80043ea:	a81a      	add	r0, sp, #104	; 0x68
 80043ec:	eb02 0c03 	add.w	ip, r2, r3
 80043f0:	4484      	add	ip, r0
 80043f2:	9803      	ldr	r0, [sp, #12]
 80043f4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80043f8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80043fc:	9001      	str	r0, [sp, #4]
 80043fe:	ee07 0a90 	vmov	s15, r0
 8004402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004406:	9805      	ldr	r0, [sp, #20]
 8004408:	edcc 7a00 	vstr	s15, [ip]
 800440c:	eddf 7a13 	vldr	s15, [pc, #76]	; 800445c <__kernel_rem_pio2f+0x318>
 8004410:	eb00 0802 	add.w	r8, r0, r2
 8004414:	f04f 0c00 	mov.w	ip, #0
 8004418:	45d4      	cmp	ip, sl
 800441a:	dd0c      	ble.n	8004436 <__kernel_rem_pio2f+0x2f2>
 800441c:	eb02 0c07 	add.w	ip, r2, r7
 8004420:	a842      	add	r0, sp, #264	; 0x108
 8004422:	4484      	add	ip, r0
 8004424:	edcc 7a01 	vstr	s15, [ip, #4]
 8004428:	3101      	adds	r1, #1
 800442a:	3204      	adds	r2, #4
 800442c:	e7da      	b.n	80043e4 <__kernel_rem_pio2f+0x2a0>
 800442e:	9b04      	ldr	r3, [sp, #16]
 8004430:	f04f 0c01 	mov.w	ip, #1
 8004434:	e7c7      	b.n	80043c6 <__kernel_rem_pio2f+0x282>
 8004436:	ecfe 6a01 	vldmia	lr!, {s13}
 800443a:	ed38 7a01 	vldmdb	r8!, {s14}
 800443e:	f10c 0c01 	add.w	ip, ip, #1
 8004442:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004446:	e7e7      	b.n	8004418 <__kernel_rem_pio2f+0x2d4>
 8004448:	3b01      	subs	r3, #1
 800444a:	e769      	b.n	8004320 <__kernel_rem_pio2f+0x1dc>
 800444c:	08004ca0 	.word	0x08004ca0
 8004450:	08004c74 	.word	0x08004c74
 8004454:	43800000 	.word	0x43800000
 8004458:	3b800000 	.word	0x3b800000
 800445c:	00000000 	.word	0x00000000
 8004460:	4260      	negs	r0, r4
 8004462:	eeb0 0a48 	vmov.f32	s0, s16
 8004466:	f000 f981 	bl	800476c <scalbnf>
 800446a:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8004454 <__kernel_rem_pio2f+0x310>
 800446e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004476:	db1a      	blt.n	80044ae <__kernel_rem_pio2f+0x36a>
 8004478:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8004458 <__kernel_rem_pio2f+0x314>
 800447c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004480:	aa06      	add	r2, sp, #24
 8004482:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004486:	a906      	add	r1, sp, #24
 8004488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800448c:	3408      	adds	r4, #8
 800448e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004496:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800449a:	ee10 3a10 	vmov	r3, s0
 800449e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80044a2:	1c6b      	adds	r3, r5, #1
 80044a4:	ee17 2a90 	vmov	r2, s15
 80044a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80044ac:	e73f      	b.n	800432e <__kernel_rem_pio2f+0x1ea>
 80044ae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80044b2:	aa06      	add	r2, sp, #24
 80044b4:	ee10 3a10 	vmov	r3, s0
 80044b8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80044bc:	462b      	mov	r3, r5
 80044be:	e736      	b.n	800432e <__kernel_rem_pio2f+0x1ea>
 80044c0:	aa06      	add	r2, sp, #24
 80044c2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80044c6:	9202      	str	r2, [sp, #8]
 80044c8:	ee07 2a90 	vmov	s15, r2
 80044cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044d0:	3c01      	subs	r4, #1
 80044d2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80044d6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80044da:	ed65 7a01 	vstmdb	r5!, {s15}
 80044de:	e734      	b.n	800434a <__kernel_rem_pio2f+0x206>
 80044e0:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80044e4:	ecf7 6a01 	vldmia	r7!, {s13}
 80044e8:	ed9c 7a00 	vldr	s14, [ip]
 80044ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 80044f0:	3401      	adds	r4, #1
 80044f2:	454c      	cmp	r4, r9
 80044f4:	dc01      	bgt.n	80044fa <__kernel_rem_pio2f+0x3b6>
 80044f6:	42a5      	cmp	r5, r4
 80044f8:	daf2      	bge.n	80044e0 <__kernel_rem_pio2f+0x39c>
 80044fa:	aa56      	add	r2, sp, #344	; 0x158
 80044fc:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8004500:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8004504:	3501      	adds	r5, #1
 8004506:	3804      	subs	r0, #4
 8004508:	e723      	b.n	8004352 <__kernel_rem_pio2f+0x20e>
 800450a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800450c:	2a03      	cmp	r2, #3
 800450e:	d84d      	bhi.n	80045ac <__kernel_rem_pio2f+0x468>
 8004510:	e8df f002 	tbb	[pc, r2]
 8004514:	021f1f3e 	.word	0x021f1f3e
 8004518:	aa56      	add	r2, sp, #344	; 0x158
 800451a:	4411      	add	r1, r2
 800451c:	399c      	subs	r1, #156	; 0x9c
 800451e:	4608      	mov	r0, r1
 8004520:	461c      	mov	r4, r3
 8004522:	2c00      	cmp	r4, #0
 8004524:	dc5f      	bgt.n	80045e6 <__kernel_rem_pio2f+0x4a2>
 8004526:	4608      	mov	r0, r1
 8004528:	461c      	mov	r4, r3
 800452a:	2c01      	cmp	r4, #1
 800452c:	dc6b      	bgt.n	8004606 <__kernel_rem_pio2f+0x4c2>
 800452e:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800445c <__kernel_rem_pio2f+0x318>
 8004532:	2b01      	cmp	r3, #1
 8004534:	dc77      	bgt.n	8004626 <__kernel_rem_pio2f+0x4e2>
 8004536:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800453a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800453e:	f1b8 0f00 	cmp.w	r8, #0
 8004542:	d176      	bne.n	8004632 <__kernel_rem_pio2f+0x4ee>
 8004544:	edc6 6a00 	vstr	s13, [r6]
 8004548:	ed86 7a01 	vstr	s14, [r6, #4]
 800454c:	edc6 7a02 	vstr	s15, [r6, #8]
 8004550:	e02c      	b.n	80045ac <__kernel_rem_pio2f+0x468>
 8004552:	aa56      	add	r2, sp, #344	; 0x158
 8004554:	4411      	add	r1, r2
 8004556:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800445c <__kernel_rem_pio2f+0x318>
 800455a:	399c      	subs	r1, #156	; 0x9c
 800455c:	4618      	mov	r0, r3
 800455e:	2800      	cmp	r0, #0
 8004560:	da32      	bge.n	80045c8 <__kernel_rem_pio2f+0x484>
 8004562:	f1b8 0f00 	cmp.w	r8, #0
 8004566:	d035      	beq.n	80045d4 <__kernel_rem_pio2f+0x490>
 8004568:	eef1 7a47 	vneg.f32	s15, s14
 800456c:	edc6 7a00 	vstr	s15, [r6]
 8004570:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8004574:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004578:	a82f      	add	r0, sp, #188	; 0xbc
 800457a:	2101      	movs	r1, #1
 800457c:	428b      	cmp	r3, r1
 800457e:	da2c      	bge.n	80045da <__kernel_rem_pio2f+0x496>
 8004580:	f1b8 0f00 	cmp.w	r8, #0
 8004584:	d001      	beq.n	800458a <__kernel_rem_pio2f+0x446>
 8004586:	eef1 7a67 	vneg.f32	s15, s15
 800458a:	edc6 7a01 	vstr	s15, [r6, #4]
 800458e:	e00d      	b.n	80045ac <__kernel_rem_pio2f+0x468>
 8004590:	aa56      	add	r2, sp, #344	; 0x158
 8004592:	4411      	add	r1, r2
 8004594:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800445c <__kernel_rem_pio2f+0x318>
 8004598:	399c      	subs	r1, #156	; 0x9c
 800459a:	2b00      	cmp	r3, #0
 800459c:	da0e      	bge.n	80045bc <__kernel_rem_pio2f+0x478>
 800459e:	f1b8 0f00 	cmp.w	r8, #0
 80045a2:	d001      	beq.n	80045a8 <__kernel_rem_pio2f+0x464>
 80045a4:	eef1 7a67 	vneg.f32	s15, s15
 80045a8:	edc6 7a00 	vstr	s15, [r6]
 80045ac:	9b01      	ldr	r3, [sp, #4]
 80045ae:	f003 0007 	and.w	r0, r3, #7
 80045b2:	b057      	add	sp, #348	; 0x15c
 80045b4:	ecbd 8b04 	vpop	{d8-d9}
 80045b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045bc:	ed31 7a01 	vldmdb	r1!, {s14}
 80045c0:	3b01      	subs	r3, #1
 80045c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045c6:	e7e8      	b.n	800459a <__kernel_rem_pio2f+0x456>
 80045c8:	ed71 7a01 	vldmdb	r1!, {s15}
 80045cc:	3801      	subs	r0, #1
 80045ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045d2:	e7c4      	b.n	800455e <__kernel_rem_pio2f+0x41a>
 80045d4:	eef0 7a47 	vmov.f32	s15, s14
 80045d8:	e7c8      	b.n	800456c <__kernel_rem_pio2f+0x428>
 80045da:	ecb0 7a01 	vldmia	r0!, {s14}
 80045de:	3101      	adds	r1, #1
 80045e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045e4:	e7ca      	b.n	800457c <__kernel_rem_pio2f+0x438>
 80045e6:	ed50 7a02 	vldr	s15, [r0, #-8]
 80045ea:	ed70 6a01 	vldmdb	r0!, {s13}
 80045ee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80045f2:	3c01      	subs	r4, #1
 80045f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045f8:	ed00 7a01 	vstr	s14, [r0, #-4]
 80045fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004600:	edc0 7a00 	vstr	s15, [r0]
 8004604:	e78d      	b.n	8004522 <__kernel_rem_pio2f+0x3de>
 8004606:	ed50 7a02 	vldr	s15, [r0, #-8]
 800460a:	ed70 6a01 	vldmdb	r0!, {s13}
 800460e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004612:	3c01      	subs	r4, #1
 8004614:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004618:	ed00 7a01 	vstr	s14, [r0, #-4]
 800461c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004620:	edc0 7a00 	vstr	s15, [r0]
 8004624:	e781      	b.n	800452a <__kernel_rem_pio2f+0x3e6>
 8004626:	ed31 7a01 	vldmdb	r1!, {s14}
 800462a:	3b01      	subs	r3, #1
 800462c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004630:	e77f      	b.n	8004532 <__kernel_rem_pio2f+0x3ee>
 8004632:	eef1 6a66 	vneg.f32	s13, s13
 8004636:	eeb1 7a47 	vneg.f32	s14, s14
 800463a:	edc6 6a00 	vstr	s13, [r6]
 800463e:	ed86 7a01 	vstr	s14, [r6, #4]
 8004642:	eef1 7a67 	vneg.f32	s15, s15
 8004646:	e781      	b.n	800454c <__kernel_rem_pio2f+0x408>

08004648 <__kernel_sinf>:
 8004648:	ee10 3a10 	vmov	r3, s0
 800464c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004650:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004654:	da04      	bge.n	8004660 <__kernel_sinf+0x18>
 8004656:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800465a:	ee17 3a90 	vmov	r3, s15
 800465e:	b35b      	cbz	r3, 80046b8 <__kernel_sinf+0x70>
 8004660:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004664:	eddf 7a15 	vldr	s15, [pc, #84]	; 80046bc <__kernel_sinf+0x74>
 8004668:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80046c0 <__kernel_sinf+0x78>
 800466c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004670:	eddf 7a14 	vldr	s15, [pc, #80]	; 80046c4 <__kernel_sinf+0x7c>
 8004674:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004678:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80046c8 <__kernel_sinf+0x80>
 800467c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004680:	eddf 7a12 	vldr	s15, [pc, #72]	; 80046cc <__kernel_sinf+0x84>
 8004684:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004688:	eee6 7a07 	vfma.f32	s15, s12, s14
 800468c:	b930      	cbnz	r0, 800469c <__kernel_sinf+0x54>
 800468e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80046d0 <__kernel_sinf+0x88>
 8004692:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004696:	eea6 0a26 	vfma.f32	s0, s12, s13
 800469a:	4770      	bx	lr
 800469c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80046a0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80046a4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80046a8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80046ac:	eddf 7a09 	vldr	s15, [pc, #36]	; 80046d4 <__kernel_sinf+0x8c>
 80046b0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80046b4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	2f2ec9d3 	.word	0x2f2ec9d3
 80046c0:	b2d72f34 	.word	0xb2d72f34
 80046c4:	3638ef1b 	.word	0x3638ef1b
 80046c8:	b9500d01 	.word	0xb9500d01
 80046cc:	3c088889 	.word	0x3c088889
 80046d0:	be2aaaab 	.word	0xbe2aaaab
 80046d4:	3e2aaaab 	.word	0x3e2aaaab

080046d8 <fabsf>:
 80046d8:	ee10 3a10 	vmov	r3, s0
 80046dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046e0:	ee00 3a10 	vmov	s0, r3
 80046e4:	4770      	bx	lr
	...

080046e8 <floorf>:
 80046e8:	ee10 3a10 	vmov	r3, s0
 80046ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80046f0:	0dca      	lsrs	r2, r1, #23
 80046f2:	3a7f      	subs	r2, #127	; 0x7f
 80046f4:	2a16      	cmp	r2, #22
 80046f6:	dc2a      	bgt.n	800474e <floorf+0x66>
 80046f8:	2a00      	cmp	r2, #0
 80046fa:	da11      	bge.n	8004720 <floorf+0x38>
 80046fc:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004760 <floorf+0x78>
 8004700:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004704:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470c:	dd05      	ble.n	800471a <floorf+0x32>
 800470e:	2b00      	cmp	r3, #0
 8004710:	da23      	bge.n	800475a <floorf+0x72>
 8004712:	4a14      	ldr	r2, [pc, #80]	; (8004764 <floorf+0x7c>)
 8004714:	2900      	cmp	r1, #0
 8004716:	bf18      	it	ne
 8004718:	4613      	movne	r3, r2
 800471a:	ee00 3a10 	vmov	s0, r3
 800471e:	4770      	bx	lr
 8004720:	4911      	ldr	r1, [pc, #68]	; (8004768 <floorf+0x80>)
 8004722:	4111      	asrs	r1, r2
 8004724:	420b      	tst	r3, r1
 8004726:	d0fa      	beq.n	800471e <floorf+0x36>
 8004728:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004760 <floorf+0x78>
 800472c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004730:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004738:	ddef      	ble.n	800471a <floorf+0x32>
 800473a:	2b00      	cmp	r3, #0
 800473c:	bfbe      	ittt	lt
 800473e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8004742:	fa40 f202 	asrlt.w	r2, r0, r2
 8004746:	189b      	addlt	r3, r3, r2
 8004748:	ea23 0301 	bic.w	r3, r3, r1
 800474c:	e7e5      	b.n	800471a <floorf+0x32>
 800474e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004752:	d3e4      	bcc.n	800471e <floorf+0x36>
 8004754:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004758:	4770      	bx	lr
 800475a:	2300      	movs	r3, #0
 800475c:	e7dd      	b.n	800471a <floorf+0x32>
 800475e:	bf00      	nop
 8004760:	7149f2ca 	.word	0x7149f2ca
 8004764:	bf800000 	.word	0xbf800000
 8004768:	007fffff 	.word	0x007fffff

0800476c <scalbnf>:
 800476c:	b508      	push	{r3, lr}
 800476e:	ee10 2a10 	vmov	r2, s0
 8004772:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8004776:	ed2d 8b02 	vpush	{d8}
 800477a:	eef0 0a40 	vmov.f32	s1, s0
 800477e:	d004      	beq.n	800478a <scalbnf+0x1e>
 8004780:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004784:	d306      	bcc.n	8004794 <scalbnf+0x28>
 8004786:	ee70 0a00 	vadd.f32	s1, s0, s0
 800478a:	ecbd 8b02 	vpop	{d8}
 800478e:	eeb0 0a60 	vmov.f32	s0, s1
 8004792:	bd08      	pop	{r3, pc}
 8004794:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004798:	d21c      	bcs.n	80047d4 <scalbnf+0x68>
 800479a:	4b1f      	ldr	r3, [pc, #124]	; (8004818 <scalbnf+0xac>)
 800479c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800481c <scalbnf+0xb0>
 80047a0:	4298      	cmp	r0, r3
 80047a2:	ee60 0a27 	vmul.f32	s1, s0, s15
 80047a6:	db10      	blt.n	80047ca <scalbnf+0x5e>
 80047a8:	ee10 2a90 	vmov	r2, s1
 80047ac:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80047b0:	3b19      	subs	r3, #25
 80047b2:	4403      	add	r3, r0
 80047b4:	2bfe      	cmp	r3, #254	; 0xfe
 80047b6:	dd0f      	ble.n	80047d8 <scalbnf+0x6c>
 80047b8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8004820 <scalbnf+0xb4>
 80047bc:	eeb0 0a48 	vmov.f32	s0, s16
 80047c0:	f000 f834 	bl	800482c <copysignf>
 80047c4:	ee60 0a08 	vmul.f32	s1, s0, s16
 80047c8:	e7df      	b.n	800478a <scalbnf+0x1e>
 80047ca:	eddf 7a16 	vldr	s15, [pc, #88]	; 8004824 <scalbnf+0xb8>
 80047ce:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80047d2:	e7da      	b.n	800478a <scalbnf+0x1e>
 80047d4:	0ddb      	lsrs	r3, r3, #23
 80047d6:	e7ec      	b.n	80047b2 <scalbnf+0x46>
 80047d8:	2b00      	cmp	r3, #0
 80047da:	dd06      	ble.n	80047ea <scalbnf+0x7e>
 80047dc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80047e0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80047e4:	ee00 3a90 	vmov	s1, r3
 80047e8:	e7cf      	b.n	800478a <scalbnf+0x1e>
 80047ea:	f113 0f16 	cmn.w	r3, #22
 80047ee:	da06      	bge.n	80047fe <scalbnf+0x92>
 80047f0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80047f4:	4298      	cmp	r0, r3
 80047f6:	dcdf      	bgt.n	80047b8 <scalbnf+0x4c>
 80047f8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8004824 <scalbnf+0xb8>
 80047fc:	e7de      	b.n	80047bc <scalbnf+0x50>
 80047fe:	3319      	adds	r3, #25
 8004800:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8004804:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8004808:	eddf 7a07 	vldr	s15, [pc, #28]	; 8004828 <scalbnf+0xbc>
 800480c:	ee07 3a10 	vmov	s14, r3
 8004810:	ee67 0a27 	vmul.f32	s1, s14, s15
 8004814:	e7b9      	b.n	800478a <scalbnf+0x1e>
 8004816:	bf00      	nop
 8004818:	ffff3cb0 	.word	0xffff3cb0
 800481c:	4c000000 	.word	0x4c000000
 8004820:	7149f2ca 	.word	0x7149f2ca
 8004824:	0da24260 	.word	0x0da24260
 8004828:	33000000 	.word	0x33000000

0800482c <copysignf>:
 800482c:	ee10 3a10 	vmov	r3, s0
 8004830:	ee10 2a90 	vmov	r2, s1
 8004834:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004838:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800483c:	4313      	orrs	r3, r2
 800483e:	ee00 3a10 	vmov	s0, r3
 8004842:	4770      	bx	lr

08004844 <_init>:
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	bf00      	nop
 8004848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484a:	bc08      	pop	{r3}
 800484c:	469e      	mov	lr, r3
 800484e:	4770      	bx	lr

08004850 <_fini>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	bf00      	nop
 8004854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004856:	bc08      	pop	{r3}
 8004858:	469e      	mov	lr, r3
 800485a:	4770      	bx	lr
