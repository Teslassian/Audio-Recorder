
edesign_2020_21785155.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056cc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005898  08005898  00015898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aa0  08005aa0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005aa0  08005aa0  00015aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005aa8  08005aa8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aa8  08005aa8  00015aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005aac  08005aac  00015aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001950  2000000c  08005abc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000195c  08005abc  0002195c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2b7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e59  00000000  00000000  0002d2f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d60  00000000  00000000  0002f150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c68  00000000  00000000  0002feb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021e3e  00000000  00000000  00030b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a2f7  00000000  00000000  00052956  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0269  00000000  00000000  0005cc4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012ceb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c30  00000000  00000000  0012cf34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800587c 	.word	0x0800587c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	0800587c 	.word	0x0800587c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b972 	b.w	8000e40 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9e08      	ldr	r6, [sp, #32]
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	4688      	mov	r8, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d14b      	bne.n	8000c1a <__udivmoddi4+0xa6>
 8000b82:	428a      	cmp	r2, r1
 8000b84:	4615      	mov	r5, r2
 8000b86:	d967      	bls.n	8000c58 <__udivmoddi4+0xe4>
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	b14a      	cbz	r2, 8000ba2 <__udivmoddi4+0x2e>
 8000b8e:	f1c2 0720 	rsb	r7, r2, #32
 8000b92:	fa01 f302 	lsl.w	r3, r1, r2
 8000b96:	fa20 f707 	lsr.w	r7, r0, r7
 8000b9a:	4095      	lsls	r5, r2
 8000b9c:	ea47 0803 	orr.w	r8, r7, r3
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba6:	0c23      	lsrs	r3, r4, #16
 8000ba8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bac:	fa1f fc85 	uxth.w	ip, r5
 8000bb0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x60>
 8000bc0:	18eb      	adds	r3, r5, r3
 8000bc2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bc6:	f080 811b 	bcs.w	8000e00 <__udivmoddi4+0x28c>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 8118 	bls.w	8000e00 <__udivmoddi4+0x28c>
 8000bd0:	3f02      	subs	r7, #2
 8000bd2:	442b      	add	r3, r5
 8000bd4:	1a5b      	subs	r3, r3, r1
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bdc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000be0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be8:	45a4      	cmp	ip, r4
 8000bea:	d909      	bls.n	8000c00 <__udivmoddi4+0x8c>
 8000bec:	192c      	adds	r4, r5, r4
 8000bee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf2:	f080 8107 	bcs.w	8000e04 <__udivmoddi4+0x290>
 8000bf6:	45a4      	cmp	ip, r4
 8000bf8:	f240 8104 	bls.w	8000e04 <__udivmoddi4+0x290>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	442c      	add	r4, r5
 8000c00:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c04:	eba4 040c 	sub.w	r4, r4, ip
 8000c08:	2700      	movs	r7, #0
 8000c0a:	b11e      	cbz	r6, 8000c14 <__udivmoddi4+0xa0>
 8000c0c:	40d4      	lsrs	r4, r2
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e9c6 4300 	strd	r4, r3, [r6]
 8000c14:	4639      	mov	r1, r7
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d909      	bls.n	8000c32 <__udivmoddi4+0xbe>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	f000 80eb 	beq.w	8000dfa <__udivmoddi4+0x286>
 8000c24:	2700      	movs	r7, #0
 8000c26:	e9c6 0100 	strd	r0, r1, [r6]
 8000c2a:	4638      	mov	r0, r7
 8000c2c:	4639      	mov	r1, r7
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	fab3 f783 	clz	r7, r3
 8000c36:	2f00      	cmp	r7, #0
 8000c38:	d147      	bne.n	8000cca <__udivmoddi4+0x156>
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d302      	bcc.n	8000c44 <__udivmoddi4+0xd0>
 8000c3e:	4282      	cmp	r2, r0
 8000c40:	f200 80fa 	bhi.w	8000e38 <__udivmoddi4+0x2c4>
 8000c44:	1a84      	subs	r4, r0, r2
 8000c46:	eb61 0303 	sbc.w	r3, r1, r3
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	4698      	mov	r8, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d0e0      	beq.n	8000c14 <__udivmoddi4+0xa0>
 8000c52:	e9c6 4800 	strd	r4, r8, [r6]
 8000c56:	e7dd      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000c58:	b902      	cbnz	r2, 8000c5c <__udivmoddi4+0xe8>
 8000c5a:	deff      	udf	#255	; 0xff
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	f040 808f 	bne.w	8000d84 <__udivmoddi4+0x210>
 8000c66:	1b49      	subs	r1, r1, r5
 8000c68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6c:	fa1f f885 	uxth.w	r8, r5
 8000c70:	2701      	movs	r7, #1
 8000c72:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c76:	0c23      	lsrs	r3, r4, #16
 8000c78:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c80:	fb08 f10c 	mul.w	r1, r8, ip
 8000c84:	4299      	cmp	r1, r3
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x124>
 8000c88:	18eb      	adds	r3, r5, r3
 8000c8a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x122>
 8000c90:	4299      	cmp	r1, r3
 8000c92:	f200 80cd 	bhi.w	8000e30 <__udivmoddi4+0x2bc>
 8000c96:	4684      	mov	ip, r0
 8000c98:	1a59      	subs	r1, r3, r1
 8000c9a:	b2a3      	uxth	r3, r4
 8000c9c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca8:	fb08 f800 	mul.w	r8, r8, r0
 8000cac:	45a0      	cmp	r8, r4
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0x14c>
 8000cb0:	192c      	adds	r4, r5, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x14a>
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	f200 80b6 	bhi.w	8000e2a <__udivmoddi4+0x2b6>
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	eba4 0408 	sub.w	r4, r4, r8
 8000cc4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc8:	e79f      	b.n	8000c0a <__udivmoddi4+0x96>
 8000cca:	f1c7 0c20 	rsb	ip, r7, #32
 8000cce:	40bb      	lsls	r3, r7
 8000cd0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cdc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ce0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce8:	4325      	orrs	r5, r4
 8000cea:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cee:	0c2c      	lsrs	r4, r5, #16
 8000cf0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf4:	fa1f fa8e 	uxth.w	sl, lr
 8000cf8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cfc:	fb09 f40a 	mul.w	r4, r9, sl
 8000d00:	429c      	cmp	r4, r3
 8000d02:	fa02 f207 	lsl.w	r2, r2, r7
 8000d06:	fa00 f107 	lsl.w	r1, r0, r7
 8000d0a:	d90b      	bls.n	8000d24 <__udivmoddi4+0x1b0>
 8000d0c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d10:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d14:	f080 8087 	bcs.w	8000e26 <__udivmoddi4+0x2b2>
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	f240 8084 	bls.w	8000e26 <__udivmoddi4+0x2b2>
 8000d1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d22:	4473      	add	r3, lr
 8000d24:	1b1b      	subs	r3, r3, r4
 8000d26:	b2ad      	uxth	r5, r5
 8000d28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d30:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d34:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d38:	45a2      	cmp	sl, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x1da>
 8000d3c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d44:	d26b      	bcs.n	8000e1e <__udivmoddi4+0x2aa>
 8000d46:	45a2      	cmp	sl, r4
 8000d48:	d969      	bls.n	8000e1e <__udivmoddi4+0x2aa>
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	4474      	add	r4, lr
 8000d4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d52:	fba0 8902 	umull	r8, r9, r0, r2
 8000d56:	eba4 040a 	sub.w	r4, r4, sl
 8000d5a:	454c      	cmp	r4, r9
 8000d5c:	46c2      	mov	sl, r8
 8000d5e:	464b      	mov	r3, r9
 8000d60:	d354      	bcc.n	8000e0c <__udivmoddi4+0x298>
 8000d62:	d051      	beq.n	8000e08 <__udivmoddi4+0x294>
 8000d64:	2e00      	cmp	r6, #0
 8000d66:	d069      	beq.n	8000e3c <__udivmoddi4+0x2c8>
 8000d68:	ebb1 050a 	subs.w	r5, r1, sl
 8000d6c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d70:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d74:	40fd      	lsrs	r5, r7
 8000d76:	40fc      	lsrs	r4, r7
 8000d78:	ea4c 0505 	orr.w	r5, ip, r5
 8000d7c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d80:	2700      	movs	r7, #0
 8000d82:	e747      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000d84:	f1c2 0320 	rsb	r3, r2, #32
 8000d88:	fa20 f703 	lsr.w	r7, r0, r3
 8000d8c:	4095      	lsls	r5, r2
 8000d8e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d92:	fa21 f303 	lsr.w	r3, r1, r3
 8000d96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d9a:	4338      	orrs	r0, r7
 8000d9c:	0c01      	lsrs	r1, r0, #16
 8000d9e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000da2:	fa1f f885 	uxth.w	r8, r5
 8000da6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000daa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dae:	fb07 f308 	mul.w	r3, r7, r8
 8000db2:	428b      	cmp	r3, r1
 8000db4:	fa04 f402 	lsl.w	r4, r4, r2
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x256>
 8000dba:	1869      	adds	r1, r5, r1
 8000dbc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dc0:	d22f      	bcs.n	8000e22 <__udivmoddi4+0x2ae>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d92d      	bls.n	8000e22 <__udivmoddi4+0x2ae>
 8000dc6:	3f02      	subs	r7, #2
 8000dc8:	4429      	add	r1, r5
 8000dca:	1acb      	subs	r3, r1, r3
 8000dcc:	b281      	uxth	r1, r0
 8000dce:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dd2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dda:	fb00 f308 	mul.w	r3, r0, r8
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d907      	bls.n	8000df2 <__udivmoddi4+0x27e>
 8000de2:	1869      	adds	r1, r5, r1
 8000de4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de8:	d217      	bcs.n	8000e1a <__udivmoddi4+0x2a6>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d915      	bls.n	8000e1a <__udivmoddi4+0x2a6>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4429      	add	r1, r5
 8000df2:	1ac9      	subs	r1, r1, r3
 8000df4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df8:	e73b      	b.n	8000c72 <__udivmoddi4+0xfe>
 8000dfa:	4637      	mov	r7, r6
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	e709      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000e00:	4607      	mov	r7, r0
 8000e02:	e6e7      	b.n	8000bd4 <__udivmoddi4+0x60>
 8000e04:	4618      	mov	r0, r3
 8000e06:	e6fb      	b.n	8000c00 <__udivmoddi4+0x8c>
 8000e08:	4541      	cmp	r1, r8
 8000e0a:	d2ab      	bcs.n	8000d64 <__udivmoddi4+0x1f0>
 8000e0c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e10:	eb69 020e 	sbc.w	r2, r9, lr
 8000e14:	3801      	subs	r0, #1
 8000e16:	4613      	mov	r3, r2
 8000e18:	e7a4      	b.n	8000d64 <__udivmoddi4+0x1f0>
 8000e1a:	4660      	mov	r0, ip
 8000e1c:	e7e9      	b.n	8000df2 <__udivmoddi4+0x27e>
 8000e1e:	4618      	mov	r0, r3
 8000e20:	e795      	b.n	8000d4e <__udivmoddi4+0x1da>
 8000e22:	4667      	mov	r7, ip
 8000e24:	e7d1      	b.n	8000dca <__udivmoddi4+0x256>
 8000e26:	4681      	mov	r9, r0
 8000e28:	e77c      	b.n	8000d24 <__udivmoddi4+0x1b0>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	442c      	add	r4, r5
 8000e2e:	e747      	b.n	8000cc0 <__udivmoddi4+0x14c>
 8000e30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e34:	442b      	add	r3, r5
 8000e36:	e72f      	b.n	8000c98 <__udivmoddi4+0x124>
 8000e38:	4638      	mov	r0, r7
 8000e3a:	e708      	b.n	8000c4e <__udivmoddi4+0xda>
 8000e3c:	4637      	mov	r7, r6
 8000e3e:	e6e9      	b.n	8000c14 <__udivmoddi4+0xa0>

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b5b0      	push	{r4, r5, r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	state = Idle;
 8000e4a:	4b9d      	ldr	r3, [pc, #628]	; (80010c0 <main+0x27c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
	Start = off;
 8000e50:	4b9c      	ldr	r3, [pc, #624]	; (80010c4 <main+0x280>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
	exti = off;
 8000e56:	4b9c      	ldr	r3, [pc, #624]	; (80010c8 <main+0x284>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]

	ledOne = off;
 8000e5c:	4b9b      	ldr	r3, [pc, #620]	; (80010cc <main+0x288>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
	ledTwo = off;
 8000e62:	4b9b      	ldr	r3, [pc, #620]	; (80010d0 <main+0x28c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
	ledThree = off;
 8000e68:	4b9a      	ldr	r3, [pc, #616]	; (80010d4 <main+0x290>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
	ledRec = off;
 8000e6e:	4b9a      	ldr	r3, [pc, #616]	; (80010d8 <main+0x294>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]

	buttOne = off;
 8000e74:	4b99      	ldr	r3, [pc, #612]	; (80010dc <main+0x298>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
	buttTwo	= off;
 8000e7a:	4b99      	ldr	r3, [pc, #612]	; (80010e0 <main+0x29c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
	buttThree = off;
 8000e80:	4b98      	ldr	r3, [pc, #608]	; (80010e4 <main+0x2a0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
	buttRec = off;
 8000e86:	4b98      	ldr	r3, [pc, #608]	; (80010e8 <main+0x2a4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
	buttStop = off;
 8000e8c:	4b97      	ldr	r3, [pc, #604]	; (80010ec <main+0x2a8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]

	int i;
	for (i=0;i<1024;i++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	e080      	b.n	8000f9a <main+0x156>
	{
		sine440[i] = sin(440*i/1024);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8000e9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	da01      	bge.n	8000eaa <main+0x66>
 8000ea6:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000eaa:	129b      	asrs	r3, r3, #10
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fafd 	bl	80004ac <__aeabi_i2d>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	460c      	mov	r4, r1
 8000eb6:	ec44 3b10 	vmov	d0, r3, r4
 8000eba:	f003 fccd 	bl	8004858 <sin>
 8000ebe:	ec54 3b10 	vmov	r3, r4, d0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	4621      	mov	r1, r4
 8000ec6:	f7ff fe1d 	bl	8000b04 <__aeabi_d2uiz>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	b299      	uxth	r1, r3
 8000ece:	4a88      	ldr	r2, [pc, #544]	; (80010f0 <main+0x2ac>)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sine523[i] = sin(523*i/1024);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f240 220b 	movw	r2, #523	; 0x20b
 8000edc:	fb02 f303 	mul.w	r3, r2, r3
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	da01      	bge.n	8000ee8 <main+0xa4>
 8000ee4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000ee8:	129b      	asrs	r3, r3, #10
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fade 	bl	80004ac <__aeabi_i2d>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	460c      	mov	r4, r1
 8000ef4:	ec44 3b10 	vmov	d0, r3, r4
 8000ef8:	f003 fcae 	bl	8004858 <sin>
 8000efc:	ec54 3b10 	vmov	r3, r4, d0
 8000f00:	4618      	mov	r0, r3
 8000f02:	4621      	mov	r1, r4
 8000f04:	f7ff fdfe 	bl	8000b04 <__aeabi_d2uiz>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	b299      	uxth	r1, r3
 8000f0c:	4a79      	ldr	r2, [pc, #484]	; (80010f4 <main+0x2b0>)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sineSum[i] = 2*sin((523-440)*i/(2*1024))*cos((523-440)*i/(2*1024));
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2253      	movs	r2, #83	; 0x53
 8000f18:	fb02 f303 	mul.w	r3, r2, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	da01      	bge.n	8000f24 <main+0xe0>
 8000f20:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000f24:	12db      	asrs	r3, r3, #11
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fac0 	bl	80004ac <__aeabi_i2d>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	460c      	mov	r4, r1
 8000f30:	ec44 3b10 	vmov	d0, r3, r4
 8000f34:	f003 fc90 	bl	8004858 <sin>
 8000f38:	ec51 0b10 	vmov	r0, r1, d0
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	f7ff f968 	bl	8000214 <__adddf3>
 8000f44:	4603      	mov	r3, r0
 8000f46:	460c      	mov	r4, r1
 8000f48:	4625      	mov	r5, r4
 8000f4a:	461c      	mov	r4, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2253      	movs	r2, #83	; 0x53
 8000f50:	fb02 f303 	mul.w	r3, r2, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	da01      	bge.n	8000f5c <main+0x118>
 8000f58:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000f5c:	12db      	asrs	r3, r3, #11
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff faa4 	bl	80004ac <__aeabi_i2d>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	ec43 2b10 	vmov	d0, r2, r3
 8000f6c:	f003 fc30 	bl	80047d0 <cos>
 8000f70:	ec53 2b10 	vmov	r2, r3, d0
 8000f74:	4620      	mov	r0, r4
 8000f76:	4629      	mov	r1, r5
 8000f78:	f7ff fb02 	bl	8000580 <__aeabi_dmul>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	460c      	mov	r4, r1
 8000f80:	4618      	mov	r0, r3
 8000f82:	4621      	mov	r1, r4
 8000f84:	f7ff fdbe 	bl	8000b04 <__aeabi_d2uiz>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	b299      	uxth	r1, r3
 8000f8c:	4a5a      	ldr	r2, [pc, #360]	; (80010f8 <main+0x2b4>)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=0;i<1024;i++)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3301      	adds	r3, #1
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fa0:	f6ff af7a 	blt.w	8000e98 <main+0x54>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa4:	f000 fe08 	bl	8001bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa8:	f000 fa6a 	bl	8001480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fac:	f000 fb80 	bl	80016b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb0:	f000 fb5e 	bl	8001670 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fb4:	f000 fb32 	bl	800161c <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000fb8:	f000 fad0 	bl	800155c <MX_DAC_Init>
  MX_TIM6_Init();
 8000fbc:	f000 faf8 	bl	80015b0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  uint8_t msg[10] = {127, 128, '2','1','7','8','5','1','5','5'};
 8000fc0:	4a4e      	ldr	r2, [pc, #312]	; (80010fc <main+0x2b8>)
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fc6:	c303      	stmia	r3!, {r0, r1}
 8000fc8:	801a      	strh	r2, [r3, #0]
   HAL_UART_Transmit(&huart2, msg, sizeof(msg), 1000);
 8000fca:	4639      	mov	r1, r7
 8000fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd0:	220a      	movs	r2, #10
 8000fd2:	484b      	ldr	r0, [pc, #300]	; (8001100 <main+0x2bc>)
 8000fd4:	f002 ff6f 	bl	8003eb6 <HAL_UART_Transmit>

   HAL_TIM_Base_Start(&htim6);
 8000fd8:	484a      	ldr	r0, [pc, #296]	; (8001104 <main+0x2c0>)
 8000fda:	f002 fc90 	bl	80038fe <HAL_TIM_Base_Start>
   HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4849      	ldr	r0, [pc, #292]	; (8001108 <main+0x2c4>)
 8000fe2:	f000 ff8e 	bl	8001f02 <HAL_DAC_Start>
   HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)sine440, 32, DAC_ALIGN_12B_R);
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2320      	movs	r3, #32
 8000fec:	4a40      	ldr	r2, [pc, #256]	; (80010f0 <main+0x2ac>)
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4845      	ldr	r0, [pc, #276]	; (8001108 <main+0x2c4>)
 8000ff2:	f000 ffed 	bl	8001fd0 <HAL_DAC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /////////////////////////////////////////////////////////////////////
	  if (exti){
 8000ff6:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <main+0x284>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 8097 	beq.w	800112e <main+0x2ea>

		  if (!Start) Ri = HAL_GetTick();
 8001000:	4b30      	ldr	r3, [pc, #192]	; (80010c4 <main+0x280>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d105      	bne.n	8001014 <main+0x1d0>
 8001008:	f000 fe3c 	bl	8001c84 <HAL_GetTick>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b3e      	ldr	r3, [pc, #248]	; (800110c <main+0x2c8>)
 8001012:	601a      	str	r2, [r3, #0]
		  Start = on;
 8001014:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <main+0x280>)
 8001016:	2201      	movs	r2, #1
 8001018:	601a      	str	r2, [r3, #0]
		  Rf = HAL_GetTick();
 800101a:	f000 fe33 	bl	8001c84 <HAL_GetTick>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <main+0x2cc>)
 8001024:	601a      	str	r2, [r3, #0]

		  	if (Rf - Ri > 20){
 8001026:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <main+0x2cc>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	4b38      	ldr	r3, [pc, #224]	; (800110c <main+0x2c8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b14      	cmp	r3, #20
 8001032:	dd7c      	ble.n	800112e <main+0x2ea>
		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) buttOne = on;
 8001034:	2140      	movs	r1, #64	; 0x40
 8001036:	4837      	ldr	r0, [pc, #220]	; (8001114 <main+0x2d0>)
 8001038:	f001 fecc 	bl	8002dd4 <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <main+0x206>
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <main+0x298>)
 8001044:	2201      	movs	r2, #1
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	e002      	b.n	8001050 <main+0x20c>
		  		else buttOne = off;
 800104a:	4b24      	ldr	r3, [pc, #144]	; (80010dc <main+0x298>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]

			  	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) {buttTwo = on;}
 8001050:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001054:	482f      	ldr	r0, [pc, #188]	; (8001114 <main+0x2d0>)
 8001056:	f001 febd 	bl	8002dd4 <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <main+0x224>
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <main+0x29c>)
 8001062:	2201      	movs	r2, #1
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e002      	b.n	800106e <main+0x22a>
			  	else {buttTwo = off;}
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <main+0x29c>)
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)) buttThree = on;
 800106e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001072:	4828      	ldr	r0, [pc, #160]	; (8001114 <main+0x2d0>)
 8001074:	f001 feae 	bl	8002dd4 <HAL_GPIO_ReadPin>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <main+0x242>
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <main+0x2a0>)
 8001080:	2201      	movs	r2, #1
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	e002      	b.n	800108c <main+0x248>
		  		else buttThree = off;
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <main+0x2a0>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) buttRec = on;
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	4821      	ldr	r0, [pc, #132]	; (8001114 <main+0x2d0>)
 8001090:	f001 fea0 	bl	8002dd4 <HAL_GPIO_ReadPin>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <main+0x25e>
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <main+0x2a4>)
 800109c:	2201      	movs	r2, #1
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e002      	b.n	80010a8 <main+0x264>
		  		else {buttRec = off;}
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <main+0x2a4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) buttStop = on;
 80010a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ac:	481a      	ldr	r0, [pc, #104]	; (8001118 <main+0x2d4>)
 80010ae:	f001 fe91 	bl	8002dd4 <HAL_GPIO_ReadPin>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d031      	beq.n	800111c <main+0x2d8>
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <main+0x2a8>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	e030      	b.n	8001122 <main+0x2de>
 80010c0:	20000848 	.word	0x20000848
 80010c4:	20001950 	.word	0x20001950
 80010c8:	200008ac 	.word	0x200008ac
 80010cc:	2000003c 	.word	0x2000003c
 80010d0:	2000194c 	.word	0x2000194c
 80010d4:	20000840 	.word	0x20000840
 80010d8:	20000038 	.word	0x20000038
 80010dc:	20000034 	.word	0x20000034
 80010e0:	20000028 	.word	0x20000028
 80010e4:	200008b0 	.word	0x200008b0
 80010e8:	20001954 	.word	0x20001954
 80010ec:	20000844 	.word	0x20000844
 80010f0:	20000040 	.word	0x20000040
 80010f4:	200008b4 	.word	0x200008b4
 80010f8:	200010c8 	.word	0x200010c8
 80010fc:	08005898 	.word	0x08005898
 8001100:	2000190c 	.word	0x2000190c
 8001104:	200018c8 	.word	0x200018c8
 8001108:	200010b4 	.word	0x200010b4
 800110c:	20001908 	.word	0x20001908
 8001110:	20000030 	.word	0x20000030
 8001114:	40020000 	.word	0x40020000
 8001118:	40020400 	.word	0x40020400
		  		else buttStop = off;
 800111c:	4baf      	ldr	r3, [pc, #700]	; (80013dc <main+0x598>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]

		  		Start = off;
 8001122:	4baf      	ldr	r3, [pc, #700]	; (80013e0 <main+0x59c>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
		  		exti = off;
 8001128:	4bae      	ldr	r3, [pc, #696]	; (80013e4 <main+0x5a0>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
		  	}
	  }
	  /////////////////////////////////////////////////////////////////////

	  if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))){
 800112e:	2140      	movs	r1, #64	; 0x40
 8001130:	48ad      	ldr	r0, [pc, #692]	; (80013e8 <main+0x5a4>)
 8001132:	f001 fe4f 	bl	8002dd4 <HAL_GPIO_ReadPin>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d160      	bne.n	80011fe <main+0x3ba>
 800113c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001140:	48a9      	ldr	r0, [pc, #676]	; (80013e8 <main+0x5a4>)
 8001142:	f001 fe47 	bl	8002dd4 <HAL_GPIO_ReadPin>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d158      	bne.n	80011fe <main+0x3ba>
 800114c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001150:	48a5      	ldr	r0, [pc, #660]	; (80013e8 <main+0x5a4>)
 8001152:	f001 fe3f 	bl	8002dd4 <HAL_GPIO_ReadPin>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d150      	bne.n	80011fe <main+0x3ba>
 800115c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001160:	48a2      	ldr	r0, [pc, #648]	; (80013ec <main+0x5a8>)
 8001162:	f001 fe37 	bl	8002dd4 <HAL_GPIO_ReadPin>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d148      	bne.n	80011fe <main+0x3ba>

		  if (!buttRec && buttOne) state = PlayOne; //maybe rather do this in the if(exti){} to reduce redundancy
 800116c:	4ba0      	ldr	r3, [pc, #640]	; (80013f0 <main+0x5ac>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d106      	bne.n	8001182 <main+0x33e>
 8001174:	4b9f      	ldr	r3, [pc, #636]	; (80013f4 <main+0x5b0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <main+0x33e>
 800117c:	4b9e      	ldr	r3, [pc, #632]	; (80013f8 <main+0x5b4>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
		  if (!buttRec && buttTwo) state = PlayTwo;
 8001182:	4b9b      	ldr	r3, [pc, #620]	; (80013f0 <main+0x5ac>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d106      	bne.n	8001198 <main+0x354>
 800118a:	4b9c      	ldr	r3, [pc, #624]	; (80013fc <main+0x5b8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <main+0x354>
 8001192:	4b99      	ldr	r3, [pc, #612]	; (80013f8 <main+0x5b4>)
 8001194:	2202      	movs	r2, #2
 8001196:	701a      	strb	r2, [r3, #0]
		  if (!buttRec && buttThree) state = PlayThree;
 8001198:	4b95      	ldr	r3, [pc, #596]	; (80013f0 <main+0x5ac>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d106      	bne.n	80011ae <main+0x36a>
 80011a0:	4b97      	ldr	r3, [pc, #604]	; (8001400 <main+0x5bc>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <main+0x36a>
 80011a8:	4b93      	ldr	r3, [pc, #588]	; (80013f8 <main+0x5b4>)
 80011aa:	2203      	movs	r2, #3
 80011ac:	701a      	strb	r2, [r3, #0]

		  if (buttRec && buttOne) state = RecOne;
 80011ae:	4b90      	ldr	r3, [pc, #576]	; (80013f0 <main+0x5ac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d006      	beq.n	80011c4 <main+0x380>
 80011b6:	4b8f      	ldr	r3, [pc, #572]	; (80013f4 <main+0x5b0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <main+0x380>
 80011be:	4b8e      	ldr	r3, [pc, #568]	; (80013f8 <main+0x5b4>)
 80011c0:	2204      	movs	r2, #4
 80011c2:	701a      	strb	r2, [r3, #0]
		  if (buttRec && buttTwo) state = RecTwo;
 80011c4:	4b8a      	ldr	r3, [pc, #552]	; (80013f0 <main+0x5ac>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d006      	beq.n	80011da <main+0x396>
 80011cc:	4b8b      	ldr	r3, [pc, #556]	; (80013fc <main+0x5b8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <main+0x396>
 80011d4:	4b88      	ldr	r3, [pc, #544]	; (80013f8 <main+0x5b4>)
 80011d6:	2205      	movs	r2, #5
 80011d8:	701a      	strb	r2, [r3, #0]
		  if (buttRec && buttThree) state = RecThree;
 80011da:	4b85      	ldr	r3, [pc, #532]	; (80013f0 <main+0x5ac>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d006      	beq.n	80011f0 <main+0x3ac>
 80011e2:	4b87      	ldr	r3, [pc, #540]	; (8001400 <main+0x5bc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <main+0x3ac>
 80011ea:	4b83      	ldr	r3, [pc, #524]	; (80013f8 <main+0x5b4>)
 80011ec:	2206      	movs	r2, #6
 80011ee:	701a      	strb	r2, [r3, #0]

		  if (buttStop) state = Idle;
 80011f0:	4b7a      	ldr	r3, [pc, #488]	; (80013dc <main+0x598>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <main+0x3ba>
 80011f8:	4b7f      	ldr	r3, [pc, #508]	; (80013f8 <main+0x5b4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
	  }

	  ticky = HAL_GetTick();
 80011fe:	f000 fd41 	bl	8001c84 <HAL_GetTick>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	4b7f      	ldr	r3, [pc, #508]	; (8001404 <main+0x5c0>)
 8001208:	601a      	str	r2, [r3, #0]
	  ///////////////////////////////////////////////////////////////////////////////////
	  if (state == PlayOne || state == PlayTwo || state == PlayThree || state == Idle){
 800120a:	4b7b      	ldr	r3, [pc, #492]	; (80013f8 <main+0x5b4>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b01      	cmp	r3, #1
 8001212:	d00e      	beq.n	8001232 <main+0x3ee>
 8001214:	4b78      	ldr	r3, [pc, #480]	; (80013f8 <main+0x5b4>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d009      	beq.n	8001232 <main+0x3ee>
 800121e:	4b76      	ldr	r3, [pc, #472]	; (80013f8 <main+0x5b4>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b03      	cmp	r3, #3
 8001226:	d004      	beq.n	8001232 <main+0x3ee>
 8001228:	4b73      	ldr	r3, [pc, #460]	; (80013f8 <main+0x5b4>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d174      	bne.n	800131c <main+0x4d8>
	  	  if (state == PlayOne){
 8001232:	4b71      	ldr	r3, [pc, #452]	; (80013f8 <main+0x5b4>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d11c      	bne.n	8001276 <main+0x432>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, on);
 800123c:	4b71      	ldr	r3, [pc, #452]	; (8001404 <main+0x5c0>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b71      	ldr	r3, [pc, #452]	; (8001408 <main+0x5c4>)
 8001242:	fb83 1302 	smull	r1, r3, r3, r2
 8001246:	1159      	asrs	r1, r3, #5
 8001248:	17d3      	asrs	r3, r2, #31
 800124a:	1acb      	subs	r3, r1, r3
 800124c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001250:	fb01 f303 	mul.w	r3, r1, r3
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2bf9      	cmp	r3, #249	; 0xf9
 8001258:	dc06      	bgt.n	8001268 <main+0x424>
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001260:	4861      	ldr	r0, [pc, #388]	; (80013e8 <main+0x5a4>)
 8001262:	f001 fdcf 	bl	8002e04 <HAL_GPIO_WritePin>
 8001266:	e00c      	b.n	8001282 <main+0x43e>
	  		  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126e:	485e      	ldr	r0, [pc, #376]	; (80013e8 <main+0x5a4>)
 8001270:	f001 fdc8 	bl	8002e04 <HAL_GPIO_WritePin>
 8001274:	e005      	b.n	8001282 <main+0x43e>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127c:	485a      	ldr	r0, [pc, #360]	; (80013e8 <main+0x5a4>)
 800127e:	f001 fdc1 	bl	8002e04 <HAL_GPIO_WritePin>

	  	  if (state == PlayTwo){
 8001282:	4b5d      	ldr	r3, [pc, #372]	; (80013f8 <main+0x5b4>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d11c      	bne.n	80012c6 <main+0x482>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, on);
 800128c:	4b5d      	ldr	r3, [pc, #372]	; (8001404 <main+0x5c0>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b5d      	ldr	r3, [pc, #372]	; (8001408 <main+0x5c4>)
 8001292:	fb83 1302 	smull	r1, r3, r3, r2
 8001296:	1159      	asrs	r1, r3, #5
 8001298:	17d3      	asrs	r3, r2, #31
 800129a:	1acb      	subs	r3, r1, r3
 800129c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80012a0:	fb01 f303 	mul.w	r3, r1, r3
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2bf9      	cmp	r3, #249	; 0xf9
 80012a8:	dc06      	bgt.n	80012b8 <main+0x474>
 80012aa:	2201      	movs	r2, #1
 80012ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b0:	484e      	ldr	r0, [pc, #312]	; (80013ec <main+0x5a8>)
 80012b2:	f001 fda7 	bl	8002e04 <HAL_GPIO_WritePin>
 80012b6:	e00c      	b.n	80012d2 <main+0x48e>
	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012be:	484b      	ldr	r0, [pc, #300]	; (80013ec <main+0x5a8>)
 80012c0:	f001 fda0 	bl	8002e04 <HAL_GPIO_WritePin>
 80012c4:	e005      	b.n	80012d2 <main+0x48e>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012cc:	4847      	ldr	r0, [pc, #284]	; (80013ec <main+0x5a8>)
 80012ce:	f001 fd99 	bl	8002e04 <HAL_GPIO_WritePin>

	  	  if (state == PlayThree){
 80012d2:	4b49      	ldr	r3, [pc, #292]	; (80013f8 <main+0x5b4>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d11a      	bne.n	8001312 <main+0x4ce>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, on);
 80012dc:	4b49      	ldr	r3, [pc, #292]	; (8001404 <main+0x5c0>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b49      	ldr	r3, [pc, #292]	; (8001408 <main+0x5c4>)
 80012e2:	fb83 1302 	smull	r1, r3, r3, r2
 80012e6:	1159      	asrs	r1, r3, #5
 80012e8:	17d3      	asrs	r3, r2, #31
 80012ea:	1acb      	subs	r3, r1, r3
 80012ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80012f0:	fb01 f303 	mul.w	r3, r1, r3
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2bf9      	cmp	r3, #249	; 0xf9
 80012f8:	dc05      	bgt.n	8001306 <main+0x4c2>
 80012fa:	2201      	movs	r2, #1
 80012fc:	2110      	movs	r1, #16
 80012fe:	483b      	ldr	r0, [pc, #236]	; (80013ec <main+0x5a8>)
 8001300:	f001 fd80 	bl	8002e04 <HAL_GPIO_WritePin>
 8001304:	e00a      	b.n	800131c <main+0x4d8>
	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8001306:	2200      	movs	r2, #0
 8001308:	2110      	movs	r1, #16
 800130a:	4838      	ldr	r0, [pc, #224]	; (80013ec <main+0x5a8>)
 800130c:	f001 fd7a 	bl	8002e04 <HAL_GPIO_WritePin>
 8001310:	e004      	b.n	800131c <main+0x4d8>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8001312:	2200      	movs	r2, #0
 8001314:	2110      	movs	r1, #16
 8001316:	4835      	ldr	r0, [pc, #212]	; (80013ec <main+0x5a8>)
 8001318:	f001 fd74 	bl	8002e04 <HAL_GPIO_WritePin>
	  }
	  ///////////////////////////////////////////////////////////////////////////////////
  	  if (state == RecOne || state == RecTwo || state == RecThree){
 800131c:	4b36      	ldr	r3, [pc, #216]	; (80013f8 <main+0x5b4>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b04      	cmp	r3, #4
 8001324:	d00a      	beq.n	800133c <main+0x4f8>
 8001326:	4b34      	ldr	r3, [pc, #208]	; (80013f8 <main+0x5b4>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b05      	cmp	r3, #5
 800132e:	d005      	beq.n	800133c <main+0x4f8>
 8001330:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <main+0x5b4>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b06      	cmp	r3, #6
 8001338:	f040 8094 	bne.w	8001464 <main+0x620>
  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, on);
 800133c:	2201      	movs	r2, #1
 800133e:	2120      	movs	r1, #32
 8001340:	482a      	ldr	r0, [pc, #168]	; (80013ec <main+0x5a8>)
 8001342:	f001 fd5f 	bl	8002e04 <HAL_GPIO_WritePin>

  	  	  if (state == RecOne){
 8001346:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <main+0x5b4>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b04      	cmp	r3, #4
 800134e:	d11c      	bne.n	800138a <main+0x546>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, on);
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <main+0x5c0>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b2c      	ldr	r3, [pc, #176]	; (8001408 <main+0x5c4>)
 8001356:	fb83 1302 	smull	r1, r3, r3, r2
 800135a:	1159      	asrs	r1, r3, #5
 800135c:	17d3      	asrs	r3, r2, #31
 800135e:	1acb      	subs	r3, r1, r3
 8001360:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001364:	fb01 f303 	mul.w	r3, r1, r3
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2bf9      	cmp	r3, #249	; 0xf9
 800136c:	dc06      	bgt.n	800137c <main+0x538>
 800136e:	2201      	movs	r2, #1
 8001370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001374:	481c      	ldr	r0, [pc, #112]	; (80013e8 <main+0x5a4>)
 8001376:	f001 fd45 	bl	8002e04 <HAL_GPIO_WritePin>
 800137a:	e00c      	b.n	8001396 <main+0x552>
  	  		  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 800137c:	2200      	movs	r2, #0
 800137e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001382:	4819      	ldr	r0, [pc, #100]	; (80013e8 <main+0x5a4>)
 8001384:	f001 fd3e 	bl	8002e04 <HAL_GPIO_WritePin>
 8001388:	e005      	b.n	8001396 <main+0x552>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001390:	4815      	ldr	r0, [pc, #84]	; (80013e8 <main+0x5a4>)
 8001392:	f001 fd37 	bl	8002e04 <HAL_GPIO_WritePin>

  	  	  if (state == RecTwo){
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <main+0x5b4>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b05      	cmp	r3, #5
 800139e:	d135      	bne.n	800140c <main+0x5c8>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, on);
 80013a0:	4b18      	ldr	r3, [pc, #96]	; (8001404 <main+0x5c0>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <main+0x5c4>)
 80013a6:	fb83 1302 	smull	r1, r3, r3, r2
 80013aa:	1159      	asrs	r1, r3, #5
 80013ac:	17d3      	asrs	r3, r2, #31
 80013ae:	1acb      	subs	r3, r1, r3
 80013b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80013b4:	fb01 f303 	mul.w	r3, r1, r3
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2bf9      	cmp	r3, #249	; 0xf9
 80013bc:	dc06      	bgt.n	80013cc <main+0x588>
 80013be:	2201      	movs	r2, #1
 80013c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c4:	4809      	ldr	r0, [pc, #36]	; (80013ec <main+0x5a8>)
 80013c6:	f001 fd1d 	bl	8002e04 <HAL_GPIO_WritePin>
 80013ca:	e025      	b.n	8001418 <main+0x5d4>
  	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <main+0x5a8>)
 80013d4:	f001 fd16 	bl	8002e04 <HAL_GPIO_WritePin>
 80013d8:	e01e      	b.n	8001418 <main+0x5d4>
 80013da:	bf00      	nop
 80013dc:	20000844 	.word	0x20000844
 80013e0:	20001950 	.word	0x20001950
 80013e4:	200008ac 	.word	0x200008ac
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	20001954 	.word	0x20001954
 80013f4:	20000034 	.word	0x20000034
 80013f8:	20000848 	.word	0x20000848
 80013fc:	20000028 	.word	0x20000028
 8001400:	200008b0 	.word	0x200008b0
 8001404:	2000002c 	.word	0x2000002c
 8001408:	10624dd3 	.word	0x10624dd3
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001412:	4817      	ldr	r0, [pc, #92]	; (8001470 <main+0x62c>)
 8001414:	f001 fcf6 	bl	8002e04 <HAL_GPIO_WritePin>

  	  	  if (state == RecThree){
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <main+0x630>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b06      	cmp	r3, #6
 8001420:	d11a      	bne.n	8001458 <main+0x614>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, on);
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <main+0x634>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <main+0x638>)
 8001428:	fb83 1302 	smull	r1, r3, r3, r2
 800142c:	1159      	asrs	r1, r3, #5
 800142e:	17d3      	asrs	r3, r2, #31
 8001430:	1acb      	subs	r3, r1, r3
 8001432:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001436:	fb01 f303 	mul.w	r3, r1, r3
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2bf9      	cmp	r3, #249	; 0xf9
 800143e:	dc05      	bgt.n	800144c <main+0x608>
 8001440:	2201      	movs	r2, #1
 8001442:	2110      	movs	r1, #16
 8001444:	480a      	ldr	r0, [pc, #40]	; (8001470 <main+0x62c>)
 8001446:	f001 fcdd 	bl	8002e04 <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 800144a:	e010      	b.n	800146e <main+0x62a>
  	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 800144c:	2200      	movs	r2, #0
 800144e:	2110      	movs	r1, #16
 8001450:	4807      	ldr	r0, [pc, #28]	; (8001470 <main+0x62c>)
 8001452:	f001 fcd7 	bl	8002e04 <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8001456:	e00a      	b.n	800146e <main+0x62a>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8001458:	2200      	movs	r2, #0
 800145a:	2110      	movs	r1, #16
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <main+0x62c>)
 800145e:	f001 fcd1 	bl	8002e04 <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8001462:	e004      	b.n	800146e <main+0x62a>
  	  }
  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, off);
 8001464:	2200      	movs	r2, #0
 8001466:	2120      	movs	r1, #32
 8001468:	4801      	ldr	r0, [pc, #4]	; (8001470 <main+0x62c>)
 800146a:	f001 fccb 	bl	8002e04 <HAL_GPIO_WritePin>
	  if (exti){
 800146e:	e5c2      	b.n	8000ff6 <main+0x1b2>
 8001470:	40020400 	.word	0x40020400
 8001474:	20000848 	.word	0x20000848
 8001478:	2000002c 	.word	0x2000002c
 800147c:	10624dd3 	.word	0x10624dd3

08001480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b094      	sub	sp, #80	; 0x50
 8001484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	2234      	movs	r2, #52	; 0x34
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f003 f994 	bl	80047bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <SystemClock_Config+0xd4>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	4a29      	ldr	r2, [pc, #164]	; (8001554 <SystemClock_Config+0xd4>)
 80014ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b2:	6413      	str	r3, [r2, #64]	; 0x40
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <SystemClock_Config+0xd4>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014c0:	2300      	movs	r3, #0
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	4b24      	ldr	r3, [pc, #144]	; (8001558 <SystemClock_Config+0xd8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014cc:	4a22      	ldr	r2, [pc, #136]	; (8001558 <SystemClock_Config+0xd8>)
 80014ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <SystemClock_Config+0xd8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014e0:	2302      	movs	r3, #2
 80014e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e4:	2301      	movs	r3, #1
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e8:	2310      	movs	r3, #16
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ec:	2302      	movs	r3, #2
 80014ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014f0:	2300      	movs	r3, #0
 80014f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014f4:	2310      	movs	r3, #16
 80014f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014fe:	2304      	movs	r3, #4
 8001500:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001502:	2302      	movs	r3, #2
 8001504:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001506:	2302      	movs	r3, #2
 8001508:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	4618      	mov	r0, r3
 8001510:	f001 ff70 	bl	80033f4 <HAL_RCC_OscConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800151a:	f000 f97d 	bl	8001818 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151e:	230f      	movs	r3, #15
 8001520:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001522:	2302      	movs	r3, #2
 8001524:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800152a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	2102      	movs	r1, #2
 800153a:	4618      	mov	r0, r3
 800153c:	f001 fca0 	bl	8002e80 <HAL_RCC_ClockConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001546:	f000 f967 	bl	8001818 <Error_Handler>
  }
}
 800154a:	bf00      	nop
 800154c:	3750      	adds	r7, #80	; 0x50
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40007000 	.word	0x40007000

0800155c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001562:	463b      	mov	r3, r7
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_DAC_Init+0x4c>)
 800156c:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <MX_DAC_Init+0x50>)
 800156e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001570:	480d      	ldr	r0, [pc, #52]	; (80015a8 <MX_DAC_Init+0x4c>)
 8001572:	f000 fca4 	bl	8001ebe <HAL_DAC_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800157c:	f000 f94c 	bl	8001818 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001580:	2304      	movs	r3, #4
 8001582:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	; (80015a8 <MX_DAC_Init+0x4c>)
 8001590:	f000 fe3e 	bl	8002210 <HAL_DAC_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800159a:	f000 f93d 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200010b4 	.word	0x200010b4
 80015ac:	40007400 	.word	0x40007400

080015b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b6:	463b      	mov	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <MX_TIM6_Init+0x64>)
 80015c0:	4a15      	ldr	r2, [pc, #84]	; (8001618 <MX_TIM6_Init+0x68>)
 80015c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1905;
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_TIM6_Init+0x64>)
 80015c6:	f240 7271 	movw	r2, #1905	; 0x771
 80015ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_TIM6_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <MX_TIM6_Init+0x64>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_TIM6_Init+0x64>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_TIM6_Init+0x64>)
 80015e0:	f002 f962 	bl	80038a8 <HAL_TIM_Base_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80015ea:	f000 f915 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015f6:	463b      	mov	r3, r7
 80015f8:	4619      	mov	r1, r3
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <MX_TIM6_Init+0x64>)
 80015fc:	f002 fb7e 	bl	8003cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001606:	f000 f907 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200018c8 	.word	0x200018c8
 8001618:	40001000 	.word	0x40001000

0800161c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001620:	4b10      	ldr	r3, [pc, #64]	; (8001664 <MX_USART2_UART_Init+0x48>)
 8001622:	4a11      	ldr	r2, [pc, #68]	; (8001668 <MX_USART2_UART_Init+0x4c>)
 8001624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_USART2_UART_Init+0x48>)
 8001628:	4a10      	ldr	r2, [pc, #64]	; (800166c <MX_USART2_UART_Init+0x50>)
 800162a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162c:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <MX_USART2_UART_Init+0x48>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_USART2_UART_Init+0x48>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <MX_USART2_UART_Init+0x48>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_USART2_UART_Init+0x48>)
 8001640:	220c      	movs	r2, #12
 8001642:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <MX_USART2_UART_Init+0x48>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_USART2_UART_Init+0x48>)
 800164c:	2200      	movs	r2, #0
 800164e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <MX_USART2_UART_Init+0x48>)
 8001652:	f002 fbe3 	bl	8003e1c <HAL_UART_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 800165c:	f000 f8dc 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2000190c 	.word	0x2000190c
 8001668:	40004400 	.word	0x40004400
 800166c:	0007a120 	.word	0x0007a120

08001670 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_DMA_Init+0x3c>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <MX_DMA_Init+0x3c>)
 8001680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_DMA_Init+0x3c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	2010      	movs	r0, #16
 8001698:	f000 fbdb 	bl	8001e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800169c:	2010      	movs	r0, #16
 800169e:	f000 fbf4 	bl	8001e8a <HAL_NVIC_EnableIRQ>

}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800

080016b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b4d      	ldr	r3, [pc, #308]	; (8001800 <MX_GPIO_Init+0x150>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a4c      	ldr	r2, [pc, #304]	; (8001800 <MX_GPIO_Init+0x150>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b4a      	ldr	r3, [pc, #296]	; (8001800 <MX_GPIO_Init+0x150>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b46      	ldr	r3, [pc, #280]	; (8001800 <MX_GPIO_Init+0x150>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a45      	ldr	r2, [pc, #276]	; (8001800 <MX_GPIO_Init+0x150>)
 80016ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b43      	ldr	r3, [pc, #268]	; (8001800 <MX_GPIO_Init+0x150>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <MX_GPIO_Init+0x150>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a3e      	ldr	r2, [pc, #248]	; (8001800 <MX_GPIO_Init+0x150>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b3c      	ldr	r3, [pc, #240]	; (8001800 <MX_GPIO_Init+0x150>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	4b38      	ldr	r3, [pc, #224]	; (8001800 <MX_GPIO_Init+0x150>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a37      	ldr	r2, [pc, #220]	; (8001800 <MX_GPIO_Init+0x150>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b35      	ldr	r3, [pc, #212]	; (8001800 <MX_GPIO_Init+0x150>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 7190 	mov.w	r1, #288	; 0x120
 800173c:	4831      	ldr	r0, [pc, #196]	; (8001804 <MX_GPIO_Init+0x154>)
 800173e:	f001 fb61 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001748:	482f      	ldr	r0, [pc, #188]	; (8001808 <MX_GPIO_Init+0x158>)
 800174a:	f001 fb5b 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800174e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001754:	4b2d      	ldr	r3, [pc, #180]	; (800180c <MX_GPIO_Init+0x15c>)
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	482b      	ldr	r0, [pc, #172]	; (8001810 <MX_GPIO_Init+0x160>)
 8001764:	f001 f9a4 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8001768:	f44f 7390 	mov.w	r3, #288	; 0x120
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	4820      	ldr	r0, [pc, #128]	; (8001804 <MX_GPIO_Init+0x154>)
 8001782:	f001 f995 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 8001786:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <MX_GPIO_Init+0x164>)
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001790:	2302      	movs	r3, #2
 8001792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	481a      	ldr	r0, [pc, #104]	; (8001804 <MX_GPIO_Init+0x154>)
 800179c:	f001 f988 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80017a0:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	4813      	ldr	r0, [pc, #76]	; (8001808 <MX_GPIO_Init+0x158>)
 80017ba:	f001 f979 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <MX_GPIO_Init+0x164>)
 80017c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	480d      	ldr	r0, [pc, #52]	; (8001808 <MX_GPIO_Init+0x158>)
 80017d4:	f001 f96c 	bl	8002ab0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2017      	movs	r0, #23
 80017de:	f000 fb38 	bl	8001e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017e2:	2017      	movs	r0, #23
 80017e4:	f000 fb51 	bl	8001e8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2100      	movs	r1, #0
 80017ec:	2028      	movs	r0, #40	; 0x28
 80017ee:	f000 fb30 	bl	8001e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017f2:	2028      	movs	r0, #40	; 0x28
 80017f4:	f000 fb49 	bl	8001e8a <HAL_NVIC_EnableIRQ>

}
 80017f8:	bf00      	nop
 80017fa:	3728      	adds	r7, #40	; 0x28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40023800 	.word	0x40023800
 8001804:	40020000 	.word	0x40020000
 8001808:	40020400 	.word	0x40020400
 800180c:	10210000 	.word	0x10210000
 8001810:	40020800 	.word	0x40020800
 8001814:	10110000 	.word	0x10110000

08001818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <HAL_MspInit+0x4c>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <HAL_MspInit+0x4c>)
 8001838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
 800183e:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <HAL_MspInit+0x4c>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_MspInit+0x4c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	4a08      	ldr	r2, [pc, #32]	; (8001874 <HAL_MspInit+0x4c>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_MspInit+0x4c>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001866:	2007      	movs	r0, #7
 8001868:	f000 fae8 	bl	8001e3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800

08001878 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a33      	ldr	r2, [pc, #204]	; (8001964 <HAL_DAC_MspInit+0xec>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d160      	bne.n	800195c <HAL_DAC_MspInit+0xe4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b32      	ldr	r3, [pc, #200]	; (8001968 <HAL_DAC_MspInit+0xf0>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a31      	ldr	r2, [pc, #196]	; (8001968 <HAL_DAC_MspInit+0xf0>)
 80018a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <HAL_DAC_MspInit+0xf0>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <HAL_DAC_MspInit+0xf0>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a2a      	ldr	r2, [pc, #168]	; (8001968 <HAL_DAC_MspInit+0xf0>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b28      	ldr	r3, [pc, #160]	; (8001968 <HAL_DAC_MspInit+0xf0>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018d2:	2310      	movs	r3, #16
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d6:	2303      	movs	r3, #3
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4821      	ldr	r0, [pc, #132]	; (800196c <HAL_DAC_MspInit+0xf4>)
 80018e6:	f001 f8e3 	bl	8002ab0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_DAC_MspInit+0xf8>)
 80018ec:	4a21      	ldr	r2, [pc, #132]	; (8001974 <HAL_DAC_MspInit+0xfc>)
 80018ee:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80018f0:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <HAL_DAC_MspInit+0xf8>)
 80018f2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80018f6:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <HAL_DAC_MspInit+0xf8>)
 80018fa:	2240      	movs	r2, #64	; 0x40
 80018fc:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fe:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_DAC_MspInit+0xf8>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <HAL_DAC_MspInit+0xf8>)
 8001906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800190a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <HAL_DAC_MspInit+0xf8>)
 800190e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001912:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_DAC_MspInit+0xf8>)
 8001916:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800191a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <HAL_DAC_MspInit+0xf8>)
 800191e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001922:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_DAC_MspInit+0xf8>)
 8001926:	2200      	movs	r2, #0
 8001928:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_DAC_MspInit+0xf8>)
 800192c:	2200      	movs	r2, #0
 800192e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001930:	480f      	ldr	r0, [pc, #60]	; (8001970 <HAL_DAC_MspInit+0xf8>)
 8001932:	f000 fd4f 	bl	80023d4 <HAL_DMA_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 800193c:	f7ff ff6c 	bl	8001818 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <HAL_DAC_MspInit+0xf8>)
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <HAL_DAC_MspInit+0xf8>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2100      	movs	r1, #0
 8001950:	2036      	movs	r0, #54	; 0x36
 8001952:	f000 fa7e 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001956:	2036      	movs	r0, #54	; 0x36
 8001958:	f000 fa97 	bl	8001e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800195c:	bf00      	nop
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40007400 	.word	0x40007400
 8001968:	40023800 	.word	0x40023800
 800196c:	40020000 	.word	0x40020000
 8001970:	2000084c 	.word	0x2000084c
 8001974:	40026088 	.word	0x40026088

08001978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <HAL_TIM_Base_MspInit+0x48>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d115      	bne.n	80019b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_TIM_Base_MspInit+0x4c>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a0c      	ldr	r2, [pc, #48]	; (80019c4 <HAL_TIM_Base_MspInit+0x4c>)
 8001994:	f043 0310 	orr.w	r3, r3, #16
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_TIM_Base_MspInit+0x4c>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2036      	movs	r0, #54	; 0x36
 80019ac:	f000 fa51 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019b0:	2036      	movs	r0, #54	; 0x36
 80019b2:	f000 fa6a 	bl	8001e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40001000 	.word	0x40001000
 80019c4:	40023800 	.word	0x40023800

080019c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a19      	ldr	r2, [pc, #100]	; (8001a4c <HAL_UART_MspInit+0x84>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d12b      	bne.n	8001a42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <HAL_UART_MspInit+0x88>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	4a17      	ldr	r2, [pc, #92]	; (8001a50 <HAL_UART_MspInit+0x88>)
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	6413      	str	r3, [r2, #64]	; 0x40
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <HAL_UART_MspInit+0x88>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_UART_MspInit+0x88>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a10      	ldr	r2, [pc, #64]	; (8001a50 <HAL_UART_MspInit+0x88>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_UART_MspInit+0x88>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a22:	230c      	movs	r3, #12
 8001a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a32:	2307      	movs	r3, #7
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4805      	ldr	r0, [pc, #20]	; (8001a54 <HAL_UART_MspInit+0x8c>)
 8001a3e:	f001 f837 	bl	8002ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a42:	bf00      	nop
 8001a44:	3728      	adds	r7, #40	; 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40004400 	.word	0x40004400
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020000 	.word	0x40020000

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <MemManage_Handler+0x4>

08001a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aac:	f000 f8d6 	bl	8001c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <DMA1_Stream5_IRQHandler+0x10>)
 8001aba:	f000 fd91 	bl	80025e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000084c 	.word	0x2000084c

08001ac8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	exti = on;
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <EXTI9_5_IRQHandler+0x2c>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ad2:	2040      	movs	r0, #64	; 0x40
 8001ad4:	f001 f9b0 	bl	8002e38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001ad8:	2080      	movs	r0, #128	; 0x80
 8001ada:	f001 f9ad 	bl	8002e38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001ade:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ae2:	f001 f9a9 	bl	8002e38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001ae6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001aea:	f001 f9a5 	bl	8002e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200008ac 	.word	0x200008ac

08001af8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	exti = on;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <EXTI15_10_IRQHandler+0x20>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001b02:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b06:	f001 f997 	bl	8002e38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b0a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b0e:	f001 f993 	bl	8002e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200008ac 	.word	0x200008ac

08001b1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001b20:	4803      	ldr	r0, [pc, #12]	; (8001b30 <TIM6_DAC_IRQHandler+0x14>)
 8001b22:	f000 fb03 	bl	800212c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001b26:	4803      	ldr	r0, [pc, #12]	; (8001b34 <TIM6_DAC_IRQHandler+0x18>)
 8001b28:	f001 ff0d 	bl	8003946 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	200010b4 	.word	0x200010b4
 8001b34:	200018c8 	.word	0x200018c8

08001b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <SystemInit+0x28>)
 8001b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b42:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <SystemInit+0x28>)
 8001b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <SystemInit+0x28>)
 8001b4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b52:	609a      	str	r2, [r3, #8]
#endif
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b6a:	e003      	b.n	8001b74 <LoopCopyDataInit>

08001b6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b72:	3104      	adds	r1, #4

08001b74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b74:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b7c:	d3f6      	bcc.n	8001b6c <CopyDataInit>
  ldr  r2, =_sbss
 8001b7e:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b80:	e002      	b.n	8001b88 <LoopFillZerobss>

08001b82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b84:	f842 3b04 	str.w	r3, [r2], #4

08001b88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b8c:	d3f9      	bcc.n	8001b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b8e:	f7ff ffd3 	bl	8001b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b92:	f002 fdef 	bl	8004774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b96:	f7ff f955 	bl	8000e44 <main>
  bx  lr    
 8001b9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ba0:	08005ab0 	.word	0x08005ab0
  ldr  r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ba8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001bac:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001bb0:	2000195c 	.word	0x2000195c

08001bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <HAL_Init+0x40>)
 8001bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_Init+0x40>)
 8001bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_Init+0x40>)
 8001bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be0:	2003      	movs	r0, #3
 8001be2:	f000 f92b 	bl	8001e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f000 f808 	bl	8001bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bec:	f7ff fe1c 	bl	8001828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_InitTick+0x54>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_InitTick+0x58>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f943 	bl	8001ea6 <HAL_SYSTICK_Config>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00e      	b.n	8001c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	d80a      	bhi.n	8001c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c30:	2200      	movs	r2, #0
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f000 f90b 	bl	8001e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c3c:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <HAL_InitTick+0x5c>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e000      	b.n	8001c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20000004 	.word	0x20000004

08001c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x24>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_IncTick+0x24>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	20001958 	.word	0x20001958

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20001958 	.word	0x20001958

08001c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cce:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60d3      	str	r3, [r2, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <__NVIC_GetPriorityGrouping+0x18>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	f003 0307 	and.w	r3, r3, #7
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	db0b      	blt.n	8001d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	4907      	ldr	r1, [pc, #28]	; (8001d38 <__NVIC_EnableIRQ+0x38>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	2001      	movs	r0, #1
 8001d22:	fa00 f202 	lsl.w	r2, r0, r2
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100

08001d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	; (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	; (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f1c3 0307 	rsb	r3, r3, #7
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf28      	it	cs
 8001dae:	2304      	movcs	r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d902      	bls.n	8001dc0 <NVIC_EncodePriority+0x30>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	e000      	b.n	8001dc2 <NVIC_EncodePriority+0x32>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	4313      	orrs	r3, r2
         );
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e08:	d301      	bcc.n	8001e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00f      	b.n	8001e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <SysTick_Config+0x40>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e16:	210f      	movs	r1, #15
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f7ff ff8e 	bl	8001d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <SysTick_Config+0x40>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <SysTick_Config+0x40>)
 8001e28:	2207      	movs	r2, #7
 8001e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	e000e010 	.word	0xe000e010

08001e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff29 	bl	8001c9c <__NVIC_SetPriorityGrouping>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e64:	f7ff ff3e 	bl	8001ce4 <__NVIC_GetPriorityGrouping>
 8001e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	6978      	ldr	r0, [r7, #20]
 8001e70:	f7ff ff8e 	bl	8001d90 <NVIC_EncodePriority>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff5d 	bl	8001d3c <__NVIC_SetPriority>
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff31 	bl	8001d00 <__NVIC_EnableIRQ>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ffa2 	bl	8001df8 <SysTick_Config>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e014      	b.n	8001efa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	791b      	ldrb	r3, [r3, #4]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d105      	bne.n	8001ee6 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff fcc9 	bl	8001878 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b085      	sub	sp, #20
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	795b      	ldrb	r3, [r3, #5]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_DAC_Start+0x1e>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e050      	b.n	8001fc2 <HAL_DAC_Start+0xc0>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6819      	ldr	r1, [r3, #0]
 8001f32:	2201      	movs	r2, #1
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	409a      	lsls	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d11a      	bne.n	8001f7c <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f5c:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d127      	bne.n	8001fb4 <HAL_DAC_Start+0xb2>
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b38      	cmp	r3, #56	; 0x38
 8001f68:	d124      	bne.n	8001fb4 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0201 	orr.w	r2, r2, #1
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	e01b      	b.n	8001fb4 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f86:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8001f92:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f9a:	d10b      	bne.n	8001fb4 <HAL_DAC_Start+0xb2>
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001fa2:	d107      	bne.n	8001fb4 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0202 	orr.w	r2, r2, #2
 8001fb2:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	795b      	ldrb	r3, [r3, #5]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_DAC_Start_DMA+0x1e>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e08e      	b.n	800210c <HAL_DAC_Start_DMA+0x13c>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d12a      	bne.n	8002056 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	4a43      	ldr	r2, [pc, #268]	; (8002114 <HAL_DAC_Start_DMA+0x144>)
 8002006:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	4a42      	ldr	r2, [pc, #264]	; (8002118 <HAL_DAC_Start_DMA+0x148>)
 800200e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	4a41      	ldr	r2, [pc, #260]	; (800211c <HAL_DAC_Start_DMA+0x14c>)
 8002016:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002026:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	2b04      	cmp	r3, #4
 800202c:	d009      	beq.n	8002042 <HAL_DAC_Start_DMA+0x72>
 800202e:	2b08      	cmp	r3, #8
 8002030:	d00c      	beq.n	800204c <HAL_DAC_Start_DMA+0x7c>
 8002032:	2b00      	cmp	r3, #0
 8002034:	d000      	beq.n	8002038 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002036:	e039      	b.n	80020ac <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3308      	adds	r3, #8
 800203e:	617b      	str	r3, [r7, #20]
        break;
 8002040:	e034      	b.n	80020ac <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	330c      	adds	r3, #12
 8002048:	617b      	str	r3, [r7, #20]
        break;
 800204a:	e02f      	b.n	80020ac <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	3310      	adds	r3, #16
 8002052:	617b      	str	r3, [r7, #20]
        break;
 8002054:	e02a      	b.n	80020ac <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	4a31      	ldr	r2, [pc, #196]	; (8002120 <HAL_DAC_Start_DMA+0x150>)
 800205c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	4a30      	ldr	r2, [pc, #192]	; (8002124 <HAL_DAC_Start_DMA+0x154>)
 8002064:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	4a2f      	ldr	r2, [pc, #188]	; (8002128 <HAL_DAC_Start_DMA+0x158>)
 800206c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800207c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	2b04      	cmp	r3, #4
 8002082:	d009      	beq.n	8002098 <HAL_DAC_Start_DMA+0xc8>
 8002084:	2b08      	cmp	r3, #8
 8002086:	d00c      	beq.n	80020a2 <HAL_DAC_Start_DMA+0xd2>
 8002088:	2b00      	cmp	r3, #0
 800208a:	d000      	beq.n	800208e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800208c:	e00e      	b.n	80020ac <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3314      	adds	r3, #20
 8002094:	617b      	str	r3, [r7, #20]
        break;
 8002096:	e009      	b.n	80020ac <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3318      	adds	r3, #24
 800209e:	617b      	str	r3, [r7, #20]
        break;
 80020a0:	e004      	b.n	80020ac <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	331c      	adds	r3, #28
 80020a8:	617b      	str	r3, [r7, #20]
        break;
 80020aa:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10f      	bne.n	80020d2 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020c0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6898      	ldr	r0, [r3, #8]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	f000 fa30 	bl	8002530 <HAL_DMA_Start_IT>
 80020d0:	e00e      	b.n	80020f0 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80020e0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	68d8      	ldr	r0, [r3, #12]
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	f000 fa20 	bl	8002530 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6819      	ldr	r1, [r3, #0]
 80020f6:	2201      	movs	r2, #1
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	409a      	lsls	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	080022ab 	.word	0x080022ab
 8002118:	080022cd 	.word	0x080022cd
 800211c:	080022e9 	.word	0x080022e9
 8002120:	08002367 	.word	0x08002367
 8002124:	08002389 	.word	0x08002389
 8002128:	080023a5 	.word	0x080023a5

0800212c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800213e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002142:	d118      	bne.n	8002176 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2204      	movs	r2, #4
 8002148:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f043 0201 	orr.w	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800215e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800216e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f843 	bl	80021fc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002184:	d118      	bne.n	80021b8 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2204      	movs	r2, #4
 800218a:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f043 0202 	orr.w	r2, r3, #2
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80021a0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80021b0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f8cd 	bl	8002352 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	795b      	ldrb	r3, [r3, #5]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_DAC_ConfigChannel+0x20>
 800222c:	2302      	movs	r3, #2
 800222e:	e036      	b.n	800229e <HAL_DAC_ConfigChannel+0x8e>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2202      	movs	r2, #2
 800223a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002244:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	4013      	ands	r3, r2
 8002254:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4313      	orrs	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6819      	ldr	r1, [r3, #0]
 800227e:	22c0      	movs	r2, #192	; 0xc0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	400a      	ands	r2, r1
 800228e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f7ff ff81 	bl	80021c0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	711a      	strb	r2, [r3, #4]
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d8:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f7ff ff7a 	bl	80021d4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f4:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f043 0204 	orr.w	r2, r3, #4
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f7ff ff70 	bl	80021e8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	711a      	strb	r2, [r3, #4]
}
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002372:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f7ff ffce 	bl	8002316 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	711a      	strb	r2, [r3, #4]
}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f7ff ffc7 	bl	800232a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f043 0204 	orr.w	r2, r3, #4
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f7ff ffbd 	bl	800233e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2201      	movs	r2, #1
 80023c8:	711a      	strb	r2, [r3, #4]
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023e0:	f7ff fc50 	bl	8001c84 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e099      	b.n	8002524 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002410:	e00f      	b.n	8002432 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002412:	f7ff fc37 	bl	8001c84 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b05      	cmp	r3, #5
 800241e:	d908      	bls.n	8002432 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2220      	movs	r2, #32
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2203      	movs	r2, #3
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e078      	b.n	8002524 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e8      	bne.n	8002412 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	4b38      	ldr	r3, [pc, #224]	; (800252c <HAL_DMA_Init+0x158>)
 800244c:	4013      	ands	r3, r2
 800244e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800245e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800246a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4313      	orrs	r3, r2
 8002482:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	2b04      	cmp	r3, #4
 800248a:	d107      	bne.n	800249c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	4313      	orrs	r3, r2
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f023 0307 	bic.w	r3, r3, #7
 80024b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d117      	bne.n	80024f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00e      	beq.n	80024f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 fa6f 	bl	80029bc <DMA_CheckFifoParam>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2240      	movs	r2, #64	; 0x40
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024f2:	2301      	movs	r3, #1
 80024f4:	e016      	b.n	8002524 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fa26 	bl	8002950 <DMA_CalcBaseAndBitshift>
 8002504:	4603      	mov	r3, r0
 8002506:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	223f      	movs	r2, #63	; 0x3f
 800250e:	409a      	lsls	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	f010803f 	.word	0xf010803f

08002530 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_DMA_Start_IT+0x26>
 8002552:	2302      	movs	r3, #2
 8002554:	e040      	b.n	80025d8 <HAL_DMA_Start_IT+0xa8>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b01      	cmp	r3, #1
 8002568:	d12f      	bne.n	80025ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2202      	movs	r2, #2
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 f9b8 	bl	80028f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	223f      	movs	r2, #63	; 0x3f
 800258a:	409a      	lsls	r2, r3
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0216 	orr.w	r2, r2, #22
 800259e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0208 	orr.w	r2, r2, #8
 80025b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	e005      	b.n	80025d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025d2:	2302      	movs	r3, #2
 80025d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025ec:	4b92      	ldr	r3, [pc, #584]	; (8002838 <HAL_DMA_IRQHandler+0x258>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a92      	ldr	r2, [pc, #584]	; (800283c <HAL_DMA_IRQHandler+0x25c>)
 80025f2:	fba2 2303 	umull	r2, r3, r2, r3
 80025f6:	0a9b      	lsrs	r3, r3, #10
 80025f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260a:	2208      	movs	r2, #8
 800260c:	409a      	lsls	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4013      	ands	r3, r2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d01a      	beq.n	800264c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d013      	beq.n	800264c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0204 	bic.w	r2, r2, #4
 8002632:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002638:	2208      	movs	r2, #8
 800263a:	409a      	lsls	r2, r3
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002644:	f043 0201 	orr.w	r2, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	2201      	movs	r2, #1
 8002652:	409a      	lsls	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d012      	beq.n	8002682 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00b      	beq.n	8002682 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266e:	2201      	movs	r2, #1
 8002670:	409a      	lsls	r2, r3
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	f043 0202 	orr.w	r2, r3, #2
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	2204      	movs	r2, #4
 8002688:	409a      	lsls	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d012      	beq.n	80026b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00b      	beq.n	80026b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	2204      	movs	r2, #4
 80026a6:	409a      	lsls	r2, r3
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b0:	f043 0204 	orr.w	r2, r3, #4
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026bc:	2210      	movs	r2, #16
 80026be:	409a      	lsls	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d043      	beq.n	8002750 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d03c      	beq.n	8002750 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026da:	2210      	movs	r2, #16
 80026dc:	409a      	lsls	r2, r3
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d018      	beq.n	8002722 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d108      	bne.n	8002710 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d024      	beq.n	8002750 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	4798      	blx	r3
 800270e:	e01f      	b.n	8002750 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01b      	beq.n	8002750 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	4798      	blx	r3
 8002720:	e016      	b.n	8002750 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d107      	bne.n	8002740 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0208 	bic.w	r2, r2, #8
 800273e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002754:	2220      	movs	r2, #32
 8002756:	409a      	lsls	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 808e 	beq.w	800287e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 8086 	beq.w	800287e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	2220      	movs	r2, #32
 8002778:	409a      	lsls	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b05      	cmp	r3, #5
 8002788:	d136      	bne.n	80027f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0216 	bic.w	r2, r2, #22
 8002798:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695a      	ldr	r2, [r3, #20]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d103      	bne.n	80027ba <HAL_DMA_IRQHandler+0x1da>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0208 	bic.w	r2, r2, #8
 80027c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	223f      	movs	r2, #63	; 0x3f
 80027d0:	409a      	lsls	r2, r3
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d07d      	beq.n	80028ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	4798      	blx	r3
        }
        return;
 80027f6:	e078      	b.n	80028ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01c      	beq.n	8002840 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d108      	bne.n	8002826 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	2b00      	cmp	r3, #0
 800281a:	d030      	beq.n	800287e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	4798      	blx	r3
 8002824:	e02b      	b.n	800287e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282a:	2b00      	cmp	r3, #0
 800282c:	d027      	beq.n	800287e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	4798      	blx	r3
 8002836:	e022      	b.n	800287e <HAL_DMA_IRQHandler+0x29e>
 8002838:	20000000 	.word	0x20000000
 800283c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10f      	bne.n	800286e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0210 	bic.w	r2, r2, #16
 800285c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002882:	2b00      	cmp	r3, #0
 8002884:	d032      	beq.n	80028ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d022      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2205      	movs	r2, #5
 8002896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0201 	bic.w	r2, r2, #1
 80028a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	3301      	adds	r3, #1
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d307      	bcc.n	80028c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f2      	bne.n	80028aa <HAL_DMA_IRQHandler+0x2ca>
 80028c4:	e000      	b.n	80028c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80028c6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
 80028e8:	e000      	b.n	80028ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80028ea:	bf00      	nop
    }
  }
}
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop

080028f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002910:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d108      	bne.n	8002934 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002932:	e007      	b.n	8002944 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	60da      	str	r2, [r3, #12]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	3b10      	subs	r3, #16
 8002960:	4a14      	ldr	r2, [pc, #80]	; (80029b4 <DMA_CalcBaseAndBitshift+0x64>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	091b      	lsrs	r3, r3, #4
 8002968:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800296a:	4a13      	ldr	r2, [pc, #76]	; (80029b8 <DMA_CalcBaseAndBitshift+0x68>)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4413      	add	r3, r2
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b03      	cmp	r3, #3
 800297c:	d909      	bls.n	8002992 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002986:	f023 0303 	bic.w	r3, r3, #3
 800298a:	1d1a      	adds	r2, r3, #4
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	659a      	str	r2, [r3, #88]	; 0x58
 8002990:	e007      	b.n	80029a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800299a:	f023 0303 	bic.w	r3, r3, #3
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	aaaaaaab 	.word	0xaaaaaaab
 80029b8:	080058bc 	.word	0x080058bc

080029bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d11f      	bne.n	8002a16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d855      	bhi.n	8002a88 <DMA_CheckFifoParam+0xcc>
 80029dc:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <DMA_CheckFifoParam+0x28>)
 80029de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e2:	bf00      	nop
 80029e4:	080029f5 	.word	0x080029f5
 80029e8:	08002a07 	.word	0x08002a07
 80029ec:	080029f5 	.word	0x080029f5
 80029f0:	08002a89 	.word	0x08002a89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d045      	beq.n	8002a8c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a04:	e042      	b.n	8002a8c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a0e:	d13f      	bne.n	8002a90 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a14:	e03c      	b.n	8002a90 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a1e:	d121      	bne.n	8002a64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d836      	bhi.n	8002a94 <DMA_CheckFifoParam+0xd8>
 8002a26:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <DMA_CheckFifoParam+0x70>)
 8002a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2c:	08002a3d 	.word	0x08002a3d
 8002a30:	08002a43 	.word	0x08002a43
 8002a34:	08002a3d 	.word	0x08002a3d
 8002a38:	08002a55 	.word	0x08002a55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a40:	e02f      	b.n	8002aa2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d024      	beq.n	8002a98 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a52:	e021      	b.n	8002a98 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a5c:	d11e      	bne.n	8002a9c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a62:	e01b      	b.n	8002a9c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d902      	bls.n	8002a70 <DMA_CheckFifoParam+0xb4>
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d003      	beq.n	8002a76 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a6e:	e018      	b.n	8002aa2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      break;
 8002a74:	e015      	b.n	8002aa2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00e      	beq.n	8002aa0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
      break;
 8002a86:	e00b      	b.n	8002aa0 <DMA_CheckFifoParam+0xe4>
      break;
 8002a88:	bf00      	nop
 8002a8a:	e00a      	b.n	8002aa2 <DMA_CheckFifoParam+0xe6>
      break;
 8002a8c:	bf00      	nop
 8002a8e:	e008      	b.n	8002aa2 <DMA_CheckFifoParam+0xe6>
      break;
 8002a90:	bf00      	nop
 8002a92:	e006      	b.n	8002aa2 <DMA_CheckFifoParam+0xe6>
      break;
 8002a94:	bf00      	nop
 8002a96:	e004      	b.n	8002aa2 <DMA_CheckFifoParam+0xe6>
      break;
 8002a98:	bf00      	nop
 8002a9a:	e002      	b.n	8002aa2 <DMA_CheckFifoParam+0xe6>
      break;   
 8002a9c:	bf00      	nop
 8002a9e:	e000      	b.n	8002aa2 <DMA_CheckFifoParam+0xe6>
      break;
 8002aa0:	bf00      	nop
    }
  } 
  
  return status; 
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b089      	sub	sp, #36	; 0x24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	e165      	b.n	8002d98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002acc:	2201      	movs	r2, #1
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	f040 8154 	bne.w	8002d92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d00b      	beq.n	8002b0a <HAL_GPIO_Init+0x5a>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d007      	beq.n	8002b0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002afe:	2b11      	cmp	r3, #17
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b12      	cmp	r3, #18
 8002b08:	d130      	bne.n	8002b6c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	2203      	movs	r2, #3
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b40:	2201      	movs	r2, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 0201 	and.w	r2, r3, #1
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	2203      	movs	r2, #3
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0xfc>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b12      	cmp	r3, #18
 8002baa:	d123      	bne.n	8002bf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	08da      	lsrs	r2, r3, #3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3208      	adds	r2, #8
 8002bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	220f      	movs	r2, #15
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	08da      	lsrs	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3208      	adds	r2, #8
 8002bee:	69b9      	ldr	r1, [r7, #24]
 8002bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	2203      	movs	r2, #3
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 0203 	and.w	r2, r3, #3
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80ae 	beq.w	8002d92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	4b5c      	ldr	r3, [pc, #368]	; (8002dac <HAL_GPIO_Init+0x2fc>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	4a5b      	ldr	r2, [pc, #364]	; (8002dac <HAL_GPIO_Init+0x2fc>)
 8002c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c44:	6453      	str	r3, [r2, #68]	; 0x44
 8002c46:	4b59      	ldr	r3, [pc, #356]	; (8002dac <HAL_GPIO_Init+0x2fc>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c52:	4a57      	ldr	r2, [pc, #348]	; (8002db0 <HAL_GPIO_Init+0x300>)
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	089b      	lsrs	r3, r3, #2
 8002c58:	3302      	adds	r3, #2
 8002c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	220f      	movs	r2, #15
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4e      	ldr	r2, [pc, #312]	; (8002db4 <HAL_GPIO_Init+0x304>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d025      	beq.n	8002cca <HAL_GPIO_Init+0x21a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4d      	ldr	r2, [pc, #308]	; (8002db8 <HAL_GPIO_Init+0x308>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d01f      	beq.n	8002cc6 <HAL_GPIO_Init+0x216>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4c      	ldr	r2, [pc, #304]	; (8002dbc <HAL_GPIO_Init+0x30c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d019      	beq.n	8002cc2 <HAL_GPIO_Init+0x212>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4b      	ldr	r2, [pc, #300]	; (8002dc0 <HAL_GPIO_Init+0x310>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d013      	beq.n	8002cbe <HAL_GPIO_Init+0x20e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4a      	ldr	r2, [pc, #296]	; (8002dc4 <HAL_GPIO_Init+0x314>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00d      	beq.n	8002cba <HAL_GPIO_Init+0x20a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a49      	ldr	r2, [pc, #292]	; (8002dc8 <HAL_GPIO_Init+0x318>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d007      	beq.n	8002cb6 <HAL_GPIO_Init+0x206>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a48      	ldr	r2, [pc, #288]	; (8002dcc <HAL_GPIO_Init+0x31c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d101      	bne.n	8002cb2 <HAL_GPIO_Init+0x202>
 8002cae:	2306      	movs	r3, #6
 8002cb0:	e00c      	b.n	8002ccc <HAL_GPIO_Init+0x21c>
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	e00a      	b.n	8002ccc <HAL_GPIO_Init+0x21c>
 8002cb6:	2305      	movs	r3, #5
 8002cb8:	e008      	b.n	8002ccc <HAL_GPIO_Init+0x21c>
 8002cba:	2304      	movs	r3, #4
 8002cbc:	e006      	b.n	8002ccc <HAL_GPIO_Init+0x21c>
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e004      	b.n	8002ccc <HAL_GPIO_Init+0x21c>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e002      	b.n	8002ccc <HAL_GPIO_Init+0x21c>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_GPIO_Init+0x21c>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	69fa      	ldr	r2, [r7, #28]
 8002cce:	f002 0203 	and.w	r2, r2, #3
 8002cd2:	0092      	lsls	r2, r2, #2
 8002cd4:	4093      	lsls	r3, r2
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cdc:	4934      	ldr	r1, [pc, #208]	; (8002db0 <HAL_GPIO_Init+0x300>)
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cea:	4b39      	ldr	r3, [pc, #228]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d0e:	4a30      	ldr	r2, [pc, #192]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d14:	4b2e      	ldr	r3, [pc, #184]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d38:	4a25      	ldr	r2, [pc, #148]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d3e:	4b24      	ldr	r3, [pc, #144]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d62:	4a1b      	ldr	r2, [pc, #108]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d68:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d8c:	4a10      	ldr	r2, [pc, #64]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3301      	adds	r3, #1
 8002d96:	61fb      	str	r3, [r7, #28]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b0f      	cmp	r3, #15
 8002d9c:	f67f ae96 	bls.w	8002acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002da0:	bf00      	nop
 8002da2:	3724      	adds	r7, #36	; 0x24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40013800 	.word	0x40013800
 8002db4:	40020000 	.word	0x40020000
 8002db8:	40020400 	.word	0x40020400
 8002dbc:	40020800 	.word	0x40020800
 8002dc0:	40020c00 	.word	0x40020c00
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40021400 	.word	0x40021400
 8002dcc:	40021800 	.word	0x40021800
 8002dd0:	40013c00 	.word	0x40013c00

08002dd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	887b      	ldrh	r3, [r7, #2]
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	e001      	b.n	8002df6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	807b      	strh	r3, [r7, #2]
 8002e10:	4613      	mov	r3, r2
 8002e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e14:	787b      	ldrb	r3, [r7, #1]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e20:	e003      	b.n	8002e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e22:	887b      	ldrh	r3, [r7, #2]
 8002e24:	041a      	lsls	r2, r3, #16
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	619a      	str	r2, [r3, #24]
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d006      	beq.n	8002e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e4e:	4a05      	ldr	r2, [pc, #20]	; (8002e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e54:	88fb      	ldrh	r3, [r7, #6]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 f806 	bl	8002e68 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40013c00 	.word	0x40013c00

08002e68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0cc      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e94:	4b68      	ldr	r3, [pc, #416]	; (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d90c      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea2:	4b65      	ldr	r3, [pc, #404]	; (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eaa:	4b63      	ldr	r3, [pc, #396]	; (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0b8      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d020      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed4:	4b59      	ldr	r3, [pc, #356]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a58      	ldr	r2, [pc, #352]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eec:	4b53      	ldr	r3, [pc, #332]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a52      	ldr	r2, [pc, #328]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef8:	4b50      	ldr	r3, [pc, #320]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	494d      	ldr	r1, [pc, #308]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d044      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d107      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	4b47      	ldr	r3, [pc, #284]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d119      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e07f      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d003      	beq.n	8002f3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3e:	4b3f      	ldr	r3, [pc, #252]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e06f      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4e:	4b3b      	ldr	r3, [pc, #236]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e067      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f5e:	4b37      	ldr	r3, [pc, #220]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f023 0203 	bic.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4934      	ldr	r1, [pc, #208]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f70:	f7fe fe88 	bl	8001c84 <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f78:	f7fe fe84 	bl	8001c84 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e04f      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	4b2b      	ldr	r3, [pc, #172]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 020c 	and.w	r2, r3, #12
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d1eb      	bne.n	8002f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa0:	4b25      	ldr	r3, [pc, #148]	; (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d20c      	bcs.n	8002fc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	4b22      	ldr	r3, [pc, #136]	; (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	4b20      	ldr	r3, [pc, #128]	; (8003038 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e032      	b.n	800302e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd4:	4b19      	ldr	r3, [pc, #100]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4916      	ldr	r1, [pc, #88]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ff2:	4b12      	ldr	r3, [pc, #72]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	490e      	ldr	r1, [pc, #56]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003006:	f000 f855 	bl	80030b4 <HAL_RCC_GetSysClockFreq>
 800300a:	4601      	mov	r1, r0
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <HAL_RCC_ClockConfig+0x1c0>)
 8003018:	5cd3      	ldrb	r3, [r2, r3]
 800301a:	fa21 f303 	lsr.w	r3, r1, r3
 800301e:	4a09      	ldr	r2, [pc, #36]	; (8003044 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe fde8 	bl	8001bfc <HAL_InitTick>

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40023c00 	.word	0x40023c00
 800303c:	40023800 	.word	0x40023800
 8003040:	080058a4 	.word	0x080058a4
 8003044:	20000000 	.word	0x20000000
 8003048:	20000004 	.word	0x20000004

0800304c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_RCC_GetHCLKFreq+0x14>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000000 	.word	0x20000000

08003064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003068:	f7ff fff0 	bl	800304c <HAL_RCC_GetHCLKFreq>
 800306c:	4601      	mov	r1, r0
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	0a9b      	lsrs	r3, r3, #10
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	4a03      	ldr	r2, [pc, #12]	; (8003088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800307a:	5cd3      	ldrb	r3, [r2, r3]
 800307c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003080:	4618      	mov	r0, r3
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40023800 	.word	0x40023800
 8003088:	080058b4 	.word	0x080058b4

0800308c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003090:	f7ff ffdc 	bl	800304c <HAL_RCC_GetHCLKFreq>
 8003094:	4601      	mov	r1, r0
 8003096:	4b05      	ldr	r3, [pc, #20]	; (80030ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	0b5b      	lsrs	r3, r3, #13
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4a03      	ldr	r2, [pc, #12]	; (80030b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a2:	5cd3      	ldrb	r3, [r2, r3]
 80030a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40023800 	.word	0x40023800
 80030b0:	080058b4 	.word	0x080058b4

080030b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ce:	4bc6      	ldr	r3, [pc, #792]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x334>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b0c      	cmp	r3, #12
 80030d8:	f200 817e 	bhi.w	80033d8 <HAL_RCC_GetSysClockFreq+0x324>
 80030dc:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <HAL_RCC_GetSysClockFreq+0x30>)
 80030de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e2:	bf00      	nop
 80030e4:	08003119 	.word	0x08003119
 80030e8:	080033d9 	.word	0x080033d9
 80030ec:	080033d9 	.word	0x080033d9
 80030f0:	080033d9 	.word	0x080033d9
 80030f4:	0800311f 	.word	0x0800311f
 80030f8:	080033d9 	.word	0x080033d9
 80030fc:	080033d9 	.word	0x080033d9
 8003100:	080033d9 	.word	0x080033d9
 8003104:	08003125 	.word	0x08003125
 8003108:	080033d9 	.word	0x080033d9
 800310c:	080033d9 	.word	0x080033d9
 8003110:	080033d9 	.word	0x080033d9
 8003114:	08003281 	.word	0x08003281
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003118:	4bb4      	ldr	r3, [pc, #720]	; (80033ec <HAL_RCC_GetSysClockFreq+0x338>)
 800311a:	613b      	str	r3, [r7, #16]
       break;
 800311c:	e15f      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800311e:	4bb4      	ldr	r3, [pc, #720]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003120:	613b      	str	r3, [r7, #16]
      break;
 8003122:	e15c      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003124:	4bb0      	ldr	r3, [pc, #704]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800312c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800312e:	4bae      	ldr	r3, [pc, #696]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d04a      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313a:	4bab      	ldr	r3, [pc, #684]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x334>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	099b      	lsrs	r3, r3, #6
 8003140:	f04f 0400 	mov.w	r4, #0
 8003144:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	ea03 0501 	and.w	r5, r3, r1
 8003150:	ea04 0602 	and.w	r6, r4, r2
 8003154:	4629      	mov	r1, r5
 8003156:	4632      	mov	r2, r6
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	f04f 0400 	mov.w	r4, #0
 8003160:	0154      	lsls	r4, r2, #5
 8003162:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003166:	014b      	lsls	r3, r1, #5
 8003168:	4619      	mov	r1, r3
 800316a:	4622      	mov	r2, r4
 800316c:	1b49      	subs	r1, r1, r5
 800316e:	eb62 0206 	sbc.w	r2, r2, r6
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	f04f 0400 	mov.w	r4, #0
 800317a:	0194      	lsls	r4, r2, #6
 800317c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003180:	018b      	lsls	r3, r1, #6
 8003182:	1a5b      	subs	r3, r3, r1
 8003184:	eb64 0402 	sbc.w	r4, r4, r2
 8003188:	f04f 0100 	mov.w	r1, #0
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	00e2      	lsls	r2, r4, #3
 8003192:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003196:	00d9      	lsls	r1, r3, #3
 8003198:	460b      	mov	r3, r1
 800319a:	4614      	mov	r4, r2
 800319c:	195b      	adds	r3, r3, r5
 800319e:	eb44 0406 	adc.w	r4, r4, r6
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	0262      	lsls	r2, r4, #9
 80031ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80031b0:	0259      	lsls	r1, r3, #9
 80031b2:	460b      	mov	r3, r1
 80031b4:	4614      	mov	r4, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	4621      	mov	r1, r4
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f04f 0400 	mov.w	r4, #0
 80031c0:	461a      	mov	r2, r3
 80031c2:	4623      	mov	r3, r4
 80031c4:	f7fd fcbe 	bl	8000b44 <__aeabi_uldivmod>
 80031c8:	4603      	mov	r3, r0
 80031ca:	460c      	mov	r4, r1
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	e049      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d0:	4b85      	ldr	r3, [pc, #532]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x334>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	099b      	lsrs	r3, r3, #6
 80031d6:	f04f 0400 	mov.w	r4, #0
 80031da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	ea03 0501 	and.w	r5, r3, r1
 80031e6:	ea04 0602 	and.w	r6, r4, r2
 80031ea:	4629      	mov	r1, r5
 80031ec:	4632      	mov	r2, r6
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	f04f 0400 	mov.w	r4, #0
 80031f6:	0154      	lsls	r4, r2, #5
 80031f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031fc:	014b      	lsls	r3, r1, #5
 80031fe:	4619      	mov	r1, r3
 8003200:	4622      	mov	r2, r4
 8003202:	1b49      	subs	r1, r1, r5
 8003204:	eb62 0206 	sbc.w	r2, r2, r6
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	f04f 0400 	mov.w	r4, #0
 8003210:	0194      	lsls	r4, r2, #6
 8003212:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003216:	018b      	lsls	r3, r1, #6
 8003218:	1a5b      	subs	r3, r3, r1
 800321a:	eb64 0402 	sbc.w	r4, r4, r2
 800321e:	f04f 0100 	mov.w	r1, #0
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	00e2      	lsls	r2, r4, #3
 8003228:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800322c:	00d9      	lsls	r1, r3, #3
 800322e:	460b      	mov	r3, r1
 8003230:	4614      	mov	r4, r2
 8003232:	195b      	adds	r3, r3, r5
 8003234:	eb44 0406 	adc.w	r4, r4, r6
 8003238:	f04f 0100 	mov.w	r1, #0
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	02a2      	lsls	r2, r4, #10
 8003242:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003246:	0299      	lsls	r1, r3, #10
 8003248:	460b      	mov	r3, r1
 800324a:	4614      	mov	r4, r2
 800324c:	4618      	mov	r0, r3
 800324e:	4621      	mov	r1, r4
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f04f 0400 	mov.w	r4, #0
 8003256:	461a      	mov	r2, r3
 8003258:	4623      	mov	r3, r4
 800325a:	f7fd fc73 	bl	8000b44 <__aeabi_uldivmod>
 800325e:	4603      	mov	r3, r0
 8003260:	460c      	mov	r4, r1
 8003262:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003264:	4b60      	ldr	r3, [pc, #384]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	0c1b      	lsrs	r3, r3, #16
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	3301      	adds	r3, #1
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	613b      	str	r3, [r7, #16]
      break;
 800327e:	e0ae      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003280:	4b59      	ldr	r3, [pc, #356]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003288:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800328a:	4b57      	ldr	r3, [pc, #348]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x334>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d04a      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003296:	4b54      	ldr	r3, [pc, #336]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	099b      	lsrs	r3, r3, #6
 800329c:	f04f 0400 	mov.w	r4, #0
 80032a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	ea03 0501 	and.w	r5, r3, r1
 80032ac:	ea04 0602 	and.w	r6, r4, r2
 80032b0:	4629      	mov	r1, r5
 80032b2:	4632      	mov	r2, r6
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	f04f 0400 	mov.w	r4, #0
 80032bc:	0154      	lsls	r4, r2, #5
 80032be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032c2:	014b      	lsls	r3, r1, #5
 80032c4:	4619      	mov	r1, r3
 80032c6:	4622      	mov	r2, r4
 80032c8:	1b49      	subs	r1, r1, r5
 80032ca:	eb62 0206 	sbc.w	r2, r2, r6
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	f04f 0400 	mov.w	r4, #0
 80032d6:	0194      	lsls	r4, r2, #6
 80032d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032dc:	018b      	lsls	r3, r1, #6
 80032de:	1a5b      	subs	r3, r3, r1
 80032e0:	eb64 0402 	sbc.w	r4, r4, r2
 80032e4:	f04f 0100 	mov.w	r1, #0
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	00e2      	lsls	r2, r4, #3
 80032ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032f2:	00d9      	lsls	r1, r3, #3
 80032f4:	460b      	mov	r3, r1
 80032f6:	4614      	mov	r4, r2
 80032f8:	195b      	adds	r3, r3, r5
 80032fa:	eb44 0406 	adc.w	r4, r4, r6
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	0262      	lsls	r2, r4, #9
 8003308:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800330c:	0259      	lsls	r1, r3, #9
 800330e:	460b      	mov	r3, r1
 8003310:	4614      	mov	r4, r2
 8003312:	4618      	mov	r0, r3
 8003314:	4621      	mov	r1, r4
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f04f 0400 	mov.w	r4, #0
 800331c:	461a      	mov	r2, r3
 800331e:	4623      	mov	r3, r4
 8003320:	f7fd fc10 	bl	8000b44 <__aeabi_uldivmod>
 8003324:	4603      	mov	r3, r0
 8003326:	460c      	mov	r4, r1
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	e049      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800332c:	4b2e      	ldr	r3, [pc, #184]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x334>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	099b      	lsrs	r3, r3, #6
 8003332:	f04f 0400 	mov.w	r4, #0
 8003336:	f240 11ff 	movw	r1, #511	; 0x1ff
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	ea03 0501 	and.w	r5, r3, r1
 8003342:	ea04 0602 	and.w	r6, r4, r2
 8003346:	4629      	mov	r1, r5
 8003348:	4632      	mov	r2, r6
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	f04f 0400 	mov.w	r4, #0
 8003352:	0154      	lsls	r4, r2, #5
 8003354:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003358:	014b      	lsls	r3, r1, #5
 800335a:	4619      	mov	r1, r3
 800335c:	4622      	mov	r2, r4
 800335e:	1b49      	subs	r1, r1, r5
 8003360:	eb62 0206 	sbc.w	r2, r2, r6
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	f04f 0400 	mov.w	r4, #0
 800336c:	0194      	lsls	r4, r2, #6
 800336e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003372:	018b      	lsls	r3, r1, #6
 8003374:	1a5b      	subs	r3, r3, r1
 8003376:	eb64 0402 	sbc.w	r4, r4, r2
 800337a:	f04f 0100 	mov.w	r1, #0
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	00e2      	lsls	r2, r4, #3
 8003384:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003388:	00d9      	lsls	r1, r3, #3
 800338a:	460b      	mov	r3, r1
 800338c:	4614      	mov	r4, r2
 800338e:	195b      	adds	r3, r3, r5
 8003390:	eb44 0406 	adc.w	r4, r4, r6
 8003394:	f04f 0100 	mov.w	r1, #0
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	02a2      	lsls	r2, r4, #10
 800339e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033a2:	0299      	lsls	r1, r3, #10
 80033a4:	460b      	mov	r3, r1
 80033a6:	4614      	mov	r4, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	4621      	mov	r1, r4
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f04f 0400 	mov.w	r4, #0
 80033b2:	461a      	mov	r2, r3
 80033b4:	4623      	mov	r3, r4
 80033b6:	f7fd fbc5 	bl	8000b44 <__aeabi_uldivmod>
 80033ba:	4603      	mov	r3, r0
 80033bc:	460c      	mov	r4, r1
 80033be:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80033c0:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x334>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	0f1b      	lsrs	r3, r3, #28
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d4:	613b      	str	r3, [r7, #16]
      break;
 80033d6:	e002      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <HAL_RCC_GetSysClockFreq+0x338>)
 80033da:	613b      	str	r3, [r7, #16]
      break;
 80033dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033de:	693b      	ldr	r3, [r7, #16]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	371c      	adds	r7, #28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033e8:	40023800 	.word	0x40023800
 80033ec:	00f42400 	.word	0x00f42400
 80033f0:	007a1200 	.word	0x007a1200

080033f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8083 	beq.w	8003514 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800340e:	4b95      	ldr	r3, [pc, #596]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b04      	cmp	r3, #4
 8003418:	d019      	beq.n	800344e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800341a:	4b92      	ldr	r3, [pc, #584]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003422:	2b08      	cmp	r3, #8
 8003424:	d106      	bne.n	8003434 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003426:	4b8f      	ldr	r3, [pc, #572]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003432:	d00c      	beq.n	800344e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003434:	4b8b      	ldr	r3, [pc, #556]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800343c:	2b0c      	cmp	r3, #12
 800343e:	d112      	bne.n	8003466 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003440:	4b88      	ldr	r3, [pc, #544]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800344c:	d10b      	bne.n	8003466 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344e:	4b85      	ldr	r3, [pc, #532]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d05b      	beq.n	8003512 <HAL_RCC_OscConfig+0x11e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d157      	bne.n	8003512 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e216      	b.n	8003894 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346e:	d106      	bne.n	800347e <HAL_RCC_OscConfig+0x8a>
 8003470:	4b7c      	ldr	r3, [pc, #496]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a7b      	ldr	r2, [pc, #492]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	e01d      	b.n	80034ba <HAL_RCC_OscConfig+0xc6>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003486:	d10c      	bne.n	80034a2 <HAL_RCC_OscConfig+0xae>
 8003488:	4b76      	ldr	r3, [pc, #472]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a75      	ldr	r2, [pc, #468]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 800348e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	4b73      	ldr	r3, [pc, #460]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a72      	ldr	r2, [pc, #456]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 800349a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	e00b      	b.n	80034ba <HAL_RCC_OscConfig+0xc6>
 80034a2:	4b70      	ldr	r3, [pc, #448]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a6f      	ldr	r2, [pc, #444]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80034a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	4b6d      	ldr	r3, [pc, #436]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6c      	ldr	r2, [pc, #432]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80034b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d013      	beq.n	80034ea <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7fe fbdf 	bl	8001c84 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ca:	f7fe fbdb 	bl	8001c84 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b64      	cmp	r3, #100	; 0x64
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e1db      	b.n	8003894 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034dc:	4b61      	ldr	r3, [pc, #388]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0xd6>
 80034e8:	e014      	b.n	8003514 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ea:	f7fe fbcb 	bl	8001c84 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f2:	f7fe fbc7 	bl	8001c84 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b64      	cmp	r3, #100	; 0x64
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e1c7      	b.n	8003894 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003504:	4b57      	ldr	r3, [pc, #348]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f0      	bne.n	80034f2 <HAL_RCC_OscConfig+0xfe>
 8003510:	e000      	b.n	8003514 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003512:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d06f      	beq.n	8003600 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003520:	4b50      	ldr	r3, [pc, #320]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 030c 	and.w	r3, r3, #12
 8003528:	2b00      	cmp	r3, #0
 800352a:	d017      	beq.n	800355c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800352c:	4b4d      	ldr	r3, [pc, #308]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003534:	2b08      	cmp	r3, #8
 8003536:	d105      	bne.n	8003544 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003538:	4b4a      	ldr	r3, [pc, #296]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00b      	beq.n	800355c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003544:	4b47      	ldr	r3, [pc, #284]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800354c:	2b0c      	cmp	r3, #12
 800354e:	d11c      	bne.n	800358a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003550:	4b44      	ldr	r3, [pc, #272]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d116      	bne.n	800358a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355c:	4b41      	ldr	r3, [pc, #260]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_OscConfig+0x180>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d001      	beq.n	8003574 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e18f      	b.n	8003894 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003574:	4b3b      	ldr	r3, [pc, #236]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4938      	ldr	r1, [pc, #224]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003588:	e03a      	b.n	8003600 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d020      	beq.n	80035d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003592:	4b35      	ldr	r3, [pc, #212]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 8003594:	2201      	movs	r2, #1
 8003596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fe fb74 	bl	8001c84 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a0:	f7fe fb70 	bl	8001c84 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e170      	b.n	8003894 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b2:	4b2c      	ldr	r3, [pc, #176]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035be:	4b29      	ldr	r3, [pc, #164]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4925      	ldr	r1, [pc, #148]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]
 80035d2:	e015      	b.n	8003600 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d4:	4b24      	ldr	r3, [pc, #144]	; (8003668 <HAL_RCC_OscConfig+0x274>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035da:	f7fe fb53 	bl	8001c84 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e2:	f7fe fb4f 	bl	8001c84 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e14f      	b.n	8003894 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035f4:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f0      	bne.n	80035e2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d037      	beq.n	800367c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d016      	beq.n	8003642 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003614:	4b15      	ldr	r3, [pc, #84]	; (800366c <HAL_RCC_OscConfig+0x278>)
 8003616:	2201      	movs	r2, #1
 8003618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361a:	f7fe fb33 	bl	8001c84 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003622:	f7fe fb2f 	bl	8001c84 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e12f      	b.n	8003894 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_OscConfig+0x270>)
 8003636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x22e>
 8003640:	e01c      	b.n	800367c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003642:	4b0a      	ldr	r3, [pc, #40]	; (800366c <HAL_RCC_OscConfig+0x278>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003648:	f7fe fb1c 	bl	8001c84 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800364e:	e00f      	b.n	8003670 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003650:	f7fe fb18 	bl	8001c84 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d908      	bls.n	8003670 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e118      	b.n	8003894 <HAL_RCC_OscConfig+0x4a0>
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800
 8003668:	42470000 	.word	0x42470000
 800366c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003670:	4b8a      	ldr	r3, [pc, #552]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 8003672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e9      	bne.n	8003650 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 8097 	beq.w	80037b8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800368a:	2300      	movs	r3, #0
 800368c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800368e:	4b83      	ldr	r3, [pc, #524]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10f      	bne.n	80036ba <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	4b7f      	ldr	r3, [pc, #508]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	4a7e      	ldr	r2, [pc, #504]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 80036a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a8:	6413      	str	r3, [r2, #64]	; 0x40
 80036aa:	4b7c      	ldr	r3, [pc, #496]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036b6:	2301      	movs	r3, #1
 80036b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ba:	4b79      	ldr	r3, [pc, #484]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d118      	bne.n	80036f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036c6:	4b76      	ldr	r3, [pc, #472]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a75      	ldr	r2, [pc, #468]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80036cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d2:	f7fe fad7 	bl	8001c84 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036da:	f7fe fad3 	bl	8001c84 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e0d3      	b.n	8003894 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ec:	4b6c      	ldr	r3, [pc, #432]	; (80038a0 <HAL_RCC_OscConfig+0x4ac>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d106      	bne.n	800370e <HAL_RCC_OscConfig+0x31a>
 8003700:	4b66      	ldr	r3, [pc, #408]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	4a65      	ldr	r2, [pc, #404]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6713      	str	r3, [r2, #112]	; 0x70
 800370c:	e01c      	b.n	8003748 <HAL_RCC_OscConfig+0x354>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	2b05      	cmp	r3, #5
 8003714:	d10c      	bne.n	8003730 <HAL_RCC_OscConfig+0x33c>
 8003716:	4b61      	ldr	r3, [pc, #388]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	4a60      	ldr	r2, [pc, #384]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 800371c:	f043 0304 	orr.w	r3, r3, #4
 8003720:	6713      	str	r3, [r2, #112]	; 0x70
 8003722:	4b5e      	ldr	r3, [pc, #376]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	4a5d      	ldr	r2, [pc, #372]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	6713      	str	r3, [r2, #112]	; 0x70
 800372e:	e00b      	b.n	8003748 <HAL_RCC_OscConfig+0x354>
 8003730:	4b5a      	ldr	r3, [pc, #360]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 8003732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003734:	4a59      	ldr	r2, [pc, #356]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 8003736:	f023 0301 	bic.w	r3, r3, #1
 800373a:	6713      	str	r3, [r2, #112]	; 0x70
 800373c:	4b57      	ldr	r3, [pc, #348]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003740:	4a56      	ldr	r2, [pc, #344]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 8003742:	f023 0304 	bic.w	r3, r3, #4
 8003746:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d015      	beq.n	800377c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fe fa98 	bl	8001c84 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003756:	e00a      	b.n	800376e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003758:	f7fe fa94 	bl	8001c84 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	f241 3288 	movw	r2, #5000	; 0x1388
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e092      	b.n	8003894 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376e:	4b4b      	ldr	r3, [pc, #300]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0ee      	beq.n	8003758 <HAL_RCC_OscConfig+0x364>
 800377a:	e014      	b.n	80037a6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377c:	f7fe fa82 	bl	8001c84 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003782:	e00a      	b.n	800379a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003784:	f7fe fa7e 	bl	8001c84 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e07c      	b.n	8003894 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800379a:	4b40      	ldr	r3, [pc, #256]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1ee      	bne.n	8003784 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d105      	bne.n	80037b8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ac:	4b3b      	ldr	r3, [pc, #236]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	4a3a      	ldr	r2, [pc, #232]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 80037b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d068      	beq.n	8003892 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037c0:	4b36      	ldr	r3, [pc, #216]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 030c 	and.w	r3, r3, #12
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d060      	beq.n	800388e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d145      	bne.n	8003860 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d4:	4b33      	ldr	r3, [pc, #204]	; (80038a4 <HAL_RCC_OscConfig+0x4b0>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7fe fa53 	bl	8001c84 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fe fa4f 	bl	8001c84 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e04f      	b.n	8003894 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f4:	4b29      	ldr	r3, [pc, #164]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f0      	bne.n	80037e2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69da      	ldr	r2, [r3, #28]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	019b      	lsls	r3, r3, #6
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003816:	085b      	lsrs	r3, r3, #1
 8003818:	3b01      	subs	r3, #1
 800381a:	041b      	lsls	r3, r3, #16
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	061b      	lsls	r3, r3, #24
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	071b      	lsls	r3, r3, #28
 800382c:	491b      	ldr	r1, [pc, #108]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003832:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <HAL_RCC_OscConfig+0x4b0>)
 8003834:	2201      	movs	r2, #1
 8003836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fe fa24 	bl	8001c84 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003840:	f7fe fa20 	bl	8001c84 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e020      	b.n	8003894 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003852:	4b12      	ldr	r3, [pc, #72]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x44c>
 800385e:	e018      	b.n	8003892 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003860:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <HAL_RCC_OscConfig+0x4b0>)
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003866:	f7fe fa0d 	bl	8001c84 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800386e:	f7fe fa09 	bl	8001c84 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e009      	b.n	8003894 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <HAL_RCC_OscConfig+0x4a8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f0      	bne.n	800386e <HAL_RCC_OscConfig+0x47a>
 800388c:	e001      	b.n	8003892 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40023800 	.word	0x40023800
 80038a0:	40007000 	.word	0x40007000
 80038a4:	42470060 	.word	0x42470060

080038a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e01d      	b.n	80038f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fe f852 	bl	8001978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3304      	adds	r3, #4
 80038e4:	4619      	mov	r1, r3
 80038e6:	4610      	mov	r0, r2
 80038e8:	f000 f968 	bl	8003bbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038fe:	b480      	push	{r7}
 8003900:	b085      	sub	sp, #20
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2202      	movs	r2, #2
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b06      	cmp	r3, #6
 800391e:	d007      	beq.n	8003930 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b02      	cmp	r3, #2
 800395a:	d122      	bne.n	80039a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b02      	cmp	r3, #2
 8003968:	d11b      	bne.n	80039a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f06f 0202 	mvn.w	r2, #2
 8003972:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f8f8 	bl	8003b7e <HAL_TIM_IC_CaptureCallback>
 800398e:	e005      	b.n	800399c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f8ea 	bl	8003b6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f8fb 	bl	8003b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d122      	bne.n	80039f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d11b      	bne.n	80039f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f06f 0204 	mvn.w	r2, #4
 80039c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f8ce 	bl	8003b7e <HAL_TIM_IC_CaptureCallback>
 80039e2:	e005      	b.n	80039f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f8c0 	bl	8003b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f8d1 	bl	8003b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d122      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d11b      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f06f 0208 	mvn.w	r2, #8
 8003a1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2204      	movs	r2, #4
 8003a20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f8a4 	bl	8003b7e <HAL_TIM_IC_CaptureCallback>
 8003a36:	e005      	b.n	8003a44 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f896 	bl	8003b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f8a7 	bl	8003b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d122      	bne.n	8003a9e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d11b      	bne.n	8003a9e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f06f 0210 	mvn.w	r2, #16
 8003a6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2208      	movs	r2, #8
 8003a74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f87a 	bl	8003b7e <HAL_TIM_IC_CaptureCallback>
 8003a8a:	e005      	b.n	8003a98 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f86c 	bl	8003b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f87d 	bl	8003b92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d10e      	bne.n	8003aca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d107      	bne.n	8003aca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f06f 0201 	mvn.w	r2, #1
 8003ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f846 	bl	8003b56 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d10e      	bne.n	8003af6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae2:	2b80      	cmp	r3, #128	; 0x80
 8003ae4:	d107      	bne.n	8003af6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f989 	bl	8003e08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b00:	2b40      	cmp	r3, #64	; 0x40
 8003b02:	d10e      	bne.n	8003b22 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	2b40      	cmp	r3, #64	; 0x40
 8003b10:	d107      	bne.n	8003b22 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f842 	bl	8003ba6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d10e      	bne.n	8003b4e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f003 0320 	and.w	r3, r3, #32
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	d107      	bne.n	8003b4e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f06f 0220 	mvn.w	r2, #32
 8003b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f953 	bl	8003df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a40      	ldr	r2, [pc, #256]	; (8003cd0 <TIM_Base_SetConfig+0x114>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d013      	beq.n	8003bfc <TIM_Base_SetConfig+0x40>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bda:	d00f      	beq.n	8003bfc <TIM_Base_SetConfig+0x40>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a3d      	ldr	r2, [pc, #244]	; (8003cd4 <TIM_Base_SetConfig+0x118>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00b      	beq.n	8003bfc <TIM_Base_SetConfig+0x40>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a3c      	ldr	r2, [pc, #240]	; (8003cd8 <TIM_Base_SetConfig+0x11c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d007      	beq.n	8003bfc <TIM_Base_SetConfig+0x40>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a3b      	ldr	r2, [pc, #236]	; (8003cdc <TIM_Base_SetConfig+0x120>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <TIM_Base_SetConfig+0x40>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a3a      	ldr	r2, [pc, #232]	; (8003ce0 <TIM_Base_SetConfig+0x124>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d108      	bne.n	8003c0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a2f      	ldr	r2, [pc, #188]	; (8003cd0 <TIM_Base_SetConfig+0x114>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d02b      	beq.n	8003c6e <TIM_Base_SetConfig+0xb2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1c:	d027      	beq.n	8003c6e <TIM_Base_SetConfig+0xb2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a2c      	ldr	r2, [pc, #176]	; (8003cd4 <TIM_Base_SetConfig+0x118>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d023      	beq.n	8003c6e <TIM_Base_SetConfig+0xb2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a2b      	ldr	r2, [pc, #172]	; (8003cd8 <TIM_Base_SetConfig+0x11c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d01f      	beq.n	8003c6e <TIM_Base_SetConfig+0xb2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a2a      	ldr	r2, [pc, #168]	; (8003cdc <TIM_Base_SetConfig+0x120>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d01b      	beq.n	8003c6e <TIM_Base_SetConfig+0xb2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a29      	ldr	r2, [pc, #164]	; (8003ce0 <TIM_Base_SetConfig+0x124>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d017      	beq.n	8003c6e <TIM_Base_SetConfig+0xb2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a28      	ldr	r2, [pc, #160]	; (8003ce4 <TIM_Base_SetConfig+0x128>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d013      	beq.n	8003c6e <TIM_Base_SetConfig+0xb2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a27      	ldr	r2, [pc, #156]	; (8003ce8 <TIM_Base_SetConfig+0x12c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00f      	beq.n	8003c6e <TIM_Base_SetConfig+0xb2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a26      	ldr	r2, [pc, #152]	; (8003cec <TIM_Base_SetConfig+0x130>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00b      	beq.n	8003c6e <TIM_Base_SetConfig+0xb2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a25      	ldr	r2, [pc, #148]	; (8003cf0 <TIM_Base_SetConfig+0x134>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d007      	beq.n	8003c6e <TIM_Base_SetConfig+0xb2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a24      	ldr	r2, [pc, #144]	; (8003cf4 <TIM_Base_SetConfig+0x138>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d003      	beq.n	8003c6e <TIM_Base_SetConfig+0xb2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a23      	ldr	r2, [pc, #140]	; (8003cf8 <TIM_Base_SetConfig+0x13c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d108      	bne.n	8003c80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a0a      	ldr	r2, [pc, #40]	; (8003cd0 <TIM_Base_SetConfig+0x114>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d003      	beq.n	8003cb4 <TIM_Base_SetConfig+0xf8>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a0c      	ldr	r2, [pc, #48]	; (8003ce0 <TIM_Base_SetConfig+0x124>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d103      	bne.n	8003cbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	615a      	str	r2, [r3, #20]
}
 8003cc2:	bf00      	nop
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40010000 	.word	0x40010000
 8003cd4:	40000400 	.word	0x40000400
 8003cd8:	40000800 	.word	0x40000800
 8003cdc:	40000c00 	.word	0x40000c00
 8003ce0:	40010400 	.word	0x40010400
 8003ce4:	40014000 	.word	0x40014000
 8003ce8:	40014400 	.word	0x40014400
 8003cec:	40014800 	.word	0x40014800
 8003cf0:	40001800 	.word	0x40001800
 8003cf4:	40001c00 	.word	0x40001c00
 8003cf8:	40002000 	.word	0x40002000

08003cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e05a      	b.n	8003dca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a21      	ldr	r2, [pc, #132]	; (8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d022      	beq.n	8003d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d60:	d01d      	beq.n	8003d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d018      	beq.n	8003d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1b      	ldr	r2, [pc, #108]	; (8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d013      	beq.n	8003d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1a      	ldr	r2, [pc, #104]	; (8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00e      	beq.n	8003d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a18      	ldr	r2, [pc, #96]	; (8003de8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d009      	beq.n	8003d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a17      	ldr	r2, [pc, #92]	; (8003dec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d004      	beq.n	8003d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a15      	ldr	r2, [pc, #84]	; (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d10c      	bne.n	8003db8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003da4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40010000 	.word	0x40010000
 8003ddc:	40000400 	.word	0x40000400
 8003de0:	40000800 	.word	0x40000800
 8003de4:	40000c00 	.word	0x40000c00
 8003de8:	40010400 	.word	0x40010400
 8003dec:	40014000 	.word	0x40014000
 8003df0:	40001800 	.word	0x40001800

08003df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e03f      	b.n	8003eae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fd fdc0 	bl	80019c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2224      	movs	r2, #36	; 0x24
 8003e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f90b 	bl	800407c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b088      	sub	sp, #32
 8003eba:	af02      	add	r7, sp, #8
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	f040 8083 	bne.w	8003fde <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <HAL_UART_Transmit+0x2e>
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e07b      	b.n	8003fe0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_UART_Transmit+0x40>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	e074      	b.n	8003fe0 <HAL_UART_Transmit+0x12a>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2221      	movs	r2, #33	; 0x21
 8003f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003f0c:	f7fd feba 	bl	8001c84 <HAL_GetTick>
 8003f10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	88fa      	ldrh	r2, [r7, #6]
 8003f16:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	88fa      	ldrh	r2, [r7, #6]
 8003f1c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003f26:	e042      	b.n	8003fae <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3e:	d122      	bne.n	8003f86 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2200      	movs	r2, #0
 8003f48:	2180      	movs	r1, #128	; 0x80
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f84c 	bl	8003fe8 <UART_WaitOnFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e042      	b.n	8003fe0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f6c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d103      	bne.n	8003f7e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	3302      	adds	r3, #2
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	e017      	b.n	8003fae <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	3301      	adds	r3, #1
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	e013      	b.n	8003fae <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2180      	movs	r1, #128	; 0x80
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 f829 	bl	8003fe8 <UART_WaitOnFlagUntilTimeout>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e01f      	b.n	8003fe0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	60ba      	str	r2, [r7, #8]
 8003fa6:	781a      	ldrb	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1b7      	bne.n	8003f28 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2140      	movs	r1, #64	; 0x40
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f810 	bl	8003fe8 <UART_WaitOnFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e006      	b.n	8003fe0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e000      	b.n	8003fe0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003fde:	2302      	movs	r3, #2
  }
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff8:	e02c      	b.n	8004054 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004000:	d028      	beq.n	8004054 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d007      	beq.n	8004018 <UART_WaitOnFlagUntilTimeout+0x30>
 8004008:	f7fd fe3c 	bl	8001c84 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	429a      	cmp	r2, r3
 8004016:	d21d      	bcs.n	8004054 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004026:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e00f      	b.n	8004074 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4013      	ands	r3, r2
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	429a      	cmp	r2, r3
 8004062:	bf0c      	ite	eq
 8004064:	2301      	moveq	r3, #1
 8004066:	2300      	movne	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	461a      	mov	r2, r3
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	429a      	cmp	r2, r3
 8004070:	d0c3      	beq.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800407c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004080:	b085      	sub	sp, #20
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80040be:	f023 030c 	bic.w	r3, r3, #12
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6812      	ldr	r2, [r2, #0]
 80040c6:	68f9      	ldr	r1, [r7, #12]
 80040c8:	430b      	orrs	r3, r1
 80040ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ea:	f040 818b 	bne.w	8004404 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4ac1      	ldr	r2, [pc, #772]	; (80043f8 <UART_SetConfig+0x37c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d005      	beq.n	8004104 <UART_SetConfig+0x88>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4abf      	ldr	r2, [pc, #764]	; (80043fc <UART_SetConfig+0x380>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	f040 80bd 	bne.w	800427e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004104:	f7fe ffc2 	bl	800308c <HAL_RCC_GetPCLK2Freq>
 8004108:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	461d      	mov	r5, r3
 800410e:	f04f 0600 	mov.w	r6, #0
 8004112:	46a8      	mov	r8, r5
 8004114:	46b1      	mov	r9, r6
 8004116:	eb18 0308 	adds.w	r3, r8, r8
 800411a:	eb49 0409 	adc.w	r4, r9, r9
 800411e:	4698      	mov	r8, r3
 8004120:	46a1      	mov	r9, r4
 8004122:	eb18 0805 	adds.w	r8, r8, r5
 8004126:	eb49 0906 	adc.w	r9, r9, r6
 800412a:	f04f 0100 	mov.w	r1, #0
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004136:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800413a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800413e:	4688      	mov	r8, r1
 8004140:	4691      	mov	r9, r2
 8004142:	eb18 0005 	adds.w	r0, r8, r5
 8004146:	eb49 0106 	adc.w	r1, r9, r6
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	461d      	mov	r5, r3
 8004150:	f04f 0600 	mov.w	r6, #0
 8004154:	196b      	adds	r3, r5, r5
 8004156:	eb46 0406 	adc.w	r4, r6, r6
 800415a:	461a      	mov	r2, r3
 800415c:	4623      	mov	r3, r4
 800415e:	f7fc fcf1 	bl	8000b44 <__aeabi_uldivmod>
 8004162:	4603      	mov	r3, r0
 8004164:	460c      	mov	r4, r1
 8004166:	461a      	mov	r2, r3
 8004168:	4ba5      	ldr	r3, [pc, #660]	; (8004400 <UART_SetConfig+0x384>)
 800416a:	fba3 2302 	umull	r2, r3, r3, r2
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	461d      	mov	r5, r3
 8004178:	f04f 0600 	mov.w	r6, #0
 800417c:	46a9      	mov	r9, r5
 800417e:	46b2      	mov	sl, r6
 8004180:	eb19 0309 	adds.w	r3, r9, r9
 8004184:	eb4a 040a 	adc.w	r4, sl, sl
 8004188:	4699      	mov	r9, r3
 800418a:	46a2      	mov	sl, r4
 800418c:	eb19 0905 	adds.w	r9, r9, r5
 8004190:	eb4a 0a06 	adc.w	sl, sl, r6
 8004194:	f04f 0100 	mov.w	r1, #0
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041a8:	4689      	mov	r9, r1
 80041aa:	4692      	mov	sl, r2
 80041ac:	eb19 0005 	adds.w	r0, r9, r5
 80041b0:	eb4a 0106 	adc.w	r1, sl, r6
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	461d      	mov	r5, r3
 80041ba:	f04f 0600 	mov.w	r6, #0
 80041be:	196b      	adds	r3, r5, r5
 80041c0:	eb46 0406 	adc.w	r4, r6, r6
 80041c4:	461a      	mov	r2, r3
 80041c6:	4623      	mov	r3, r4
 80041c8:	f7fc fcbc 	bl	8000b44 <__aeabi_uldivmod>
 80041cc:	4603      	mov	r3, r0
 80041ce:	460c      	mov	r4, r1
 80041d0:	461a      	mov	r2, r3
 80041d2:	4b8b      	ldr	r3, [pc, #556]	; (8004400 <UART_SetConfig+0x384>)
 80041d4:	fba3 1302 	umull	r1, r3, r3, r2
 80041d8:	095b      	lsrs	r3, r3, #5
 80041da:	2164      	movs	r1, #100	; 0x64
 80041dc:	fb01 f303 	mul.w	r3, r1, r3
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	3332      	adds	r3, #50	; 0x32
 80041e6:	4a86      	ldr	r2, [pc, #536]	; (8004400 <UART_SetConfig+0x384>)
 80041e8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041f4:	4498      	add	r8, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	461d      	mov	r5, r3
 80041fa:	f04f 0600 	mov.w	r6, #0
 80041fe:	46a9      	mov	r9, r5
 8004200:	46b2      	mov	sl, r6
 8004202:	eb19 0309 	adds.w	r3, r9, r9
 8004206:	eb4a 040a 	adc.w	r4, sl, sl
 800420a:	4699      	mov	r9, r3
 800420c:	46a2      	mov	sl, r4
 800420e:	eb19 0905 	adds.w	r9, r9, r5
 8004212:	eb4a 0a06 	adc.w	sl, sl, r6
 8004216:	f04f 0100 	mov.w	r1, #0
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004222:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004226:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800422a:	4689      	mov	r9, r1
 800422c:	4692      	mov	sl, r2
 800422e:	eb19 0005 	adds.w	r0, r9, r5
 8004232:	eb4a 0106 	adc.w	r1, sl, r6
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	461d      	mov	r5, r3
 800423c:	f04f 0600 	mov.w	r6, #0
 8004240:	196b      	adds	r3, r5, r5
 8004242:	eb46 0406 	adc.w	r4, r6, r6
 8004246:	461a      	mov	r2, r3
 8004248:	4623      	mov	r3, r4
 800424a:	f7fc fc7b 	bl	8000b44 <__aeabi_uldivmod>
 800424e:	4603      	mov	r3, r0
 8004250:	460c      	mov	r4, r1
 8004252:	461a      	mov	r2, r3
 8004254:	4b6a      	ldr	r3, [pc, #424]	; (8004400 <UART_SetConfig+0x384>)
 8004256:	fba3 1302 	umull	r1, r3, r3, r2
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	2164      	movs	r1, #100	; 0x64
 800425e:	fb01 f303 	mul.w	r3, r1, r3
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	3332      	adds	r3, #50	; 0x32
 8004268:	4a65      	ldr	r2, [pc, #404]	; (8004400 <UART_SetConfig+0x384>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	f003 0207 	and.w	r2, r3, #7
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4442      	add	r2, r8
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	e26f      	b.n	800475e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800427e:	f7fe fef1 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 8004282:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	461d      	mov	r5, r3
 8004288:	f04f 0600 	mov.w	r6, #0
 800428c:	46a8      	mov	r8, r5
 800428e:	46b1      	mov	r9, r6
 8004290:	eb18 0308 	adds.w	r3, r8, r8
 8004294:	eb49 0409 	adc.w	r4, r9, r9
 8004298:	4698      	mov	r8, r3
 800429a:	46a1      	mov	r9, r4
 800429c:	eb18 0805 	adds.w	r8, r8, r5
 80042a0:	eb49 0906 	adc.w	r9, r9, r6
 80042a4:	f04f 0100 	mov.w	r1, #0
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042b8:	4688      	mov	r8, r1
 80042ba:	4691      	mov	r9, r2
 80042bc:	eb18 0005 	adds.w	r0, r8, r5
 80042c0:	eb49 0106 	adc.w	r1, r9, r6
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	461d      	mov	r5, r3
 80042ca:	f04f 0600 	mov.w	r6, #0
 80042ce:	196b      	adds	r3, r5, r5
 80042d0:	eb46 0406 	adc.w	r4, r6, r6
 80042d4:	461a      	mov	r2, r3
 80042d6:	4623      	mov	r3, r4
 80042d8:	f7fc fc34 	bl	8000b44 <__aeabi_uldivmod>
 80042dc:	4603      	mov	r3, r0
 80042de:	460c      	mov	r4, r1
 80042e0:	461a      	mov	r2, r3
 80042e2:	4b47      	ldr	r3, [pc, #284]	; (8004400 <UART_SetConfig+0x384>)
 80042e4:	fba3 2302 	umull	r2, r3, r3, r2
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	461d      	mov	r5, r3
 80042f2:	f04f 0600 	mov.w	r6, #0
 80042f6:	46a9      	mov	r9, r5
 80042f8:	46b2      	mov	sl, r6
 80042fa:	eb19 0309 	adds.w	r3, r9, r9
 80042fe:	eb4a 040a 	adc.w	r4, sl, sl
 8004302:	4699      	mov	r9, r3
 8004304:	46a2      	mov	sl, r4
 8004306:	eb19 0905 	adds.w	r9, r9, r5
 800430a:	eb4a 0a06 	adc.w	sl, sl, r6
 800430e:	f04f 0100 	mov.w	r1, #0
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800431a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800431e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004322:	4689      	mov	r9, r1
 8004324:	4692      	mov	sl, r2
 8004326:	eb19 0005 	adds.w	r0, r9, r5
 800432a:	eb4a 0106 	adc.w	r1, sl, r6
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	461d      	mov	r5, r3
 8004334:	f04f 0600 	mov.w	r6, #0
 8004338:	196b      	adds	r3, r5, r5
 800433a:	eb46 0406 	adc.w	r4, r6, r6
 800433e:	461a      	mov	r2, r3
 8004340:	4623      	mov	r3, r4
 8004342:	f7fc fbff 	bl	8000b44 <__aeabi_uldivmod>
 8004346:	4603      	mov	r3, r0
 8004348:	460c      	mov	r4, r1
 800434a:	461a      	mov	r2, r3
 800434c:	4b2c      	ldr	r3, [pc, #176]	; (8004400 <UART_SetConfig+0x384>)
 800434e:	fba3 1302 	umull	r1, r3, r3, r2
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2164      	movs	r1, #100	; 0x64
 8004356:	fb01 f303 	mul.w	r3, r1, r3
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	3332      	adds	r3, #50	; 0x32
 8004360:	4a27      	ldr	r2, [pc, #156]	; (8004400 <UART_SetConfig+0x384>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800436e:	4498      	add	r8, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	461d      	mov	r5, r3
 8004374:	f04f 0600 	mov.w	r6, #0
 8004378:	46a9      	mov	r9, r5
 800437a:	46b2      	mov	sl, r6
 800437c:	eb19 0309 	adds.w	r3, r9, r9
 8004380:	eb4a 040a 	adc.w	r4, sl, sl
 8004384:	4699      	mov	r9, r3
 8004386:	46a2      	mov	sl, r4
 8004388:	eb19 0905 	adds.w	r9, r9, r5
 800438c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004390:	f04f 0100 	mov.w	r1, #0
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800439c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043a4:	4689      	mov	r9, r1
 80043a6:	4692      	mov	sl, r2
 80043a8:	eb19 0005 	adds.w	r0, r9, r5
 80043ac:	eb4a 0106 	adc.w	r1, sl, r6
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	461d      	mov	r5, r3
 80043b6:	f04f 0600 	mov.w	r6, #0
 80043ba:	196b      	adds	r3, r5, r5
 80043bc:	eb46 0406 	adc.w	r4, r6, r6
 80043c0:	461a      	mov	r2, r3
 80043c2:	4623      	mov	r3, r4
 80043c4:	f7fc fbbe 	bl	8000b44 <__aeabi_uldivmod>
 80043c8:	4603      	mov	r3, r0
 80043ca:	460c      	mov	r4, r1
 80043cc:	461a      	mov	r2, r3
 80043ce:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <UART_SetConfig+0x384>)
 80043d0:	fba3 1302 	umull	r1, r3, r3, r2
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	2164      	movs	r1, #100	; 0x64
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	3332      	adds	r3, #50	; 0x32
 80043e2:	4a07      	ldr	r2, [pc, #28]	; (8004400 <UART_SetConfig+0x384>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	f003 0207 	and.w	r2, r3, #7
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4442      	add	r2, r8
 80043f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80043f6:	e1b2      	b.n	800475e <UART_SetConfig+0x6e2>
 80043f8:	40011000 	.word	0x40011000
 80043fc:	40011400 	.word	0x40011400
 8004400:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4ad7      	ldr	r2, [pc, #860]	; (8004768 <UART_SetConfig+0x6ec>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d005      	beq.n	800441a <UART_SetConfig+0x39e>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4ad6      	ldr	r2, [pc, #856]	; (800476c <UART_SetConfig+0x6f0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	f040 80d1 	bne.w	80045bc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800441a:	f7fe fe37 	bl	800308c <HAL_RCC_GetPCLK2Freq>
 800441e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	469a      	mov	sl, r3
 8004424:	f04f 0b00 	mov.w	fp, #0
 8004428:	46d0      	mov	r8, sl
 800442a:	46d9      	mov	r9, fp
 800442c:	eb18 0308 	adds.w	r3, r8, r8
 8004430:	eb49 0409 	adc.w	r4, r9, r9
 8004434:	4698      	mov	r8, r3
 8004436:	46a1      	mov	r9, r4
 8004438:	eb18 080a 	adds.w	r8, r8, sl
 800443c:	eb49 090b 	adc.w	r9, r9, fp
 8004440:	f04f 0100 	mov.w	r1, #0
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800444c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004450:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004454:	4688      	mov	r8, r1
 8004456:	4691      	mov	r9, r2
 8004458:	eb1a 0508 	adds.w	r5, sl, r8
 800445c:	eb4b 0609 	adc.w	r6, fp, r9
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4619      	mov	r1, r3
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	f04f 0400 	mov.w	r4, #0
 8004472:	0094      	lsls	r4, r2, #2
 8004474:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004478:	008b      	lsls	r3, r1, #2
 800447a:	461a      	mov	r2, r3
 800447c:	4623      	mov	r3, r4
 800447e:	4628      	mov	r0, r5
 8004480:	4631      	mov	r1, r6
 8004482:	f7fc fb5f 	bl	8000b44 <__aeabi_uldivmod>
 8004486:	4603      	mov	r3, r0
 8004488:	460c      	mov	r4, r1
 800448a:	461a      	mov	r2, r3
 800448c:	4bb8      	ldr	r3, [pc, #736]	; (8004770 <UART_SetConfig+0x6f4>)
 800448e:	fba3 2302 	umull	r2, r3, r3, r2
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	469b      	mov	fp, r3
 800449c:	f04f 0c00 	mov.w	ip, #0
 80044a0:	46d9      	mov	r9, fp
 80044a2:	46e2      	mov	sl, ip
 80044a4:	eb19 0309 	adds.w	r3, r9, r9
 80044a8:	eb4a 040a 	adc.w	r4, sl, sl
 80044ac:	4699      	mov	r9, r3
 80044ae:	46a2      	mov	sl, r4
 80044b0:	eb19 090b 	adds.w	r9, r9, fp
 80044b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044b8:	f04f 0100 	mov.w	r1, #0
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044cc:	4689      	mov	r9, r1
 80044ce:	4692      	mov	sl, r2
 80044d0:	eb1b 0509 	adds.w	r5, fp, r9
 80044d4:	eb4c 060a 	adc.w	r6, ip, sl
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	4619      	mov	r1, r3
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	f04f 0400 	mov.w	r4, #0
 80044ea:	0094      	lsls	r4, r2, #2
 80044ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044f0:	008b      	lsls	r3, r1, #2
 80044f2:	461a      	mov	r2, r3
 80044f4:	4623      	mov	r3, r4
 80044f6:	4628      	mov	r0, r5
 80044f8:	4631      	mov	r1, r6
 80044fa:	f7fc fb23 	bl	8000b44 <__aeabi_uldivmod>
 80044fe:	4603      	mov	r3, r0
 8004500:	460c      	mov	r4, r1
 8004502:	461a      	mov	r2, r3
 8004504:	4b9a      	ldr	r3, [pc, #616]	; (8004770 <UART_SetConfig+0x6f4>)
 8004506:	fba3 1302 	umull	r1, r3, r3, r2
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2164      	movs	r1, #100	; 0x64
 800450e:	fb01 f303 	mul.w	r3, r1, r3
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	3332      	adds	r3, #50	; 0x32
 8004518:	4a95      	ldr	r2, [pc, #596]	; (8004770 <UART_SetConfig+0x6f4>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004524:	4498      	add	r8, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	469b      	mov	fp, r3
 800452a:	f04f 0c00 	mov.w	ip, #0
 800452e:	46d9      	mov	r9, fp
 8004530:	46e2      	mov	sl, ip
 8004532:	eb19 0309 	adds.w	r3, r9, r9
 8004536:	eb4a 040a 	adc.w	r4, sl, sl
 800453a:	4699      	mov	r9, r3
 800453c:	46a2      	mov	sl, r4
 800453e:	eb19 090b 	adds.w	r9, r9, fp
 8004542:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004546:	f04f 0100 	mov.w	r1, #0
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004552:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004556:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800455a:	4689      	mov	r9, r1
 800455c:	4692      	mov	sl, r2
 800455e:	eb1b 0509 	adds.w	r5, fp, r9
 8004562:	eb4c 060a 	adc.w	r6, ip, sl
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	4619      	mov	r1, r3
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	f04f 0400 	mov.w	r4, #0
 8004578:	0094      	lsls	r4, r2, #2
 800457a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800457e:	008b      	lsls	r3, r1, #2
 8004580:	461a      	mov	r2, r3
 8004582:	4623      	mov	r3, r4
 8004584:	4628      	mov	r0, r5
 8004586:	4631      	mov	r1, r6
 8004588:	f7fc fadc 	bl	8000b44 <__aeabi_uldivmod>
 800458c:	4603      	mov	r3, r0
 800458e:	460c      	mov	r4, r1
 8004590:	461a      	mov	r2, r3
 8004592:	4b77      	ldr	r3, [pc, #476]	; (8004770 <UART_SetConfig+0x6f4>)
 8004594:	fba3 1302 	umull	r1, r3, r3, r2
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	2164      	movs	r1, #100	; 0x64
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	3332      	adds	r3, #50	; 0x32
 80045a6:	4a72      	ldr	r2, [pc, #456]	; (8004770 <UART_SetConfig+0x6f4>)
 80045a8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	f003 020f 	and.w	r2, r3, #15
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4442      	add	r2, r8
 80045b8:	609a      	str	r2, [r3, #8]
 80045ba:	e0d0      	b.n	800475e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80045bc:	f7fe fd52 	bl	8003064 <HAL_RCC_GetPCLK1Freq>
 80045c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	469a      	mov	sl, r3
 80045c6:	f04f 0b00 	mov.w	fp, #0
 80045ca:	46d0      	mov	r8, sl
 80045cc:	46d9      	mov	r9, fp
 80045ce:	eb18 0308 	adds.w	r3, r8, r8
 80045d2:	eb49 0409 	adc.w	r4, r9, r9
 80045d6:	4698      	mov	r8, r3
 80045d8:	46a1      	mov	r9, r4
 80045da:	eb18 080a 	adds.w	r8, r8, sl
 80045de:	eb49 090b 	adc.w	r9, r9, fp
 80045e2:	f04f 0100 	mov.w	r1, #0
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80045ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80045f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80045f6:	4688      	mov	r8, r1
 80045f8:	4691      	mov	r9, r2
 80045fa:	eb1a 0508 	adds.w	r5, sl, r8
 80045fe:	eb4b 0609 	adc.w	r6, fp, r9
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	4619      	mov	r1, r3
 8004608:	f04f 0200 	mov.w	r2, #0
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	f04f 0400 	mov.w	r4, #0
 8004614:	0094      	lsls	r4, r2, #2
 8004616:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800461a:	008b      	lsls	r3, r1, #2
 800461c:	461a      	mov	r2, r3
 800461e:	4623      	mov	r3, r4
 8004620:	4628      	mov	r0, r5
 8004622:	4631      	mov	r1, r6
 8004624:	f7fc fa8e 	bl	8000b44 <__aeabi_uldivmod>
 8004628:	4603      	mov	r3, r0
 800462a:	460c      	mov	r4, r1
 800462c:	461a      	mov	r2, r3
 800462e:	4b50      	ldr	r3, [pc, #320]	; (8004770 <UART_SetConfig+0x6f4>)
 8004630:	fba3 2302 	umull	r2, r3, r3, r2
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	469b      	mov	fp, r3
 800463e:	f04f 0c00 	mov.w	ip, #0
 8004642:	46d9      	mov	r9, fp
 8004644:	46e2      	mov	sl, ip
 8004646:	eb19 0309 	adds.w	r3, r9, r9
 800464a:	eb4a 040a 	adc.w	r4, sl, sl
 800464e:	4699      	mov	r9, r3
 8004650:	46a2      	mov	sl, r4
 8004652:	eb19 090b 	adds.w	r9, r9, fp
 8004656:	eb4a 0a0c 	adc.w	sl, sl, ip
 800465a:	f04f 0100 	mov.w	r1, #0
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004666:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800466a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800466e:	4689      	mov	r9, r1
 8004670:	4692      	mov	sl, r2
 8004672:	eb1b 0509 	adds.w	r5, fp, r9
 8004676:	eb4c 060a 	adc.w	r6, ip, sl
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	4619      	mov	r1, r3
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	f04f 0400 	mov.w	r4, #0
 800468c:	0094      	lsls	r4, r2, #2
 800468e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004692:	008b      	lsls	r3, r1, #2
 8004694:	461a      	mov	r2, r3
 8004696:	4623      	mov	r3, r4
 8004698:	4628      	mov	r0, r5
 800469a:	4631      	mov	r1, r6
 800469c:	f7fc fa52 	bl	8000b44 <__aeabi_uldivmod>
 80046a0:	4603      	mov	r3, r0
 80046a2:	460c      	mov	r4, r1
 80046a4:	461a      	mov	r2, r3
 80046a6:	4b32      	ldr	r3, [pc, #200]	; (8004770 <UART_SetConfig+0x6f4>)
 80046a8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	2164      	movs	r1, #100	; 0x64
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	3332      	adds	r3, #50	; 0x32
 80046ba:	4a2d      	ldr	r2, [pc, #180]	; (8004770 <UART_SetConfig+0x6f4>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046c6:	4498      	add	r8, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	469b      	mov	fp, r3
 80046cc:	f04f 0c00 	mov.w	ip, #0
 80046d0:	46d9      	mov	r9, fp
 80046d2:	46e2      	mov	sl, ip
 80046d4:	eb19 0309 	adds.w	r3, r9, r9
 80046d8:	eb4a 040a 	adc.w	r4, sl, sl
 80046dc:	4699      	mov	r9, r3
 80046de:	46a2      	mov	sl, r4
 80046e0:	eb19 090b 	adds.w	r9, r9, fp
 80046e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046e8:	f04f 0100 	mov.w	r1, #0
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046fc:	4689      	mov	r9, r1
 80046fe:	4692      	mov	sl, r2
 8004700:	eb1b 0509 	adds.w	r5, fp, r9
 8004704:	eb4c 060a 	adc.w	r6, ip, sl
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4619      	mov	r1, r3
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	f04f 0400 	mov.w	r4, #0
 800471a:	0094      	lsls	r4, r2, #2
 800471c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004720:	008b      	lsls	r3, r1, #2
 8004722:	461a      	mov	r2, r3
 8004724:	4623      	mov	r3, r4
 8004726:	4628      	mov	r0, r5
 8004728:	4631      	mov	r1, r6
 800472a:	f7fc fa0b 	bl	8000b44 <__aeabi_uldivmod>
 800472e:	4603      	mov	r3, r0
 8004730:	460c      	mov	r4, r1
 8004732:	461a      	mov	r2, r3
 8004734:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <UART_SetConfig+0x6f4>)
 8004736:	fba3 1302 	umull	r1, r3, r3, r2
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	2164      	movs	r1, #100	; 0x64
 800473e:	fb01 f303 	mul.w	r3, r1, r3
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	3332      	adds	r3, #50	; 0x32
 8004748:	4a09      	ldr	r2, [pc, #36]	; (8004770 <UART_SetConfig+0x6f4>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	f003 020f 	and.w	r2, r3, #15
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4442      	add	r2, r8
 800475a:	609a      	str	r2, [r3, #8]
}
 800475c:	e7ff      	b.n	800475e <UART_SetConfig+0x6e2>
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004768:	40011000 	.word	0x40011000
 800476c:	40011400 	.word	0x40011400
 8004770:	51eb851f 	.word	0x51eb851f

08004774 <__libc_init_array>:
 8004774:	b570      	push	{r4, r5, r6, lr}
 8004776:	4e0d      	ldr	r6, [pc, #52]	; (80047ac <__libc_init_array+0x38>)
 8004778:	4c0d      	ldr	r4, [pc, #52]	; (80047b0 <__libc_init_array+0x3c>)
 800477a:	1ba4      	subs	r4, r4, r6
 800477c:	10a4      	asrs	r4, r4, #2
 800477e:	2500      	movs	r5, #0
 8004780:	42a5      	cmp	r5, r4
 8004782:	d109      	bne.n	8004798 <__libc_init_array+0x24>
 8004784:	4e0b      	ldr	r6, [pc, #44]	; (80047b4 <__libc_init_array+0x40>)
 8004786:	4c0c      	ldr	r4, [pc, #48]	; (80047b8 <__libc_init_array+0x44>)
 8004788:	f001 f878 	bl	800587c <_init>
 800478c:	1ba4      	subs	r4, r4, r6
 800478e:	10a4      	asrs	r4, r4, #2
 8004790:	2500      	movs	r5, #0
 8004792:	42a5      	cmp	r5, r4
 8004794:	d105      	bne.n	80047a2 <__libc_init_array+0x2e>
 8004796:	bd70      	pop	{r4, r5, r6, pc}
 8004798:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800479c:	4798      	blx	r3
 800479e:	3501      	adds	r5, #1
 80047a0:	e7ee      	b.n	8004780 <__libc_init_array+0xc>
 80047a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047a6:	4798      	blx	r3
 80047a8:	3501      	adds	r5, #1
 80047aa:	e7f2      	b.n	8004792 <__libc_init_array+0x1e>
 80047ac:	08005aa8 	.word	0x08005aa8
 80047b0:	08005aa8 	.word	0x08005aa8
 80047b4:	08005aa8 	.word	0x08005aa8
 80047b8:	08005aac 	.word	0x08005aac

080047bc <memset>:
 80047bc:	4402      	add	r2, r0
 80047be:	4603      	mov	r3, r0
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d100      	bne.n	80047c6 <memset+0xa>
 80047c4:	4770      	bx	lr
 80047c6:	f803 1b01 	strb.w	r1, [r3], #1
 80047ca:	e7f9      	b.n	80047c0 <memset+0x4>
 80047cc:	0000      	movs	r0, r0
	...

080047d0 <cos>:
 80047d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80047d2:	ec51 0b10 	vmov	r0, r1, d0
 80047d6:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <cos+0x80>)
 80047d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80047dc:	4293      	cmp	r3, r2
 80047de:	dc06      	bgt.n	80047ee <cos+0x1e>
 80047e0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8004848 <cos+0x78>
 80047e4:	f000 fa74 	bl	8004cd0 <__kernel_cos>
 80047e8:	ec51 0b10 	vmov	r0, r1, d0
 80047ec:	e007      	b.n	80047fe <cos+0x2e>
 80047ee:	4a19      	ldr	r2, [pc, #100]	; (8004854 <cos+0x84>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	dd09      	ble.n	8004808 <cos+0x38>
 80047f4:	ee10 2a10 	vmov	r2, s0
 80047f8:	460b      	mov	r3, r1
 80047fa:	f7fb fd09 	bl	8000210 <__aeabi_dsub>
 80047fe:	ec41 0b10 	vmov	d0, r0, r1
 8004802:	b005      	add	sp, #20
 8004804:	f85d fb04 	ldr.w	pc, [sp], #4
 8004808:	4668      	mov	r0, sp
 800480a:	f000 f86d 	bl	80048e8 <__ieee754_rem_pio2>
 800480e:	f000 0003 	and.w	r0, r0, #3
 8004812:	2801      	cmp	r0, #1
 8004814:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004818:	ed9d 0b00 	vldr	d0, [sp]
 800481c:	d007      	beq.n	800482e <cos+0x5e>
 800481e:	2802      	cmp	r0, #2
 8004820:	d00e      	beq.n	8004840 <cos+0x70>
 8004822:	2800      	cmp	r0, #0
 8004824:	d0de      	beq.n	80047e4 <cos+0x14>
 8004826:	2001      	movs	r0, #1
 8004828:	f000 fe5a 	bl	80054e0 <__kernel_sin>
 800482c:	e7dc      	b.n	80047e8 <cos+0x18>
 800482e:	f000 fe57 	bl	80054e0 <__kernel_sin>
 8004832:	ec53 2b10 	vmov	r2, r3, d0
 8004836:	ee10 0a10 	vmov	r0, s0
 800483a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800483e:	e7de      	b.n	80047fe <cos+0x2e>
 8004840:	f000 fa46 	bl	8004cd0 <__kernel_cos>
 8004844:	e7f5      	b.n	8004832 <cos+0x62>
 8004846:	bf00      	nop
	...
 8004850:	3fe921fb 	.word	0x3fe921fb
 8004854:	7fefffff 	.word	0x7fefffff

08004858 <sin>:
 8004858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800485a:	ec51 0b10 	vmov	r0, r1, d0
 800485e:	4a20      	ldr	r2, [pc, #128]	; (80048e0 <sin+0x88>)
 8004860:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004864:	4293      	cmp	r3, r2
 8004866:	dc07      	bgt.n	8004878 <sin+0x20>
 8004868:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80048d8 <sin+0x80>
 800486c:	2000      	movs	r0, #0
 800486e:	f000 fe37 	bl	80054e0 <__kernel_sin>
 8004872:	ec51 0b10 	vmov	r0, r1, d0
 8004876:	e007      	b.n	8004888 <sin+0x30>
 8004878:	4a1a      	ldr	r2, [pc, #104]	; (80048e4 <sin+0x8c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	dd09      	ble.n	8004892 <sin+0x3a>
 800487e:	ee10 2a10 	vmov	r2, s0
 8004882:	460b      	mov	r3, r1
 8004884:	f7fb fcc4 	bl	8000210 <__aeabi_dsub>
 8004888:	ec41 0b10 	vmov	d0, r0, r1
 800488c:	b005      	add	sp, #20
 800488e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004892:	4668      	mov	r0, sp
 8004894:	f000 f828 	bl	80048e8 <__ieee754_rem_pio2>
 8004898:	f000 0003 	and.w	r0, r0, #3
 800489c:	2801      	cmp	r0, #1
 800489e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80048a2:	ed9d 0b00 	vldr	d0, [sp]
 80048a6:	d004      	beq.n	80048b2 <sin+0x5a>
 80048a8:	2802      	cmp	r0, #2
 80048aa:	d005      	beq.n	80048b8 <sin+0x60>
 80048ac:	b970      	cbnz	r0, 80048cc <sin+0x74>
 80048ae:	2001      	movs	r0, #1
 80048b0:	e7dd      	b.n	800486e <sin+0x16>
 80048b2:	f000 fa0d 	bl	8004cd0 <__kernel_cos>
 80048b6:	e7dc      	b.n	8004872 <sin+0x1a>
 80048b8:	2001      	movs	r0, #1
 80048ba:	f000 fe11 	bl	80054e0 <__kernel_sin>
 80048be:	ec53 2b10 	vmov	r2, r3, d0
 80048c2:	ee10 0a10 	vmov	r0, s0
 80048c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80048ca:	e7dd      	b.n	8004888 <sin+0x30>
 80048cc:	f000 fa00 	bl	8004cd0 <__kernel_cos>
 80048d0:	e7f5      	b.n	80048be <sin+0x66>
 80048d2:	bf00      	nop
 80048d4:	f3af 8000 	nop.w
	...
 80048e0:	3fe921fb 	.word	0x3fe921fb
 80048e4:	7fefffff 	.word	0x7fefffff

080048e8 <__ieee754_rem_pio2>:
 80048e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ec:	ec57 6b10 	vmov	r6, r7, d0
 80048f0:	4bc3      	ldr	r3, [pc, #780]	; (8004c00 <__ieee754_rem_pio2+0x318>)
 80048f2:	b08d      	sub	sp, #52	; 0x34
 80048f4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80048f8:	4598      	cmp	r8, r3
 80048fa:	4604      	mov	r4, r0
 80048fc:	9704      	str	r7, [sp, #16]
 80048fe:	dc07      	bgt.n	8004910 <__ieee754_rem_pio2+0x28>
 8004900:	2200      	movs	r2, #0
 8004902:	2300      	movs	r3, #0
 8004904:	ed84 0b00 	vstr	d0, [r4]
 8004908:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800490c:	2500      	movs	r5, #0
 800490e:	e027      	b.n	8004960 <__ieee754_rem_pio2+0x78>
 8004910:	4bbc      	ldr	r3, [pc, #752]	; (8004c04 <__ieee754_rem_pio2+0x31c>)
 8004912:	4598      	cmp	r8, r3
 8004914:	dc75      	bgt.n	8004a02 <__ieee754_rem_pio2+0x11a>
 8004916:	9b04      	ldr	r3, [sp, #16]
 8004918:	4dbb      	ldr	r5, [pc, #748]	; (8004c08 <__ieee754_rem_pio2+0x320>)
 800491a:	2b00      	cmp	r3, #0
 800491c:	ee10 0a10 	vmov	r0, s0
 8004920:	a3a9      	add	r3, pc, #676	; (adr r3, 8004bc8 <__ieee754_rem_pio2+0x2e0>)
 8004922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004926:	4639      	mov	r1, r7
 8004928:	dd36      	ble.n	8004998 <__ieee754_rem_pio2+0xb0>
 800492a:	f7fb fc71 	bl	8000210 <__aeabi_dsub>
 800492e:	45a8      	cmp	r8, r5
 8004930:	4606      	mov	r6, r0
 8004932:	460f      	mov	r7, r1
 8004934:	d018      	beq.n	8004968 <__ieee754_rem_pio2+0x80>
 8004936:	a3a6      	add	r3, pc, #664	; (adr r3, 8004bd0 <__ieee754_rem_pio2+0x2e8>)
 8004938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493c:	f7fb fc68 	bl	8000210 <__aeabi_dsub>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	e9c4 2300 	strd	r2, r3, [r4]
 8004948:	4630      	mov	r0, r6
 800494a:	4639      	mov	r1, r7
 800494c:	f7fb fc60 	bl	8000210 <__aeabi_dsub>
 8004950:	a39f      	add	r3, pc, #636	; (adr r3, 8004bd0 <__ieee754_rem_pio2+0x2e8>)
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	f7fb fc5b 	bl	8000210 <__aeabi_dsub>
 800495a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800495e:	2501      	movs	r5, #1
 8004960:	4628      	mov	r0, r5
 8004962:	b00d      	add	sp, #52	; 0x34
 8004964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004968:	a39b      	add	r3, pc, #620	; (adr r3, 8004bd8 <__ieee754_rem_pio2+0x2f0>)
 800496a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496e:	f7fb fc4f 	bl	8000210 <__aeabi_dsub>
 8004972:	a39b      	add	r3, pc, #620	; (adr r3, 8004be0 <__ieee754_rem_pio2+0x2f8>)
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	4606      	mov	r6, r0
 800497a:	460f      	mov	r7, r1
 800497c:	f7fb fc48 	bl	8000210 <__aeabi_dsub>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	e9c4 2300 	strd	r2, r3, [r4]
 8004988:	4630      	mov	r0, r6
 800498a:	4639      	mov	r1, r7
 800498c:	f7fb fc40 	bl	8000210 <__aeabi_dsub>
 8004990:	a393      	add	r3, pc, #588	; (adr r3, 8004be0 <__ieee754_rem_pio2+0x2f8>)
 8004992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004996:	e7de      	b.n	8004956 <__ieee754_rem_pio2+0x6e>
 8004998:	f7fb fc3c 	bl	8000214 <__adddf3>
 800499c:	45a8      	cmp	r8, r5
 800499e:	4606      	mov	r6, r0
 80049a0:	460f      	mov	r7, r1
 80049a2:	d016      	beq.n	80049d2 <__ieee754_rem_pio2+0xea>
 80049a4:	a38a      	add	r3, pc, #552	; (adr r3, 8004bd0 <__ieee754_rem_pio2+0x2e8>)
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	f7fb fc33 	bl	8000214 <__adddf3>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	e9c4 2300 	strd	r2, r3, [r4]
 80049b6:	4630      	mov	r0, r6
 80049b8:	4639      	mov	r1, r7
 80049ba:	f7fb fc29 	bl	8000210 <__aeabi_dsub>
 80049be:	a384      	add	r3, pc, #528	; (adr r3, 8004bd0 <__ieee754_rem_pio2+0x2e8>)
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	f7fb fc26 	bl	8000214 <__adddf3>
 80049c8:	f04f 35ff 	mov.w	r5, #4294967295
 80049cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80049d0:	e7c6      	b.n	8004960 <__ieee754_rem_pio2+0x78>
 80049d2:	a381      	add	r3, pc, #516	; (adr r3, 8004bd8 <__ieee754_rem_pio2+0x2f0>)
 80049d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d8:	f7fb fc1c 	bl	8000214 <__adddf3>
 80049dc:	a380      	add	r3, pc, #512	; (adr r3, 8004be0 <__ieee754_rem_pio2+0x2f8>)
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	4606      	mov	r6, r0
 80049e4:	460f      	mov	r7, r1
 80049e6:	f7fb fc15 	bl	8000214 <__adddf3>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	e9c4 2300 	strd	r2, r3, [r4]
 80049f2:	4630      	mov	r0, r6
 80049f4:	4639      	mov	r1, r7
 80049f6:	f7fb fc0b 	bl	8000210 <__aeabi_dsub>
 80049fa:	a379      	add	r3, pc, #484	; (adr r3, 8004be0 <__ieee754_rem_pio2+0x2f8>)
 80049fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a00:	e7e0      	b.n	80049c4 <__ieee754_rem_pio2+0xdc>
 8004a02:	4b82      	ldr	r3, [pc, #520]	; (8004c0c <__ieee754_rem_pio2+0x324>)
 8004a04:	4598      	cmp	r8, r3
 8004a06:	f300 80d0 	bgt.w	8004baa <__ieee754_rem_pio2+0x2c2>
 8004a0a:	f000 fe23 	bl	8005654 <fabs>
 8004a0e:	ec57 6b10 	vmov	r6, r7, d0
 8004a12:	ee10 0a10 	vmov	r0, s0
 8004a16:	a374      	add	r3, pc, #464	; (adr r3, 8004be8 <__ieee754_rem_pio2+0x300>)
 8004a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1c:	4639      	mov	r1, r7
 8004a1e:	f7fb fdaf 	bl	8000580 <__aeabi_dmul>
 8004a22:	2200      	movs	r2, #0
 8004a24:	4b7a      	ldr	r3, [pc, #488]	; (8004c10 <__ieee754_rem_pio2+0x328>)
 8004a26:	f7fb fbf5 	bl	8000214 <__adddf3>
 8004a2a:	f7fc f843 	bl	8000ab4 <__aeabi_d2iz>
 8004a2e:	4605      	mov	r5, r0
 8004a30:	f7fb fd3c 	bl	80004ac <__aeabi_i2d>
 8004a34:	a364      	add	r3, pc, #400	; (adr r3, 8004bc8 <__ieee754_rem_pio2+0x2e0>)
 8004a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a3e:	f7fb fd9f 	bl	8000580 <__aeabi_dmul>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4630      	mov	r0, r6
 8004a48:	4639      	mov	r1, r7
 8004a4a:	f7fb fbe1 	bl	8000210 <__aeabi_dsub>
 8004a4e:	a360      	add	r3, pc, #384	; (adr r3, 8004bd0 <__ieee754_rem_pio2+0x2e8>)
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	4682      	mov	sl, r0
 8004a56:	468b      	mov	fp, r1
 8004a58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a5c:	f7fb fd90 	bl	8000580 <__aeabi_dmul>
 8004a60:	2d1f      	cmp	r5, #31
 8004a62:	4606      	mov	r6, r0
 8004a64:	460f      	mov	r7, r1
 8004a66:	dc0c      	bgt.n	8004a82 <__ieee754_rem_pio2+0x19a>
 8004a68:	1e6a      	subs	r2, r5, #1
 8004a6a:	4b6a      	ldr	r3, [pc, #424]	; (8004c14 <__ieee754_rem_pio2+0x32c>)
 8004a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a70:	4543      	cmp	r3, r8
 8004a72:	d006      	beq.n	8004a82 <__ieee754_rem_pio2+0x19a>
 8004a74:	4632      	mov	r2, r6
 8004a76:	463b      	mov	r3, r7
 8004a78:	4650      	mov	r0, sl
 8004a7a:	4659      	mov	r1, fp
 8004a7c:	f7fb fbc8 	bl	8000210 <__aeabi_dsub>
 8004a80:	e00e      	b.n	8004aa0 <__ieee754_rem_pio2+0x1b8>
 8004a82:	4632      	mov	r2, r6
 8004a84:	463b      	mov	r3, r7
 8004a86:	4650      	mov	r0, sl
 8004a88:	4659      	mov	r1, fp
 8004a8a:	f7fb fbc1 	bl	8000210 <__aeabi_dsub>
 8004a8e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004a92:	9305      	str	r3, [sp, #20]
 8004a94:	9a05      	ldr	r2, [sp, #20]
 8004a96:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b10      	cmp	r3, #16
 8004a9e:	dc02      	bgt.n	8004aa6 <__ieee754_rem_pio2+0x1be>
 8004aa0:	e9c4 0100 	strd	r0, r1, [r4]
 8004aa4:	e039      	b.n	8004b1a <__ieee754_rem_pio2+0x232>
 8004aa6:	a34c      	add	r3, pc, #304	; (adr r3, 8004bd8 <__ieee754_rem_pio2+0x2f0>)
 8004aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ab0:	f7fb fd66 	bl	8000580 <__aeabi_dmul>
 8004ab4:	4606      	mov	r6, r0
 8004ab6:	460f      	mov	r7, r1
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4650      	mov	r0, sl
 8004abe:	4659      	mov	r1, fp
 8004ac0:	f7fb fba6 	bl	8000210 <__aeabi_dsub>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4680      	mov	r8, r0
 8004aca:	4689      	mov	r9, r1
 8004acc:	4650      	mov	r0, sl
 8004ace:	4659      	mov	r1, fp
 8004ad0:	f7fb fb9e 	bl	8000210 <__aeabi_dsub>
 8004ad4:	4632      	mov	r2, r6
 8004ad6:	463b      	mov	r3, r7
 8004ad8:	f7fb fb9a 	bl	8000210 <__aeabi_dsub>
 8004adc:	a340      	add	r3, pc, #256	; (adr r3, 8004be0 <__ieee754_rem_pio2+0x2f8>)
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	4606      	mov	r6, r0
 8004ae4:	460f      	mov	r7, r1
 8004ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aea:	f7fb fd49 	bl	8000580 <__aeabi_dmul>
 8004aee:	4632      	mov	r2, r6
 8004af0:	463b      	mov	r3, r7
 8004af2:	f7fb fb8d 	bl	8000210 <__aeabi_dsub>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4606      	mov	r6, r0
 8004afc:	460f      	mov	r7, r1
 8004afe:	4640      	mov	r0, r8
 8004b00:	4649      	mov	r1, r9
 8004b02:	f7fb fb85 	bl	8000210 <__aeabi_dsub>
 8004b06:	9a05      	ldr	r2, [sp, #20]
 8004b08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b31      	cmp	r3, #49	; 0x31
 8004b10:	dc20      	bgt.n	8004b54 <__ieee754_rem_pio2+0x26c>
 8004b12:	e9c4 0100 	strd	r0, r1, [r4]
 8004b16:	46c2      	mov	sl, r8
 8004b18:	46cb      	mov	fp, r9
 8004b1a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004b1e:	4650      	mov	r0, sl
 8004b20:	4642      	mov	r2, r8
 8004b22:	464b      	mov	r3, r9
 8004b24:	4659      	mov	r1, fp
 8004b26:	f7fb fb73 	bl	8000210 <__aeabi_dsub>
 8004b2a:	463b      	mov	r3, r7
 8004b2c:	4632      	mov	r2, r6
 8004b2e:	f7fb fb6f 	bl	8000210 <__aeabi_dsub>
 8004b32:	9b04      	ldr	r3, [sp, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004b3a:	f6bf af11 	bge.w	8004960 <__ieee754_rem_pio2+0x78>
 8004b3e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004b42:	6063      	str	r3, [r4, #4]
 8004b44:	f8c4 8000 	str.w	r8, [r4]
 8004b48:	60a0      	str	r0, [r4, #8]
 8004b4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b4e:	60e3      	str	r3, [r4, #12]
 8004b50:	426d      	negs	r5, r5
 8004b52:	e705      	b.n	8004960 <__ieee754_rem_pio2+0x78>
 8004b54:	a326      	add	r3, pc, #152	; (adr r3, 8004bf0 <__ieee754_rem_pio2+0x308>)
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b5e:	f7fb fd0f 	bl	8000580 <__aeabi_dmul>
 8004b62:	4606      	mov	r6, r0
 8004b64:	460f      	mov	r7, r1
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4640      	mov	r0, r8
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	f7fb fb4f 	bl	8000210 <__aeabi_dsub>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4682      	mov	sl, r0
 8004b78:	468b      	mov	fp, r1
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	4649      	mov	r1, r9
 8004b7e:	f7fb fb47 	bl	8000210 <__aeabi_dsub>
 8004b82:	4632      	mov	r2, r6
 8004b84:	463b      	mov	r3, r7
 8004b86:	f7fb fb43 	bl	8000210 <__aeabi_dsub>
 8004b8a:	a31b      	add	r3, pc, #108	; (adr r3, 8004bf8 <__ieee754_rem_pio2+0x310>)
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	4606      	mov	r6, r0
 8004b92:	460f      	mov	r7, r1
 8004b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b98:	f7fb fcf2 	bl	8000580 <__aeabi_dmul>
 8004b9c:	4632      	mov	r2, r6
 8004b9e:	463b      	mov	r3, r7
 8004ba0:	f7fb fb36 	bl	8000210 <__aeabi_dsub>
 8004ba4:	4606      	mov	r6, r0
 8004ba6:	460f      	mov	r7, r1
 8004ba8:	e764      	b.n	8004a74 <__ieee754_rem_pio2+0x18c>
 8004baa:	4b1b      	ldr	r3, [pc, #108]	; (8004c18 <__ieee754_rem_pio2+0x330>)
 8004bac:	4598      	cmp	r8, r3
 8004bae:	dd35      	ble.n	8004c1c <__ieee754_rem_pio2+0x334>
 8004bb0:	ee10 2a10 	vmov	r2, s0
 8004bb4:	463b      	mov	r3, r7
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	4639      	mov	r1, r7
 8004bba:	f7fb fb29 	bl	8000210 <__aeabi_dsub>
 8004bbe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004bc2:	e9c4 0100 	strd	r0, r1, [r4]
 8004bc6:	e6a1      	b.n	800490c <__ieee754_rem_pio2+0x24>
 8004bc8:	54400000 	.word	0x54400000
 8004bcc:	3ff921fb 	.word	0x3ff921fb
 8004bd0:	1a626331 	.word	0x1a626331
 8004bd4:	3dd0b461 	.word	0x3dd0b461
 8004bd8:	1a600000 	.word	0x1a600000
 8004bdc:	3dd0b461 	.word	0x3dd0b461
 8004be0:	2e037073 	.word	0x2e037073
 8004be4:	3ba3198a 	.word	0x3ba3198a
 8004be8:	6dc9c883 	.word	0x6dc9c883
 8004bec:	3fe45f30 	.word	0x3fe45f30
 8004bf0:	2e000000 	.word	0x2e000000
 8004bf4:	3ba3198a 	.word	0x3ba3198a
 8004bf8:	252049c1 	.word	0x252049c1
 8004bfc:	397b839a 	.word	0x397b839a
 8004c00:	3fe921fb 	.word	0x3fe921fb
 8004c04:	4002d97b 	.word	0x4002d97b
 8004c08:	3ff921fb 	.word	0x3ff921fb
 8004c0c:	413921fb 	.word	0x413921fb
 8004c10:	3fe00000 	.word	0x3fe00000
 8004c14:	080058c4 	.word	0x080058c4
 8004c18:	7fefffff 	.word	0x7fefffff
 8004c1c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004c20:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004c24:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004c28:	4630      	mov	r0, r6
 8004c2a:	460f      	mov	r7, r1
 8004c2c:	f7fb ff42 	bl	8000ab4 <__aeabi_d2iz>
 8004c30:	f7fb fc3c 	bl	80004ac <__aeabi_i2d>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4630      	mov	r0, r6
 8004c3a:	4639      	mov	r1, r7
 8004c3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004c40:	f7fb fae6 	bl	8000210 <__aeabi_dsub>
 8004c44:	2200      	movs	r2, #0
 8004c46:	4b1f      	ldr	r3, [pc, #124]	; (8004cc4 <__ieee754_rem_pio2+0x3dc>)
 8004c48:	f7fb fc9a 	bl	8000580 <__aeabi_dmul>
 8004c4c:	460f      	mov	r7, r1
 8004c4e:	4606      	mov	r6, r0
 8004c50:	f7fb ff30 	bl	8000ab4 <__aeabi_d2iz>
 8004c54:	f7fb fc2a 	bl	80004ac <__aeabi_i2d>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	4639      	mov	r1, r7
 8004c60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004c64:	f7fb fad4 	bl	8000210 <__aeabi_dsub>
 8004c68:	2200      	movs	r2, #0
 8004c6a:	4b16      	ldr	r3, [pc, #88]	; (8004cc4 <__ieee754_rem_pio2+0x3dc>)
 8004c6c:	f7fb fc88 	bl	8000580 <__aeabi_dmul>
 8004c70:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004c74:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8004c78:	f04f 0803 	mov.w	r8, #3
 8004c7c:	2600      	movs	r6, #0
 8004c7e:	2700      	movs	r7, #0
 8004c80:	4632      	mov	r2, r6
 8004c82:	463b      	mov	r3, r7
 8004c84:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004c88:	f108 3aff 	add.w	sl, r8, #4294967295
 8004c8c:	f7fb fee0 	bl	8000a50 <__aeabi_dcmpeq>
 8004c90:	b9b0      	cbnz	r0, 8004cc0 <__ieee754_rem_pio2+0x3d8>
 8004c92:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <__ieee754_rem_pio2+0x3e0>)
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	2302      	movs	r3, #2
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	462a      	mov	r2, r5
 8004c9c:	4643      	mov	r3, r8
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	a806      	add	r0, sp, #24
 8004ca2:	f000 f8dd 	bl	8004e60 <__kernel_rem_pio2>
 8004ca6:	9b04      	ldr	r3, [sp, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	4605      	mov	r5, r0
 8004cac:	f6bf ae58 	bge.w	8004960 <__ieee754_rem_pio2+0x78>
 8004cb0:	6863      	ldr	r3, [r4, #4]
 8004cb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004cb6:	6063      	str	r3, [r4, #4]
 8004cb8:	68e3      	ldr	r3, [r4, #12]
 8004cba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004cbe:	e746      	b.n	8004b4e <__ieee754_rem_pio2+0x266>
 8004cc0:	46d0      	mov	r8, sl
 8004cc2:	e7dd      	b.n	8004c80 <__ieee754_rem_pio2+0x398>
 8004cc4:	41700000 	.word	0x41700000
 8004cc8:	08005944 	.word	0x08005944
 8004ccc:	00000000 	.word	0x00000000

08004cd0 <__kernel_cos>:
 8004cd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd4:	ec59 8b10 	vmov	r8, r9, d0
 8004cd8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8004cdc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004ce0:	ed2d 8b02 	vpush	{d8}
 8004ce4:	eeb0 8a41 	vmov.f32	s16, s2
 8004ce8:	eef0 8a61 	vmov.f32	s17, s3
 8004cec:	da07      	bge.n	8004cfe <__kernel_cos+0x2e>
 8004cee:	ee10 0a10 	vmov	r0, s0
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	f7fb fede 	bl	8000ab4 <__aeabi_d2iz>
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	f000 8089 	beq.w	8004e10 <__kernel_cos+0x140>
 8004cfe:	4642      	mov	r2, r8
 8004d00:	464b      	mov	r3, r9
 8004d02:	4640      	mov	r0, r8
 8004d04:	4649      	mov	r1, r9
 8004d06:	f7fb fc3b 	bl	8000580 <__aeabi_dmul>
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	4b4e      	ldr	r3, [pc, #312]	; (8004e48 <__kernel_cos+0x178>)
 8004d0e:	4604      	mov	r4, r0
 8004d10:	460d      	mov	r5, r1
 8004d12:	f7fb fc35 	bl	8000580 <__aeabi_dmul>
 8004d16:	a340      	add	r3, pc, #256	; (adr r3, 8004e18 <__kernel_cos+0x148>)
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	4682      	mov	sl, r0
 8004d1e:	468b      	mov	fp, r1
 8004d20:	4620      	mov	r0, r4
 8004d22:	4629      	mov	r1, r5
 8004d24:	f7fb fc2c 	bl	8000580 <__aeabi_dmul>
 8004d28:	a33d      	add	r3, pc, #244	; (adr r3, 8004e20 <__kernel_cos+0x150>)
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	f7fb fa71 	bl	8000214 <__adddf3>
 8004d32:	4622      	mov	r2, r4
 8004d34:	462b      	mov	r3, r5
 8004d36:	f7fb fc23 	bl	8000580 <__aeabi_dmul>
 8004d3a:	a33b      	add	r3, pc, #236	; (adr r3, 8004e28 <__kernel_cos+0x158>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f7fb fa66 	bl	8000210 <__aeabi_dsub>
 8004d44:	4622      	mov	r2, r4
 8004d46:	462b      	mov	r3, r5
 8004d48:	f7fb fc1a 	bl	8000580 <__aeabi_dmul>
 8004d4c:	a338      	add	r3, pc, #224	; (adr r3, 8004e30 <__kernel_cos+0x160>)
 8004d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d52:	f7fb fa5f 	bl	8000214 <__adddf3>
 8004d56:	4622      	mov	r2, r4
 8004d58:	462b      	mov	r3, r5
 8004d5a:	f7fb fc11 	bl	8000580 <__aeabi_dmul>
 8004d5e:	a336      	add	r3, pc, #216	; (adr r3, 8004e38 <__kernel_cos+0x168>)
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	f7fb fa54 	bl	8000210 <__aeabi_dsub>
 8004d68:	4622      	mov	r2, r4
 8004d6a:	462b      	mov	r3, r5
 8004d6c:	f7fb fc08 	bl	8000580 <__aeabi_dmul>
 8004d70:	a333      	add	r3, pc, #204	; (adr r3, 8004e40 <__kernel_cos+0x170>)
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	f7fb fa4d 	bl	8000214 <__adddf3>
 8004d7a:	4622      	mov	r2, r4
 8004d7c:	462b      	mov	r3, r5
 8004d7e:	f7fb fbff 	bl	8000580 <__aeabi_dmul>
 8004d82:	4622      	mov	r2, r4
 8004d84:	462b      	mov	r3, r5
 8004d86:	f7fb fbfb 	bl	8000580 <__aeabi_dmul>
 8004d8a:	ec53 2b18 	vmov	r2, r3, d8
 8004d8e:	4604      	mov	r4, r0
 8004d90:	460d      	mov	r5, r1
 8004d92:	4640      	mov	r0, r8
 8004d94:	4649      	mov	r1, r9
 8004d96:	f7fb fbf3 	bl	8000580 <__aeabi_dmul>
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	4629      	mov	r1, r5
 8004da0:	4620      	mov	r0, r4
 8004da2:	f7fb fa35 	bl	8000210 <__aeabi_dsub>
 8004da6:	4b29      	ldr	r3, [pc, #164]	; (8004e4c <__kernel_cos+0x17c>)
 8004da8:	429e      	cmp	r6, r3
 8004daa:	4680      	mov	r8, r0
 8004dac:	4689      	mov	r9, r1
 8004dae:	dc11      	bgt.n	8004dd4 <__kernel_cos+0x104>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4650      	mov	r0, sl
 8004db6:	4659      	mov	r1, fp
 8004db8:	f7fb fa2a 	bl	8000210 <__aeabi_dsub>
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4924      	ldr	r1, [pc, #144]	; (8004e50 <__kernel_cos+0x180>)
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	f7fb fa24 	bl	8000210 <__aeabi_dsub>
 8004dc8:	ecbd 8b02 	vpop	{d8}
 8004dcc:	ec41 0b10 	vmov	d0, r0, r1
 8004dd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd4:	4b1f      	ldr	r3, [pc, #124]	; (8004e54 <__kernel_cos+0x184>)
 8004dd6:	491e      	ldr	r1, [pc, #120]	; (8004e50 <__kernel_cos+0x180>)
 8004dd8:	429e      	cmp	r6, r3
 8004dda:	bfcc      	ite	gt
 8004ddc:	4d1e      	ldrgt	r5, [pc, #120]	; (8004e58 <__kernel_cos+0x188>)
 8004dde:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004de2:	2400      	movs	r4, #0
 8004de4:	4622      	mov	r2, r4
 8004de6:	462b      	mov	r3, r5
 8004de8:	2000      	movs	r0, #0
 8004dea:	f7fb fa11 	bl	8000210 <__aeabi_dsub>
 8004dee:	4622      	mov	r2, r4
 8004df0:	4606      	mov	r6, r0
 8004df2:	460f      	mov	r7, r1
 8004df4:	462b      	mov	r3, r5
 8004df6:	4650      	mov	r0, sl
 8004df8:	4659      	mov	r1, fp
 8004dfa:	f7fb fa09 	bl	8000210 <__aeabi_dsub>
 8004dfe:	4642      	mov	r2, r8
 8004e00:	464b      	mov	r3, r9
 8004e02:	f7fb fa05 	bl	8000210 <__aeabi_dsub>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	4639      	mov	r1, r7
 8004e0e:	e7d9      	b.n	8004dc4 <__kernel_cos+0xf4>
 8004e10:	2000      	movs	r0, #0
 8004e12:	490f      	ldr	r1, [pc, #60]	; (8004e50 <__kernel_cos+0x180>)
 8004e14:	e7d8      	b.n	8004dc8 <__kernel_cos+0xf8>
 8004e16:	bf00      	nop
 8004e18:	be8838d4 	.word	0xbe8838d4
 8004e1c:	bda8fae9 	.word	0xbda8fae9
 8004e20:	bdb4b1c4 	.word	0xbdb4b1c4
 8004e24:	3e21ee9e 	.word	0x3e21ee9e
 8004e28:	809c52ad 	.word	0x809c52ad
 8004e2c:	3e927e4f 	.word	0x3e927e4f
 8004e30:	19cb1590 	.word	0x19cb1590
 8004e34:	3efa01a0 	.word	0x3efa01a0
 8004e38:	16c15177 	.word	0x16c15177
 8004e3c:	3f56c16c 	.word	0x3f56c16c
 8004e40:	5555554c 	.word	0x5555554c
 8004e44:	3fa55555 	.word	0x3fa55555
 8004e48:	3fe00000 	.word	0x3fe00000
 8004e4c:	3fd33332 	.word	0x3fd33332
 8004e50:	3ff00000 	.word	0x3ff00000
 8004e54:	3fe90000 	.word	0x3fe90000
 8004e58:	3fd20000 	.word	0x3fd20000
 8004e5c:	00000000 	.word	0x00000000

08004e60 <__kernel_rem_pio2>:
 8004e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e64:	ed2d 8b02 	vpush	{d8}
 8004e68:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004e6c:	1ed4      	subs	r4, r2, #3
 8004e6e:	9308      	str	r3, [sp, #32]
 8004e70:	9101      	str	r1, [sp, #4]
 8004e72:	4bc5      	ldr	r3, [pc, #788]	; (8005188 <__kernel_rem_pio2+0x328>)
 8004e74:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004e76:	9009      	str	r0, [sp, #36]	; 0x24
 8004e78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004e7c:	9304      	str	r3, [sp, #16]
 8004e7e:	9b08      	ldr	r3, [sp, #32]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	9307      	str	r3, [sp, #28]
 8004e84:	2318      	movs	r3, #24
 8004e86:	fb94 f4f3 	sdiv	r4, r4, r3
 8004e8a:	f06f 0317 	mvn.w	r3, #23
 8004e8e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004e92:	fb04 3303 	mla	r3, r4, r3, r3
 8004e96:	eb03 0a02 	add.w	sl, r3, r2
 8004e9a:	9b04      	ldr	r3, [sp, #16]
 8004e9c:	9a07      	ldr	r2, [sp, #28]
 8004e9e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005178 <__kernel_rem_pio2+0x318>
 8004ea2:	eb03 0802 	add.w	r8, r3, r2
 8004ea6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004ea8:	1aa7      	subs	r7, r4, r2
 8004eaa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004eae:	ae22      	add	r6, sp, #136	; 0x88
 8004eb0:	2500      	movs	r5, #0
 8004eb2:	4545      	cmp	r5, r8
 8004eb4:	dd13      	ble.n	8004ede <__kernel_rem_pio2+0x7e>
 8004eb6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005178 <__kernel_rem_pio2+0x318>
 8004eba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8004ebe:	2600      	movs	r6, #0
 8004ec0:	9b04      	ldr	r3, [sp, #16]
 8004ec2:	429e      	cmp	r6, r3
 8004ec4:	dc32      	bgt.n	8004f2c <__kernel_rem_pio2+0xcc>
 8004ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec8:	9302      	str	r3, [sp, #8]
 8004eca:	9b08      	ldr	r3, [sp, #32]
 8004ecc:	199d      	adds	r5, r3, r6
 8004ece:	ab22      	add	r3, sp, #136	; 0x88
 8004ed0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004ed4:	9306      	str	r3, [sp, #24]
 8004ed6:	ec59 8b18 	vmov	r8, r9, d8
 8004eda:	2700      	movs	r7, #0
 8004edc:	e01f      	b.n	8004f1e <__kernel_rem_pio2+0xbe>
 8004ede:	42ef      	cmn	r7, r5
 8004ee0:	d407      	bmi.n	8004ef2 <__kernel_rem_pio2+0x92>
 8004ee2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004ee6:	f7fb fae1 	bl	80004ac <__aeabi_i2d>
 8004eea:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004eee:	3501      	adds	r5, #1
 8004ef0:	e7df      	b.n	8004eb2 <__kernel_rem_pio2+0x52>
 8004ef2:	ec51 0b18 	vmov	r0, r1, d8
 8004ef6:	e7f8      	b.n	8004eea <__kernel_rem_pio2+0x8a>
 8004ef8:	9906      	ldr	r1, [sp, #24]
 8004efa:	9d02      	ldr	r5, [sp, #8]
 8004efc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8004f00:	9106      	str	r1, [sp, #24]
 8004f02:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8004f06:	9502      	str	r5, [sp, #8]
 8004f08:	f7fb fb3a 	bl	8000580 <__aeabi_dmul>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4640      	mov	r0, r8
 8004f12:	4649      	mov	r1, r9
 8004f14:	f7fb f97e 	bl	8000214 <__adddf3>
 8004f18:	3701      	adds	r7, #1
 8004f1a:	4680      	mov	r8, r0
 8004f1c:	4689      	mov	r9, r1
 8004f1e:	9b07      	ldr	r3, [sp, #28]
 8004f20:	429f      	cmp	r7, r3
 8004f22:	dde9      	ble.n	8004ef8 <__kernel_rem_pio2+0x98>
 8004f24:	e8eb 8902 	strd	r8, r9, [fp], #8
 8004f28:	3601      	adds	r6, #1
 8004f2a:	e7c9      	b.n	8004ec0 <__kernel_rem_pio2+0x60>
 8004f2c:	9b04      	ldr	r3, [sp, #16]
 8004f2e:	aa0e      	add	r2, sp, #56	; 0x38
 8004f30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004f34:	930c      	str	r3, [sp, #48]	; 0x30
 8004f36:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004f38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004f3c:	9c04      	ldr	r4, [sp, #16]
 8004f3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f40:	ab9a      	add	r3, sp, #616	; 0x268
 8004f42:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8004f46:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004f4e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8004f52:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8004f56:	ab9a      	add	r3, sp, #616	; 0x268
 8004f58:	445b      	add	r3, fp
 8004f5a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8004f5e:	2500      	movs	r5, #0
 8004f60:	1b63      	subs	r3, r4, r5
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	dc78      	bgt.n	8005058 <__kernel_rem_pio2+0x1f8>
 8004f66:	4650      	mov	r0, sl
 8004f68:	ec49 8b10 	vmov	d0, r8, r9
 8004f6c:	f000 fc00 	bl	8005770 <scalbn>
 8004f70:	ec57 6b10 	vmov	r6, r7, d0
 8004f74:	2200      	movs	r2, #0
 8004f76:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004f7a:	ee10 0a10 	vmov	r0, s0
 8004f7e:	4639      	mov	r1, r7
 8004f80:	f7fb fafe 	bl	8000580 <__aeabi_dmul>
 8004f84:	ec41 0b10 	vmov	d0, r0, r1
 8004f88:	f000 fb6e 	bl	8005668 <floor>
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	ec51 0b10 	vmov	r0, r1, d0
 8004f92:	4b7e      	ldr	r3, [pc, #504]	; (800518c <__kernel_rem_pio2+0x32c>)
 8004f94:	f7fb faf4 	bl	8000580 <__aeabi_dmul>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	4639      	mov	r1, r7
 8004fa0:	f7fb f936 	bl	8000210 <__aeabi_dsub>
 8004fa4:	460f      	mov	r7, r1
 8004fa6:	4606      	mov	r6, r0
 8004fa8:	f7fb fd84 	bl	8000ab4 <__aeabi_d2iz>
 8004fac:	9006      	str	r0, [sp, #24]
 8004fae:	f7fb fa7d 	bl	80004ac <__aeabi_i2d>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	4639      	mov	r1, r7
 8004fba:	f7fb f929 	bl	8000210 <__aeabi_dsub>
 8004fbe:	f1ba 0f00 	cmp.w	sl, #0
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	460f      	mov	r7, r1
 8004fc6:	dd6c      	ble.n	80050a2 <__kernel_rem_pio2+0x242>
 8004fc8:	1e62      	subs	r2, r4, #1
 8004fca:	ab0e      	add	r3, sp, #56	; 0x38
 8004fcc:	f1ca 0118 	rsb	r1, sl, #24
 8004fd0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004fd4:	9d06      	ldr	r5, [sp, #24]
 8004fd6:	fa40 f301 	asr.w	r3, r0, r1
 8004fda:	441d      	add	r5, r3
 8004fdc:	408b      	lsls	r3, r1
 8004fde:	1ac0      	subs	r0, r0, r3
 8004fe0:	ab0e      	add	r3, sp, #56	; 0x38
 8004fe2:	9506      	str	r5, [sp, #24]
 8004fe4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004fe8:	f1ca 0317 	rsb	r3, sl, #23
 8004fec:	fa40 f303 	asr.w	r3, r0, r3
 8004ff0:	9302      	str	r3, [sp, #8]
 8004ff2:	9b02      	ldr	r3, [sp, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	dd62      	ble.n	80050be <__kernel_rem_pio2+0x25e>
 8004ff8:	9b06      	ldr	r3, [sp, #24]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	9306      	str	r3, [sp, #24]
 8005000:	4615      	mov	r5, r2
 8005002:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005006:	4294      	cmp	r4, r2
 8005008:	f300 8095 	bgt.w	8005136 <__kernel_rem_pio2+0x2d6>
 800500c:	f1ba 0f00 	cmp.w	sl, #0
 8005010:	dd07      	ble.n	8005022 <__kernel_rem_pio2+0x1c2>
 8005012:	f1ba 0f01 	cmp.w	sl, #1
 8005016:	f000 80a2 	beq.w	800515e <__kernel_rem_pio2+0x2fe>
 800501a:	f1ba 0f02 	cmp.w	sl, #2
 800501e:	f000 80c1 	beq.w	80051a4 <__kernel_rem_pio2+0x344>
 8005022:	9b02      	ldr	r3, [sp, #8]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d14a      	bne.n	80050be <__kernel_rem_pio2+0x25e>
 8005028:	4632      	mov	r2, r6
 800502a:	463b      	mov	r3, r7
 800502c:	2000      	movs	r0, #0
 800502e:	4958      	ldr	r1, [pc, #352]	; (8005190 <__kernel_rem_pio2+0x330>)
 8005030:	f7fb f8ee 	bl	8000210 <__aeabi_dsub>
 8005034:	4606      	mov	r6, r0
 8005036:	460f      	mov	r7, r1
 8005038:	2d00      	cmp	r5, #0
 800503a:	d040      	beq.n	80050be <__kernel_rem_pio2+0x25e>
 800503c:	4650      	mov	r0, sl
 800503e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005180 <__kernel_rem_pio2+0x320>
 8005042:	f000 fb95 	bl	8005770 <scalbn>
 8005046:	4630      	mov	r0, r6
 8005048:	4639      	mov	r1, r7
 800504a:	ec53 2b10 	vmov	r2, r3, d0
 800504e:	f7fb f8df 	bl	8000210 <__aeabi_dsub>
 8005052:	4606      	mov	r6, r0
 8005054:	460f      	mov	r7, r1
 8005056:	e032      	b.n	80050be <__kernel_rem_pio2+0x25e>
 8005058:	2200      	movs	r2, #0
 800505a:	4b4e      	ldr	r3, [pc, #312]	; (8005194 <__kernel_rem_pio2+0x334>)
 800505c:	4640      	mov	r0, r8
 800505e:	4649      	mov	r1, r9
 8005060:	f7fb fa8e 	bl	8000580 <__aeabi_dmul>
 8005064:	f7fb fd26 	bl	8000ab4 <__aeabi_d2iz>
 8005068:	f7fb fa20 	bl	80004ac <__aeabi_i2d>
 800506c:	2200      	movs	r2, #0
 800506e:	4b4a      	ldr	r3, [pc, #296]	; (8005198 <__kernel_rem_pio2+0x338>)
 8005070:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005074:	f7fb fa84 	bl	8000580 <__aeabi_dmul>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4640      	mov	r0, r8
 800507e:	4649      	mov	r1, r9
 8005080:	f7fb f8c6 	bl	8000210 <__aeabi_dsub>
 8005084:	f7fb fd16 	bl	8000ab4 <__aeabi_d2iz>
 8005088:	ab0e      	add	r3, sp, #56	; 0x38
 800508a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800508e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005096:	f7fb f8bd 	bl	8000214 <__adddf3>
 800509a:	3501      	adds	r5, #1
 800509c:	4680      	mov	r8, r0
 800509e:	4689      	mov	r9, r1
 80050a0:	e75e      	b.n	8004f60 <__kernel_rem_pio2+0x100>
 80050a2:	d105      	bne.n	80050b0 <__kernel_rem_pio2+0x250>
 80050a4:	1e63      	subs	r3, r4, #1
 80050a6:	aa0e      	add	r2, sp, #56	; 0x38
 80050a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80050ac:	15c3      	asrs	r3, r0, #23
 80050ae:	e79f      	b.n	8004ff0 <__kernel_rem_pio2+0x190>
 80050b0:	2200      	movs	r2, #0
 80050b2:	4b3a      	ldr	r3, [pc, #232]	; (800519c <__kernel_rem_pio2+0x33c>)
 80050b4:	f7fb fcea 	bl	8000a8c <__aeabi_dcmpge>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d139      	bne.n	8005130 <__kernel_rem_pio2+0x2d0>
 80050bc:	9002      	str	r0, [sp, #8]
 80050be:	2200      	movs	r2, #0
 80050c0:	2300      	movs	r3, #0
 80050c2:	4630      	mov	r0, r6
 80050c4:	4639      	mov	r1, r7
 80050c6:	f7fb fcc3 	bl	8000a50 <__aeabi_dcmpeq>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	f000 80c7 	beq.w	800525e <__kernel_rem_pio2+0x3fe>
 80050d0:	1e65      	subs	r5, r4, #1
 80050d2:	462b      	mov	r3, r5
 80050d4:	2200      	movs	r2, #0
 80050d6:	9904      	ldr	r1, [sp, #16]
 80050d8:	428b      	cmp	r3, r1
 80050da:	da6a      	bge.n	80051b2 <__kernel_rem_pio2+0x352>
 80050dc:	2a00      	cmp	r2, #0
 80050de:	f000 8088 	beq.w	80051f2 <__kernel_rem_pio2+0x392>
 80050e2:	ab0e      	add	r3, sp, #56	; 0x38
 80050e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80050e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80b4 	beq.w	800525a <__kernel_rem_pio2+0x3fa>
 80050f2:	4650      	mov	r0, sl
 80050f4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005180 <__kernel_rem_pio2+0x320>
 80050f8:	f000 fb3a 	bl	8005770 <scalbn>
 80050fc:	00ec      	lsls	r4, r5, #3
 80050fe:	ab72      	add	r3, sp, #456	; 0x1c8
 8005100:	191e      	adds	r6, r3, r4
 8005102:	ec59 8b10 	vmov	r8, r9, d0
 8005106:	f106 0a08 	add.w	sl, r6, #8
 800510a:	462f      	mov	r7, r5
 800510c:	2f00      	cmp	r7, #0
 800510e:	f280 80df 	bge.w	80052d0 <__kernel_rem_pio2+0x470>
 8005112:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005178 <__kernel_rem_pio2+0x318>
 8005116:	f04f 0a00 	mov.w	sl, #0
 800511a:	eba5 030a 	sub.w	r3, r5, sl
 800511e:	2b00      	cmp	r3, #0
 8005120:	f2c0 810a 	blt.w	8005338 <__kernel_rem_pio2+0x4d8>
 8005124:	f8df b078 	ldr.w	fp, [pc, #120]	; 80051a0 <__kernel_rem_pio2+0x340>
 8005128:	ec59 8b18 	vmov	r8, r9, d8
 800512c:	2700      	movs	r7, #0
 800512e:	e0f5      	b.n	800531c <__kernel_rem_pio2+0x4bc>
 8005130:	2302      	movs	r3, #2
 8005132:	9302      	str	r3, [sp, #8]
 8005134:	e760      	b.n	8004ff8 <__kernel_rem_pio2+0x198>
 8005136:	ab0e      	add	r3, sp, #56	; 0x38
 8005138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800513c:	b94d      	cbnz	r5, 8005152 <__kernel_rem_pio2+0x2f2>
 800513e:	b12b      	cbz	r3, 800514c <__kernel_rem_pio2+0x2ec>
 8005140:	a80e      	add	r0, sp, #56	; 0x38
 8005142:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005146:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800514a:	2301      	movs	r3, #1
 800514c:	3201      	adds	r2, #1
 800514e:	461d      	mov	r5, r3
 8005150:	e759      	b.n	8005006 <__kernel_rem_pio2+0x1a6>
 8005152:	a80e      	add	r0, sp, #56	; 0x38
 8005154:	1acb      	subs	r3, r1, r3
 8005156:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800515a:	462b      	mov	r3, r5
 800515c:	e7f6      	b.n	800514c <__kernel_rem_pio2+0x2ec>
 800515e:	1e62      	subs	r2, r4, #1
 8005160:	ab0e      	add	r3, sp, #56	; 0x38
 8005162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005166:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800516a:	a90e      	add	r1, sp, #56	; 0x38
 800516c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005170:	e757      	b.n	8005022 <__kernel_rem_pio2+0x1c2>
 8005172:	bf00      	nop
 8005174:	f3af 8000 	nop.w
	...
 8005184:	3ff00000 	.word	0x3ff00000
 8005188:	08005a90 	.word	0x08005a90
 800518c:	40200000 	.word	0x40200000
 8005190:	3ff00000 	.word	0x3ff00000
 8005194:	3e700000 	.word	0x3e700000
 8005198:	41700000 	.word	0x41700000
 800519c:	3fe00000 	.word	0x3fe00000
 80051a0:	08005a50 	.word	0x08005a50
 80051a4:	1e62      	subs	r2, r4, #1
 80051a6:	ab0e      	add	r3, sp, #56	; 0x38
 80051a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80051b0:	e7db      	b.n	800516a <__kernel_rem_pio2+0x30a>
 80051b2:	a90e      	add	r1, sp, #56	; 0x38
 80051b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80051b8:	3b01      	subs	r3, #1
 80051ba:	430a      	orrs	r2, r1
 80051bc:	e78b      	b.n	80050d6 <__kernel_rem_pio2+0x276>
 80051be:	3301      	adds	r3, #1
 80051c0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80051c4:	2900      	cmp	r1, #0
 80051c6:	d0fa      	beq.n	80051be <__kernel_rem_pio2+0x35e>
 80051c8:	9a08      	ldr	r2, [sp, #32]
 80051ca:	4422      	add	r2, r4
 80051cc:	00d2      	lsls	r2, r2, #3
 80051ce:	a922      	add	r1, sp, #136	; 0x88
 80051d0:	18e3      	adds	r3, r4, r3
 80051d2:	9206      	str	r2, [sp, #24]
 80051d4:	440a      	add	r2, r1
 80051d6:	9302      	str	r3, [sp, #8]
 80051d8:	f10b 0108 	add.w	r1, fp, #8
 80051dc:	f102 0308 	add.w	r3, r2, #8
 80051e0:	1c66      	adds	r6, r4, #1
 80051e2:	910a      	str	r1, [sp, #40]	; 0x28
 80051e4:	2500      	movs	r5, #0
 80051e6:	930d      	str	r3, [sp, #52]	; 0x34
 80051e8:	9b02      	ldr	r3, [sp, #8]
 80051ea:	42b3      	cmp	r3, r6
 80051ec:	da04      	bge.n	80051f8 <__kernel_rem_pio2+0x398>
 80051ee:	461c      	mov	r4, r3
 80051f0:	e6a6      	b.n	8004f40 <__kernel_rem_pio2+0xe0>
 80051f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051f4:	2301      	movs	r3, #1
 80051f6:	e7e3      	b.n	80051c0 <__kernel_rem_pio2+0x360>
 80051f8:	9b06      	ldr	r3, [sp, #24]
 80051fa:	18ef      	adds	r7, r5, r3
 80051fc:	ab22      	add	r3, sp, #136	; 0x88
 80051fe:	441f      	add	r7, r3
 8005200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005202:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005206:	f7fb f951 	bl	80004ac <__aeabi_i2d>
 800520a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800520c:	461c      	mov	r4, r3
 800520e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005210:	e9c7 0100 	strd	r0, r1, [r7]
 8005214:	eb03 0b05 	add.w	fp, r3, r5
 8005218:	2700      	movs	r7, #0
 800521a:	f04f 0800 	mov.w	r8, #0
 800521e:	f04f 0900 	mov.w	r9, #0
 8005222:	9b07      	ldr	r3, [sp, #28]
 8005224:	429f      	cmp	r7, r3
 8005226:	dd08      	ble.n	800523a <__kernel_rem_pio2+0x3da>
 8005228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800522a:	aa72      	add	r2, sp, #456	; 0x1c8
 800522c:	18eb      	adds	r3, r5, r3
 800522e:	4413      	add	r3, r2
 8005230:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005234:	3601      	adds	r6, #1
 8005236:	3508      	adds	r5, #8
 8005238:	e7d6      	b.n	80051e8 <__kernel_rem_pio2+0x388>
 800523a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800523e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005242:	f7fb f99d 	bl	8000580 <__aeabi_dmul>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4640      	mov	r0, r8
 800524c:	4649      	mov	r1, r9
 800524e:	f7fa ffe1 	bl	8000214 <__adddf3>
 8005252:	3701      	adds	r7, #1
 8005254:	4680      	mov	r8, r0
 8005256:	4689      	mov	r9, r1
 8005258:	e7e3      	b.n	8005222 <__kernel_rem_pio2+0x3c2>
 800525a:	3d01      	subs	r5, #1
 800525c:	e741      	b.n	80050e2 <__kernel_rem_pio2+0x282>
 800525e:	f1ca 0000 	rsb	r0, sl, #0
 8005262:	ec47 6b10 	vmov	d0, r6, r7
 8005266:	f000 fa83 	bl	8005770 <scalbn>
 800526a:	ec57 6b10 	vmov	r6, r7, d0
 800526e:	2200      	movs	r2, #0
 8005270:	4b99      	ldr	r3, [pc, #612]	; (80054d8 <__kernel_rem_pio2+0x678>)
 8005272:	ee10 0a10 	vmov	r0, s0
 8005276:	4639      	mov	r1, r7
 8005278:	f7fb fc08 	bl	8000a8c <__aeabi_dcmpge>
 800527c:	b1f8      	cbz	r0, 80052be <__kernel_rem_pio2+0x45e>
 800527e:	2200      	movs	r2, #0
 8005280:	4b96      	ldr	r3, [pc, #600]	; (80054dc <__kernel_rem_pio2+0x67c>)
 8005282:	4630      	mov	r0, r6
 8005284:	4639      	mov	r1, r7
 8005286:	f7fb f97b 	bl	8000580 <__aeabi_dmul>
 800528a:	f7fb fc13 	bl	8000ab4 <__aeabi_d2iz>
 800528e:	4680      	mov	r8, r0
 8005290:	f7fb f90c 	bl	80004ac <__aeabi_i2d>
 8005294:	2200      	movs	r2, #0
 8005296:	4b90      	ldr	r3, [pc, #576]	; (80054d8 <__kernel_rem_pio2+0x678>)
 8005298:	f7fb f972 	bl	8000580 <__aeabi_dmul>
 800529c:	460b      	mov	r3, r1
 800529e:	4602      	mov	r2, r0
 80052a0:	4639      	mov	r1, r7
 80052a2:	4630      	mov	r0, r6
 80052a4:	f7fa ffb4 	bl	8000210 <__aeabi_dsub>
 80052a8:	f7fb fc04 	bl	8000ab4 <__aeabi_d2iz>
 80052ac:	1c65      	adds	r5, r4, #1
 80052ae:	ab0e      	add	r3, sp, #56	; 0x38
 80052b0:	f10a 0a18 	add.w	sl, sl, #24
 80052b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80052b8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80052bc:	e719      	b.n	80050f2 <__kernel_rem_pio2+0x292>
 80052be:	4630      	mov	r0, r6
 80052c0:	4639      	mov	r1, r7
 80052c2:	f7fb fbf7 	bl	8000ab4 <__aeabi_d2iz>
 80052c6:	ab0e      	add	r3, sp, #56	; 0x38
 80052c8:	4625      	mov	r5, r4
 80052ca:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80052ce:	e710      	b.n	80050f2 <__kernel_rem_pio2+0x292>
 80052d0:	ab0e      	add	r3, sp, #56	; 0x38
 80052d2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80052d6:	f7fb f8e9 	bl	80004ac <__aeabi_i2d>
 80052da:	4642      	mov	r2, r8
 80052dc:	464b      	mov	r3, r9
 80052de:	f7fb f94f 	bl	8000580 <__aeabi_dmul>
 80052e2:	2200      	movs	r2, #0
 80052e4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80052e8:	4b7c      	ldr	r3, [pc, #496]	; (80054dc <__kernel_rem_pio2+0x67c>)
 80052ea:	4640      	mov	r0, r8
 80052ec:	4649      	mov	r1, r9
 80052ee:	f7fb f947 	bl	8000580 <__aeabi_dmul>
 80052f2:	3f01      	subs	r7, #1
 80052f4:	4680      	mov	r8, r0
 80052f6:	4689      	mov	r9, r1
 80052f8:	e708      	b.n	800510c <__kernel_rem_pio2+0x2ac>
 80052fa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005306:	f7fb f93b 	bl	8000580 <__aeabi_dmul>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4640      	mov	r0, r8
 8005310:	4649      	mov	r1, r9
 8005312:	f7fa ff7f 	bl	8000214 <__adddf3>
 8005316:	3701      	adds	r7, #1
 8005318:	4680      	mov	r8, r0
 800531a:	4689      	mov	r9, r1
 800531c:	9b04      	ldr	r3, [sp, #16]
 800531e:	429f      	cmp	r7, r3
 8005320:	dc01      	bgt.n	8005326 <__kernel_rem_pio2+0x4c6>
 8005322:	45ba      	cmp	sl, r7
 8005324:	dae9      	bge.n	80052fa <__kernel_rem_pio2+0x49a>
 8005326:	ab4a      	add	r3, sp, #296	; 0x128
 8005328:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800532c:	e9c3 8900 	strd	r8, r9, [r3]
 8005330:	f10a 0a01 	add.w	sl, sl, #1
 8005334:	3e08      	subs	r6, #8
 8005336:	e6f0      	b.n	800511a <__kernel_rem_pio2+0x2ba>
 8005338:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800533a:	2b03      	cmp	r3, #3
 800533c:	d85b      	bhi.n	80053f6 <__kernel_rem_pio2+0x596>
 800533e:	e8df f003 	tbb	[pc, r3]
 8005342:	264a      	.short	0x264a
 8005344:	0226      	.short	0x0226
 8005346:	ab9a      	add	r3, sp, #616	; 0x268
 8005348:	441c      	add	r4, r3
 800534a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800534e:	46a2      	mov	sl, r4
 8005350:	46ab      	mov	fp, r5
 8005352:	f1bb 0f00 	cmp.w	fp, #0
 8005356:	dc6c      	bgt.n	8005432 <__kernel_rem_pio2+0x5d2>
 8005358:	46a2      	mov	sl, r4
 800535a:	46ab      	mov	fp, r5
 800535c:	f1bb 0f01 	cmp.w	fp, #1
 8005360:	f300 8086 	bgt.w	8005470 <__kernel_rem_pio2+0x610>
 8005364:	2000      	movs	r0, #0
 8005366:	2100      	movs	r1, #0
 8005368:	2d01      	cmp	r5, #1
 800536a:	f300 80a0 	bgt.w	80054ae <__kernel_rem_pio2+0x64e>
 800536e:	9b02      	ldr	r3, [sp, #8]
 8005370:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005374:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005378:	2b00      	cmp	r3, #0
 800537a:	f040 809e 	bne.w	80054ba <__kernel_rem_pio2+0x65a>
 800537e:	9b01      	ldr	r3, [sp, #4]
 8005380:	e9c3 7800 	strd	r7, r8, [r3]
 8005384:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005388:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800538c:	e033      	b.n	80053f6 <__kernel_rem_pio2+0x596>
 800538e:	3408      	adds	r4, #8
 8005390:	ab4a      	add	r3, sp, #296	; 0x128
 8005392:	441c      	add	r4, r3
 8005394:	462e      	mov	r6, r5
 8005396:	2000      	movs	r0, #0
 8005398:	2100      	movs	r1, #0
 800539a:	2e00      	cmp	r6, #0
 800539c:	da3a      	bge.n	8005414 <__kernel_rem_pio2+0x5b4>
 800539e:	9b02      	ldr	r3, [sp, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d03d      	beq.n	8005420 <__kernel_rem_pio2+0x5c0>
 80053a4:	4602      	mov	r2, r0
 80053a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053aa:	9c01      	ldr	r4, [sp, #4]
 80053ac:	e9c4 2300 	strd	r2, r3, [r4]
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80053b8:	f7fa ff2a 	bl	8000210 <__aeabi_dsub>
 80053bc:	ae4c      	add	r6, sp, #304	; 0x130
 80053be:	2401      	movs	r4, #1
 80053c0:	42a5      	cmp	r5, r4
 80053c2:	da30      	bge.n	8005426 <__kernel_rem_pio2+0x5c6>
 80053c4:	9b02      	ldr	r3, [sp, #8]
 80053c6:	b113      	cbz	r3, 80053ce <__kernel_rem_pio2+0x56e>
 80053c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053cc:	4619      	mov	r1, r3
 80053ce:	9b01      	ldr	r3, [sp, #4]
 80053d0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80053d4:	e00f      	b.n	80053f6 <__kernel_rem_pio2+0x596>
 80053d6:	ab9a      	add	r3, sp, #616	; 0x268
 80053d8:	441c      	add	r4, r3
 80053da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80053de:	2000      	movs	r0, #0
 80053e0:	2100      	movs	r1, #0
 80053e2:	2d00      	cmp	r5, #0
 80053e4:	da10      	bge.n	8005408 <__kernel_rem_pio2+0x5a8>
 80053e6:	9b02      	ldr	r3, [sp, #8]
 80053e8:	b113      	cbz	r3, 80053f0 <__kernel_rem_pio2+0x590>
 80053ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053ee:	4619      	mov	r1, r3
 80053f0:	9b01      	ldr	r3, [sp, #4]
 80053f2:	e9c3 0100 	strd	r0, r1, [r3]
 80053f6:	9b06      	ldr	r3, [sp, #24]
 80053f8:	f003 0007 	and.w	r0, r3, #7
 80053fc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005400:	ecbd 8b02 	vpop	{d8}
 8005404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005408:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800540c:	f7fa ff02 	bl	8000214 <__adddf3>
 8005410:	3d01      	subs	r5, #1
 8005412:	e7e6      	b.n	80053e2 <__kernel_rem_pio2+0x582>
 8005414:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005418:	f7fa fefc 	bl	8000214 <__adddf3>
 800541c:	3e01      	subs	r6, #1
 800541e:	e7bc      	b.n	800539a <__kernel_rem_pio2+0x53a>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	e7c1      	b.n	80053aa <__kernel_rem_pio2+0x54a>
 8005426:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800542a:	f7fa fef3 	bl	8000214 <__adddf3>
 800542e:	3401      	adds	r4, #1
 8005430:	e7c6      	b.n	80053c0 <__kernel_rem_pio2+0x560>
 8005432:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005436:	ed3a 7b02 	vldmdb	sl!, {d7}
 800543a:	4640      	mov	r0, r8
 800543c:	ec53 2b17 	vmov	r2, r3, d7
 8005440:	4649      	mov	r1, r9
 8005442:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005446:	f7fa fee5 	bl	8000214 <__adddf3>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4606      	mov	r6, r0
 8005450:	460f      	mov	r7, r1
 8005452:	4640      	mov	r0, r8
 8005454:	4649      	mov	r1, r9
 8005456:	f7fa fedb 	bl	8000210 <__aeabi_dsub>
 800545a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800545e:	f7fa fed9 	bl	8000214 <__adddf3>
 8005462:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005466:	e9ca 0100 	strd	r0, r1, [sl]
 800546a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800546e:	e770      	b.n	8005352 <__kernel_rem_pio2+0x4f2>
 8005470:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005474:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005478:	4630      	mov	r0, r6
 800547a:	ec53 2b17 	vmov	r2, r3, d7
 800547e:	4639      	mov	r1, r7
 8005480:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005484:	f7fa fec6 	bl	8000214 <__adddf3>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4680      	mov	r8, r0
 800548e:	4689      	mov	r9, r1
 8005490:	4630      	mov	r0, r6
 8005492:	4639      	mov	r1, r7
 8005494:	f7fa febc 	bl	8000210 <__aeabi_dsub>
 8005498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800549c:	f7fa feba 	bl	8000214 <__adddf3>
 80054a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80054a4:	e9ca 0100 	strd	r0, r1, [sl]
 80054a8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80054ac:	e756      	b.n	800535c <__kernel_rem_pio2+0x4fc>
 80054ae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80054b2:	f7fa feaf 	bl	8000214 <__adddf3>
 80054b6:	3d01      	subs	r5, #1
 80054b8:	e756      	b.n	8005368 <__kernel_rem_pio2+0x508>
 80054ba:	9b01      	ldr	r3, [sp, #4]
 80054bc:	9a01      	ldr	r2, [sp, #4]
 80054be:	601f      	str	r7, [r3, #0]
 80054c0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80054c4:	605c      	str	r4, [r3, #4]
 80054c6:	609d      	str	r5, [r3, #8]
 80054c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80054cc:	60d3      	str	r3, [r2, #12]
 80054ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054d2:	6110      	str	r0, [r2, #16]
 80054d4:	6153      	str	r3, [r2, #20]
 80054d6:	e78e      	b.n	80053f6 <__kernel_rem_pio2+0x596>
 80054d8:	41700000 	.word	0x41700000
 80054dc:	3e700000 	.word	0x3e700000

080054e0 <__kernel_sin>:
 80054e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	ec55 4b10 	vmov	r4, r5, d0
 80054e8:	b085      	sub	sp, #20
 80054ea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80054ee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80054f2:	ed8d 1b00 	vstr	d1, [sp]
 80054f6:	9002      	str	r0, [sp, #8]
 80054f8:	da06      	bge.n	8005508 <__kernel_sin+0x28>
 80054fa:	ee10 0a10 	vmov	r0, s0
 80054fe:	4629      	mov	r1, r5
 8005500:	f7fb fad8 	bl	8000ab4 <__aeabi_d2iz>
 8005504:	2800      	cmp	r0, #0
 8005506:	d051      	beq.n	80055ac <__kernel_sin+0xcc>
 8005508:	4622      	mov	r2, r4
 800550a:	462b      	mov	r3, r5
 800550c:	4620      	mov	r0, r4
 800550e:	4629      	mov	r1, r5
 8005510:	f7fb f836 	bl	8000580 <__aeabi_dmul>
 8005514:	4682      	mov	sl, r0
 8005516:	468b      	mov	fp, r1
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4620      	mov	r0, r4
 800551e:	4629      	mov	r1, r5
 8005520:	f7fb f82e 	bl	8000580 <__aeabi_dmul>
 8005524:	a341      	add	r3, pc, #260	; (adr r3, 800562c <__kernel_sin+0x14c>)
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	4680      	mov	r8, r0
 800552c:	4689      	mov	r9, r1
 800552e:	4650      	mov	r0, sl
 8005530:	4659      	mov	r1, fp
 8005532:	f7fb f825 	bl	8000580 <__aeabi_dmul>
 8005536:	a33f      	add	r3, pc, #252	; (adr r3, 8005634 <__kernel_sin+0x154>)
 8005538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553c:	f7fa fe68 	bl	8000210 <__aeabi_dsub>
 8005540:	4652      	mov	r2, sl
 8005542:	465b      	mov	r3, fp
 8005544:	f7fb f81c 	bl	8000580 <__aeabi_dmul>
 8005548:	a33c      	add	r3, pc, #240	; (adr r3, 800563c <__kernel_sin+0x15c>)
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f7fa fe61 	bl	8000214 <__adddf3>
 8005552:	4652      	mov	r2, sl
 8005554:	465b      	mov	r3, fp
 8005556:	f7fb f813 	bl	8000580 <__aeabi_dmul>
 800555a:	a33a      	add	r3, pc, #232	; (adr r3, 8005644 <__kernel_sin+0x164>)
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	f7fa fe56 	bl	8000210 <__aeabi_dsub>
 8005564:	4652      	mov	r2, sl
 8005566:	465b      	mov	r3, fp
 8005568:	f7fb f80a 	bl	8000580 <__aeabi_dmul>
 800556c:	a337      	add	r3, pc, #220	; (adr r3, 800564c <__kernel_sin+0x16c>)
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	f7fa fe4f 	bl	8000214 <__adddf3>
 8005576:	9b02      	ldr	r3, [sp, #8]
 8005578:	4606      	mov	r6, r0
 800557a:	460f      	mov	r7, r1
 800557c:	b9db      	cbnz	r3, 80055b6 <__kernel_sin+0xd6>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4650      	mov	r0, sl
 8005584:	4659      	mov	r1, fp
 8005586:	f7fa fffb 	bl	8000580 <__aeabi_dmul>
 800558a:	a325      	add	r3, pc, #148	; (adr r3, 8005620 <__kernel_sin+0x140>)
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f7fa fe3e 	bl	8000210 <__aeabi_dsub>
 8005594:	4642      	mov	r2, r8
 8005596:	464b      	mov	r3, r9
 8005598:	f7fa fff2 	bl	8000580 <__aeabi_dmul>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4620      	mov	r0, r4
 80055a2:	4629      	mov	r1, r5
 80055a4:	f7fa fe36 	bl	8000214 <__adddf3>
 80055a8:	4604      	mov	r4, r0
 80055aa:	460d      	mov	r5, r1
 80055ac:	ec45 4b10 	vmov	d0, r4, r5
 80055b0:	b005      	add	sp, #20
 80055b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b6:	2200      	movs	r2, #0
 80055b8:	4b1b      	ldr	r3, [pc, #108]	; (8005628 <__kernel_sin+0x148>)
 80055ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055be:	f7fa ffdf 	bl	8000580 <__aeabi_dmul>
 80055c2:	4632      	mov	r2, r6
 80055c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055c8:	463b      	mov	r3, r7
 80055ca:	4640      	mov	r0, r8
 80055cc:	4649      	mov	r1, r9
 80055ce:	f7fa ffd7 	bl	8000580 <__aeabi_dmul>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055da:	f7fa fe19 	bl	8000210 <__aeabi_dsub>
 80055de:	4652      	mov	r2, sl
 80055e0:	465b      	mov	r3, fp
 80055e2:	f7fa ffcd 	bl	8000580 <__aeabi_dmul>
 80055e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055ea:	f7fa fe11 	bl	8000210 <__aeabi_dsub>
 80055ee:	a30c      	add	r3, pc, #48	; (adr r3, 8005620 <__kernel_sin+0x140>)
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	4606      	mov	r6, r0
 80055f6:	460f      	mov	r7, r1
 80055f8:	4640      	mov	r0, r8
 80055fa:	4649      	mov	r1, r9
 80055fc:	f7fa ffc0 	bl	8000580 <__aeabi_dmul>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4630      	mov	r0, r6
 8005606:	4639      	mov	r1, r7
 8005608:	f7fa fe04 	bl	8000214 <__adddf3>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4620      	mov	r0, r4
 8005612:	4629      	mov	r1, r5
 8005614:	f7fa fdfc 	bl	8000210 <__aeabi_dsub>
 8005618:	e7c6      	b.n	80055a8 <__kernel_sin+0xc8>
 800561a:	bf00      	nop
 800561c:	f3af 8000 	nop.w
 8005620:	55555549 	.word	0x55555549
 8005624:	3fc55555 	.word	0x3fc55555
 8005628:	3fe00000 	.word	0x3fe00000
 800562c:	5acfd57c 	.word	0x5acfd57c
 8005630:	3de5d93a 	.word	0x3de5d93a
 8005634:	8a2b9ceb 	.word	0x8a2b9ceb
 8005638:	3e5ae5e6 	.word	0x3e5ae5e6
 800563c:	57b1fe7d 	.word	0x57b1fe7d
 8005640:	3ec71de3 	.word	0x3ec71de3
 8005644:	19c161d5 	.word	0x19c161d5
 8005648:	3f2a01a0 	.word	0x3f2a01a0
 800564c:	1110f8a6 	.word	0x1110f8a6
 8005650:	3f811111 	.word	0x3f811111

08005654 <fabs>:
 8005654:	ec51 0b10 	vmov	r0, r1, d0
 8005658:	ee10 2a10 	vmov	r2, s0
 800565c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005660:	ec43 2b10 	vmov	d0, r2, r3
 8005664:	4770      	bx	lr
	...

08005668 <floor>:
 8005668:	ec51 0b10 	vmov	r0, r1, d0
 800566c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005670:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005674:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005678:	2e13      	cmp	r6, #19
 800567a:	460c      	mov	r4, r1
 800567c:	ee10 5a10 	vmov	r5, s0
 8005680:	4680      	mov	r8, r0
 8005682:	dc34      	bgt.n	80056ee <floor+0x86>
 8005684:	2e00      	cmp	r6, #0
 8005686:	da16      	bge.n	80056b6 <floor+0x4e>
 8005688:	a335      	add	r3, pc, #212	; (adr r3, 8005760 <floor+0xf8>)
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	f7fa fdc1 	bl	8000214 <__adddf3>
 8005692:	2200      	movs	r2, #0
 8005694:	2300      	movs	r3, #0
 8005696:	f7fb fa03 	bl	8000aa0 <__aeabi_dcmpgt>
 800569a:	b148      	cbz	r0, 80056b0 <floor+0x48>
 800569c:	2c00      	cmp	r4, #0
 800569e:	da59      	bge.n	8005754 <floor+0xec>
 80056a0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80056a4:	4a30      	ldr	r2, [pc, #192]	; (8005768 <floor+0x100>)
 80056a6:	432b      	orrs	r3, r5
 80056a8:	2500      	movs	r5, #0
 80056aa:	42ab      	cmp	r3, r5
 80056ac:	bf18      	it	ne
 80056ae:	4614      	movne	r4, r2
 80056b0:	4621      	mov	r1, r4
 80056b2:	4628      	mov	r0, r5
 80056b4:	e025      	b.n	8005702 <floor+0x9a>
 80056b6:	4f2d      	ldr	r7, [pc, #180]	; (800576c <floor+0x104>)
 80056b8:	4137      	asrs	r7, r6
 80056ba:	ea01 0307 	and.w	r3, r1, r7
 80056be:	4303      	orrs	r3, r0
 80056c0:	d01f      	beq.n	8005702 <floor+0x9a>
 80056c2:	a327      	add	r3, pc, #156	; (adr r3, 8005760 <floor+0xf8>)
 80056c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c8:	f7fa fda4 	bl	8000214 <__adddf3>
 80056cc:	2200      	movs	r2, #0
 80056ce:	2300      	movs	r3, #0
 80056d0:	f7fb f9e6 	bl	8000aa0 <__aeabi_dcmpgt>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	d0eb      	beq.n	80056b0 <floor+0x48>
 80056d8:	2c00      	cmp	r4, #0
 80056da:	bfbe      	ittt	lt
 80056dc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80056e0:	fa43 f606 	asrlt.w	r6, r3, r6
 80056e4:	19a4      	addlt	r4, r4, r6
 80056e6:	ea24 0407 	bic.w	r4, r4, r7
 80056ea:	2500      	movs	r5, #0
 80056ec:	e7e0      	b.n	80056b0 <floor+0x48>
 80056ee:	2e33      	cmp	r6, #51	; 0x33
 80056f0:	dd0b      	ble.n	800570a <floor+0xa2>
 80056f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80056f6:	d104      	bne.n	8005702 <floor+0x9a>
 80056f8:	ee10 2a10 	vmov	r2, s0
 80056fc:	460b      	mov	r3, r1
 80056fe:	f7fa fd89 	bl	8000214 <__adddf3>
 8005702:	ec41 0b10 	vmov	d0, r0, r1
 8005706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800570a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800570e:	f04f 33ff 	mov.w	r3, #4294967295
 8005712:	fa23 f707 	lsr.w	r7, r3, r7
 8005716:	4207      	tst	r7, r0
 8005718:	d0f3      	beq.n	8005702 <floor+0x9a>
 800571a:	a311      	add	r3, pc, #68	; (adr r3, 8005760 <floor+0xf8>)
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f7fa fd78 	bl	8000214 <__adddf3>
 8005724:	2200      	movs	r2, #0
 8005726:	2300      	movs	r3, #0
 8005728:	f7fb f9ba 	bl	8000aa0 <__aeabi_dcmpgt>
 800572c:	2800      	cmp	r0, #0
 800572e:	d0bf      	beq.n	80056b0 <floor+0x48>
 8005730:	2c00      	cmp	r4, #0
 8005732:	da02      	bge.n	800573a <floor+0xd2>
 8005734:	2e14      	cmp	r6, #20
 8005736:	d103      	bne.n	8005740 <floor+0xd8>
 8005738:	3401      	adds	r4, #1
 800573a:	ea25 0507 	bic.w	r5, r5, r7
 800573e:	e7b7      	b.n	80056b0 <floor+0x48>
 8005740:	2301      	movs	r3, #1
 8005742:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005746:	fa03 f606 	lsl.w	r6, r3, r6
 800574a:	4435      	add	r5, r6
 800574c:	4545      	cmp	r5, r8
 800574e:	bf38      	it	cc
 8005750:	18e4      	addcc	r4, r4, r3
 8005752:	e7f2      	b.n	800573a <floor+0xd2>
 8005754:	2500      	movs	r5, #0
 8005756:	462c      	mov	r4, r5
 8005758:	e7aa      	b.n	80056b0 <floor+0x48>
 800575a:	bf00      	nop
 800575c:	f3af 8000 	nop.w
 8005760:	8800759c 	.word	0x8800759c
 8005764:	7e37e43c 	.word	0x7e37e43c
 8005768:	bff00000 	.word	0xbff00000
 800576c:	000fffff 	.word	0x000fffff

08005770 <scalbn>:
 8005770:	b570      	push	{r4, r5, r6, lr}
 8005772:	ec55 4b10 	vmov	r4, r5, d0
 8005776:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800577a:	4606      	mov	r6, r0
 800577c:	462b      	mov	r3, r5
 800577e:	b9aa      	cbnz	r2, 80057ac <scalbn+0x3c>
 8005780:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005784:	4323      	orrs	r3, r4
 8005786:	d03b      	beq.n	8005800 <scalbn+0x90>
 8005788:	4b31      	ldr	r3, [pc, #196]	; (8005850 <scalbn+0xe0>)
 800578a:	4629      	mov	r1, r5
 800578c:	2200      	movs	r2, #0
 800578e:	ee10 0a10 	vmov	r0, s0
 8005792:	f7fa fef5 	bl	8000580 <__aeabi_dmul>
 8005796:	4b2f      	ldr	r3, [pc, #188]	; (8005854 <scalbn+0xe4>)
 8005798:	429e      	cmp	r6, r3
 800579a:	4604      	mov	r4, r0
 800579c:	460d      	mov	r5, r1
 800579e:	da12      	bge.n	80057c6 <scalbn+0x56>
 80057a0:	a327      	add	r3, pc, #156	; (adr r3, 8005840 <scalbn+0xd0>)
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f7fa feeb 	bl	8000580 <__aeabi_dmul>
 80057aa:	e009      	b.n	80057c0 <scalbn+0x50>
 80057ac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80057b0:	428a      	cmp	r2, r1
 80057b2:	d10c      	bne.n	80057ce <scalbn+0x5e>
 80057b4:	ee10 2a10 	vmov	r2, s0
 80057b8:	4620      	mov	r0, r4
 80057ba:	4629      	mov	r1, r5
 80057bc:	f7fa fd2a 	bl	8000214 <__adddf3>
 80057c0:	4604      	mov	r4, r0
 80057c2:	460d      	mov	r5, r1
 80057c4:	e01c      	b.n	8005800 <scalbn+0x90>
 80057c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80057ca:	460b      	mov	r3, r1
 80057cc:	3a36      	subs	r2, #54	; 0x36
 80057ce:	4432      	add	r2, r6
 80057d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80057d4:	428a      	cmp	r2, r1
 80057d6:	dd0b      	ble.n	80057f0 <scalbn+0x80>
 80057d8:	ec45 4b11 	vmov	d1, r4, r5
 80057dc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005848 <scalbn+0xd8>
 80057e0:	f000 f83c 	bl	800585c <copysign>
 80057e4:	a318      	add	r3, pc, #96	; (adr r3, 8005848 <scalbn+0xd8>)
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	ec51 0b10 	vmov	r0, r1, d0
 80057ee:	e7da      	b.n	80057a6 <scalbn+0x36>
 80057f0:	2a00      	cmp	r2, #0
 80057f2:	dd08      	ble.n	8005806 <scalbn+0x96>
 80057f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80057f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80057fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005800:	ec45 4b10 	vmov	d0, r4, r5
 8005804:	bd70      	pop	{r4, r5, r6, pc}
 8005806:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800580a:	da0d      	bge.n	8005828 <scalbn+0xb8>
 800580c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005810:	429e      	cmp	r6, r3
 8005812:	ec45 4b11 	vmov	d1, r4, r5
 8005816:	dce1      	bgt.n	80057dc <scalbn+0x6c>
 8005818:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005840 <scalbn+0xd0>
 800581c:	f000 f81e 	bl	800585c <copysign>
 8005820:	a307      	add	r3, pc, #28	; (adr r3, 8005840 <scalbn+0xd0>)
 8005822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005826:	e7e0      	b.n	80057ea <scalbn+0x7a>
 8005828:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800582c:	3236      	adds	r2, #54	; 0x36
 800582e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005832:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005836:	4620      	mov	r0, r4
 8005838:	4629      	mov	r1, r5
 800583a:	2200      	movs	r2, #0
 800583c:	4b06      	ldr	r3, [pc, #24]	; (8005858 <scalbn+0xe8>)
 800583e:	e7b2      	b.n	80057a6 <scalbn+0x36>
 8005840:	c2f8f359 	.word	0xc2f8f359
 8005844:	01a56e1f 	.word	0x01a56e1f
 8005848:	8800759c 	.word	0x8800759c
 800584c:	7e37e43c 	.word	0x7e37e43c
 8005850:	43500000 	.word	0x43500000
 8005854:	ffff3cb0 	.word	0xffff3cb0
 8005858:	3c900000 	.word	0x3c900000

0800585c <copysign>:
 800585c:	ec51 0b10 	vmov	r0, r1, d0
 8005860:	ee11 0a90 	vmov	r0, s3
 8005864:	ee10 2a10 	vmov	r2, s0
 8005868:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800586c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005870:	ea41 0300 	orr.w	r3, r1, r0
 8005874:	ec43 2b10 	vmov	d0, r2, r3
 8005878:	4770      	bx	lr
	...

0800587c <_init>:
 800587c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587e:	bf00      	nop
 8005880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005882:	bc08      	pop	{r3}
 8005884:	469e      	mov	lr, r3
 8005886:	4770      	bx	lr

08005888 <_fini>:
 8005888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588a:	bf00      	nop
 800588c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588e:	bc08      	pop	{r3}
 8005890:	469e      	mov	lr, r3
 8005892:	4770      	bx	lr
