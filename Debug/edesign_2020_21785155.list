
edesign_2020_21785155.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005734  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  080058f8  080058f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d48  08005d48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d48  08005d48  00015d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d50  08005d50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d50  08005d50  00015d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d54  08005d54  00015d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001094  2000000c  08005d64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010a0  08005d64  000210a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb41  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002261  00000000  00000000  0002eb7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb8  00000000  00000000  00030de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  00031c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d22  00000000  00000000  00032a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b775  00000000  00000000  0005575a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4eb0  00000000  00000000  00060ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00135d7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f44  00000000  00000000  00135dfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080058e0 	.word	0x080058e0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080058e0 	.word	0x080058e0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b09a      	sub	sp, #104	; 0x68
 8000508:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	state = Idle;
 800050a:	4ba4      	ldr	r3, [pc, #656]	; (800079c <main+0x298>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
	state_start = off;
 8000510:	4ba3      	ldr	r3, [pc, #652]	; (80007a0 <main+0x29c>)
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
	exti = off;
 8000516:	4ba3      	ldr	r3, [pc, #652]	; (80007a4 <main+0x2a0>)
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
	exti_start = off;
 800051c:	4ba2      	ldr	r3, [pc, #648]	; (80007a8 <main+0x2a4>)
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
	buttOne = off;
 8000522:	4ba2      	ldr	r3, [pc, #648]	; (80007ac <main+0x2a8>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
	buttTwo	= off;
 8000528:	4ba1      	ldr	r3, [pc, #644]	; (80007b0 <main+0x2ac>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
	buttThree = off;
 800052e:	4ba1      	ldr	r3, [pc, #644]	; (80007b4 <main+0x2b0>)
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
	buttRec = off;
 8000534:	4ba0      	ldr	r3, [pc, #640]	; (80007b8 <main+0x2b4>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
	buttStop = off;
 800053a:	4ba0      	ldr	r3, [pc, #640]	; (80007bc <main+0x2b8>)
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
	wave_init();
 8000540:	f000 fe3c 	bl	80011bc <wave_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f001 f96c 	bl	8001820 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 fb42 	bl	8000bd0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 fd16 	bl	8000f7c <MX_GPIO_Init>
  MX_DMA_Init();
 8000550:	f000 fcd6 	bl	8000f00 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000554:	f000 fcaa 	bl	8000eac <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000558:	f000 fbfc 	bl	8000d54 <MX_DAC_Init>
  MX_TIM6_Init();
 800055c:	f000 fc70 	bl	8000e40 <MX_TIM6_Init>
  MX_ADC2_Init();
 8000560:	f000 fba4 	bl	8000cac <MX_ADC2_Init>
  MX_TIM2_Init();
 8000564:	f000 fc20 	bl	8000da8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t msg[10] = {127, 128, '2','1','7','8','5','1','5','5'};
 8000568:	4a95      	ldr	r2, [pc, #596]	; (80007c0 <main+0x2bc>)
 800056a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800056e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000570:	c303      	stmia	r3!, {r0, r1}
 8000572:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000574:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000578:	2364      	movs	r3, #100	; 0x64
 800057a:	220a      	movs	r2, #10
 800057c:	4891      	ldr	r0, [pc, #580]	; (80007c4 <main+0x2c0>)
 800057e:	f003 fe98 	bl	80042b2 <HAL_UART_Transmit>
  HAL_TIM_Base_Start(&htim6);
 8000582:	4891      	ldr	r0, [pc, #580]	; (80007c8 <main+0x2c4>)
 8000584:	f003 fbb7 	bl	8003cf6 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8000588:	4890      	ldr	r0, [pc, #576]	; (80007cc <main+0x2c8>)
 800058a:	f003 fbb4 	bl	8003cf6 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)rec_buffer, 1024);
 800058e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000592:	498f      	ldr	r1, [pc, #572]	; (80007d0 <main+0x2cc>)
 8000594:	488f      	ldr	r0, [pc, #572]	; (80007d4 <main+0x2d0>)
 8000596:	f001 f9f9 	bl	800198c <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /////////////////////////////////////////////////////////////////////
	  if (exti){
 800059a:	4b82      	ldr	r3, [pc, #520]	; (80007a4 <main+0x2a0>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d06b      	beq.n	800067a <main+0x176>

		  if (!exti_start) Ri = HAL_GetTick();
 80005a2:	4b81      	ldr	r3, [pc, #516]	; (80007a8 <main+0x2a4>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d105      	bne.n	80005b6 <main+0xb2>
 80005aa:	f001 f99f 	bl	80018ec <HAL_GetTick>
 80005ae:	4603      	mov	r3, r0
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b89      	ldr	r3, [pc, #548]	; (80007d8 <main+0x2d4>)
 80005b4:	601a      	str	r2, [r3, #0]
		  exti_start = on;
 80005b6:	4b7c      	ldr	r3, [pc, #496]	; (80007a8 <main+0x2a4>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	601a      	str	r2, [r3, #0]
		  Rf = HAL_GetTick();
 80005bc:	f001 f996 	bl	80018ec <HAL_GetTick>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	4b85      	ldr	r3, [pc, #532]	; (80007dc <main+0x2d8>)
 80005c6:	601a      	str	r2, [r3, #0]

		  	if (Rf - Ri > 10){
 80005c8:	4b84      	ldr	r3, [pc, #528]	; (80007dc <main+0x2d8>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b82      	ldr	r3, [pc, #520]	; (80007d8 <main+0x2d4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	2b0a      	cmp	r3, #10
 80005d4:	dd51      	ble.n	800067a <main+0x176>
		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6)) buttOne = on;
 80005d6:	2140      	movs	r1, #64	; 0x40
 80005d8:	4881      	ldr	r0, [pc, #516]	; (80007e0 <main+0x2dc>)
 80005da:	f002 fdf7 	bl	80031cc <HAL_GPIO_ReadPin>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d003      	beq.n	80005ec <main+0xe8>
 80005e4:	4b71      	ldr	r3, [pc, #452]	; (80007ac <main+0x2a8>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	e002      	b.n	80005f2 <main+0xee>
		  		else buttOne = off;
 80005ec:	4b6f      	ldr	r3, [pc, #444]	; (80007ac <main+0x2a8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]

			  	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) buttTwo = on;
 80005f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f6:	487a      	ldr	r0, [pc, #488]	; (80007e0 <main+0x2dc>)
 80005f8:	f002 fde8 	bl	80031cc <HAL_GPIO_ReadPin>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d003      	beq.n	800060a <main+0x106>
 8000602:	4b6b      	ldr	r3, [pc, #428]	; (80007b0 <main+0x2ac>)
 8000604:	2201      	movs	r2, #1
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	e002      	b.n	8000610 <main+0x10c>
			  	else buttTwo = off;
 800060a:	4b69      	ldr	r3, [pc, #420]	; (80007b0 <main+0x2ac>)
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)) buttThree = on;
 8000610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000614:	4872      	ldr	r0, [pc, #456]	; (80007e0 <main+0x2dc>)
 8000616:	f002 fdd9 	bl	80031cc <HAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d003      	beq.n	8000628 <main+0x124>
 8000620:	4b64      	ldr	r3, [pc, #400]	; (80007b4 <main+0x2b0>)
 8000622:	2201      	movs	r2, #1
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	e002      	b.n	800062e <main+0x12a>
		  		else buttThree = off;
 8000628:	4b62      	ldr	r3, [pc, #392]	; (80007b4 <main+0x2b0>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)) buttRec = on;
 800062e:	2180      	movs	r1, #128	; 0x80
 8000630:	486b      	ldr	r0, [pc, #428]	; (80007e0 <main+0x2dc>)
 8000632:	f002 fdcb 	bl	80031cc <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d003      	beq.n	8000644 <main+0x140>
 800063c:	4b5e      	ldr	r3, [pc, #376]	; (80007b8 <main+0x2b4>)
 800063e:	2201      	movs	r2, #1
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	e002      	b.n	800064a <main+0x146>
		  		else buttRec = off;
 8000644:	4b5c      	ldr	r3, [pc, #368]	; (80007b8 <main+0x2b4>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]

		  		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) buttStop = on;
 800064a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064e:	4865      	ldr	r0, [pc, #404]	; (80007e4 <main+0x2e0>)
 8000650:	f002 fdbc 	bl	80031cc <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d003      	beq.n	8000662 <main+0x15e>
 800065a:	4b58      	ldr	r3, [pc, #352]	; (80007bc <main+0x2b8>)
 800065c:	2201      	movs	r2, #1
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	e002      	b.n	8000668 <main+0x164>
		  		else buttStop = off;
 8000662:	4b56      	ldr	r3, [pc, #344]	; (80007bc <main+0x2b8>)
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]

		  		exti = off;
 8000668:	4b4e      	ldr	r3, [pc, #312]	; (80007a4 <main+0x2a0>)
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
		  		state_start = off;
 800066e:	4b4c      	ldr	r3, [pc, #304]	; (80007a0 <main+0x29c>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
		  		exti_start = off;
 8000674:	4b4c      	ldr	r3, [pc, #304]	; (80007a8 <main+0x2a4>)
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
		  	}
	  }
	  /////////////////////////////////////////////////////////////////////

	  if (!state_start && !(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))){
 800067a:	4b49      	ldr	r3, [pc, #292]	; (80007a0 <main+0x29c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	f040 8155 	bne.w	800092e <main+0x42a>
 8000684:	2140      	movs	r1, #64	; 0x40
 8000686:	4856      	ldr	r0, [pc, #344]	; (80007e0 <main+0x2dc>)
 8000688:	f002 fda0 	bl	80031cc <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	f040 814d 	bne.w	800092e <main+0x42a>
 8000694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000698:	4851      	ldr	r0, [pc, #324]	; (80007e0 <main+0x2dc>)
 800069a:	f002 fd97 	bl	80031cc <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	f040 8144 	bne.w	800092e <main+0x42a>
 80006a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006aa:	484d      	ldr	r0, [pc, #308]	; (80007e0 <main+0x2dc>)
 80006ac:	f002 fd8e 	bl	80031cc <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	f040 813b 	bne.w	800092e <main+0x42a>
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	4849      	ldr	r0, [pc, #292]	; (80007e4 <main+0x2e0>)
 80006be:	f002 fd85 	bl	80031cc <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	f040 8132 	bne.w	800092e <main+0x42a>
			  if (buttOne || buttTwo || buttThree || buttStop) state_start = on;
 80006ca:	4b38      	ldr	r3, [pc, #224]	; (80007ac <main+0x2a8>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d10b      	bne.n	80006ea <main+0x1e6>
 80006d2:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <main+0x2ac>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d107      	bne.n	80006ea <main+0x1e6>
 80006da:	4b36      	ldr	r3, [pc, #216]	; (80007b4 <main+0x2b0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d103      	bne.n	80006ea <main+0x1e6>
 80006e2:	4b36      	ldr	r3, [pc, #216]	; (80007bc <main+0x2b8>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d002      	beq.n	80006f0 <main+0x1ec>
 80006ea:	4b2d      	ldr	r3, [pc, #180]	; (80007a0 <main+0x29c>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	601a      	str	r2, [r3, #0]
			  if (!buttRec && buttOne){
 80006f0:	4b31      	ldr	r3, [pc, #196]	; (80007b8 <main+0x2b4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d126      	bne.n	8000746 <main+0x242>
 80006f8:	4b2c      	ldr	r3, [pc, #176]	; (80007ac <main+0x2a8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d022      	beq.n	8000746 <main+0x242>
				  state = PlayOne;
 8000700:	4b26      	ldr	r3, [pc, #152]	; (800079c <main+0x298>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
				  wave = 1;
 8000706:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <main+0x2e4>)
 8000708:	2201      	movs	r2, #1
 800070a:	601a      	str	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'P','l','a','y','_','_','_','1'};
 800070c:	4a37      	ldr	r2, [pc, #220]	; (80007ec <main+0x2e8>)
 800070e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000712:	ca07      	ldmia	r2, {r0, r1, r2}
 8000714:	c303      	stmia	r3!, {r0, r1}
 8000716:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000718:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800071c:	2364      	movs	r3, #100	; 0x64
 800071e:	220a      	movs	r2, #10
 8000720:	4828      	ldr	r0, [pc, #160]	; (80007c4 <main+0x2c0>)
 8000722:	f003 fdc6 	bl	80042b2 <HAL_UART_Transmit>
		  		  wave_fillbuffer(dac_buffer, 1, 1024);
 8000726:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800072a:	2101      	movs	r1, #1
 800072c:	4830      	ldr	r0, [pc, #192]	; (80007f0 <main+0x2ec>)
 800072e:	f000 fd81 	bl	8001234 <wave_fillbuffer>
		  		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 8000732:	2300      	movs	r3, #0
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073a:	4a2d      	ldr	r2, [pc, #180]	; (80007f0 <main+0x2ec>)
 800073c:	2100      	movs	r1, #0
 800073e:	482d      	ldr	r0, [pc, #180]	; (80007f4 <main+0x2f0>)
 8000740:	f001 fe04 	bl	800234c <HAL_DAC_Start_DMA>
			  if (!buttRec && buttOne){
 8000744:	e0f3      	b.n	800092e <main+0x42a>
			  }
			  else if (!buttRec && buttTwo){
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <main+0x2b4>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d156      	bne.n	80007fc <main+0x2f8>
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <main+0x2ac>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d052      	beq.n	80007fc <main+0x2f8>
				  state = PlayTwo;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <main+0x298>)
 8000758:	2202      	movs	r2, #2
 800075a:	701a      	strb	r2, [r3, #0]
				  wave = 2;
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <main+0x2e4>)
 800075e:	2202      	movs	r2, #2
 8000760:	601a      	str	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'P','l','a','y','_','_','_','2'};
 8000762:	4a25      	ldr	r2, [pc, #148]	; (80007f8 <main+0x2f4>)
 8000764:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000768:	ca07      	ldmia	r2, {r0, r1, r2}
 800076a:	c303      	stmia	r3!, {r0, r1}
 800076c:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 800076e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000772:	2364      	movs	r3, #100	; 0x64
 8000774:	220a      	movs	r2, #10
 8000776:	4813      	ldr	r0, [pc, #76]	; (80007c4 <main+0x2c0>)
 8000778:	f003 fd9b 	bl	80042b2 <HAL_UART_Transmit>
		  		  wave_fillbuffer(dac_buffer, 2, 1024);
 800077c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000780:	2102      	movs	r1, #2
 8000782:	481b      	ldr	r0, [pc, #108]	; (80007f0 <main+0x2ec>)
 8000784:	f000 fd56 	bl	8001234 <wave_fillbuffer>
		  		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 8000788:	2300      	movs	r3, #0
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000790:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <main+0x2ec>)
 8000792:	2100      	movs	r1, #0
 8000794:	4817      	ldr	r0, [pc, #92]	; (80007f4 <main+0x2f0>)
 8000796:	f001 fdd9 	bl	800234c <HAL_DAC_Start_DMA>
			  else if (!buttRec && buttTwo){
 800079a:	e0c8      	b.n	800092e <main+0x42a>
 800079c:	20000488 	.word	0x20000488
 80007a0:	20000db0 	.word	0x20000db0
 80007a4:	200004ec 	.word	0x200004ec
 80007a8:	200004f4 	.word	0x200004f4
 80007ac:	20000034 	.word	0x20000034
 80007b0:	20000028 	.word	0x20000028
 80007b4:	200004f0 	.word	0x200004f0
 80007b8:	20000e94 	.word	0x20000e94
 80007bc:	20000484 	.word	0x20000484
 80007c0:	080058f8 	.word	0x080058f8
 80007c4:	20000df4 	.word	0x20000df4
 80007c8:	20000d6c 	.word	0x20000d6c
 80007cc:	20000db4 	.word	0x20000db4
 80007d0:	20000080 	.word	0x20000080
 80007d4:	20000038 	.word	0x20000038
 80007d8:	20000dac 	.word	0x20000dac
 80007dc:	20000030 	.word	0x20000030
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020400 	.word	0x40020400
 80007e8:	20000480 	.word	0x20000480
 80007ec:	08005904 	.word	0x08005904
 80007f0:	2000056c 	.word	0x2000056c
 80007f4:	20000558 	.word	0x20000558
 80007f8:	08005910 	.word	0x08005910
			  }
			  else if (!buttRec && buttThree){
 80007fc:	4baf      	ldr	r3, [pc, #700]	; (8000abc <main+0x5b8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d126      	bne.n	8000852 <main+0x34e>
 8000804:	4bae      	ldr	r3, [pc, #696]	; (8000ac0 <main+0x5bc>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d022      	beq.n	8000852 <main+0x34e>
				  state = PlayThree;
 800080c:	4bad      	ldr	r3, [pc, #692]	; (8000ac4 <main+0x5c0>)
 800080e:	2203      	movs	r2, #3
 8000810:	701a      	strb	r2, [r3, #0]
				  wave = 3;
 8000812:	4bad      	ldr	r3, [pc, #692]	; (8000ac8 <main+0x5c4>)
 8000814:	2203      	movs	r2, #3
 8000816:	601a      	str	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'P','l','a','y','_','_','_','3'};
 8000818:	4aac      	ldr	r2, [pc, #688]	; (8000acc <main+0x5c8>)
 800081a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800081e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000820:	c303      	stmia	r3!, {r0, r1}
 8000822:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000824:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	220a      	movs	r2, #10
 800082c:	48a8      	ldr	r0, [pc, #672]	; (8000ad0 <main+0x5cc>)
 800082e:	f003 fd40 	bl	80042b2 <HAL_UART_Transmit>
		  		  wave_fillbuffer(dac_buffer, 3, 1024);
 8000832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000836:	2103      	movs	r1, #3
 8000838:	48a6      	ldr	r0, [pc, #664]	; (8000ad4 <main+0x5d0>)
 800083a:	f000 fcfb 	bl	8001234 <wave_fillbuffer>
		  		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 800083e:	2300      	movs	r3, #0
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000846:	4aa3      	ldr	r2, [pc, #652]	; (8000ad4 <main+0x5d0>)
 8000848:	2100      	movs	r1, #0
 800084a:	48a3      	ldr	r0, [pc, #652]	; (8000ad8 <main+0x5d4>)
 800084c:	f001 fd7e 	bl	800234c <HAL_DAC_Start_DMA>
			  else if (!buttRec && buttThree){
 8000850:	e06d      	b.n	800092e <main+0x42a>
			  }
			  else if (buttRec && buttOne){
 8000852:	4b9a      	ldr	r3, [pc, #616]	; (8000abc <main+0x5b8>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d018      	beq.n	800088c <main+0x388>
 800085a:	4ba0      	ldr	r3, [pc, #640]	; (8000adc <main+0x5d8>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d014      	beq.n	800088c <main+0x388>
				  state = RecOne;
 8000862:	4b98      	ldr	r3, [pc, #608]	; (8000ac4 <main+0x5c0>)
 8000864:	2204      	movs	r2, #4
 8000866:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'R','e','c','o','r','d','_','1'};
 8000868:	4a9d      	ldr	r2, [pc, #628]	; (8000ae0 <main+0x5dc>)
 800086a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000870:	c303      	stmia	r3!, {r0, r1}
 8000872:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 8000874:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000878:	2364      	movs	r3, #100	; 0x64
 800087a:	220a      	movs	r2, #10
 800087c:	4894      	ldr	r0, [pc, #592]	; (8000ad0 <main+0x5cc>)
 800087e:	f003 fd18 	bl	80042b2 <HAL_UART_Transmit>
		  		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000882:	2100      	movs	r1, #0
 8000884:	4894      	ldr	r0, [pc, #592]	; (8000ad8 <main+0x5d4>)
 8000886:	f001 fe0f 	bl	80024a8 <HAL_DAC_Stop_DMA>
			  else if (buttRec && buttOne){
 800088a:	e050      	b.n	800092e <main+0x42a>
			  }
			  else if (buttRec && buttTwo){
 800088c:	4b8b      	ldr	r3, [pc, #556]	; (8000abc <main+0x5b8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d018      	beq.n	80008c6 <main+0x3c2>
 8000894:	4b93      	ldr	r3, [pc, #588]	; (8000ae4 <main+0x5e0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d014      	beq.n	80008c6 <main+0x3c2>
				  state = RecTwo;
 800089c:	4b89      	ldr	r3, [pc, #548]	; (8000ac4 <main+0x5c0>)
 800089e:	2205      	movs	r2, #5
 80008a0:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'R','e','c','o','r','d','_','2'};
 80008a2:	4a91      	ldr	r2, [pc, #580]	; (8000ae8 <main+0x5e4>)
 80008a4:	f107 0318 	add.w	r3, r7, #24
 80008a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80008aa:	c303      	stmia	r3!, {r0, r1}
 80008ac:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80008ae:	f107 0118 	add.w	r1, r7, #24
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	220a      	movs	r2, #10
 80008b6:	4886      	ldr	r0, [pc, #536]	; (8000ad0 <main+0x5cc>)
 80008b8:	f003 fcfb 	bl	80042b2 <HAL_UART_Transmit>
		  		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80008bc:	2100      	movs	r1, #0
 80008be:	4886      	ldr	r0, [pc, #536]	; (8000ad8 <main+0x5d4>)
 80008c0:	f001 fdf2 	bl	80024a8 <HAL_DAC_Stop_DMA>
			  else if (buttRec && buttTwo){
 80008c4:	e033      	b.n	800092e <main+0x42a>
			  }
			  else if (buttRec && buttThree){
 80008c6:	4b7d      	ldr	r3, [pc, #500]	; (8000abc <main+0x5b8>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d018      	beq.n	8000900 <main+0x3fc>
 80008ce:	4b7c      	ldr	r3, [pc, #496]	; (8000ac0 <main+0x5bc>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d014      	beq.n	8000900 <main+0x3fc>
				  state = RecThree;
 80008d6:	4b7b      	ldr	r3, [pc, #492]	; (8000ac4 <main+0x5c0>)
 80008d8:	2206      	movs	r2, #6
 80008da:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'R','e','c','o','r','d','_','3'};
 80008dc:	4a83      	ldr	r2, [pc, #524]	; (8000aec <main+0x5e8>)
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80008e4:	c303      	stmia	r3!, {r0, r1}
 80008e6:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 100);
 80008e8:	f107 010c 	add.w	r1, r7, #12
 80008ec:	2364      	movs	r3, #100	; 0x64
 80008ee:	220a      	movs	r2, #10
 80008f0:	4877      	ldr	r0, [pc, #476]	; (8000ad0 <main+0x5cc>)
 80008f2:	f003 fcde 	bl	80042b2 <HAL_UART_Transmit>
		  		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80008f6:	2100      	movs	r1, #0
 80008f8:	4877      	ldr	r0, [pc, #476]	; (8000ad8 <main+0x5d4>)
 80008fa:	f001 fdd5 	bl	80024a8 <HAL_DAC_Stop_DMA>
			  else if (buttRec && buttThree){
 80008fe:	e016      	b.n	800092e <main+0x42a>
			  }
			  else if (buttStop){
 8000900:	4b7b      	ldr	r3, [pc, #492]	; (8000af0 <main+0x5ec>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d012      	beq.n	800092e <main+0x42a>
				  state = Idle;
 8000908:	4b6e      	ldr	r3, [pc, #440]	; (8000ac4 <main+0x5c0>)
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
				  uint8_t msg[10] = {127, 128,'S','t','o','p','_','_','_','_'};
 800090e:	4a79      	ldr	r2, [pc, #484]	; (8000af4 <main+0x5f0>)
 8000910:	463b      	mov	r3, r7
 8000912:	ca07      	ldmia	r2, {r0, r1, r2}
 8000914:	c303      	stmia	r3!, {r0, r1}
 8000916:	801a      	strh	r2, [r3, #0]
				  HAL_UART_Transmit(&huart2, msg, sizeof(msg), 1000);
 8000918:	4639      	mov	r1, r7
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	220a      	movs	r2, #10
 8000920:	486b      	ldr	r0, [pc, #428]	; (8000ad0 <main+0x5cc>)
 8000922:	f003 fcc6 	bl	80042b2 <HAL_UART_Transmit>
		  		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000926:	2100      	movs	r1, #0
 8000928:	486b      	ldr	r0, [pc, #428]	; (8000ad8 <main+0x5d4>)
 800092a:	f001 fdbd 	bl	80024a8 <HAL_DAC_Stop_DMA>
			  }
	  }

	  ticky = HAL_GetTick();
 800092e:	f000 ffdd 	bl	80018ec <HAL_GetTick>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	4b70      	ldr	r3, [pc, #448]	; (8000af8 <main+0x5f4>)
 8000938:	601a      	str	r2, [r3, #0]
	  ///////////////////////////////////////////////////////////////////////////////////
	  if (state == PlayOne || state == PlayTwo || state == PlayThree || state == Idle){
 800093a:	4b62      	ldr	r3, [pc, #392]	; (8000ac4 <main+0x5c0>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b01      	cmp	r3, #1
 8000942:	d00e      	beq.n	8000962 <main+0x45e>
 8000944:	4b5f      	ldr	r3, [pc, #380]	; (8000ac4 <main+0x5c0>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b02      	cmp	r3, #2
 800094c:	d009      	beq.n	8000962 <main+0x45e>
 800094e:	4b5d      	ldr	r3, [pc, #372]	; (8000ac4 <main+0x5c0>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b03      	cmp	r3, #3
 8000956:	d004      	beq.n	8000962 <main+0x45e>
 8000958:	4b5a      	ldr	r3, [pc, #360]	; (8000ac4 <main+0x5c0>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	d174      	bne.n	8000a4c <main+0x548>
	  	  if (state == PlayOne){
 8000962:	4b58      	ldr	r3, [pc, #352]	; (8000ac4 <main+0x5c0>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b01      	cmp	r3, #1
 800096a:	d11c      	bne.n	80009a6 <main+0x4a2>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, on);
 800096c:	4b62      	ldr	r3, [pc, #392]	; (8000af8 <main+0x5f4>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b62      	ldr	r3, [pc, #392]	; (8000afc <main+0x5f8>)
 8000972:	fb83 1302 	smull	r1, r3, r3, r2
 8000976:	1159      	asrs	r1, r3, #5
 8000978:	17d3      	asrs	r3, r2, #31
 800097a:	1acb      	subs	r3, r1, r3
 800097c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000980:	fb01 f303 	mul.w	r3, r1, r3
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	2bf9      	cmp	r3, #249	; 0xf9
 8000988:	dc06      	bgt.n	8000998 <main+0x494>
 800098a:	2201      	movs	r2, #1
 800098c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000990:	485b      	ldr	r0, [pc, #364]	; (8000b00 <main+0x5fc>)
 8000992:	f002 fc33 	bl	80031fc <HAL_GPIO_WritePin>
 8000996:	e00c      	b.n	80009b2 <main+0x4ae>
	  		  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099e:	4858      	ldr	r0, [pc, #352]	; (8000b00 <main+0x5fc>)
 80009a0:	f002 fc2c 	bl	80031fc <HAL_GPIO_WritePin>
 80009a4:	e005      	b.n	80009b2 <main+0x4ae>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ac:	4854      	ldr	r0, [pc, #336]	; (8000b00 <main+0x5fc>)
 80009ae:	f002 fc25 	bl	80031fc <HAL_GPIO_WritePin>

	  	  if (state == PlayTwo){
 80009b2:	4b44      	ldr	r3, [pc, #272]	; (8000ac4 <main+0x5c0>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d11c      	bne.n	80009f6 <main+0x4f2>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, on);
 80009bc:	4b4e      	ldr	r3, [pc, #312]	; (8000af8 <main+0x5f4>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b4e      	ldr	r3, [pc, #312]	; (8000afc <main+0x5f8>)
 80009c2:	fb83 1302 	smull	r1, r3, r3, r2
 80009c6:	1159      	asrs	r1, r3, #5
 80009c8:	17d3      	asrs	r3, r2, #31
 80009ca:	1acb      	subs	r3, r1, r3
 80009cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009d0:	fb01 f303 	mul.w	r3, r1, r3
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	2bf9      	cmp	r3, #249	; 0xf9
 80009d8:	dc06      	bgt.n	80009e8 <main+0x4e4>
 80009da:	2201      	movs	r2, #1
 80009dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e0:	4848      	ldr	r0, [pc, #288]	; (8000b04 <main+0x600>)
 80009e2:	f002 fc0b 	bl	80031fc <HAL_GPIO_WritePin>
 80009e6:	e00c      	b.n	8000a02 <main+0x4fe>
	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ee:	4845      	ldr	r0, [pc, #276]	; (8000b04 <main+0x600>)
 80009f0:	f002 fc04 	bl	80031fc <HAL_GPIO_WritePin>
 80009f4:	e005      	b.n	8000a02 <main+0x4fe>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fc:	4841      	ldr	r0, [pc, #260]	; (8000b04 <main+0x600>)
 80009fe:	f002 fbfd 	bl	80031fc <HAL_GPIO_WritePin>

	  	  if (state == PlayThree){
 8000a02:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <main+0x5c0>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b03      	cmp	r3, #3
 8000a0a:	d11a      	bne.n	8000a42 <main+0x53e>
	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, on);
 8000a0c:	4b3a      	ldr	r3, [pc, #232]	; (8000af8 <main+0x5f4>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b3a      	ldr	r3, [pc, #232]	; (8000afc <main+0x5f8>)
 8000a12:	fb83 1302 	smull	r1, r3, r3, r2
 8000a16:	1159      	asrs	r1, r3, #5
 8000a18:	17d3      	asrs	r3, r2, #31
 8000a1a:	1acb      	subs	r3, r1, r3
 8000a1c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a20:	fb01 f303 	mul.w	r3, r1, r3
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	2bf9      	cmp	r3, #249	; 0xf9
 8000a28:	dc05      	bgt.n	8000a36 <main+0x532>
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2110      	movs	r1, #16
 8000a2e:	4835      	ldr	r0, [pc, #212]	; (8000b04 <main+0x600>)
 8000a30:	f002 fbe4 	bl	80031fc <HAL_GPIO_WritePin>
 8000a34:	e00a      	b.n	8000a4c <main+0x548>
	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2110      	movs	r1, #16
 8000a3a:	4832      	ldr	r0, [pc, #200]	; (8000b04 <main+0x600>)
 8000a3c:	f002 fbde 	bl	80031fc <HAL_GPIO_WritePin>
 8000a40:	e004      	b.n	8000a4c <main+0x548>
	  	  }
	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2110      	movs	r1, #16
 8000a46:	482f      	ldr	r0, [pc, #188]	; (8000b04 <main+0x600>)
 8000a48:	f002 fbd8 	bl	80031fc <HAL_GPIO_WritePin>
	  }
	  ///////////////////////////////////////////////////////////////////////////////////
  	  if (state == RecOne || state == RecTwo || state == RecThree){
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <main+0x5c0>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	d00a      	beq.n	8000a6c <main+0x568>
 8000a56:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <main+0x5c0>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b05      	cmp	r3, #5
 8000a5e:	d005      	beq.n	8000a6c <main+0x568>
 8000a60:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <main+0x5c0>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2b06      	cmp	r3, #6
 8000a68:	f040 80a2 	bne.w	8000bb0 <main+0x6ac>
  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, on);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2120      	movs	r1, #32
 8000a70:	4824      	ldr	r0, [pc, #144]	; (8000b04 <main+0x600>)
 8000a72:	f002 fbc3 	bl	80031fc <HAL_GPIO_WritePin>

  	  	  if (state == RecOne){
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <main+0x5c0>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d143      	bne.n	8000b08 <main+0x604>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, on);
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <main+0x5f4>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <main+0x5f8>)
 8000a86:	fb83 1302 	smull	r1, r3, r3, r2
 8000a8a:	1159      	asrs	r1, r3, #5
 8000a8c:	17d3      	asrs	r3, r2, #31
 8000a8e:	1acb      	subs	r3, r1, r3
 8000a90:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a94:	fb01 f303 	mul.w	r3, r1, r3
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	2bf9      	cmp	r3, #249	; 0xf9
 8000a9c:	dc06      	bgt.n	8000aac <main+0x5a8>
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa4:	4816      	ldr	r0, [pc, #88]	; (8000b00 <main+0x5fc>)
 8000aa6:	f002 fba9 	bl	80031fc <HAL_GPIO_WritePin>
 8000aaa:	e033      	b.n	8000b14 <main+0x610>
  	  		  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab2:	4813      	ldr	r0, [pc, #76]	; (8000b00 <main+0x5fc>)
 8000ab4:	f002 fba2 	bl	80031fc <HAL_GPIO_WritePin>
 8000ab8:	e02c      	b.n	8000b14 <main+0x610>
 8000aba:	bf00      	nop
 8000abc:	20000e94 	.word	0x20000e94
 8000ac0:	200004f0 	.word	0x200004f0
 8000ac4:	20000488 	.word	0x20000488
 8000ac8:	20000480 	.word	0x20000480
 8000acc:	0800591c 	.word	0x0800591c
 8000ad0:	20000df4 	.word	0x20000df4
 8000ad4:	2000056c 	.word	0x2000056c
 8000ad8:	20000558 	.word	0x20000558
 8000adc:	20000034 	.word	0x20000034
 8000ae0:	08005928 	.word	0x08005928
 8000ae4:	20000028 	.word	0x20000028
 8000ae8:	08005934 	.word	0x08005934
 8000aec:	08005940 	.word	0x08005940
 8000af0:	20000484 	.word	0x20000484
 8000af4:	0800594c 	.word	0x0800594c
 8000af8:	2000002c 	.word	0x2000002c
 8000afc:	10624dd3 	.word	0x10624dd3
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020400 	.word	0x40020400
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, off);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0e:	482b      	ldr	r0, [pc, #172]	; (8000bbc <main+0x6b8>)
 8000b10:	f002 fb74 	bl	80031fc <HAL_GPIO_WritePin>

  	  	  if (state == RecTwo){
 8000b14:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <main+0x6bc>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b05      	cmp	r3, #5
 8000b1c:	d11c      	bne.n	8000b58 <main+0x654>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, on);
 8000b1e:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <main+0x6c0>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <main+0x6c4>)
 8000b24:	fb83 1302 	smull	r1, r3, r3, r2
 8000b28:	1159      	asrs	r1, r3, #5
 8000b2a:	17d3      	asrs	r3, r2, #31
 8000b2c:	1acb      	subs	r3, r1, r3
 8000b2e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b32:	fb01 f303 	mul.w	r3, r1, r3
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	2bf9      	cmp	r3, #249	; 0xf9
 8000b3a:	dc06      	bgt.n	8000b4a <main+0x646>
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b42:	4822      	ldr	r0, [pc, #136]	; (8000bcc <main+0x6c8>)
 8000b44:	f002 fb5a 	bl	80031fc <HAL_GPIO_WritePin>
 8000b48:	e00c      	b.n	8000b64 <main+0x660>
  	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b50:	481e      	ldr	r0, [pc, #120]	; (8000bcc <main+0x6c8>)
 8000b52:	f002 fb53 	bl	80031fc <HAL_GPIO_WritePin>
 8000b56:	e005      	b.n	8000b64 <main+0x660>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, off);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b5e:	481b      	ldr	r0, [pc, #108]	; (8000bcc <main+0x6c8>)
 8000b60:	f002 fb4c 	bl	80031fc <HAL_GPIO_WritePin>

  	  	  if (state == RecThree){
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <main+0x6bc>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d11a      	bne.n	8000ba4 <main+0x6a0>
  	  		  if (ticky % 500 < 250) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, on);
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <main+0x6c0>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <main+0x6c4>)
 8000b74:	fb83 1302 	smull	r1, r3, r3, r2
 8000b78:	1159      	asrs	r1, r3, #5
 8000b7a:	17d3      	asrs	r3, r2, #31
 8000b7c:	1acb      	subs	r3, r1, r3
 8000b7e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b82:	fb01 f303 	mul.w	r3, r1, r3
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	2bf9      	cmp	r3, #249	; 0xf9
 8000b8a:	dc05      	bgt.n	8000b98 <main+0x694>
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2110      	movs	r1, #16
 8000b90:	480e      	ldr	r0, [pc, #56]	; (8000bcc <main+0x6c8>)
 8000b92:	f002 fb33 	bl	80031fc <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8000b96:	e010      	b.n	8000bba <main+0x6b6>
  	  		  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	480b      	ldr	r0, [pc, #44]	; (8000bcc <main+0x6c8>)
 8000b9e:	f002 fb2d 	bl	80031fc <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8000ba2:	e00a      	b.n	8000bba <main+0x6b6>
  	  	  }
  	  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, off);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2110      	movs	r1, #16
 8000ba8:	4808      	ldr	r0, [pc, #32]	; (8000bcc <main+0x6c8>)
 8000baa:	f002 fb27 	bl	80031fc <HAL_GPIO_WritePin>
  	  	  if (state == RecThree){
 8000bae:	e004      	b.n	8000bba <main+0x6b6>
  	  }
  	  else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, off);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2120      	movs	r1, #32
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <main+0x6c8>)
 8000bb6:	f002 fb21 	bl	80031fc <HAL_GPIO_WritePin>
	  if (exti){
 8000bba:	e4ee      	b.n	800059a <main+0x96>
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	20000488 	.word	0x20000488
 8000bc4:	2000002c 	.word	0x2000002c
 8000bc8:	10624dd3 	.word	0x10624dd3
 8000bcc:	40020400 	.word	0x40020400

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b094      	sub	sp, #80	; 0x50
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	2234      	movs	r2, #52	; 0x34
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 f92a 	bl	8004e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <SystemClock_Config+0xd4>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	4a29      	ldr	r2, [pc, #164]	; (8000ca4 <SystemClock_Config+0xd4>)
 8000bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c02:	6413      	str	r3, [r2, #64]	; 0x40
 8000c04:	4b27      	ldr	r3, [pc, #156]	; (8000ca4 <SystemClock_Config+0xd4>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c10:	2300      	movs	r3, #0
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <SystemClock_Config+0xd8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c1c:	4a22      	ldr	r2, [pc, #136]	; (8000ca8 <SystemClock_Config+0xd8>)
 8000c1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <SystemClock_Config+0xd8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c38:	2310      	movs	r3, #16
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c40:	2300      	movs	r3, #0
 8000c42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c44:	2310      	movs	r3, #16
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c48:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c4e:	2304      	movs	r3, #4
 8000c50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c52:	2302      	movs	r3, #2
 8000c54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c56:	2302      	movs	r3, #2
 8000c58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f002 fdc4 	bl	80037ec <HAL_RCC_OscConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c6a:	f000 fa9f 	bl	80011ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6e:	230f      	movs	r3, #15
 8000c70:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c72:	2302      	movs	r3, #2
 8000c74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c84:	f107 0308 	add.w	r3, r7, #8
 8000c88:	2102      	movs	r1, #2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f002 faf4 	bl	8003278 <HAL_RCC_ClockConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c96:	f000 fa89 	bl	80011ac <Error_Handler>
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3750      	adds	r7, #80	; 0x50
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40007000 	.word	0x40007000

08000cac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8000cbe:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <MX_ADC2_Init+0xa0>)
 8000cc0:	4a23      	ldr	r2, [pc, #140]	; (8000d50 <MX_ADC2_Init+0xa4>)
 8000cc2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cc4:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_ADC2_Init+0xa0>)
 8000cc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_ADC2_Init+0xa0>)
 8000cce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000cd2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_ADC2_Init+0xa0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_ADC2_Init+0xa0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_ADC2_Init+0xa0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <MX_ADC2_Init+0xa0>)
 8000cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000cf0:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_ADC2_Init+0xa0>)
 8000cf2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000cf6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_ADC2_Init+0xa0>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <MX_ADC2_Init+0xa0>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_ADC2_Init+0xa0>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_ADC2_Init+0xa0>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d12:	480e      	ldr	r0, [pc, #56]	; (8000d4c <MX_ADC2_Init+0xa0>)
 8000d14:	f000 fdf6 	bl	8001904 <HAL_ADC_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_ADC2_Init+0x76>
  {
    Error_Handler();
 8000d1e:	f000 fa45 	bl	80011ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000d22:	230e      	movs	r3, #14
 8000d24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d26:	2301      	movs	r3, #1
 8000d28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <MX_ADC2_Init+0xa0>)
 8000d34:	f000 ff26 	bl	8001b84 <HAL_ADC_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_ADC2_Init+0x96>
  {
    Error_Handler();
 8000d3e:	f000 fa35 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000038 	.word	0x20000038
 8000d50:	40012100 	.word	0x40012100

08000d54 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_DAC_Init+0x4c>)
 8000d64:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <MX_DAC_Init+0x50>)
 8000d66:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <MX_DAC_Init+0x4c>)
 8000d6a:	f001 facc 	bl	8002306 <HAL_DAC_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000d74:	f000 fa1a 	bl	80011ac <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d80:	463b      	mov	r3, r7
 8000d82:	2200      	movs	r2, #0
 8000d84:	4619      	mov	r1, r3
 8000d86:	4806      	ldr	r0, [pc, #24]	; (8000da0 <MX_DAC_Init+0x4c>)
 8000d88:	f001 fbd9 	bl	800253e <HAL_DAC_ConfigChannel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000d92:	f000 fa0b 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000558 	.word	0x20000558
 8000da4:	40007400 	.word	0x40007400

08000da8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000dc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1905;
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000dda:	f240 7271 	movw	r2, #1905	; 0x771
 8000dde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dec:	4813      	ldr	r0, [pc, #76]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000dee:	f002 ff57 	bl	8003ca0 <HAL_TIM_Base_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000df8:	f000 f9d8 	bl	80011ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	4619      	mov	r1, r3
 8000e08:	480c      	ldr	r0, [pc, #48]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000e0a:	f002 ff98 	bl	8003d3e <HAL_TIM_ConfigClockSource>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e14:	f000 f9ca 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e18:	2320      	movs	r3, #32
 8000e1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e20:	463b      	mov	r3, r7
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_TIM2_Init+0x94>)
 8000e26:	f003 f97b 	bl	8004120 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e30:	f000 f9bc 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000db4 	.word	0x20000db4

08000e40 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_TIM6_Init+0x64>)
 8000e50:	4a15      	ldr	r2, [pc, #84]	; (8000ea8 <MX_TIM6_Init+0x68>)
 8000e52:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <MX_TIM6_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_TIM6_Init+0x64>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1905;
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <MX_TIM6_Init+0x64>)
 8000e62:	f240 7271 	movw	r2, #1905	; 0x771
 8000e66:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_TIM6_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e6e:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_TIM6_Init+0x64>)
 8000e70:	f002 ff16 	bl	8003ca0 <HAL_TIM_Base_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000e7a:	f000 f997 	bl	80011ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e7e:	2320      	movs	r3, #32
 8000e80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e86:	463b      	mov	r3, r7
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <MX_TIM6_Init+0x64>)
 8000e8c:	f003 f948 	bl	8004120 <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000e96:	f000 f989 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000d6c 	.word	0x20000d6c
 8000ea8:	40001000 	.word	0x40001000

08000eac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <MX_USART2_UART_Init+0x48>)
 8000eb2:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_USART2_UART_Init+0x48>)
 8000eb8:	4a10      	ldr	r2, [pc, #64]	; (8000efc <MX_USART2_UART_Init+0x50>)
 8000eba:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <MX_USART2_UART_Init+0x48>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_USART2_UART_Init+0x48>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <MX_USART2_UART_Init+0x48>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_USART2_UART_Init+0x48>)
 8000ed0:	220c      	movs	r2, #12
 8000ed2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <MX_USART2_UART_Init+0x48>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_USART2_UART_Init+0x48>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <MX_USART2_UART_Init+0x48>)
 8000ee2:	f003 f999 	bl	8004218 <HAL_UART_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000eec:	f000 f95e 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000df4 	.word	0x20000df4
 8000ef8:	40004400 	.word	0x40004400
 8000efc:	0007a120 	.word	0x0007a120

08000f00 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <MX_DMA_Init+0x78>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a1a      	ldr	r2, [pc, #104]	; (8000f78 <MX_DMA_Init+0x78>)
 8000f10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <MX_DMA_Init+0x78>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_DMA_Init+0x78>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <MX_DMA_Init+0x78>)
 8000f2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_DMA_Init+0x78>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	2010      	movs	r0, #16
 8000f44:	f001 f9a9 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f48:	2010      	movs	r0, #16
 8000f4a:	f001 f9c2 	bl	80022d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	2011      	movs	r0, #17
 8000f54:	f001 f9a1 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f58:	2011      	movs	r0, #17
 8000f5a:	f001 f9ba 	bl	80022d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	203a      	movs	r0, #58	; 0x3a
 8000f64:	f001 f999 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f68:	203a      	movs	r0, #58	; 0x3a
 8000f6a:	f001 f9b2 	bl	80022d2 <HAL_NVIC_EnableIRQ>

}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800

08000f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b4d      	ldr	r3, [pc, #308]	; (80010cc <MX_GPIO_Init+0x150>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a4c      	ldr	r2, [pc, #304]	; (80010cc <MX_GPIO_Init+0x150>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b4a      	ldr	r3, [pc, #296]	; (80010cc <MX_GPIO_Init+0x150>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b46      	ldr	r3, [pc, #280]	; (80010cc <MX_GPIO_Init+0x150>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a45      	ldr	r2, [pc, #276]	; (80010cc <MX_GPIO_Init+0x150>)
 8000fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b43      	ldr	r3, [pc, #268]	; (80010cc <MX_GPIO_Init+0x150>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	4b3f      	ldr	r3, [pc, #252]	; (80010cc <MX_GPIO_Init+0x150>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a3e      	ldr	r2, [pc, #248]	; (80010cc <MX_GPIO_Init+0x150>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <MX_GPIO_Init+0x150>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b38      	ldr	r3, [pc, #224]	; (80010cc <MX_GPIO_Init+0x150>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a37      	ldr	r2, [pc, #220]	; (80010cc <MX_GPIO_Init+0x150>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b35      	ldr	r3, [pc, #212]	; (80010cc <MX_GPIO_Init+0x150>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001008:	4831      	ldr	r0, [pc, #196]	; (80010d0 <MX_GPIO_Init+0x154>)
 800100a:	f002 f8f7 	bl	80031fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001014:	482f      	ldr	r0, [pc, #188]	; (80010d4 <MX_GPIO_Init+0x158>)
 8001016:	f002 f8f1 	bl	80031fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800101a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001020:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <MX_GPIO_Init+0x15c>)
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	482b      	ldr	r0, [pc, #172]	; (80010dc <MX_GPIO_Init+0x160>)
 8001030:	f001 ff3a 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8001034:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	4820      	ldr	r0, [pc, #128]	; (80010d0 <MX_GPIO_Init+0x154>)
 800104e:	f001 ff2b 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 8001052:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001058:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_GPIO_Init+0x164>)
 800105a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800105c:	2302      	movs	r3, #2
 800105e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	481a      	ldr	r0, [pc, #104]	; (80010d0 <MX_GPIO_Init+0x154>)
 8001068:	f001 ff1e 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 800106c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	4813      	ldr	r0, [pc, #76]	; (80010d4 <MX_GPIO_Init+0x158>)
 8001086:	f001 ff0f 	bl	8002ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800108a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_GPIO_Init+0x164>)
 8001092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001094:	2302      	movs	r3, #2
 8001096:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <MX_GPIO_Init+0x158>)
 80010a0:	f001 ff02 	bl	8002ea8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	2017      	movs	r0, #23
 80010aa:	f001 f8f6 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010ae:	2017      	movs	r0, #23
 80010b0:	f001 f90f 	bl	80022d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2100      	movs	r1, #0
 80010b8:	2028      	movs	r0, #40	; 0x28
 80010ba:	f001 f8ee 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010be:	2028      	movs	r0, #40	; 0x28
 80010c0:	f001 f907 	bl	80022d2 <HAL_NVIC_EnableIRQ>

}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	; 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400
 80010d8:	10210000 	.word	0x10210000
 80010dc:	40020800 	.word	0x40020800
 80010e0:	10110000 	.word	0x10110000

080010e4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	huart2.gState = HAL_UART_STATE_READY;
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <HAL_ADC_ConvCpltCallback+0x28>)
 80010ee:	2220      	movs	r2, #32
 80010f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	HAL_UART_Transmit_DMA(&huart2, rec_buffer+512, 512);
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_ADC_ConvCpltCallback+0x2c>)
 80010f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010fa:	4619      	mov	r1, r3
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <HAL_ADC_ConvCpltCallback+0x28>)
 80010fe:	f003 f971 	bl	80043e4 <HAL_UART_Transmit_DMA>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000df4 	.word	0x20000df4
 8001110:	20000280 	.word	0x20000280

08001114 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	huart2.gState = HAL_UART_STATE_READY;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 800111e:	2220      	movs	r2, #32
 8001120:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	HAL_UART_Transmit_DMA(&huart2, rec_buffer, 512);
 8001124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001128:	4904      	ldr	r1, [pc, #16]	; (800113c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 800112a:	4803      	ldr	r0, [pc, #12]	; (8001138 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 800112c:	f003 f95a 	bl	80043e4 <HAL_UART_Transmit_DMA>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000df4 	.word	0x20000df4
 800113c:	20000080 	.word	0x20000080

08001140 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af02      	add	r7, sp, #8
 8001146:	6078      	str	r0, [r7, #4]
	HAL_DAC_Start_DMA(hdac, DAC_CHANNEL_1, (uint32_t*)dac_buffer, 1024, DAC_ALIGN_12B_R);
 8001148:	2300      	movs	r3, #0
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001150:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_DAC_ConvCpltCallbackCh1+0x34>)
 8001152:	2100      	movs	r1, #0
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f001 f8f9 	bl	800234c <HAL_DAC_Start_DMA>
	wave_fillbuffer(dac_buffer+512, wave, 512);
 800115a:	4807      	ldr	r0, [pc, #28]	; (8001178 <HAL_DAC_ConvCpltCallbackCh1+0x38>)
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <HAL_DAC_ConvCpltCallbackCh1+0x3c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001166:	4619      	mov	r1, r3
 8001168:	f000 f864 	bl	8001234 <wave_fillbuffer>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2000056c 	.word	0x2000056c
 8001178:	2000096c 	.word	0x2000096c
 800117c:	20000480 	.word	0x20000480

08001180 <HAL_DAC_ConvHalfCpltCallbackCh1>:

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	wave_fillbuffer(dac_buffer, wave, 512);
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_DAC_ConvHalfCpltCallbackCh1+0x24>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001192:	4619      	mov	r1, r3
 8001194:	4804      	ldr	r0, [pc, #16]	; (80011a8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x28>)
 8001196:	f000 f84d 	bl	8001234 <wave_fillbuffer>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000480 	.word	0x20000480
 80011a8:	2000056c 	.word	0x2000056c

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <wave_init>:
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	e01e      	b.n	8001206 <wave_init+0x4a>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001220 <wave_init+0x64>
 80011d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011da:	eeb0 0a67 	vmov.f32	s0, s15
 80011de:	f003 fe33 	bl	8004e48 <sinf>
 80011e2:	eeb0 7a40 	vmov.f32	s14, s0
 80011e6:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001224 <wave_init+0x68>
 80011ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f2:	ee17 3a90 	vmov	r3, s15
 80011f6:	b219      	sxth	r1, r3
 80011f8:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <wave_init+0x6c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3301      	adds	r3, #1
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2bff      	cmp	r3, #255	; 0xff
 800120a:	dddd      	ble.n	80011c8 <wave_init+0xc>
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <wave_init+0x70>)
 800120e:	2200      	movs	r2, #0
 8001210:	801a      	strh	r2, [r3, #0]
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <wave_init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	801a      	strh	r2, [r3, #0]
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	3cc90fdb 	.word	0x3cc90fdb
 8001224:	44610000 	.word	0x44610000
 8001228:	20000e9c 	.word	0x20000e9c
 800122c:	20000e9a 	.word	0x20000e9a
 8001230:	20000e98 	.word	0x20000e98

08001234 <wave_fillbuffer>:
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
 8001240:	4613      	mov	r3, r2
 8001242:	803b      	strh	r3, [r7, #0]
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	e05e      	b.n	8001308 <wave_fillbuffer+0xd4>
 800124a:	2300      	movs	r3, #0
 800124c:	817b      	strh	r3, [r7, #10]
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d014      	beq.n	800127e <wave_fillbuffer+0x4a>
 8001254:	2b03      	cmp	r3, #3
 8001256:	d023      	beq.n	80012a0 <wave_fillbuffer+0x6c>
 8001258:	2b01      	cmp	r3, #1
 800125a:	d149      	bne.n	80012f0 <wave_fillbuffer+0xbc>
 800125c:	4b2f      	ldr	r3, [pc, #188]	; (800131c <wave_fillbuffer+0xe8>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	b29b      	uxth	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <wave_fillbuffer+0xec>)
 8001268:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800126c:	817b      	strh	r3, [r7, #10]
 800126e:	4b2b      	ldr	r3, [pc, #172]	; (800131c <wave_fillbuffer+0xe8>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	f203 238e 	addw	r3, r3, #654	; 0x28e
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b28      	ldr	r3, [pc, #160]	; (800131c <wave_fillbuffer+0xe8>)
 800127a:	801a      	strh	r2, [r3, #0]
 800127c:	e038      	b.n	80012f0 <wave_fillbuffer+0xbc>
 800127e:	4b29      	ldr	r3, [pc, #164]	; (8001324 <wave_fillbuffer+0xf0>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	0a1b      	lsrs	r3, r3, #8
 8001284:	b29b      	uxth	r3, r3
 8001286:	461a      	mov	r2, r3
 8001288:	4b25      	ldr	r3, [pc, #148]	; (8001320 <wave_fillbuffer+0xec>)
 800128a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800128e:	817b      	strh	r3, [r7, #10]
 8001290:	4b24      	ldr	r3, [pc, #144]	; (8001324 <wave_fillbuffer+0xf0>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	f203 3309 	addw	r3, r3, #777	; 0x309
 8001298:	b29a      	uxth	r2, r3
 800129a:	4b22      	ldr	r3, [pc, #136]	; (8001324 <wave_fillbuffer+0xf0>)
 800129c:	801a      	strh	r2, [r3, #0]
 800129e:	e027      	b.n	80012f0 <wave_fillbuffer+0xbc>
 80012a0:	4b1e      	ldr	r3, [pc, #120]	; (800131c <wave_fillbuffer+0xe8>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <wave_fillbuffer+0xec>)
 80012ac:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80012b0:	105b      	asrs	r3, r3, #1
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <wave_fillbuffer+0xf0>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	0a1b      	lsrs	r3, r3, #8
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4619      	mov	r1, r3
 80012c0:	4b17      	ldr	r3, [pc, #92]	; (8001320 <wave_fillbuffer+0xec>)
 80012c2:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80012c6:	105b      	asrs	r3, r3, #1
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	4413      	add	r3, r2
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	817b      	strh	r3, [r7, #10]
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <wave_fillbuffer+0xe8>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	f203 238e 	addw	r3, r3, #654	; 0x28e
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <wave_fillbuffer+0xe8>)
 80012de:	801a      	strh	r2, [r3, #0]
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <wave_fillbuffer+0xf0>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	f203 3309 	addw	r3, r3, #777	; 0x309
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <wave_fillbuffer+0xf0>)
 80012ec:	801a      	strh	r2, [r3, #0]
 80012ee:	bf00      	nop
 80012f0:	897a      	ldrh	r2, [r7, #10]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	440b      	add	r3, r1
 80012fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012fe:	b292      	uxth	r2, r2
 8001300:	801a      	strh	r2, [r3, #0]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3301      	adds	r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	883b      	ldrh	r3, [r7, #0]
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	db9c      	blt.n	800124a <wave_fillbuffer+0x16>
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	20000e9a 	.word	0x20000e9a
 8001320:	20000e9c 	.word	0x20000e9c
 8001324:	20000e98 	.word	0x20000e98

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_MspInit+0x4c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <HAL_MspInit+0x4c>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133c:	6453      	str	r3, [r2, #68]	; 0x44
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_MspInit+0x4c>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_MspInit+0x4c>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <HAL_MspInit+0x4c>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_MspInit+0x4c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001366:	2007      	movs	r0, #7
 8001368:	f000 ff8c 	bl	8002284 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40023800 	.word	0x40023800

08001378 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a2e      	ldr	r2, [pc, #184]	; (8001450 <HAL_ADC_MspInit+0xd8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d156      	bne.n	8001448 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <HAL_ADC_MspInit+0xdc>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a2c      	ldr	r2, [pc, #176]	; (8001454 <HAL_ADC_MspInit+0xdc>)
 80013a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <HAL_ADC_MspInit+0xdc>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <HAL_ADC_MspInit+0xdc>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a25      	ldr	r2, [pc, #148]	; (8001454 <HAL_ADC_MspInit+0xdc>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b23      	ldr	r3, [pc, #140]	; (8001454 <HAL_ADC_MspInit+0xdc>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration    
    PC4     ------> ADC2_IN14 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013d2:	2310      	movs	r3, #16
 80013d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d6:	2303      	movs	r3, #3
 80013d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	481c      	ldr	r0, [pc, #112]	; (8001458 <HAL_ADC_MspInit+0xe0>)
 80013e6:	f001 fd5f 	bl	8002ea8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <HAL_ADC_MspInit+0xe4>)
 80013ec:	4a1c      	ldr	r2, [pc, #112]	; (8001460 <HAL_ADC_MspInit+0xe8>)
 80013ee:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <HAL_ADC_MspInit+0xe4>)
 80013f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013f6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_ADC_MspInit+0xe4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_ADC_MspInit+0xe4>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_ADC_MspInit+0xe4>)
 8001406:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800140a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_ADC_MspInit+0xe4>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_ADC_MspInit+0xe4>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_ADC_MspInit+0xe4>)
 800141a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800141e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_ADC_MspInit+0xe4>)
 8001422:	2200      	movs	r2, #0
 8001424:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <HAL_ADC_MspInit+0xe4>)
 8001428:	2200      	movs	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800142c:	480b      	ldr	r0, [pc, #44]	; (800145c <HAL_ADC_MspInit+0xe4>)
 800142e:	f001 f95d 	bl	80026ec <HAL_DMA_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001438:	f7ff feb8 	bl	80011ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a07      	ldr	r2, [pc, #28]	; (800145c <HAL_ADC_MspInit+0xe4>)
 8001440:	639a      	str	r2, [r3, #56]	; 0x38
 8001442:	4a06      	ldr	r2, [pc, #24]	; (800145c <HAL_ADC_MspInit+0xe4>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40012100 	.word	0x40012100
 8001454:	40023800 	.word	0x40023800
 8001458:	40020800 	.word	0x40020800
 800145c:	20000e34 	.word	0x20000e34
 8001460:	40026440 	.word	0x40026440

08001464 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a2f      	ldr	r2, [pc, #188]	; (8001540 <HAL_DAC_MspInit+0xdc>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d157      	bne.n	8001536 <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <HAL_DAC_MspInit+0xe0>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	4a2d      	ldr	r2, [pc, #180]	; (8001544 <HAL_DAC_MspInit+0xe0>)
 8001490:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
 8001496:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <HAL_DAC_MspInit+0xe0>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b27      	ldr	r3, [pc, #156]	; (8001544 <HAL_DAC_MspInit+0xe0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a26      	ldr	r2, [pc, #152]	; (8001544 <HAL_DAC_MspInit+0xe0>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b24      	ldr	r3, [pc, #144]	; (8001544 <HAL_DAC_MspInit+0xe0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014be:	2310      	movs	r3, #16
 80014c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c2:	2303      	movs	r3, #3
 80014c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	481d      	ldr	r0, [pc, #116]	; (8001548 <HAL_DAC_MspInit+0xe4>)
 80014d2:	f001 fce9 	bl	8002ea8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_DAC_MspInit+0xe8>)
 80014d8:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <HAL_DAC_MspInit+0xec>)
 80014da:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_DAC_MspInit+0xe8>)
 80014de:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80014e2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_DAC_MspInit+0xe8>)
 80014e6:	2240      	movs	r2, #64	; 0x40
 80014e8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_DAC_MspInit+0xe8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <HAL_DAC_MspInit+0xe8>)
 80014f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <HAL_DAC_MspInit+0xe8>)
 80014fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014fe:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_DAC_MspInit+0xe8>)
 8001502:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001506:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_DAC_MspInit+0xe8>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_DAC_MspInit+0xe8>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_DAC_MspInit+0xe8>)
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800151a:	480c      	ldr	r0, [pc, #48]	; (800154c <HAL_DAC_MspInit+0xe8>)
 800151c:	f001 f8e6 	bl	80026ec <HAL_DMA_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_DAC_MspInit+0xc6>
    {
      Error_Handler();
 8001526:	f7ff fe41 	bl	80011ac <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a07      	ldr	r2, [pc, #28]	; (800154c <HAL_DAC_MspInit+0xe8>)
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	4a06      	ldr	r2, [pc, #24]	; (800154c <HAL_DAC_MspInit+0xe8>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	; 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40007400 	.word	0x40007400
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000
 800154c:	2000048c 	.word	0x2000048c
 8001550:	40026088 	.word	0x40026088

08001554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001564:	d10e      	bne.n	8001584 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <HAL_TIM_Base_MspInit+0x64>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <HAL_TIM_Base_MspInit+0x64>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <HAL_TIM_Base_MspInit+0x64>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001582:	e012      	b.n	80015aa <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <HAL_TIM_Base_MspInit+0x68>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d10d      	bne.n	80015aa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_TIM_Base_MspInit+0x64>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <HAL_TIM_Base_MspInit+0x64>)
 8001598:	f043 0310 	orr.w	r3, r3, #16
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_TIM_Base_MspInit+0x64>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40001000 	.word	0x40001000

080015c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <HAL_UART_MspInit+0xe0>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d159      	bne.n	8001696 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <HAL_UART_MspInit+0xe4>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a2e      	ldr	r2, [pc, #184]	; (80016a4 <HAL_UART_MspInit+0xe4>)
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <HAL_UART_MspInit+0xe4>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <HAL_UART_MspInit+0xe4>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a27      	ldr	r2, [pc, #156]	; (80016a4 <HAL_UART_MspInit+0xe4>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <HAL_UART_MspInit+0xe4>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800161a:	230c      	movs	r3, #12
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001626:	2303      	movs	r3, #3
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800162a:	2307      	movs	r3, #7
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	481c      	ldr	r0, [pc, #112]	; (80016a8 <HAL_UART_MspInit+0xe8>)
 8001636:	f001 fc37 	bl	8002ea8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_UART_MspInit+0xec>)
 800163c:	4a1c      	ldr	r2, [pc, #112]	; (80016b0 <HAL_UART_MspInit+0xf0>)
 800163e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <HAL_UART_MspInit+0xec>)
 8001642:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001646:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <HAL_UART_MspInit+0xec>)
 800164a:	2240      	movs	r2, #64	; 0x40
 800164c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <HAL_UART_MspInit+0xec>)
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_UART_MspInit+0xec>)
 8001656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800165a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <HAL_UART_MspInit+0xec>)
 800165e:	2200      	movs	r2, #0
 8001660:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_UART_MspInit+0xec>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_UART_MspInit+0xec>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <HAL_UART_MspInit+0xec>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_UART_MspInit+0xec>)
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800167a:	480c      	ldr	r0, [pc, #48]	; (80016ac <HAL_UART_MspInit+0xec>)
 800167c:	f001 f836 	bl	80026ec <HAL_DMA_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001686:	f7ff fd91 	bl	80011ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_UART_MspInit+0xec>)
 800168e:	631a      	str	r2, [r3, #48]	; 0x30
 8001690:	4a06      	ldr	r2, [pc, #24]	; (80016ac <HAL_UART_MspInit+0xec>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	; 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40004400 	.word	0x40004400
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	200004f8 	.word	0x200004f8
 80016b0:	400260a0 	.word	0x400260a0

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <MemManage_Handler+0x4>

080016ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <BusFault_Handler+0x4>

080016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <UsageFault_Handler+0x4>

080016da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001708:	f000 f8dc 	bl	80018c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}

08001710 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <DMA1_Stream5_IRQHandler+0x10>)
 8001716:	f001 f95f 	bl	80029d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000048c 	.word	0x2000048c

08001724 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <DMA1_Stream6_IRQHandler+0x10>)
 800172a:	f001 f955 	bl	80029d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200004f8 	.word	0x200004f8

08001738 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	exti = on;
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <EXTI9_5_IRQHandler+0x2c>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001742:	2040      	movs	r0, #64	; 0x40
 8001744:	f001 fd74 	bl	8003230 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001748:	2080      	movs	r0, #128	; 0x80
 800174a:	f001 fd71 	bl	8003230 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800174e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001752:	f001 fd6d 	bl	8003230 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001756:	f44f 7000 	mov.w	r0, #512	; 0x200
 800175a:	f001 fd69 	bl	8003230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200004ec 	.word	0x200004ec

08001768 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	exti = on;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <EXTI15_10_IRQHandler+0x20>)
 800176e:	2201      	movs	r2, #1
 8001770:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001772:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001776:	f001 fd5b 	bl	8003230 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800177a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800177e:	f001 fd57 	bl	8003230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200004ec 	.word	0x200004ec

0800178c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <DMA2_Stream2_IRQHandler+0x10>)
 8001792:	f001 f921 	bl	80029d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000e34 	.word	0x20000e34

080017a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <SystemInit+0x28>)
 80017a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017aa:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <SystemInit+0x28>)
 80017ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <SystemInit+0x28>)
 80017b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ba:	609a      	str	r2, [r3, #8]
#endif
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <Reset_Handler>:
 80017cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001804 <LoopFillZerobss+0x14>
 80017d0:	2100      	movs	r1, #0
 80017d2:	e003      	b.n	80017dc <LoopCopyDataInit>

080017d4 <CopyDataInit>:
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <LoopFillZerobss+0x18>)
 80017d6:	585b      	ldr	r3, [r3, r1]
 80017d8:	5043      	str	r3, [r0, r1]
 80017da:	3104      	adds	r1, #4

080017dc <LoopCopyDataInit>:
 80017dc:	480b      	ldr	r0, [pc, #44]	; (800180c <LoopFillZerobss+0x1c>)
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <LoopFillZerobss+0x20>)
 80017e0:	1842      	adds	r2, r0, r1
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d3f6      	bcc.n	80017d4 <CopyDataInit>
 80017e6:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <LoopFillZerobss+0x24>)
 80017e8:	e002      	b.n	80017f0 <LoopFillZerobss>

080017ea <FillZerobss>:
 80017ea:	2300      	movs	r3, #0
 80017ec:	f842 3b04 	str.w	r3, [r2], #4

080017f0 <LoopFillZerobss>:
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <LoopFillZerobss+0x28>)
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d3f9      	bcc.n	80017ea <FillZerobss>
 80017f6:	f7ff ffd3 	bl	80017a0 <SystemInit>
 80017fa:	f003 faf9 	bl	8004df0 <__libc_init_array>
 80017fe:	f7fe fe81 	bl	8000504 <main>
 8001802:	4770      	bx	lr
 8001804:	20020000 	.word	0x20020000
 8001808:	08005d58 	.word	0x08005d58
 800180c:	20000000 	.word	0x20000000
 8001810:	2000000c 	.word	0x2000000c
 8001814:	2000000c 	.word	0x2000000c
 8001818:	200010a0 	.word	0x200010a0

0800181c <ADC_IRQHandler>:
 800181c:	e7fe      	b.n	800181c <ADC_IRQHandler>
	...

08001820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001824:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <HAL_Init+0x40>)
 800182a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <HAL_Init+0x40>)
 8001836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800183a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a07      	ldr	r2, [pc, #28]	; (8001860 <HAL_Init+0x40>)
 8001842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001846:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001848:	2003      	movs	r0, #3
 800184a:	f000 fd1b 	bl	8002284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184e:	2000      	movs	r0, #0
 8001850:	f000 f808 	bl	8001864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001854:	f7ff fd68 	bl	8001328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023c00 	.word	0x40023c00

08001864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x54>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_InitTick+0x58>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	4619      	mov	r1, r3
 8001876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187a:	fbb3 f3f1 	udiv	r3, r3, r1
 800187e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f000 fd33 	bl	80022ee <HAL_SYSTICK_Config>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e00e      	b.n	80018b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b0f      	cmp	r3, #15
 8001896:	d80a      	bhi.n	80018ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001898:	2200      	movs	r2, #0
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	f04f 30ff 	mov.w	r0, #4294967295
 80018a0:	f000 fcfb 	bl	800229a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a4:	4a06      	ldr	r2, [pc, #24]	; (80018c0 <HAL_InitTick+0x5c>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e000      	b.n	80018b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000008 	.word	0x20000008
 80018c0:	20000004 	.word	0x20000004

080018c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x20>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x24>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <HAL_IncTick+0x24>)
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000008 	.word	0x20000008
 80018e8:	2000109c 	.word	0x2000109c

080018ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <HAL_GetTick+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	2000109c 	.word	0x2000109c

08001904 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e033      	b.n	8001982 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	2b00      	cmp	r3, #0
 8001920:	d109      	bne.n	8001936 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fd28 	bl	8001378 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f003 0310 	and.w	r3, r3, #16
 800193e:	2b00      	cmp	r3, #0
 8001940:	d118      	bne.n	8001974 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800194a:	f023 0302 	bic.w	r3, r3, #2
 800194e:	f043 0202 	orr.w	r2, r3, #2
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 fa46 	bl	8001de8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f023 0303 	bic.w	r3, r3, #3
 800196a:	f043 0201 	orr.w	r2, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	641a      	str	r2, [r3, #64]	; 0x40
 8001972:	e001      	b.n	8001978 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001980:	7bfb      	ldrb	r3, [r7, #15]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d101      	bne.n	80019aa <HAL_ADC_Start_DMA+0x1e>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e0cc      	b.n	8001b44 <HAL_ADC_Start_DMA+0x1b8>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d018      	beq.n	80019f2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0201 	orr.w	r2, r2, #1
 80019ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019d0:	4b5e      	ldr	r3, [pc, #376]	; (8001b4c <HAL_ADC_Start_DMA+0x1c0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a5e      	ldr	r2, [pc, #376]	; (8001b50 <HAL_ADC_Start_DMA+0x1c4>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	0c9a      	lsrs	r2, r3, #18
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80019e4:	e002      	b.n	80019ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f9      	bne.n	80019e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	f040 80a0 	bne.w	8001b42 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a0a:	f023 0301 	bic.w	r3, r3, #1
 8001a0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d007      	beq.n	8001a34 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a40:	d106      	bne.n	8001a50 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f023 0206 	bic.w	r2, r3, #6
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	645a      	str	r2, [r3, #68]	; 0x44
 8001a4e:	e002      	b.n	8001a56 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a5e:	4b3d      	ldr	r3, [pc, #244]	; (8001b54 <HAL_ADC_Start_DMA+0x1c8>)
 8001a60:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a66:	4a3c      	ldr	r2, [pc, #240]	; (8001b58 <HAL_ADC_Start_DMA+0x1cc>)
 8001a68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6e:	4a3b      	ldr	r2, [pc, #236]	; (8001b5c <HAL_ADC_Start_DMA+0x1d0>)
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a76:	4a3a      	ldr	r2, [pc, #232]	; (8001b60 <HAL_ADC_Start_DMA+0x1d4>)
 8001a78:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a82:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a92:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aa2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	334c      	adds	r3, #76	; 0x4c
 8001aae:	4619      	mov	r1, r3
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f000 fec8 	bl	8002848 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 031f 	and.w	r3, r3, #31
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d12a      	bne.n	8001b1a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a26      	ldr	r2, [pc, #152]	; (8001b64 <HAL_ADC_Start_DMA+0x1d8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d015      	beq.n	8001afa <HAL_ADC_Start_DMA+0x16e>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a25      	ldr	r2, [pc, #148]	; (8001b68 <HAL_ADC_Start_DMA+0x1dc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d105      	bne.n	8001ae4 <HAL_ADC_Start_DMA+0x158>
 8001ad8:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <HAL_ADC_Start_DMA+0x1c8>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00a      	beq.n	8001afa <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a20      	ldr	r2, [pc, #128]	; (8001b6c <HAL_ADC_Start_DMA+0x1e0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d129      	bne.n	8001b42 <HAL_ADC_Start_DMA+0x1b6>
 8001aee:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <HAL_ADC_Start_DMA+0x1c8>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 031f 	and.w	r3, r3, #31
 8001af6:	2b0f      	cmp	r3, #15
 8001af8:	d823      	bhi.n	8001b42 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d11c      	bne.n	8001b42 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	e013      	b.n	8001b42 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <HAL_ADC_Start_DMA+0x1d8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d10e      	bne.n	8001b42 <HAL_ADC_Start_DMA+0x1b6>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d107      	bne.n	8001b42 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b40:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	431bde83 	.word	0x431bde83
 8001b54:	40012300 	.word	0x40012300
 8001b58:	08001fe1 	.word	0x08001fe1
 8001b5c:	0800209b 	.word	0x0800209b
 8001b60:	080020b7 	.word	0x080020b7
 8001b64:	40012000 	.word	0x40012000
 8001b68:	40012100 	.word	0x40012100
 8001b6c:	40012200 	.word	0x40012200

08001b70 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x1c>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e113      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x244>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b09      	cmp	r3, #9
 8001bae:	d925      	bls.n	8001bfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68d9      	ldr	r1, [r3, #12]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3b1e      	subs	r3, #30
 8001bc6:	2207      	movs	r2, #7
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43da      	mvns	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	400a      	ands	r2, r1
 8001bd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68d9      	ldr	r1, [r3, #12]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	4603      	mov	r3, r0
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4403      	add	r3, r0
 8001bee:	3b1e      	subs	r3, #30
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	e022      	b.n	8001c42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6919      	ldr	r1, [r3, #16]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	2207      	movs	r2, #7
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	400a      	ands	r2, r1
 8001c1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6919      	ldr	r1, [r3, #16]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	4618      	mov	r0, r3
 8001c32:	4603      	mov	r3, r0
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4403      	add	r3, r0
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d824      	bhi.n	8001c94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	3b05      	subs	r3, #5
 8001c5c:	221f      	movs	r2, #31
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	400a      	ands	r2, r1
 8001c6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	3b05      	subs	r3, #5
 8001c86:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	635a      	str	r2, [r3, #52]	; 0x34
 8001c92:	e04c      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b0c      	cmp	r3, #12
 8001c9a:	d824      	bhi.n	8001ce6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	3b23      	subs	r3, #35	; 0x23
 8001cae:	221f      	movs	r2, #31
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43da      	mvns	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	400a      	ands	r2, r1
 8001cbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3b23      	subs	r3, #35	; 0x23
 8001cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ce4:	e023      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3b41      	subs	r3, #65	; 0x41
 8001cf8:	221f      	movs	r2, #31
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	400a      	ands	r2, r1
 8001d06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	4618      	mov	r0, r3
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	3b41      	subs	r3, #65	; 0x41
 8001d22:	fa00 f203 	lsl.w	r2, r0, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d2e:	4b29      	ldr	r3, [pc, #164]	; (8001dd4 <HAL_ADC_ConfigChannel+0x250>)
 8001d30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a28      	ldr	r2, [pc, #160]	; (8001dd8 <HAL_ADC_ConfigChannel+0x254>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d10f      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x1d8>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b12      	cmp	r3, #18
 8001d42:	d10b      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1d      	ldr	r2, [pc, #116]	; (8001dd8 <HAL_ADC_ConfigChannel+0x254>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d12b      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x23a>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <HAL_ADC_ConfigChannel+0x258>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d003      	beq.n	8001d78 <HAL_ADC_ConfigChannel+0x1f4>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b11      	cmp	r3, #17
 8001d76:	d122      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a11      	ldr	r2, [pc, #68]	; (8001ddc <HAL_ADC_ConfigChannel+0x258>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d111      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_ADC_ConfigChannel+0x25c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a11      	ldr	r2, [pc, #68]	; (8001de4 <HAL_ADC_ConfigChannel+0x260>)
 8001da0:	fba2 2303 	umull	r2, r3, r2, r3
 8001da4:	0c9a      	lsrs	r2, r3, #18
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001db0:	e002      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	3b01      	subs	r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f9      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	40012300 	.word	0x40012300
 8001dd8:	40012000 	.word	0x40012000
 8001ddc:	10000012 	.word	0x10000012
 8001de0:	20000000 	.word	0x20000000
 8001de4:	431bde83 	.word	0x431bde83

08001de8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001df0:	4b79      	ldr	r3, [pc, #484]	; (8001fd8 <ADC_Init+0x1f0>)
 8001df2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6859      	ldr	r1, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	021a      	lsls	r2, r3, #8
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6859      	ldr	r1, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6899      	ldr	r1, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	4a58      	ldr	r2, [pc, #352]	; (8001fdc <ADC_Init+0x1f4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d022      	beq.n	8001ec6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6899      	ldr	r1, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6899      	ldr	r1, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	e00f      	b.n	8001ee6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ed4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ee4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0202 	bic.w	r2, r2, #2
 8001ef4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6899      	ldr	r1, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	7e1b      	ldrb	r3, [r3, #24]
 8001f00:	005a      	lsls	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d01b      	beq.n	8001f4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6859      	ldr	r1, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	035a      	lsls	r2, r3, #13
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	e007      	b.n	8001f5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	051a      	lsls	r2, r3, #20
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6899      	ldr	r1, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f9e:	025a      	lsls	r2, r3, #9
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6899      	ldr	r1, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	029a      	lsls	r2, r3, #10
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	609a      	str	r2, [r3, #8]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	40012300 	.word	0x40012300
 8001fdc:	0f000001 	.word	0x0f000001

08001fe0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d13c      	bne.n	8002074 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d12b      	bne.n	800206c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002018:	2b00      	cmp	r3, #0
 800201a:	d127      	bne.n	800206c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002026:	2b00      	cmp	r3, #0
 8002028:	d006      	beq.n	8002038 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002034:	2b00      	cmp	r3, #0
 8002036:	d119      	bne.n	800206c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0220 	bic.w	r2, r2, #32
 8002046:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f043 0201 	orr.w	r2, r3, #1
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f7ff f839 	bl	80010e4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002072:	e00e      	b.n	8002092 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f7ff fd75 	bl	8001b70 <HAL_ADC_ErrorCallback>
}
 8002086:	e004      	b.n	8002092 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	4798      	blx	r3
}
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f7ff f833 	bl	8001114 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2240      	movs	r2, #64	; 0x40
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f043 0204 	orr.w	r2, r3, #4
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f7ff fd4a 	bl	8001b70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002100:	4013      	ands	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800210c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002116:	4a04      	ldr	r2, [pc, #16]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	60d3      	str	r3, [r2, #12]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <__NVIC_GetPriorityGrouping+0x18>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f003 0307 	and.w	r3, r3, #7
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	2b00      	cmp	r3, #0
 8002158:	db0b      	blt.n	8002172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	f003 021f 	and.w	r2, r3, #31
 8002160:	4907      	ldr	r1, [pc, #28]	; (8002180 <__NVIC_EnableIRQ+0x38>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	2001      	movs	r0, #1
 800216a:	fa00 f202 	lsl.w	r2, r0, r2
 800216e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000e100 	.word	0xe000e100

08002184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	6039      	str	r1, [r7, #0]
 800218e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	2b00      	cmp	r3, #0
 8002196:	db0a      	blt.n	80021ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	b2da      	uxtb	r2, r3
 800219c:	490c      	ldr	r1, [pc, #48]	; (80021d0 <__NVIC_SetPriority+0x4c>)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	0112      	lsls	r2, r2, #4
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	440b      	add	r3, r1
 80021a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ac:	e00a      	b.n	80021c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	4908      	ldr	r1, [pc, #32]	; (80021d4 <__NVIC_SetPriority+0x50>)
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	3b04      	subs	r3, #4
 80021bc:	0112      	lsls	r2, r2, #4
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	440b      	add	r3, r1
 80021c2:	761a      	strb	r2, [r3, #24]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000e100 	.word	0xe000e100
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d8:	b480      	push	{r7}
 80021da:	b089      	sub	sp, #36	; 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f1c3 0307 	rsb	r3, r3, #7
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	bf28      	it	cs
 80021f6:	2304      	movcs	r3, #4
 80021f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3304      	adds	r3, #4
 80021fe:	2b06      	cmp	r3, #6
 8002200:	d902      	bls.n	8002208 <NVIC_EncodePriority+0x30>
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3b03      	subs	r3, #3
 8002206:	e000      	b.n	800220a <NVIC_EncodePriority+0x32>
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	f04f 32ff 	mov.w	r2, #4294967295
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43da      	mvns	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	401a      	ands	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002220:	f04f 31ff 	mov.w	r1, #4294967295
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fa01 f303 	lsl.w	r3, r1, r3
 800222a:	43d9      	mvns	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	4313      	orrs	r3, r2
         );
}
 8002232:	4618      	mov	r0, r3
 8002234:	3724      	adds	r7, #36	; 0x24
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002250:	d301      	bcc.n	8002256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002252:	2301      	movs	r3, #1
 8002254:	e00f      	b.n	8002276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <SysTick_Config+0x40>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800225e:	210f      	movs	r1, #15
 8002260:	f04f 30ff 	mov.w	r0, #4294967295
 8002264:	f7ff ff8e 	bl	8002184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <SysTick_Config+0x40>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226e:	4b04      	ldr	r3, [pc, #16]	; (8002280 <SysTick_Config+0x40>)
 8002270:	2207      	movs	r2, #7
 8002272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	e000e010 	.word	0xe000e010

08002284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff29 	bl	80020e4 <__NVIC_SetPriorityGrouping>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ac:	f7ff ff3e 	bl	800212c <__NVIC_GetPriorityGrouping>
 80022b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	6978      	ldr	r0, [r7, #20]
 80022b8:	f7ff ff8e 	bl	80021d8 <NVIC_EncodePriority>
 80022bc:	4602      	mov	r2, r0
 80022be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff5d 	bl	8002184 <__NVIC_SetPriority>
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff31 	bl	8002148 <__NVIC_EnableIRQ>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ffa2 	bl	8002240 <SysTick_Config>
 80022fc:	4603      	mov	r3, r0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e014      	b.n	8002342 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	791b      	ldrb	r3, [r3, #4]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d105      	bne.n	800232e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff f89b 	bl	8001464 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2202      	movs	r2, #2
 8002332:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	795b      	ldrb	r3, [r3, #5]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_DAC_Start_DMA+0x1e>
 8002366:	2302      	movs	r3, #2
 8002368:	e08e      	b.n	8002488 <HAL_DAC_Start_DMA+0x13c>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2201      	movs	r2, #1
 800236e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2202      	movs	r2, #2
 8002374:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d12a      	bne.n	80023d2 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4a43      	ldr	r2, [pc, #268]	; (8002490 <HAL_DAC_Start_DMA+0x144>)
 8002382:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a42      	ldr	r2, [pc, #264]	; (8002494 <HAL_DAC_Start_DMA+0x148>)
 800238a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4a41      	ldr	r2, [pc, #260]	; (8002498 <HAL_DAC_Start_DMA+0x14c>)
 8002392:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023a2:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d009      	beq.n	80023be <HAL_DAC_Start_DMA+0x72>
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d00c      	beq.n	80023c8 <HAL_DAC_Start_DMA+0x7c>
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d000      	beq.n	80023b4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80023b2:	e039      	b.n	8002428 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	3308      	adds	r3, #8
 80023ba:	617b      	str	r3, [r7, #20]
        break;
 80023bc:	e034      	b.n	8002428 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	330c      	adds	r3, #12
 80023c4:	617b      	str	r3, [r7, #20]
        break;
 80023c6:	e02f      	b.n	8002428 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	3310      	adds	r3, #16
 80023ce:	617b      	str	r3, [r7, #20]
        break;
 80023d0:	e02a      	b.n	8002428 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4a31      	ldr	r2, [pc, #196]	; (800249c <HAL_DAC_Start_DMA+0x150>)
 80023d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	4a30      	ldr	r2, [pc, #192]	; (80024a0 <HAL_DAC_Start_DMA+0x154>)
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	4a2f      	ldr	r2, [pc, #188]	; (80024a4 <HAL_DAC_Start_DMA+0x158>)
 80023e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023f8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d009      	beq.n	8002414 <HAL_DAC_Start_DMA+0xc8>
 8002400:	2b08      	cmp	r3, #8
 8002402:	d00c      	beq.n	800241e <HAL_DAC_Start_DMA+0xd2>
 8002404:	2b00      	cmp	r3, #0
 8002406:	d000      	beq.n	800240a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002408:	e00e      	b.n	8002428 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	3314      	adds	r3, #20
 8002410:	617b      	str	r3, [r7, #20]
        break;
 8002412:	e009      	b.n	8002428 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	3318      	adds	r3, #24
 800241a:	617b      	str	r3, [r7, #20]
        break;
 800241c:	e004      	b.n	8002428 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	331c      	adds	r3, #28
 8002424:	617b      	str	r3, [r7, #20]
        break;
 8002426:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10f      	bne.n	800244e <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800243c:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6898      	ldr	r0, [r3, #8]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	f000 f9fe 	bl	8002848 <HAL_DMA_Start_IT>
 800244c:	e00e      	b.n	800246c <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800245c:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	68d8      	ldr	r0, [r3, #12]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	f000 f9ee 	bl	8002848 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6819      	ldr	r1, [r3, #0]
 8002472:	2201      	movs	r2, #1
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	409a      	lsls	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	080025d9 	.word	0x080025d9
 8002494:	080025fb 	.word	0x080025fb
 8002498:	08002617 	.word	0x08002617
 800249c:	08002681 	.word	0x08002681
 80024a0:	080026a3 	.word	0x080026a3
 80024a4:	080026bf 	.word	0x080026bf

080024a8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6819      	ldr	r1, [r3, #0]
 80024bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43da      	mvns	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	400a      	ands	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6819      	ldr	r1, [r3, #0]
 80024d6:	2201      	movs	r2, #1
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	400a      	ands	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d107      	bne.n	80024fe <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fa00 	bl	80028f8 <HAL_DMA_Abort>
 80024f8:	4603      	mov	r3, r0
 80024fa:	73fb      	strb	r3, [r7, #15]
 80024fc:	e006      	b.n	800250c <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	4618      	mov	r0, r3
 8002504:	f000 f9f8 	bl	80028f8 <HAL_DMA_Abort>
 8002508:	4603      	mov	r3, r0
 800250a:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2204      	movs	r2, #4
 8002516:	711a      	strb	r2, [r3, #4]
 8002518:	e002      	b.n	8002520 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8002520:	7bfb      	ldrb	r3, [r7, #15]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800253e:	b480      	push	{r7}
 8002540:	b087      	sub	sp, #28
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	795b      	ldrb	r3, [r3, #5]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_DAC_ConfigChannel+0x20>
 800255a:	2302      	movs	r3, #2
 800255c:	e036      	b.n	80025cc <HAL_DAC_ConfigChannel+0x8e>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2202      	movs	r2, #2
 8002568:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002572:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4013      	ands	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6819      	ldr	r1, [r3, #0]
 80025ac:	22c0      	movs	r2, #192	; 0xc0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43da      	mvns	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	400a      	ands	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	371c      	adds	r7, #28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e4:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f7fe fdaa 	bl	8001140 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	711a      	strb	r2, [r3, #4]
}
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b084      	sub	sp, #16
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f7fe fdb9 	bl	8001180 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002622:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	f043 0204 	orr.w	r2, r3, #4
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f7ff ff7a 	bl	800252a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	711a      	strb	r2, [r3, #4]
}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f7ff ffd8 	bl	8002644 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2201      	movs	r2, #1
 8002698:	711a      	strb	r2, [r3, #4]
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ae:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f7ff ffd1 	bl	8002658 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f043 0204 	orr.w	r2, r3, #4
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7ff ffc7 	bl	800266c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	711a      	strb	r2, [r3, #4]
}
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026f8:	f7ff f8f8 	bl	80018ec <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e099      	b.n	800283c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002728:	e00f      	b.n	800274a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272a:	f7ff f8df 	bl	80018ec <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b05      	cmp	r3, #5
 8002736:	d908      	bls.n	800274a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2203      	movs	r2, #3
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e078      	b.n	800283c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e8      	bne.n	800272a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4b38      	ldr	r3, [pc, #224]	; (8002844 <HAL_DMA_Init+0x158>)
 8002764:	4013      	ands	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002776:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002782:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d107      	bne.n	80027b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	4313      	orrs	r3, r2
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f023 0307 	bic.w	r3, r3, #7
 80027ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d117      	bne.n	800280e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 fadf 	bl	8002db4 <DMA_CheckFifoParam>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2240      	movs	r2, #64	; 0x40
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800280a:	2301      	movs	r3, #1
 800280c:	e016      	b.n	800283c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fa96 	bl	8002d48 <DMA_CalcBaseAndBitshift>
 800281c:	4603      	mov	r3, r0
 800281e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	223f      	movs	r2, #63	; 0x3f
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	f010803f 	.word	0xf010803f

08002848 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_DMA_Start_IT+0x26>
 800286a:	2302      	movs	r3, #2
 800286c:	e040      	b.n	80028f0 <HAL_DMA_Start_IT+0xa8>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d12f      	bne.n	80028e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2202      	movs	r2, #2
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fa28 	bl	8002cec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	223f      	movs	r2, #63	; 0x3f
 80028a2:	409a      	lsls	r2, r3
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0216 	orr.w	r2, r2, #22
 80028b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0208 	orr.w	r2, r2, #8
 80028ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e005      	b.n	80028ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
 80028ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002906:	f7fe fff1 	bl	80018ec <HAL_GetTick>
 800290a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d008      	beq.n	800292a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e052      	b.n	80029d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0216 	bic.w	r2, r2, #22
 8002938:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002948:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d103      	bne.n	800295a <HAL_DMA_Abort+0x62>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0208 	bic.w	r2, r2, #8
 8002968:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0201 	bic.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297a:	e013      	b.n	80029a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800297c:	f7fe ffb6 	bl	80018ec <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b05      	cmp	r3, #5
 8002988:	d90c      	bls.n	80029a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2220      	movs	r2, #32
 800298e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2203      	movs	r2, #3
 800299c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e015      	b.n	80029d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1e4      	bne.n	800297c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b6:	223f      	movs	r2, #63	; 0x3f
 80029b8:	409a      	lsls	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029e4:	4b92      	ldr	r3, [pc, #584]	; (8002c30 <HAL_DMA_IRQHandler+0x258>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a92      	ldr	r2, [pc, #584]	; (8002c34 <HAL_DMA_IRQHandler+0x25c>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	0a9b      	lsrs	r3, r3, #10
 80029f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a02:	2208      	movs	r2, #8
 8002a04:	409a      	lsls	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d01a      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d013      	beq.n	8002a44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0204 	bic.w	r2, r2, #4
 8002a2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a30:	2208      	movs	r2, #8
 8002a32:	409a      	lsls	r2, r3
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a48:	2201      	movs	r2, #1
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d012      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	2201      	movs	r2, #1
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	f043 0202 	orr.w	r2, r3, #2
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	2204      	movs	r2, #4
 8002a80:	409a      	lsls	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d012      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00b      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa8:	f043 0204 	orr.w	r2, r3, #4
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab4:	2210      	movs	r2, #16
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d043      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d03c      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	2210      	movs	r2, #16
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d018      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d108      	bne.n	8002b08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d024      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	4798      	blx	r3
 8002b06:	e01f      	b.n	8002b48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01b      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	4798      	blx	r3
 8002b18:	e016      	b.n	8002b48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d107      	bne.n	8002b38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0208 	bic.w	r2, r2, #8
 8002b36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 808e 	beq.w	8002c76 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 8086 	beq.w	8002c76 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6e:	2220      	movs	r2, #32
 8002b70:	409a      	lsls	r2, r3
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b05      	cmp	r3, #5
 8002b80:	d136      	bne.n	8002bf0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0216 	bic.w	r2, r2, #22
 8002b90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ba0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d103      	bne.n	8002bb2 <HAL_DMA_IRQHandler+0x1da>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0208 	bic.w	r2, r2, #8
 8002bc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc6:	223f      	movs	r2, #63	; 0x3f
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d07d      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	4798      	blx	r3
        }
        return;
 8002bee:	e078      	b.n	8002ce2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d01c      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d108      	bne.n	8002c1e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d030      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	4798      	blx	r3
 8002c1c:	e02b      	b.n	8002c76 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d027      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	4798      	blx	r3
 8002c2e:	e022      	b.n	8002c76 <HAL_DMA_IRQHandler+0x29e>
 8002c30:	20000000 	.word	0x20000000
 8002c34:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10f      	bne.n	8002c66 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0210 	bic.w	r2, r2, #16
 8002c54:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d032      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d022      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2205      	movs	r2, #5
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d307      	bcc.n	8002cbe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f2      	bne.n	8002ca2 <HAL_DMA_IRQHandler+0x2ca>
 8002cbc:	e000      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002cbe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
 8002ce0:	e000      	b.n	8002ce4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ce2:	bf00      	nop
    }
  }
}
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop

08002cec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b40      	cmp	r3, #64	; 0x40
 8002d18:	d108      	bne.n	8002d2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d2a:	e007      	b.n	8002d3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	60da      	str	r2, [r3, #12]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	3b10      	subs	r3, #16
 8002d58:	4a14      	ldr	r2, [pc, #80]	; (8002dac <DMA_CalcBaseAndBitshift+0x64>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d62:	4a13      	ldr	r2, [pc, #76]	; (8002db0 <DMA_CalcBaseAndBitshift+0x68>)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4413      	add	r3, r2
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d909      	bls.n	8002d8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d7e:	f023 0303 	bic.w	r3, r3, #3
 8002d82:	1d1a      	adds	r2, r3, #4
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	659a      	str	r2, [r3, #88]	; 0x58
 8002d88:	e007      	b.n	8002d9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d92:	f023 0303 	bic.w	r3, r3, #3
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	aaaaaaab 	.word	0xaaaaaaab
 8002db0:	08005970 	.word	0x08005970

08002db4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d11f      	bne.n	8002e0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d855      	bhi.n	8002e80 <DMA_CheckFifoParam+0xcc>
 8002dd4:	a201      	add	r2, pc, #4	; (adr r2, 8002ddc <DMA_CheckFifoParam+0x28>)
 8002dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dda:	bf00      	nop
 8002ddc:	08002ded 	.word	0x08002ded
 8002de0:	08002dff 	.word	0x08002dff
 8002de4:	08002ded 	.word	0x08002ded
 8002de8:	08002e81 	.word	0x08002e81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d045      	beq.n	8002e84 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dfc:	e042      	b.n	8002e84 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e06:	d13f      	bne.n	8002e88 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e0c:	e03c      	b.n	8002e88 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e16:	d121      	bne.n	8002e5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d836      	bhi.n	8002e8c <DMA_CheckFifoParam+0xd8>
 8002e1e:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <DMA_CheckFifoParam+0x70>)
 8002e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e24:	08002e35 	.word	0x08002e35
 8002e28:	08002e3b 	.word	0x08002e3b
 8002e2c:	08002e35 	.word	0x08002e35
 8002e30:	08002e4d 	.word	0x08002e4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      break;
 8002e38:	e02f      	b.n	8002e9a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d024      	beq.n	8002e90 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e4a:	e021      	b.n	8002e90 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e54:	d11e      	bne.n	8002e94 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e5a:	e01b      	b.n	8002e94 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d902      	bls.n	8002e68 <DMA_CheckFifoParam+0xb4>
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d003      	beq.n	8002e6e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e66:	e018      	b.n	8002e9a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e6c:	e015      	b.n	8002e9a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00e      	beq.n	8002e98 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e7e:	e00b      	b.n	8002e98 <DMA_CheckFifoParam+0xe4>
      break;
 8002e80:	bf00      	nop
 8002e82:	e00a      	b.n	8002e9a <DMA_CheckFifoParam+0xe6>
      break;
 8002e84:	bf00      	nop
 8002e86:	e008      	b.n	8002e9a <DMA_CheckFifoParam+0xe6>
      break;
 8002e88:	bf00      	nop
 8002e8a:	e006      	b.n	8002e9a <DMA_CheckFifoParam+0xe6>
      break;
 8002e8c:	bf00      	nop
 8002e8e:	e004      	b.n	8002e9a <DMA_CheckFifoParam+0xe6>
      break;
 8002e90:	bf00      	nop
 8002e92:	e002      	b.n	8002e9a <DMA_CheckFifoParam+0xe6>
      break;   
 8002e94:	bf00      	nop
 8002e96:	e000      	b.n	8002e9a <DMA_CheckFifoParam+0xe6>
      break;
 8002e98:	bf00      	nop
    }
  } 
  
  return status; 
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b089      	sub	sp, #36	; 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	e165      	b.n	8003190 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	f040 8154 	bne.w	800318a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d00b      	beq.n	8002f02 <HAL_GPIO_Init+0x5a>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d007      	beq.n	8002f02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ef6:	2b11      	cmp	r3, #17
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b12      	cmp	r3, #18
 8002f00:	d130      	bne.n	8002f64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43db      	mvns	r3, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4013      	ands	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f38:	2201      	movs	r2, #1
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	f003 0201 	and.w	r2, r3, #1
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	2203      	movs	r2, #3
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0xfc>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b12      	cmp	r3, #18
 8002fa2:	d123      	bne.n	8002fec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	08da      	lsrs	r2, r3, #3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3208      	adds	r2, #8
 8002fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	220f      	movs	r2, #15
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	08da      	lsrs	r2, r3, #3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3208      	adds	r2, #8
 8002fe6:	69b9      	ldr	r1, [r7, #24]
 8002fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0203 	and.w	r2, r3, #3
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80ae 	beq.w	800318a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	4b5c      	ldr	r3, [pc, #368]	; (80031a4 <HAL_GPIO_Init+0x2fc>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	4a5b      	ldr	r2, [pc, #364]	; (80031a4 <HAL_GPIO_Init+0x2fc>)
 8003038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800303c:	6453      	str	r3, [r2, #68]	; 0x44
 800303e:	4b59      	ldr	r3, [pc, #356]	; (80031a4 <HAL_GPIO_Init+0x2fc>)
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800304a:	4a57      	ldr	r2, [pc, #348]	; (80031a8 <HAL_GPIO_Init+0x300>)
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	089b      	lsrs	r3, r3, #2
 8003050:	3302      	adds	r3, #2
 8003052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	220f      	movs	r2, #15
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a4e      	ldr	r2, [pc, #312]	; (80031ac <HAL_GPIO_Init+0x304>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d025      	beq.n	80030c2 <HAL_GPIO_Init+0x21a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a4d      	ldr	r2, [pc, #308]	; (80031b0 <HAL_GPIO_Init+0x308>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d01f      	beq.n	80030be <HAL_GPIO_Init+0x216>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a4c      	ldr	r2, [pc, #304]	; (80031b4 <HAL_GPIO_Init+0x30c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d019      	beq.n	80030ba <HAL_GPIO_Init+0x212>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a4b      	ldr	r2, [pc, #300]	; (80031b8 <HAL_GPIO_Init+0x310>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d013      	beq.n	80030b6 <HAL_GPIO_Init+0x20e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a4a      	ldr	r2, [pc, #296]	; (80031bc <HAL_GPIO_Init+0x314>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00d      	beq.n	80030b2 <HAL_GPIO_Init+0x20a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a49      	ldr	r2, [pc, #292]	; (80031c0 <HAL_GPIO_Init+0x318>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d007      	beq.n	80030ae <HAL_GPIO_Init+0x206>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a48      	ldr	r2, [pc, #288]	; (80031c4 <HAL_GPIO_Init+0x31c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d101      	bne.n	80030aa <HAL_GPIO_Init+0x202>
 80030a6:	2306      	movs	r3, #6
 80030a8:	e00c      	b.n	80030c4 <HAL_GPIO_Init+0x21c>
 80030aa:	2307      	movs	r3, #7
 80030ac:	e00a      	b.n	80030c4 <HAL_GPIO_Init+0x21c>
 80030ae:	2305      	movs	r3, #5
 80030b0:	e008      	b.n	80030c4 <HAL_GPIO_Init+0x21c>
 80030b2:	2304      	movs	r3, #4
 80030b4:	e006      	b.n	80030c4 <HAL_GPIO_Init+0x21c>
 80030b6:	2303      	movs	r3, #3
 80030b8:	e004      	b.n	80030c4 <HAL_GPIO_Init+0x21c>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e002      	b.n	80030c4 <HAL_GPIO_Init+0x21c>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_GPIO_Init+0x21c>
 80030c2:	2300      	movs	r3, #0
 80030c4:	69fa      	ldr	r2, [r7, #28]
 80030c6:	f002 0203 	and.w	r2, r2, #3
 80030ca:	0092      	lsls	r2, r2, #2
 80030cc:	4093      	lsls	r3, r2
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030d4:	4934      	ldr	r1, [pc, #208]	; (80031a8 <HAL_GPIO_Init+0x300>)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	089b      	lsrs	r3, r3, #2
 80030da:	3302      	adds	r3, #2
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030e2:	4b39      	ldr	r3, [pc, #228]	; (80031c8 <HAL_GPIO_Init+0x320>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003106:	4a30      	ldr	r2, [pc, #192]	; (80031c8 <HAL_GPIO_Init+0x320>)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800310c:	4b2e      	ldr	r3, [pc, #184]	; (80031c8 <HAL_GPIO_Init+0x320>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003130:	4a25      	ldr	r2, [pc, #148]	; (80031c8 <HAL_GPIO_Init+0x320>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003136:	4b24      	ldr	r3, [pc, #144]	; (80031c8 <HAL_GPIO_Init+0x320>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800315a:	4a1b      	ldr	r2, [pc, #108]	; (80031c8 <HAL_GPIO_Init+0x320>)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003160:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <HAL_GPIO_Init+0x320>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003184:	4a10      	ldr	r2, [pc, #64]	; (80031c8 <HAL_GPIO_Init+0x320>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3301      	adds	r3, #1
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2b0f      	cmp	r3, #15
 8003194:	f67f ae96 	bls.w	8002ec4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003198:	bf00      	nop
 800319a:	3724      	adds	r7, #36	; 0x24
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40013800 	.word	0x40013800
 80031ac:	40020000 	.word	0x40020000
 80031b0:	40020400 	.word	0x40020400
 80031b4:	40020800 	.word	0x40020800
 80031b8:	40020c00 	.word	0x40020c00
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40021400 	.word	0x40021400
 80031c4:	40021800 	.word	0x40021800
 80031c8:	40013c00 	.word	0x40013c00

080031cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	887b      	ldrh	r3, [r7, #2]
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
 80031e8:	e001      	b.n	80031ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031ea:	2300      	movs	r3, #0
 80031ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
 8003208:	4613      	mov	r3, r2
 800320a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800320c:	787b      	ldrb	r3, [r7, #1]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003212:	887a      	ldrh	r2, [r7, #2]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003218:	e003      	b.n	8003222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800321a:	887b      	ldrh	r3, [r7, #2]
 800321c:	041a      	lsls	r2, r3, #16
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	619a      	str	r2, [r3, #24]
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	4013      	ands	r3, r2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d006      	beq.n	8003254 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003246:	4a05      	ldr	r2, [pc, #20]	; (800325c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003248:	88fb      	ldrh	r3, [r7, #6]
 800324a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 f806 	bl	8003260 <HAL_GPIO_EXTI_Callback>
  }
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40013c00 	.word	0x40013c00

08003260 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
	...

08003278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0cc      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800328c:	4b68      	ldr	r3, [pc, #416]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d90c      	bls.n	80032b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b65      	ldr	r3, [pc, #404]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a2:	4b63      	ldr	r3, [pc, #396]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d001      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0b8      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d020      	beq.n	8003302 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032cc:	4b59      	ldr	r3, [pc, #356]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4a58      	ldr	r2, [pc, #352]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032e4:	4b53      	ldr	r3, [pc, #332]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	4a52      	ldr	r2, [pc, #328]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f0:	4b50      	ldr	r3, [pc, #320]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	494d      	ldr	r1, [pc, #308]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d044      	beq.n	8003398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d107      	bne.n	8003326 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	4b47      	ldr	r3, [pc, #284]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d119      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e07f      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d003      	beq.n	8003336 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003332:	2b03      	cmp	r3, #3
 8003334:	d107      	bne.n	8003346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003336:	4b3f      	ldr	r3, [pc, #252]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d109      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e06f      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003346:	4b3b      	ldr	r3, [pc, #236]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e067      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003356:	4b37      	ldr	r3, [pc, #220]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f023 0203 	bic.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4934      	ldr	r1, [pc, #208]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003368:	f7fe fac0 	bl	80018ec <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	e00a      	b.n	8003386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003370:	f7fe fabc 	bl	80018ec <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	; 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e04f      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	4b2b      	ldr	r3, [pc, #172]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 020c 	and.w	r2, r3, #12
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	429a      	cmp	r2, r3
 8003396:	d1eb      	bne.n	8003370 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003398:	4b25      	ldr	r3, [pc, #148]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d20c      	bcs.n	80033c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b22      	ldr	r3, [pc, #136]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b20      	ldr	r3, [pc, #128]	; (8003430 <HAL_RCC_ClockConfig+0x1b8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e032      	b.n	8003426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033cc:	4b19      	ldr	r3, [pc, #100]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4916      	ldr	r1, [pc, #88]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ea:	4b12      	ldr	r3, [pc, #72]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	490e      	ldr	r1, [pc, #56]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033fe:	f000 f855 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 8003402:	4601      	mov	r1, r0
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 8003410:	5cd3      	ldrb	r3, [r2, r3]
 8003412:	fa21 f303 	lsr.w	r3, r1, r3
 8003416:	4a09      	ldr	r2, [pc, #36]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe fa20 	bl	8001864 <HAL_InitTick>

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40023c00 	.word	0x40023c00
 8003434:	40023800 	.word	0x40023800
 8003438:	08005958 	.word	0x08005958
 800343c:	20000000 	.word	0x20000000
 8003440:	20000004 	.word	0x20000004

08003444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003448:	4b03      	ldr	r3, [pc, #12]	; (8003458 <HAL_RCC_GetHCLKFreq+0x14>)
 800344a:	681b      	ldr	r3, [r3, #0]
}
 800344c:	4618      	mov	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20000000 	.word	0x20000000

0800345c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003460:	f7ff fff0 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 8003464:	4601      	mov	r1, r0
 8003466:	4b05      	ldr	r3, [pc, #20]	; (800347c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	0a9b      	lsrs	r3, r3, #10
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	4a03      	ldr	r2, [pc, #12]	; (8003480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003472:	5cd3      	ldrb	r3, [r2, r3]
 8003474:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40023800 	.word	0x40023800
 8003480:	08005968 	.word	0x08005968

08003484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003488:	f7ff ffdc 	bl	8003444 <HAL_RCC_GetHCLKFreq>
 800348c:	4601      	mov	r1, r0
 800348e:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	0b5b      	lsrs	r3, r3, #13
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	4a03      	ldr	r2, [pc, #12]	; (80034a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800349a:	5cd3      	ldrb	r3, [r2, r3]
 800349c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40023800 	.word	0x40023800
 80034a8:	08005968 	.word	0x08005968

080034ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034c6:	4bc6      	ldr	r3, [pc, #792]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x334>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b0c      	cmp	r3, #12
 80034d0:	f200 817e 	bhi.w	80037d0 <HAL_RCC_GetSysClockFreq+0x324>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <HAL_RCC_GetSysClockFreq+0x30>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	08003511 	.word	0x08003511
 80034e0:	080037d1 	.word	0x080037d1
 80034e4:	080037d1 	.word	0x080037d1
 80034e8:	080037d1 	.word	0x080037d1
 80034ec:	08003517 	.word	0x08003517
 80034f0:	080037d1 	.word	0x080037d1
 80034f4:	080037d1 	.word	0x080037d1
 80034f8:	080037d1 	.word	0x080037d1
 80034fc:	0800351d 	.word	0x0800351d
 8003500:	080037d1 	.word	0x080037d1
 8003504:	080037d1 	.word	0x080037d1
 8003508:	080037d1 	.word	0x080037d1
 800350c:	08003679 	.word	0x08003679
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003510:	4bb4      	ldr	r3, [pc, #720]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x338>)
 8003512:	613b      	str	r3, [r7, #16]
       break;
 8003514:	e15f      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003516:	4bb4      	ldr	r3, [pc, #720]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003518:	613b      	str	r3, [r7, #16]
      break;
 800351a:	e15c      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800351c:	4bb0      	ldr	r3, [pc, #704]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x334>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003524:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003526:	4bae      	ldr	r3, [pc, #696]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d04a      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003532:	4bab      	ldr	r3, [pc, #684]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	f04f 0400 	mov.w	r4, #0
 800353c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	ea03 0501 	and.w	r5, r3, r1
 8003548:	ea04 0602 	and.w	r6, r4, r2
 800354c:	4629      	mov	r1, r5
 800354e:	4632      	mov	r2, r6
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	f04f 0400 	mov.w	r4, #0
 8003558:	0154      	lsls	r4, r2, #5
 800355a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800355e:	014b      	lsls	r3, r1, #5
 8003560:	4619      	mov	r1, r3
 8003562:	4622      	mov	r2, r4
 8003564:	1b49      	subs	r1, r1, r5
 8003566:	eb62 0206 	sbc.w	r2, r2, r6
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	f04f 0400 	mov.w	r4, #0
 8003572:	0194      	lsls	r4, r2, #6
 8003574:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003578:	018b      	lsls	r3, r1, #6
 800357a:	1a5b      	subs	r3, r3, r1
 800357c:	eb64 0402 	sbc.w	r4, r4, r2
 8003580:	f04f 0100 	mov.w	r1, #0
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	00e2      	lsls	r2, r4, #3
 800358a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800358e:	00d9      	lsls	r1, r3, #3
 8003590:	460b      	mov	r3, r1
 8003592:	4614      	mov	r4, r2
 8003594:	195b      	adds	r3, r3, r5
 8003596:	eb44 0406 	adc.w	r4, r4, r6
 800359a:	f04f 0100 	mov.w	r1, #0
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	0262      	lsls	r2, r4, #9
 80035a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80035a8:	0259      	lsls	r1, r3, #9
 80035aa:	460b      	mov	r3, r1
 80035ac:	4614      	mov	r4, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	4621      	mov	r1, r4
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f04f 0400 	mov.w	r4, #0
 80035b8:	461a      	mov	r2, r3
 80035ba:	4623      	mov	r3, r4
 80035bc:	f7fc fe22 	bl	8000204 <__aeabi_uldivmod>
 80035c0:	4603      	mov	r3, r0
 80035c2:	460c      	mov	r4, r1
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	e049      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c8:	4b85      	ldr	r3, [pc, #532]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x334>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	099b      	lsrs	r3, r3, #6
 80035ce:	f04f 0400 	mov.w	r4, #0
 80035d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	ea03 0501 	and.w	r5, r3, r1
 80035de:	ea04 0602 	and.w	r6, r4, r2
 80035e2:	4629      	mov	r1, r5
 80035e4:	4632      	mov	r2, r6
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	f04f 0400 	mov.w	r4, #0
 80035ee:	0154      	lsls	r4, r2, #5
 80035f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035f4:	014b      	lsls	r3, r1, #5
 80035f6:	4619      	mov	r1, r3
 80035f8:	4622      	mov	r2, r4
 80035fa:	1b49      	subs	r1, r1, r5
 80035fc:	eb62 0206 	sbc.w	r2, r2, r6
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	f04f 0400 	mov.w	r4, #0
 8003608:	0194      	lsls	r4, r2, #6
 800360a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800360e:	018b      	lsls	r3, r1, #6
 8003610:	1a5b      	subs	r3, r3, r1
 8003612:	eb64 0402 	sbc.w	r4, r4, r2
 8003616:	f04f 0100 	mov.w	r1, #0
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	00e2      	lsls	r2, r4, #3
 8003620:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003624:	00d9      	lsls	r1, r3, #3
 8003626:	460b      	mov	r3, r1
 8003628:	4614      	mov	r4, r2
 800362a:	195b      	adds	r3, r3, r5
 800362c:	eb44 0406 	adc.w	r4, r4, r6
 8003630:	f04f 0100 	mov.w	r1, #0
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	02a2      	lsls	r2, r4, #10
 800363a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800363e:	0299      	lsls	r1, r3, #10
 8003640:	460b      	mov	r3, r1
 8003642:	4614      	mov	r4, r2
 8003644:	4618      	mov	r0, r3
 8003646:	4621      	mov	r1, r4
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f04f 0400 	mov.w	r4, #0
 800364e:	461a      	mov	r2, r3
 8003650:	4623      	mov	r3, r4
 8003652:	f7fc fdd7 	bl	8000204 <__aeabi_uldivmod>
 8003656:	4603      	mov	r3, r0
 8003658:	460c      	mov	r4, r1
 800365a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800365c:	4b60      	ldr	r3, [pc, #384]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x334>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	0c1b      	lsrs	r3, r3, #16
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	3301      	adds	r3, #1
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	fbb2 f3f3 	udiv	r3, r2, r3
 8003674:	613b      	str	r3, [r7, #16]
      break;
 8003676:	e0ae      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003678:	4b59      	ldr	r3, [pc, #356]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x334>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003680:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003682:	4b57      	ldr	r3, [pc, #348]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d04a      	beq.n	8003724 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368e:	4b54      	ldr	r3, [pc, #336]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	099b      	lsrs	r3, r3, #6
 8003694:	f04f 0400 	mov.w	r4, #0
 8003698:	f240 11ff 	movw	r1, #511	; 0x1ff
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	ea03 0501 	and.w	r5, r3, r1
 80036a4:	ea04 0602 	and.w	r6, r4, r2
 80036a8:	4629      	mov	r1, r5
 80036aa:	4632      	mov	r2, r6
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	f04f 0400 	mov.w	r4, #0
 80036b4:	0154      	lsls	r4, r2, #5
 80036b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036ba:	014b      	lsls	r3, r1, #5
 80036bc:	4619      	mov	r1, r3
 80036be:	4622      	mov	r2, r4
 80036c0:	1b49      	subs	r1, r1, r5
 80036c2:	eb62 0206 	sbc.w	r2, r2, r6
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	f04f 0400 	mov.w	r4, #0
 80036ce:	0194      	lsls	r4, r2, #6
 80036d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036d4:	018b      	lsls	r3, r1, #6
 80036d6:	1a5b      	subs	r3, r3, r1
 80036d8:	eb64 0402 	sbc.w	r4, r4, r2
 80036dc:	f04f 0100 	mov.w	r1, #0
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	00e2      	lsls	r2, r4, #3
 80036e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036ea:	00d9      	lsls	r1, r3, #3
 80036ec:	460b      	mov	r3, r1
 80036ee:	4614      	mov	r4, r2
 80036f0:	195b      	adds	r3, r3, r5
 80036f2:	eb44 0406 	adc.w	r4, r4, r6
 80036f6:	f04f 0100 	mov.w	r1, #0
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	0262      	lsls	r2, r4, #9
 8003700:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003704:	0259      	lsls	r1, r3, #9
 8003706:	460b      	mov	r3, r1
 8003708:	4614      	mov	r4, r2
 800370a:	4618      	mov	r0, r3
 800370c:	4621      	mov	r1, r4
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f04f 0400 	mov.w	r4, #0
 8003714:	461a      	mov	r2, r3
 8003716:	4623      	mov	r3, r4
 8003718:	f7fc fd74 	bl	8000204 <__aeabi_uldivmod>
 800371c:	4603      	mov	r3, r0
 800371e:	460c      	mov	r4, r1
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	e049      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003724:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	099b      	lsrs	r3, r3, #6
 800372a:	f04f 0400 	mov.w	r4, #0
 800372e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	ea03 0501 	and.w	r5, r3, r1
 800373a:	ea04 0602 	and.w	r6, r4, r2
 800373e:	4629      	mov	r1, r5
 8003740:	4632      	mov	r2, r6
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	f04f 0400 	mov.w	r4, #0
 800374a:	0154      	lsls	r4, r2, #5
 800374c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003750:	014b      	lsls	r3, r1, #5
 8003752:	4619      	mov	r1, r3
 8003754:	4622      	mov	r2, r4
 8003756:	1b49      	subs	r1, r1, r5
 8003758:	eb62 0206 	sbc.w	r2, r2, r6
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	f04f 0400 	mov.w	r4, #0
 8003764:	0194      	lsls	r4, r2, #6
 8003766:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800376a:	018b      	lsls	r3, r1, #6
 800376c:	1a5b      	subs	r3, r3, r1
 800376e:	eb64 0402 	sbc.w	r4, r4, r2
 8003772:	f04f 0100 	mov.w	r1, #0
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	00e2      	lsls	r2, r4, #3
 800377c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003780:	00d9      	lsls	r1, r3, #3
 8003782:	460b      	mov	r3, r1
 8003784:	4614      	mov	r4, r2
 8003786:	195b      	adds	r3, r3, r5
 8003788:	eb44 0406 	adc.w	r4, r4, r6
 800378c:	f04f 0100 	mov.w	r1, #0
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	02a2      	lsls	r2, r4, #10
 8003796:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800379a:	0299      	lsls	r1, r3, #10
 800379c:	460b      	mov	r3, r1
 800379e:	4614      	mov	r4, r2
 80037a0:	4618      	mov	r0, r3
 80037a2:	4621      	mov	r1, r4
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f04f 0400 	mov.w	r4, #0
 80037aa:	461a      	mov	r2, r3
 80037ac:	4623      	mov	r3, r4
 80037ae:	f7fc fd29 	bl	8000204 <__aeabi_uldivmod>
 80037b2:	4603      	mov	r3, r0
 80037b4:	460c      	mov	r4, r1
 80037b6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x334>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	0f1b      	lsrs	r3, r3, #28
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037cc:	613b      	str	r3, [r7, #16]
      break;
 80037ce:	e002      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037d0:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <HAL_RCC_GetSysClockFreq+0x338>)
 80037d2:	613b      	str	r3, [r7, #16]
      break;
 80037d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037d6:	693b      	ldr	r3, [r7, #16]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	371c      	adds	r7, #28
 80037dc:	46bd      	mov	sp, r7
 80037de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037e0:	40023800 	.word	0x40023800
 80037e4:	00f42400 	.word	0x00f42400
 80037e8:	007a1200 	.word	0x007a1200

080037ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8083 	beq.w	800390c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003806:	4b95      	ldr	r3, [pc, #596]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 030c 	and.w	r3, r3, #12
 800380e:	2b04      	cmp	r3, #4
 8003810:	d019      	beq.n	8003846 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003812:	4b92      	ldr	r3, [pc, #584]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800381a:	2b08      	cmp	r3, #8
 800381c:	d106      	bne.n	800382c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800381e:	4b8f      	ldr	r3, [pc, #572]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800382a:	d00c      	beq.n	8003846 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800382c:	4b8b      	ldr	r3, [pc, #556]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003834:	2b0c      	cmp	r3, #12
 8003836:	d112      	bne.n	800385e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003838:	4b88      	ldr	r3, [pc, #544]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003844:	d10b      	bne.n	800385e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003846:	4b85      	ldr	r3, [pc, #532]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d05b      	beq.n	800390a <HAL_RCC_OscConfig+0x11e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d157      	bne.n	800390a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e216      	b.n	8003c8c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003866:	d106      	bne.n	8003876 <HAL_RCC_OscConfig+0x8a>
 8003868:	4b7c      	ldr	r3, [pc, #496]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a7b      	ldr	r2, [pc, #492]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800386e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	e01d      	b.n	80038b2 <HAL_RCC_OscConfig+0xc6>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800387e:	d10c      	bne.n	800389a <HAL_RCC_OscConfig+0xae>
 8003880:	4b76      	ldr	r3, [pc, #472]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a75      	ldr	r2, [pc, #468]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003886:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	4b73      	ldr	r3, [pc, #460]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a72      	ldr	r2, [pc, #456]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	e00b      	b.n	80038b2 <HAL_RCC_OscConfig+0xc6>
 800389a:	4b70      	ldr	r3, [pc, #448]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a6f      	ldr	r2, [pc, #444]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	4b6d      	ldr	r3, [pc, #436]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a6c      	ldr	r2, [pc, #432]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d013      	beq.n	80038e2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ba:	f7fe f817 	bl	80018ec <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c2:	f7fe f813 	bl	80018ec <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b64      	cmp	r3, #100	; 0x64
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e1db      	b.n	8003c8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d4:	4b61      	ldr	r3, [pc, #388]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0f0      	beq.n	80038c2 <HAL_RCC_OscConfig+0xd6>
 80038e0:	e014      	b.n	800390c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7fe f803 	bl	80018ec <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038ea:	f7fd ffff 	bl	80018ec <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b64      	cmp	r3, #100	; 0x64
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e1c7      	b.n	8003c8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fc:	4b57      	ldr	r3, [pc, #348]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f0      	bne.n	80038ea <HAL_RCC_OscConfig+0xfe>
 8003908:	e000      	b.n	800390c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d06f      	beq.n	80039f8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003918:	4b50      	ldr	r3, [pc, #320]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b00      	cmp	r3, #0
 8003922:	d017      	beq.n	8003954 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003924:	4b4d      	ldr	r3, [pc, #308]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800392c:	2b08      	cmp	r3, #8
 800392e:	d105      	bne.n	800393c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003930:	4b4a      	ldr	r3, [pc, #296]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00b      	beq.n	8003954 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800393c:	4b47      	ldr	r3, [pc, #284]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003944:	2b0c      	cmp	r3, #12
 8003946:	d11c      	bne.n	8003982 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003948:	4b44      	ldr	r3, [pc, #272]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d116      	bne.n	8003982 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003954:	4b41      	ldr	r3, [pc, #260]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_RCC_OscConfig+0x180>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d001      	beq.n	800396c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e18f      	b.n	8003c8c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396c:	4b3b      	ldr	r3, [pc, #236]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4938      	ldr	r1, [pc, #224]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 800397c:	4313      	orrs	r3, r2
 800397e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003980:	e03a      	b.n	80039f8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d020      	beq.n	80039cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800398a:	4b35      	ldr	r3, [pc, #212]	; (8003a60 <HAL_RCC_OscConfig+0x274>)
 800398c:	2201      	movs	r2, #1
 800398e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7fd ffac 	bl	80018ec <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003998:	f7fd ffa8 	bl	80018ec <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e170      	b.n	8003c8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039aa:	4b2c      	ldr	r3, [pc, #176]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b6:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4925      	ldr	r1, [pc, #148]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]
 80039ca:	e015      	b.n	80039f8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039cc:	4b24      	ldr	r3, [pc, #144]	; (8003a60 <HAL_RCC_OscConfig+0x274>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d2:	f7fd ff8b 	bl	80018ec <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039da:	f7fd ff87 	bl	80018ec <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e14f      	b.n	8003c8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ec:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f0      	bne.n	80039da <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d037      	beq.n	8003a74 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d016      	beq.n	8003a3a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a0c:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <HAL_RCC_OscConfig+0x278>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a12:	f7fd ff6b 	bl	80018ec <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a1a:	f7fd ff67 	bl	80018ec <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e12f      	b.n	8003c8c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <HAL_RCC_OscConfig+0x270>)
 8003a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCC_OscConfig+0x22e>
 8003a38:	e01c      	b.n	8003a74 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a3a:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <HAL_RCC_OscConfig+0x278>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7fd ff54 	bl	80018ec <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a46:	e00f      	b.n	8003a68 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a48:	f7fd ff50 	bl	80018ec <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d908      	bls.n	8003a68 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e118      	b.n	8003c8c <HAL_RCC_OscConfig+0x4a0>
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	42470000 	.word	0x42470000
 8003a64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a68:	4b8a      	ldr	r3, [pc, #552]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e9      	bne.n	8003a48 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 8097 	beq.w	8003bb0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a82:	2300      	movs	r3, #0
 8003a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a86:	4b83      	ldr	r3, [pc, #524]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10f      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	4b7f      	ldr	r3, [pc, #508]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	4a7e      	ldr	r2, [pc, #504]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa2:	4b7c      	ldr	r3, [pc, #496]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab2:	4b79      	ldr	r3, [pc, #484]	; (8003c98 <HAL_RCC_OscConfig+0x4ac>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d118      	bne.n	8003af0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003abe:	4b76      	ldr	r3, [pc, #472]	; (8003c98 <HAL_RCC_OscConfig+0x4ac>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a75      	ldr	r2, [pc, #468]	; (8003c98 <HAL_RCC_OscConfig+0x4ac>)
 8003ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aca:	f7fd ff0f 	bl	80018ec <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad2:	f7fd ff0b 	bl	80018ec <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e0d3      	b.n	8003c8c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	4b6c      	ldr	r3, [pc, #432]	; (8003c98 <HAL_RCC_OscConfig+0x4ac>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d106      	bne.n	8003b06 <HAL_RCC_OscConfig+0x31a>
 8003af8:	4b66      	ldr	r3, [pc, #408]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afc:	4a65      	ldr	r2, [pc, #404]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	6713      	str	r3, [r2, #112]	; 0x70
 8003b04:	e01c      	b.n	8003b40 <HAL_RCC_OscConfig+0x354>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b05      	cmp	r3, #5
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCC_OscConfig+0x33c>
 8003b0e:	4b61      	ldr	r3, [pc, #388]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	4a60      	ldr	r2, [pc, #384]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003b14:	f043 0304 	orr.w	r3, r3, #4
 8003b18:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1a:	4b5e      	ldr	r3, [pc, #376]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1e:	4a5d      	ldr	r2, [pc, #372]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	6713      	str	r3, [r2, #112]	; 0x70
 8003b26:	e00b      	b.n	8003b40 <HAL_RCC_OscConfig+0x354>
 8003b28:	4b5a      	ldr	r3, [pc, #360]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2c:	4a59      	ldr	r2, [pc, #356]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	6713      	str	r3, [r2, #112]	; 0x70
 8003b34:	4b57      	ldr	r3, [pc, #348]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b38:	4a56      	ldr	r2, [pc, #344]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003b3a:	f023 0304 	bic.w	r3, r3, #4
 8003b3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d015      	beq.n	8003b74 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b48:	f7fd fed0 	bl	80018ec <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b50:	f7fd fecc 	bl	80018ec <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e092      	b.n	8003c8c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b66:	4b4b      	ldr	r3, [pc, #300]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0ee      	beq.n	8003b50 <HAL_RCC_OscConfig+0x364>
 8003b72:	e014      	b.n	8003b9e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b74:	f7fd feba 	bl	80018ec <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	f7fd feb6 	bl	80018ec <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e07c      	b.n	8003c8c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b92:	4b40      	ldr	r3, [pc, #256]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1ee      	bne.n	8003b7c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d105      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba4:	4b3b      	ldr	r3, [pc, #236]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	4a3a      	ldr	r2, [pc, #232]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d068      	beq.n	8003c8a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bb8:	4b36      	ldr	r3, [pc, #216]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d060      	beq.n	8003c86 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d145      	bne.n	8003c58 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bcc:	4b33      	ldr	r3, [pc, #204]	; (8003c9c <HAL_RCC_OscConfig+0x4b0>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd2:	f7fd fe8b 	bl	80018ec <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bda:	f7fd fe87 	bl	80018ec <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e04f      	b.n	8003c8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bec:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1f0      	bne.n	8003bda <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	019b      	lsls	r3, r3, #6
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	3b01      	subs	r3, #1
 8003c12:	041b      	lsls	r3, r3, #16
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	061b      	lsls	r3, r3, #24
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	071b      	lsls	r3, r3, #28
 8003c24:	491b      	ldr	r1, [pc, #108]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c2a:	4b1c      	ldr	r3, [pc, #112]	; (8003c9c <HAL_RCC_OscConfig+0x4b0>)
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c30:	f7fd fe5c 	bl	80018ec <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c38:	f7fd fe58 	bl	80018ec <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e020      	b.n	8003c8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4a:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0x44c>
 8003c56:	e018      	b.n	8003c8a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c58:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <HAL_RCC_OscConfig+0x4b0>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5e:	f7fd fe45 	bl	80018ec <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c66:	f7fd fe41 	bl	80018ec <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e009      	b.n	8003c8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_RCC_OscConfig+0x4a8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1f0      	bne.n	8003c66 <HAL_RCC_OscConfig+0x47a>
 8003c84:	e001      	b.n	8003c8a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	42470060 	.word	0x42470060

08003ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e01d      	b.n	8003cee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fd fc44 	bl	8001554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	f000 f8e4 	bl	8003eac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b085      	sub	sp, #20
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2202      	movs	r2, #2
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b06      	cmp	r3, #6
 8003d16:	d007      	beq.n	8003d28 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_TIM_ConfigClockSource+0x18>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e0a6      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x166>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2202      	movs	r2, #2
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d74:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d7c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	d067      	beq.n	8003e5e <HAL_TIM_ConfigClockSource+0x120>
 8003d8e:	2b40      	cmp	r3, #64	; 0x40
 8003d90:	d80b      	bhi.n	8003daa <HAL_TIM_ConfigClockSource+0x6c>
 8003d92:	2b10      	cmp	r3, #16
 8003d94:	d073      	beq.n	8003e7e <HAL_TIM_ConfigClockSource+0x140>
 8003d96:	2b10      	cmp	r3, #16
 8003d98:	d802      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x62>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d06f      	beq.n	8003e7e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d9e:	e078      	b.n	8003e92 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d06c      	beq.n	8003e7e <HAL_TIM_ConfigClockSource+0x140>
 8003da4:	2b30      	cmp	r3, #48	; 0x30
 8003da6:	d06a      	beq.n	8003e7e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003da8:	e073      	b.n	8003e92 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003daa:	2b70      	cmp	r3, #112	; 0x70
 8003dac:	d00d      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0x8c>
 8003dae:	2b70      	cmp	r3, #112	; 0x70
 8003db0:	d804      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x7e>
 8003db2:	2b50      	cmp	r3, #80	; 0x50
 8003db4:	d033      	beq.n	8003e1e <HAL_TIM_ConfigClockSource+0xe0>
 8003db6:	2b60      	cmp	r3, #96	; 0x60
 8003db8:	d041      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dba:	e06a      	b.n	8003e92 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc0:	d066      	beq.n	8003e90 <HAL_TIM_ConfigClockSource+0x152>
 8003dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc6:	d017      	beq.n	8003df8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003dc8:	e063      	b.n	8003e92 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6899      	ldr	r1, [r3, #8]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f000 f981 	bl	80040e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	609a      	str	r2, [r3, #8]
      break;
 8003df6:	e04c      	b.n	8003e92 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	6899      	ldr	r1, [r3, #8]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f000 f96a 	bl	80040e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e1a:	609a      	str	r2, [r3, #8]
      break;
 8003e1c:	e039      	b.n	8003e92 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6859      	ldr	r1, [r3, #4]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f000 f8de 	bl	8003fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2150      	movs	r1, #80	; 0x50
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f937 	bl	80040aa <TIM_ITRx_SetConfig>
      break;
 8003e3c:	e029      	b.n	8003e92 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6859      	ldr	r1, [r3, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f000 f8fd 	bl	800404a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2160      	movs	r1, #96	; 0x60
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 f927 	bl	80040aa <TIM_ITRx_SetConfig>
      break;
 8003e5c:	e019      	b.n	8003e92 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	6859      	ldr	r1, [r3, #4]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f000 f8be 	bl	8003fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2140      	movs	r1, #64	; 0x40
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f917 	bl	80040aa <TIM_ITRx_SetConfig>
      break;
 8003e7c:	e009      	b.n	8003e92 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4619      	mov	r1, r3
 8003e88:	4610      	mov	r0, r2
 8003e8a:	f000 f90e 	bl	80040aa <TIM_ITRx_SetConfig>
      break;
 8003e8e:	e000      	b.n	8003e92 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a40      	ldr	r2, [pc, #256]	; (8003fc0 <TIM_Base_SetConfig+0x114>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eca:	d00f      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a3d      	ldr	r2, [pc, #244]	; (8003fc4 <TIM_Base_SetConfig+0x118>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00b      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a3c      	ldr	r2, [pc, #240]	; (8003fc8 <TIM_Base_SetConfig+0x11c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d007      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a3b      	ldr	r2, [pc, #236]	; (8003fcc <TIM_Base_SetConfig+0x120>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a3a      	ldr	r2, [pc, #232]	; (8003fd0 <TIM_Base_SetConfig+0x124>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d108      	bne.n	8003efe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2f      	ldr	r2, [pc, #188]	; (8003fc0 <TIM_Base_SetConfig+0x114>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d02b      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0c:	d027      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2c      	ldr	r2, [pc, #176]	; (8003fc4 <TIM_Base_SetConfig+0x118>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d023      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a2b      	ldr	r2, [pc, #172]	; (8003fc8 <TIM_Base_SetConfig+0x11c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d01f      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a2a      	ldr	r2, [pc, #168]	; (8003fcc <TIM_Base_SetConfig+0x120>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d01b      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a29      	ldr	r2, [pc, #164]	; (8003fd0 <TIM_Base_SetConfig+0x124>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d017      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a28      	ldr	r2, [pc, #160]	; (8003fd4 <TIM_Base_SetConfig+0x128>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a27      	ldr	r2, [pc, #156]	; (8003fd8 <TIM_Base_SetConfig+0x12c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00f      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a26      	ldr	r2, [pc, #152]	; (8003fdc <TIM_Base_SetConfig+0x130>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00b      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a25      	ldr	r2, [pc, #148]	; (8003fe0 <TIM_Base_SetConfig+0x134>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d007      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a24      	ldr	r2, [pc, #144]	; (8003fe4 <TIM_Base_SetConfig+0x138>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d003      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a23      	ldr	r2, [pc, #140]	; (8003fe8 <TIM_Base_SetConfig+0x13c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d108      	bne.n	8003f70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <TIM_Base_SetConfig+0x114>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_Base_SetConfig+0xf8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a0c      	ldr	r2, [pc, #48]	; (8003fd0 <TIM_Base_SetConfig+0x124>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d103      	bne.n	8003fac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	615a      	str	r2, [r3, #20]
}
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40010000 	.word	0x40010000
 8003fc4:	40000400 	.word	0x40000400
 8003fc8:	40000800 	.word	0x40000800
 8003fcc:	40000c00 	.word	0x40000c00
 8003fd0:	40010400 	.word	0x40010400
 8003fd4:	40014000 	.word	0x40014000
 8003fd8:	40014400 	.word	0x40014400
 8003fdc:	40014800 	.word	0x40014800
 8003fe0:	40001800 	.word	0x40001800
 8003fe4:	40001c00 	.word	0x40001c00
 8003fe8:	40002000 	.word	0x40002000

08003fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f023 0201 	bic.w	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f023 030a 	bic.w	r3, r3, #10
 8004028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	621a      	str	r2, [r3, #32]
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800404a:	b480      	push	{r7}
 800404c:	b087      	sub	sp, #28
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f023 0210 	bic.w	r2, r3, #16
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	031b      	lsls	r3, r3, #12
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004086:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	621a      	str	r2, [r3, #32]
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b085      	sub	sp, #20
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f043 0307 	orr.w	r3, r3, #7
 80040cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	609a      	str	r2, [r3, #8]
}
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	021a      	lsls	r2, r3, #8
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	431a      	orrs	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4313      	orrs	r3, r2
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	609a      	str	r2, [r3, #8]
}
 8004114:	bf00      	nop
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004134:	2302      	movs	r3, #2
 8004136:	e05a      	b.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a21      	ldr	r2, [pc, #132]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d022      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004184:	d01d      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a1d      	ldr	r2, [pc, #116]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d018      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1b      	ldr	r2, [pc, #108]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d013      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a1a      	ldr	r2, [pc, #104]	; (8004208 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00e      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a18      	ldr	r2, [pc, #96]	; (800420c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d009      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a17      	ldr	r2, [pc, #92]	; (8004210 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d004      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a15      	ldr	r2, [pc, #84]	; (8004214 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d10c      	bne.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40010000 	.word	0x40010000
 8004200:	40000400 	.word	0x40000400
 8004204:	40000800 	.word	0x40000800
 8004208:	40000c00 	.word	0x40000c00
 800420c:	40010400 	.word	0x40010400
 8004210:	40014000 	.word	0x40014000
 8004214:	40001800 	.word	0x40001800

08004218 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e03f      	b.n	80042aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fd f9be 	bl	80015c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2224      	movs	r2, #36	; 0x24
 8004248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800425a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 fa4b 	bl	80046f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004270:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695a      	ldr	r2, [r3, #20]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004280:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004290:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b088      	sub	sp, #32
 80042b6:	af02      	add	r7, sp, #8
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	603b      	str	r3, [r7, #0]
 80042be:	4613      	mov	r3, r2
 80042c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	f040 8083 	bne.w	80043da <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_UART_Transmit+0x2e>
 80042da:	88fb      	ldrh	r3, [r7, #6]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e07b      	b.n	80043dc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_UART_Transmit+0x40>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e074      	b.n	80043dc <HAL_UART_Transmit+0x12a>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2221      	movs	r2, #33	; 0x21
 8004304:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004308:	f7fd faf0 	bl	80018ec <HAL_GetTick>
 800430c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	88fa      	ldrh	r2, [r7, #6]
 8004312:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	88fa      	ldrh	r2, [r7, #6]
 8004318:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004322:	e042      	b.n	80043aa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433a:	d122      	bne.n	8004382 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2200      	movs	r2, #0
 8004344:	2180      	movs	r1, #128	; 0x80
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f957 	bl	80045fa <UART_WaitOnFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e042      	b.n	80043dc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004368:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d103      	bne.n	800437a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	3302      	adds	r3, #2
 8004376:	60bb      	str	r3, [r7, #8]
 8004378:	e017      	b.n	80043aa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	3301      	adds	r3, #1
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	e013      	b.n	80043aa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2200      	movs	r2, #0
 800438a:	2180      	movs	r1, #128	; 0x80
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f934 	bl	80045fa <UART_WaitOnFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e01f      	b.n	80043dc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	60ba      	str	r2, [r7, #8]
 80043a2:	781a      	ldrb	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1b7      	bne.n	8004324 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2200      	movs	r2, #0
 80043bc:	2140      	movs	r1, #64	; 0x40
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 f91b 	bl	80045fa <UART_WaitOnFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e006      	b.n	80043dc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e000      	b.n	80043dc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80043da:	2302      	movs	r3, #2
  }
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	4613      	mov	r3, r2
 80043f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b20      	cmp	r3, #32
 80043fc:	d153      	bne.n	80044a6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <HAL_UART_Transmit_DMA+0x26>
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e04c      	b.n	80044a8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_UART_Transmit_DMA+0x38>
 8004418:	2302      	movs	r3, #2
 800441a:	e045      	b.n	80044a8 <HAL_UART_Transmit_DMA+0xc4>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	88fa      	ldrh	r2, [r7, #6]
 800442e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	88fa      	ldrh	r2, [r7, #6]
 8004434:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2221      	movs	r2, #33	; 0x21
 8004440:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	4a19      	ldr	r2, [pc, #100]	; (80044b0 <HAL_UART_Transmit_DMA+0xcc>)
 800444a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	4a18      	ldr	r2, [pc, #96]	; (80044b4 <HAL_UART_Transmit_DMA+0xd0>)
 8004452:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	4a17      	ldr	r2, [pc, #92]	; (80044b8 <HAL_UART_Transmit_DMA+0xd4>)
 800445a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	2200      	movs	r2, #0
 8004462:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8004464:	f107 0308 	add.w	r3, r7, #8
 8004468:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	6819      	ldr	r1, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3304      	adds	r3, #4
 8004478:	461a      	mov	r2, r3
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	f7fe f9e4 	bl	8002848 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004488:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695a      	ldr	r2, [r3, #20]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044a0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	e000      	b.n	80044a8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80044a6:	2302      	movs	r3, #2
  }
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	080044f9 	.word	0x080044f9
 80044b4:	0800454b 	.word	0x0800454b
 80044b8:	08004567 	.word	0x08004567

080044bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004504:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004510:	2b00      	cmp	r3, #0
 8004512:	d113      	bne.n	800453c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695a      	ldr	r2, [r3, #20]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004528:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004538:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800453a:	e002      	b.n	8004542 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7ff ffbd 	bl	80044bc <HAL_UART_TxCpltCallback>
}
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f7ff ffb9 	bl	80044d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004582:	2b80      	cmp	r3, #128	; 0x80
 8004584:	bf0c      	ite	eq
 8004586:	2301      	moveq	r3, #1
 8004588:	2300      	movne	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b21      	cmp	r3, #33	; 0x21
 8004598:	d108      	bne.n	80045ac <UART_DMAError+0x46>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2200      	movs	r2, #0
 80045a4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80045a6:	68b8      	ldr	r0, [r7, #8]
 80045a8:	f000 f871 	bl	800468e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b6:	2b40      	cmp	r3, #64	; 0x40
 80045b8:	bf0c      	ite	eq
 80045ba:	2301      	moveq	r3, #1
 80045bc:	2300      	movne	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b22      	cmp	r3, #34	; 0x22
 80045cc:	d108      	bne.n	80045e0 <UART_DMAError+0x7a>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2200      	movs	r2, #0
 80045d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80045da:	68b8      	ldr	r0, [r7, #8]
 80045dc:	f000 f86d 	bl	80046ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e4:	f043 0210 	orr.w	r2, r3, #16
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045ec:	68b8      	ldr	r0, [r7, #8]
 80045ee:	f7ff ff79 	bl	80044e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045f2:	bf00      	nop
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	4613      	mov	r3, r2
 8004608:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800460a:	e02c      	b.n	8004666 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004612:	d028      	beq.n	8004666 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d007      	beq.n	800462a <UART_WaitOnFlagUntilTimeout+0x30>
 800461a:	f7fd f967 	bl	80018ec <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	429a      	cmp	r2, r3
 8004628:	d21d      	bcs.n	8004666 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004638:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e00f      	b.n	8004686 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4013      	ands	r3, r2
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	429a      	cmp	r2, r3
 8004674:	bf0c      	ite	eq
 8004676:	2301      	moveq	r3, #1
 8004678:	2300      	movne	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	429a      	cmp	r2, r3
 8004682:	d0c3      	beq.n	800460c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80046a4:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046d0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695a      	ldr	r2, [r3, #20]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0201 	bic.w	r2, r2, #1
 80046e0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
	...

080046f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fc:	b085      	sub	sp, #20
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	4313      	orrs	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800473a:	f023 030c 	bic.w	r3, r3, #12
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6812      	ldr	r2, [r2, #0]
 8004742:	68f9      	ldr	r1, [r7, #12]
 8004744:	430b      	orrs	r3, r1
 8004746:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004766:	f040 818b 	bne.w	8004a80 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4ac1      	ldr	r2, [pc, #772]	; (8004a74 <UART_SetConfig+0x37c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d005      	beq.n	8004780 <UART_SetConfig+0x88>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4abf      	ldr	r2, [pc, #764]	; (8004a78 <UART_SetConfig+0x380>)
 800477a:	4293      	cmp	r3, r2
 800477c:	f040 80bd 	bne.w	80048fa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004780:	f7fe fe80 	bl	8003484 <HAL_RCC_GetPCLK2Freq>
 8004784:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	461d      	mov	r5, r3
 800478a:	f04f 0600 	mov.w	r6, #0
 800478e:	46a8      	mov	r8, r5
 8004790:	46b1      	mov	r9, r6
 8004792:	eb18 0308 	adds.w	r3, r8, r8
 8004796:	eb49 0409 	adc.w	r4, r9, r9
 800479a:	4698      	mov	r8, r3
 800479c:	46a1      	mov	r9, r4
 800479e:	eb18 0805 	adds.w	r8, r8, r5
 80047a2:	eb49 0906 	adc.w	r9, r9, r6
 80047a6:	f04f 0100 	mov.w	r1, #0
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80047b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047ba:	4688      	mov	r8, r1
 80047bc:	4691      	mov	r9, r2
 80047be:	eb18 0005 	adds.w	r0, r8, r5
 80047c2:	eb49 0106 	adc.w	r1, r9, r6
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	461d      	mov	r5, r3
 80047cc:	f04f 0600 	mov.w	r6, #0
 80047d0:	196b      	adds	r3, r5, r5
 80047d2:	eb46 0406 	adc.w	r4, r6, r6
 80047d6:	461a      	mov	r2, r3
 80047d8:	4623      	mov	r3, r4
 80047da:	f7fb fd13 	bl	8000204 <__aeabi_uldivmod>
 80047de:	4603      	mov	r3, r0
 80047e0:	460c      	mov	r4, r1
 80047e2:	461a      	mov	r2, r3
 80047e4:	4ba5      	ldr	r3, [pc, #660]	; (8004a7c <UART_SetConfig+0x384>)
 80047e6:	fba3 2302 	umull	r2, r3, r3, r2
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	461d      	mov	r5, r3
 80047f4:	f04f 0600 	mov.w	r6, #0
 80047f8:	46a9      	mov	r9, r5
 80047fa:	46b2      	mov	sl, r6
 80047fc:	eb19 0309 	adds.w	r3, r9, r9
 8004800:	eb4a 040a 	adc.w	r4, sl, sl
 8004804:	4699      	mov	r9, r3
 8004806:	46a2      	mov	sl, r4
 8004808:	eb19 0905 	adds.w	r9, r9, r5
 800480c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004810:	f04f 0100 	mov.w	r1, #0
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800481c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004820:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004824:	4689      	mov	r9, r1
 8004826:	4692      	mov	sl, r2
 8004828:	eb19 0005 	adds.w	r0, r9, r5
 800482c:	eb4a 0106 	adc.w	r1, sl, r6
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	461d      	mov	r5, r3
 8004836:	f04f 0600 	mov.w	r6, #0
 800483a:	196b      	adds	r3, r5, r5
 800483c:	eb46 0406 	adc.w	r4, r6, r6
 8004840:	461a      	mov	r2, r3
 8004842:	4623      	mov	r3, r4
 8004844:	f7fb fcde 	bl	8000204 <__aeabi_uldivmod>
 8004848:	4603      	mov	r3, r0
 800484a:	460c      	mov	r4, r1
 800484c:	461a      	mov	r2, r3
 800484e:	4b8b      	ldr	r3, [pc, #556]	; (8004a7c <UART_SetConfig+0x384>)
 8004850:	fba3 1302 	umull	r1, r3, r3, r2
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	2164      	movs	r1, #100	; 0x64
 8004858:	fb01 f303 	mul.w	r3, r1, r3
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	3332      	adds	r3, #50	; 0x32
 8004862:	4a86      	ldr	r2, [pc, #536]	; (8004a7c <UART_SetConfig+0x384>)
 8004864:	fba2 2303 	umull	r2, r3, r2, r3
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004870:	4498      	add	r8, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	461d      	mov	r5, r3
 8004876:	f04f 0600 	mov.w	r6, #0
 800487a:	46a9      	mov	r9, r5
 800487c:	46b2      	mov	sl, r6
 800487e:	eb19 0309 	adds.w	r3, r9, r9
 8004882:	eb4a 040a 	adc.w	r4, sl, sl
 8004886:	4699      	mov	r9, r3
 8004888:	46a2      	mov	sl, r4
 800488a:	eb19 0905 	adds.w	r9, r9, r5
 800488e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004892:	f04f 0100 	mov.w	r1, #0
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800489e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048a6:	4689      	mov	r9, r1
 80048a8:	4692      	mov	sl, r2
 80048aa:	eb19 0005 	adds.w	r0, r9, r5
 80048ae:	eb4a 0106 	adc.w	r1, sl, r6
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	461d      	mov	r5, r3
 80048b8:	f04f 0600 	mov.w	r6, #0
 80048bc:	196b      	adds	r3, r5, r5
 80048be:	eb46 0406 	adc.w	r4, r6, r6
 80048c2:	461a      	mov	r2, r3
 80048c4:	4623      	mov	r3, r4
 80048c6:	f7fb fc9d 	bl	8000204 <__aeabi_uldivmod>
 80048ca:	4603      	mov	r3, r0
 80048cc:	460c      	mov	r4, r1
 80048ce:	461a      	mov	r2, r3
 80048d0:	4b6a      	ldr	r3, [pc, #424]	; (8004a7c <UART_SetConfig+0x384>)
 80048d2:	fba3 1302 	umull	r1, r3, r3, r2
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	2164      	movs	r1, #100	; 0x64
 80048da:	fb01 f303 	mul.w	r3, r1, r3
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	3332      	adds	r3, #50	; 0x32
 80048e4:	4a65      	ldr	r2, [pc, #404]	; (8004a7c <UART_SetConfig+0x384>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	f003 0207 	and.w	r2, r3, #7
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4442      	add	r2, r8
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	e26f      	b.n	8004dda <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048fa:	f7fe fdaf 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 80048fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	461d      	mov	r5, r3
 8004904:	f04f 0600 	mov.w	r6, #0
 8004908:	46a8      	mov	r8, r5
 800490a:	46b1      	mov	r9, r6
 800490c:	eb18 0308 	adds.w	r3, r8, r8
 8004910:	eb49 0409 	adc.w	r4, r9, r9
 8004914:	4698      	mov	r8, r3
 8004916:	46a1      	mov	r9, r4
 8004918:	eb18 0805 	adds.w	r8, r8, r5
 800491c:	eb49 0906 	adc.w	r9, r9, r6
 8004920:	f04f 0100 	mov.w	r1, #0
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800492c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004930:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004934:	4688      	mov	r8, r1
 8004936:	4691      	mov	r9, r2
 8004938:	eb18 0005 	adds.w	r0, r8, r5
 800493c:	eb49 0106 	adc.w	r1, r9, r6
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	461d      	mov	r5, r3
 8004946:	f04f 0600 	mov.w	r6, #0
 800494a:	196b      	adds	r3, r5, r5
 800494c:	eb46 0406 	adc.w	r4, r6, r6
 8004950:	461a      	mov	r2, r3
 8004952:	4623      	mov	r3, r4
 8004954:	f7fb fc56 	bl	8000204 <__aeabi_uldivmod>
 8004958:	4603      	mov	r3, r0
 800495a:	460c      	mov	r4, r1
 800495c:	461a      	mov	r2, r3
 800495e:	4b47      	ldr	r3, [pc, #284]	; (8004a7c <UART_SetConfig+0x384>)
 8004960:	fba3 2302 	umull	r2, r3, r3, r2
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	461d      	mov	r5, r3
 800496e:	f04f 0600 	mov.w	r6, #0
 8004972:	46a9      	mov	r9, r5
 8004974:	46b2      	mov	sl, r6
 8004976:	eb19 0309 	adds.w	r3, r9, r9
 800497a:	eb4a 040a 	adc.w	r4, sl, sl
 800497e:	4699      	mov	r9, r3
 8004980:	46a2      	mov	sl, r4
 8004982:	eb19 0905 	adds.w	r9, r9, r5
 8004986:	eb4a 0a06 	adc.w	sl, sl, r6
 800498a:	f04f 0100 	mov.w	r1, #0
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004996:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800499a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800499e:	4689      	mov	r9, r1
 80049a0:	4692      	mov	sl, r2
 80049a2:	eb19 0005 	adds.w	r0, r9, r5
 80049a6:	eb4a 0106 	adc.w	r1, sl, r6
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	461d      	mov	r5, r3
 80049b0:	f04f 0600 	mov.w	r6, #0
 80049b4:	196b      	adds	r3, r5, r5
 80049b6:	eb46 0406 	adc.w	r4, r6, r6
 80049ba:	461a      	mov	r2, r3
 80049bc:	4623      	mov	r3, r4
 80049be:	f7fb fc21 	bl	8000204 <__aeabi_uldivmod>
 80049c2:	4603      	mov	r3, r0
 80049c4:	460c      	mov	r4, r1
 80049c6:	461a      	mov	r2, r3
 80049c8:	4b2c      	ldr	r3, [pc, #176]	; (8004a7c <UART_SetConfig+0x384>)
 80049ca:	fba3 1302 	umull	r1, r3, r3, r2
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	2164      	movs	r1, #100	; 0x64
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	3332      	adds	r3, #50	; 0x32
 80049dc:	4a27      	ldr	r2, [pc, #156]	; (8004a7c <UART_SetConfig+0x384>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049ea:	4498      	add	r8, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	461d      	mov	r5, r3
 80049f0:	f04f 0600 	mov.w	r6, #0
 80049f4:	46a9      	mov	r9, r5
 80049f6:	46b2      	mov	sl, r6
 80049f8:	eb19 0309 	adds.w	r3, r9, r9
 80049fc:	eb4a 040a 	adc.w	r4, sl, sl
 8004a00:	4699      	mov	r9, r3
 8004a02:	46a2      	mov	sl, r4
 8004a04:	eb19 0905 	adds.w	r9, r9, r5
 8004a08:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a0c:	f04f 0100 	mov.w	r1, #0
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a20:	4689      	mov	r9, r1
 8004a22:	4692      	mov	sl, r2
 8004a24:	eb19 0005 	adds.w	r0, r9, r5
 8004a28:	eb4a 0106 	adc.w	r1, sl, r6
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	461d      	mov	r5, r3
 8004a32:	f04f 0600 	mov.w	r6, #0
 8004a36:	196b      	adds	r3, r5, r5
 8004a38:	eb46 0406 	adc.w	r4, r6, r6
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4623      	mov	r3, r4
 8004a40:	f7fb fbe0 	bl	8000204 <__aeabi_uldivmod>
 8004a44:	4603      	mov	r3, r0
 8004a46:	460c      	mov	r4, r1
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <UART_SetConfig+0x384>)
 8004a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	2164      	movs	r1, #100	; 0x64
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	3332      	adds	r3, #50	; 0x32
 8004a5e:	4a07      	ldr	r2, [pc, #28]	; (8004a7c <UART_SetConfig+0x384>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	f003 0207 	and.w	r2, r3, #7
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4442      	add	r2, r8
 8004a70:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004a72:	e1b2      	b.n	8004dda <UART_SetConfig+0x6e2>
 8004a74:	40011000 	.word	0x40011000
 8004a78:	40011400 	.word	0x40011400
 8004a7c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4ad7      	ldr	r2, [pc, #860]	; (8004de4 <UART_SetConfig+0x6ec>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d005      	beq.n	8004a96 <UART_SetConfig+0x39e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4ad6      	ldr	r2, [pc, #856]	; (8004de8 <UART_SetConfig+0x6f0>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	f040 80d1 	bne.w	8004c38 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a96:	f7fe fcf5 	bl	8003484 <HAL_RCC_GetPCLK2Freq>
 8004a9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	469a      	mov	sl, r3
 8004aa0:	f04f 0b00 	mov.w	fp, #0
 8004aa4:	46d0      	mov	r8, sl
 8004aa6:	46d9      	mov	r9, fp
 8004aa8:	eb18 0308 	adds.w	r3, r8, r8
 8004aac:	eb49 0409 	adc.w	r4, r9, r9
 8004ab0:	4698      	mov	r8, r3
 8004ab2:	46a1      	mov	r9, r4
 8004ab4:	eb18 080a 	adds.w	r8, r8, sl
 8004ab8:	eb49 090b 	adc.w	r9, r9, fp
 8004abc:	f04f 0100 	mov.w	r1, #0
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ac8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004acc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ad0:	4688      	mov	r8, r1
 8004ad2:	4691      	mov	r9, r2
 8004ad4:	eb1a 0508 	adds.w	r5, sl, r8
 8004ad8:	eb4b 0609 	adc.w	r6, fp, r9
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	f04f 0400 	mov.w	r4, #0
 8004aee:	0094      	lsls	r4, r2, #2
 8004af0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004af4:	008b      	lsls	r3, r1, #2
 8004af6:	461a      	mov	r2, r3
 8004af8:	4623      	mov	r3, r4
 8004afa:	4628      	mov	r0, r5
 8004afc:	4631      	mov	r1, r6
 8004afe:	f7fb fb81 	bl	8000204 <__aeabi_uldivmod>
 8004b02:	4603      	mov	r3, r0
 8004b04:	460c      	mov	r4, r1
 8004b06:	461a      	mov	r2, r3
 8004b08:	4bb8      	ldr	r3, [pc, #736]	; (8004dec <UART_SetConfig+0x6f4>)
 8004b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	469b      	mov	fp, r3
 8004b18:	f04f 0c00 	mov.w	ip, #0
 8004b1c:	46d9      	mov	r9, fp
 8004b1e:	46e2      	mov	sl, ip
 8004b20:	eb19 0309 	adds.w	r3, r9, r9
 8004b24:	eb4a 040a 	adc.w	r4, sl, sl
 8004b28:	4699      	mov	r9, r3
 8004b2a:	46a2      	mov	sl, r4
 8004b2c:	eb19 090b 	adds.w	r9, r9, fp
 8004b30:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b34:	f04f 0100 	mov.w	r1, #0
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b48:	4689      	mov	r9, r1
 8004b4a:	4692      	mov	sl, r2
 8004b4c:	eb1b 0509 	adds.w	r5, fp, r9
 8004b50:	eb4c 060a 	adc.w	r6, ip, sl
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	f04f 0400 	mov.w	r4, #0
 8004b66:	0094      	lsls	r4, r2, #2
 8004b68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b6c:	008b      	lsls	r3, r1, #2
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4623      	mov	r3, r4
 8004b72:	4628      	mov	r0, r5
 8004b74:	4631      	mov	r1, r6
 8004b76:	f7fb fb45 	bl	8000204 <__aeabi_uldivmod>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	460c      	mov	r4, r1
 8004b7e:	461a      	mov	r2, r3
 8004b80:	4b9a      	ldr	r3, [pc, #616]	; (8004dec <UART_SetConfig+0x6f4>)
 8004b82:	fba3 1302 	umull	r1, r3, r3, r2
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	2164      	movs	r1, #100	; 0x64
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	3332      	adds	r3, #50	; 0x32
 8004b94:	4a95      	ldr	r2, [pc, #596]	; (8004dec <UART_SetConfig+0x6f4>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba0:	4498      	add	r8, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	469b      	mov	fp, r3
 8004ba6:	f04f 0c00 	mov.w	ip, #0
 8004baa:	46d9      	mov	r9, fp
 8004bac:	46e2      	mov	sl, ip
 8004bae:	eb19 0309 	adds.w	r3, r9, r9
 8004bb2:	eb4a 040a 	adc.w	r4, sl, sl
 8004bb6:	4699      	mov	r9, r3
 8004bb8:	46a2      	mov	sl, r4
 8004bba:	eb19 090b 	adds.w	r9, r9, fp
 8004bbe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004bc2:	f04f 0100 	mov.w	r1, #0
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bd6:	4689      	mov	r9, r1
 8004bd8:	4692      	mov	sl, r2
 8004bda:	eb1b 0509 	adds.w	r5, fp, r9
 8004bde:	eb4c 060a 	adc.w	r6, ip, sl
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4619      	mov	r1, r3
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	f04f 0400 	mov.w	r4, #0
 8004bf4:	0094      	lsls	r4, r2, #2
 8004bf6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bfa:	008b      	lsls	r3, r1, #2
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	4623      	mov	r3, r4
 8004c00:	4628      	mov	r0, r5
 8004c02:	4631      	mov	r1, r6
 8004c04:	f7fb fafe 	bl	8000204 <__aeabi_uldivmod>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4b77      	ldr	r3, [pc, #476]	; (8004dec <UART_SetConfig+0x6f4>)
 8004c10:	fba3 1302 	umull	r1, r3, r3, r2
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	2164      	movs	r1, #100	; 0x64
 8004c18:	fb01 f303 	mul.w	r3, r1, r3
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	3332      	adds	r3, #50	; 0x32
 8004c22:	4a72      	ldr	r2, [pc, #456]	; (8004dec <UART_SetConfig+0x6f4>)
 8004c24:	fba2 2303 	umull	r2, r3, r2, r3
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	f003 020f 	and.w	r2, r3, #15
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4442      	add	r2, r8
 8004c34:	609a      	str	r2, [r3, #8]
 8004c36:	e0d0      	b.n	8004dda <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c38:	f7fe fc10 	bl	800345c <HAL_RCC_GetPCLK1Freq>
 8004c3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	469a      	mov	sl, r3
 8004c42:	f04f 0b00 	mov.w	fp, #0
 8004c46:	46d0      	mov	r8, sl
 8004c48:	46d9      	mov	r9, fp
 8004c4a:	eb18 0308 	adds.w	r3, r8, r8
 8004c4e:	eb49 0409 	adc.w	r4, r9, r9
 8004c52:	4698      	mov	r8, r3
 8004c54:	46a1      	mov	r9, r4
 8004c56:	eb18 080a 	adds.w	r8, r8, sl
 8004c5a:	eb49 090b 	adc.w	r9, r9, fp
 8004c5e:	f04f 0100 	mov.w	r1, #0
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c72:	4688      	mov	r8, r1
 8004c74:	4691      	mov	r9, r2
 8004c76:	eb1a 0508 	adds.w	r5, sl, r8
 8004c7a:	eb4b 0609 	adc.w	r6, fp, r9
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	4619      	mov	r1, r3
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	f04f 0400 	mov.w	r4, #0
 8004c90:	0094      	lsls	r4, r2, #2
 8004c92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c96:	008b      	lsls	r3, r1, #2
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4623      	mov	r3, r4
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	f7fb fab0 	bl	8000204 <__aeabi_uldivmod>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4b50      	ldr	r3, [pc, #320]	; (8004dec <UART_SetConfig+0x6f4>)
 8004cac:	fba3 2302 	umull	r2, r3, r3, r2
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	469b      	mov	fp, r3
 8004cba:	f04f 0c00 	mov.w	ip, #0
 8004cbe:	46d9      	mov	r9, fp
 8004cc0:	46e2      	mov	sl, ip
 8004cc2:	eb19 0309 	adds.w	r3, r9, r9
 8004cc6:	eb4a 040a 	adc.w	r4, sl, sl
 8004cca:	4699      	mov	r9, r3
 8004ccc:	46a2      	mov	sl, r4
 8004cce:	eb19 090b 	adds.w	r9, r9, fp
 8004cd2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004cd6:	f04f 0100 	mov.w	r1, #0
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ce2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ce6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cea:	4689      	mov	r9, r1
 8004cec:	4692      	mov	sl, r2
 8004cee:	eb1b 0509 	adds.w	r5, fp, r9
 8004cf2:	eb4c 060a 	adc.w	r6, ip, sl
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	f04f 0400 	mov.w	r4, #0
 8004d08:	0094      	lsls	r4, r2, #2
 8004d0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d0e:	008b      	lsls	r3, r1, #2
 8004d10:	461a      	mov	r2, r3
 8004d12:	4623      	mov	r3, r4
 8004d14:	4628      	mov	r0, r5
 8004d16:	4631      	mov	r1, r6
 8004d18:	f7fb fa74 	bl	8000204 <__aeabi_uldivmod>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	460c      	mov	r4, r1
 8004d20:	461a      	mov	r2, r3
 8004d22:	4b32      	ldr	r3, [pc, #200]	; (8004dec <UART_SetConfig+0x6f4>)
 8004d24:	fba3 1302 	umull	r1, r3, r3, r2
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	2164      	movs	r1, #100	; 0x64
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	3332      	adds	r3, #50	; 0x32
 8004d36:	4a2d      	ldr	r2, [pc, #180]	; (8004dec <UART_SetConfig+0x6f4>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d42:	4498      	add	r8, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	469b      	mov	fp, r3
 8004d48:	f04f 0c00 	mov.w	ip, #0
 8004d4c:	46d9      	mov	r9, fp
 8004d4e:	46e2      	mov	sl, ip
 8004d50:	eb19 0309 	adds.w	r3, r9, r9
 8004d54:	eb4a 040a 	adc.w	r4, sl, sl
 8004d58:	4699      	mov	r9, r3
 8004d5a:	46a2      	mov	sl, r4
 8004d5c:	eb19 090b 	adds.w	r9, r9, fp
 8004d60:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d64:	f04f 0100 	mov.w	r1, #0
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d78:	4689      	mov	r9, r1
 8004d7a:	4692      	mov	sl, r2
 8004d7c:	eb1b 0509 	adds.w	r5, fp, r9
 8004d80:	eb4c 060a 	adc.w	r6, ip, sl
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	4619      	mov	r1, r3
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	f04f 0400 	mov.w	r4, #0
 8004d96:	0094      	lsls	r4, r2, #2
 8004d98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d9c:	008b      	lsls	r3, r1, #2
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4623      	mov	r3, r4
 8004da2:	4628      	mov	r0, r5
 8004da4:	4631      	mov	r1, r6
 8004da6:	f7fb fa2d 	bl	8000204 <__aeabi_uldivmod>
 8004daa:	4603      	mov	r3, r0
 8004dac:	460c      	mov	r4, r1
 8004dae:	461a      	mov	r2, r3
 8004db0:	4b0e      	ldr	r3, [pc, #56]	; (8004dec <UART_SetConfig+0x6f4>)
 8004db2:	fba3 1302 	umull	r1, r3, r3, r2
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	2164      	movs	r1, #100	; 0x64
 8004dba:	fb01 f303 	mul.w	r3, r1, r3
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	3332      	adds	r3, #50	; 0x32
 8004dc4:	4a09      	ldr	r2, [pc, #36]	; (8004dec <UART_SetConfig+0x6f4>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	f003 020f 	and.w	r2, r3, #15
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4442      	add	r2, r8
 8004dd6:	609a      	str	r2, [r3, #8]
}
 8004dd8:	e7ff      	b.n	8004dda <UART_SetConfig+0x6e2>
 8004dda:	bf00      	nop
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de4:	40011000 	.word	0x40011000
 8004de8:	40011400 	.word	0x40011400
 8004dec:	51eb851f 	.word	0x51eb851f

08004df0 <__libc_init_array>:
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	4e0d      	ldr	r6, [pc, #52]	; (8004e28 <__libc_init_array+0x38>)
 8004df4:	4c0d      	ldr	r4, [pc, #52]	; (8004e2c <__libc_init_array+0x3c>)
 8004df6:	1ba4      	subs	r4, r4, r6
 8004df8:	10a4      	asrs	r4, r4, #2
 8004dfa:	2500      	movs	r5, #0
 8004dfc:	42a5      	cmp	r5, r4
 8004dfe:	d109      	bne.n	8004e14 <__libc_init_array+0x24>
 8004e00:	4e0b      	ldr	r6, [pc, #44]	; (8004e30 <__libc_init_array+0x40>)
 8004e02:	4c0c      	ldr	r4, [pc, #48]	; (8004e34 <__libc_init_array+0x44>)
 8004e04:	f000 fd6c 	bl	80058e0 <_init>
 8004e08:	1ba4      	subs	r4, r4, r6
 8004e0a:	10a4      	asrs	r4, r4, #2
 8004e0c:	2500      	movs	r5, #0
 8004e0e:	42a5      	cmp	r5, r4
 8004e10:	d105      	bne.n	8004e1e <__libc_init_array+0x2e>
 8004e12:	bd70      	pop	{r4, r5, r6, pc}
 8004e14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e18:	4798      	blx	r3
 8004e1a:	3501      	adds	r5, #1
 8004e1c:	e7ee      	b.n	8004dfc <__libc_init_array+0xc>
 8004e1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e22:	4798      	blx	r3
 8004e24:	3501      	adds	r5, #1
 8004e26:	e7f2      	b.n	8004e0e <__libc_init_array+0x1e>
 8004e28:	08005d50 	.word	0x08005d50
 8004e2c:	08005d50 	.word	0x08005d50
 8004e30:	08005d50 	.word	0x08005d50
 8004e34:	08005d54 	.word	0x08005d54

08004e38 <memset>:
 8004e38:	4402      	add	r2, r0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d100      	bne.n	8004e42 <memset+0xa>
 8004e40:	4770      	bx	lr
 8004e42:	f803 1b01 	strb.w	r1, [r3], #1
 8004e46:	e7f9      	b.n	8004e3c <memset+0x4>

08004e48 <sinf>:
 8004e48:	ee10 3a10 	vmov	r3, s0
 8004e4c:	b507      	push	{r0, r1, r2, lr}
 8004e4e:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <sinf+0x7c>)
 8004e50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e54:	4293      	cmp	r3, r2
 8004e56:	dc05      	bgt.n	8004e64 <sinf+0x1c>
 8004e58:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8004ec8 <sinf+0x80>
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	f000 fc41 	bl	80056e4 <__kernel_sinf>
 8004e62:	e004      	b.n	8004e6e <sinf+0x26>
 8004e64:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004e68:	db04      	blt.n	8004e74 <sinf+0x2c>
 8004e6a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004e6e:	b003      	add	sp, #12
 8004e70:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e74:	4668      	mov	r0, sp
 8004e76:	f000 f829 	bl	8004ecc <__ieee754_rem_pio2f>
 8004e7a:	f000 0003 	and.w	r0, r0, #3
 8004e7e:	2801      	cmp	r0, #1
 8004e80:	d008      	beq.n	8004e94 <sinf+0x4c>
 8004e82:	2802      	cmp	r0, #2
 8004e84:	d00d      	beq.n	8004ea2 <sinf+0x5a>
 8004e86:	b9b0      	cbnz	r0, 8004eb6 <sinf+0x6e>
 8004e88:	2001      	movs	r0, #1
 8004e8a:	eddd 0a01 	vldr	s1, [sp, #4]
 8004e8e:	ed9d 0a00 	vldr	s0, [sp]
 8004e92:	e7e4      	b.n	8004e5e <sinf+0x16>
 8004e94:	eddd 0a01 	vldr	s1, [sp, #4]
 8004e98:	ed9d 0a00 	vldr	s0, [sp]
 8004e9c:	f000 f942 	bl	8005124 <__kernel_cosf>
 8004ea0:	e7e5      	b.n	8004e6e <sinf+0x26>
 8004ea2:	2001      	movs	r0, #1
 8004ea4:	eddd 0a01 	vldr	s1, [sp, #4]
 8004ea8:	ed9d 0a00 	vldr	s0, [sp]
 8004eac:	f000 fc1a 	bl	80056e4 <__kernel_sinf>
 8004eb0:	eeb1 0a40 	vneg.f32	s0, s0
 8004eb4:	e7db      	b.n	8004e6e <sinf+0x26>
 8004eb6:	eddd 0a01 	vldr	s1, [sp, #4]
 8004eba:	ed9d 0a00 	vldr	s0, [sp]
 8004ebe:	f000 f931 	bl	8005124 <__kernel_cosf>
 8004ec2:	e7f5      	b.n	8004eb0 <sinf+0x68>
 8004ec4:	3f490fd8 	.word	0x3f490fd8
 8004ec8:	00000000 	.word	0x00000000

08004ecc <__ieee754_rem_pio2f>:
 8004ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ece:	ee10 6a10 	vmov	r6, s0
 8004ed2:	4b86      	ldr	r3, [pc, #536]	; (80050ec <__ieee754_rem_pio2f+0x220>)
 8004ed4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8004ed8:	429c      	cmp	r4, r3
 8004eda:	b087      	sub	sp, #28
 8004edc:	4605      	mov	r5, r0
 8004ede:	dc05      	bgt.n	8004eec <__ieee754_rem_pio2f+0x20>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	ed85 0a00 	vstr	s0, [r5]
 8004ee6:	6043      	str	r3, [r0, #4]
 8004ee8:	2000      	movs	r0, #0
 8004eea:	e020      	b.n	8004f2e <__ieee754_rem_pio2f+0x62>
 8004eec:	4b80      	ldr	r3, [pc, #512]	; (80050f0 <__ieee754_rem_pio2f+0x224>)
 8004eee:	429c      	cmp	r4, r3
 8004ef0:	dc38      	bgt.n	8004f64 <__ieee754_rem_pio2f+0x98>
 8004ef2:	2e00      	cmp	r6, #0
 8004ef4:	f024 040f 	bic.w	r4, r4, #15
 8004ef8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80050f4 <__ieee754_rem_pio2f+0x228>
 8004efc:	4b7e      	ldr	r3, [pc, #504]	; (80050f8 <__ieee754_rem_pio2f+0x22c>)
 8004efe:	dd18      	ble.n	8004f32 <__ieee754_rem_pio2f+0x66>
 8004f00:	429c      	cmp	r4, r3
 8004f02:	ee70 7a47 	vsub.f32	s15, s0, s14
 8004f06:	bf09      	itett	eq
 8004f08:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80050fc <__ieee754_rem_pio2f+0x230>
 8004f0c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8005100 <__ieee754_rem_pio2f+0x234>
 8004f10:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8004f14:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8005104 <__ieee754_rem_pio2f+0x238>
 8004f18:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004f1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004f20:	edc0 6a00 	vstr	s13, [r0]
 8004f24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f28:	edc0 7a01 	vstr	s15, [r0, #4]
 8004f2c:	2001      	movs	r0, #1
 8004f2e:	b007      	add	sp, #28
 8004f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f32:	429c      	cmp	r4, r3
 8004f34:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004f38:	bf09      	itett	eq
 8004f3a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80050fc <__ieee754_rem_pio2f+0x230>
 8004f3e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8005100 <__ieee754_rem_pio2f+0x234>
 8004f42:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8004f46:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8005104 <__ieee754_rem_pio2f+0x238>
 8004f4a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004f4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004f52:	edc0 6a00 	vstr	s13, [r0]
 8004f56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f5a:	edc0 7a01 	vstr	s15, [r0, #4]
 8004f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f62:	e7e4      	b.n	8004f2e <__ieee754_rem_pio2f+0x62>
 8004f64:	4b68      	ldr	r3, [pc, #416]	; (8005108 <__ieee754_rem_pio2f+0x23c>)
 8004f66:	429c      	cmp	r4, r3
 8004f68:	dc71      	bgt.n	800504e <__ieee754_rem_pio2f+0x182>
 8004f6a:	f000 fc03 	bl	8005774 <fabsf>
 8004f6e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800510c <__ieee754_rem_pio2f+0x240>
 8004f72:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004f76:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004f7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f7e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004f82:	ee17 0a90 	vmov	r0, s15
 8004f86:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80050f4 <__ieee754_rem_pio2f+0x228>
 8004f8a:	eeb1 7a46 	vneg.f32	s14, s12
 8004f8e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8004f92:	281f      	cmp	r0, #31
 8004f94:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8005100 <__ieee754_rem_pio2f+0x234>
 8004f98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004f9c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004fa0:	ee16 3a90 	vmov	r3, s13
 8004fa4:	dc1c      	bgt.n	8004fe0 <__ieee754_rem_pio2f+0x114>
 8004fa6:	1e47      	subs	r7, r0, #1
 8004fa8:	4959      	ldr	r1, [pc, #356]	; (8005110 <__ieee754_rem_pio2f+0x244>)
 8004faa:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8004fae:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8004fb2:	428a      	cmp	r2, r1
 8004fb4:	d014      	beq.n	8004fe0 <__ieee754_rem_pio2f+0x114>
 8004fb6:	602b      	str	r3, [r5, #0]
 8004fb8:	ed95 7a00 	vldr	s14, [r5]
 8004fbc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004fc0:	2e00      	cmp	r6, #0
 8004fc2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004fc6:	ed85 0a01 	vstr	s0, [r5, #4]
 8004fca:	dab0      	bge.n	8004f2e <__ieee754_rem_pio2f+0x62>
 8004fcc:	eeb1 7a47 	vneg.f32	s14, s14
 8004fd0:	eeb1 0a40 	vneg.f32	s0, s0
 8004fd4:	ed85 7a00 	vstr	s14, [r5]
 8004fd8:	ed85 0a01 	vstr	s0, [r5, #4]
 8004fdc:	4240      	negs	r0, r0
 8004fde:	e7a6      	b.n	8004f2e <__ieee754_rem_pio2f+0x62>
 8004fe0:	15e4      	asrs	r4, r4, #23
 8004fe2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004fe6:	1aa2      	subs	r2, r4, r2
 8004fe8:	2a08      	cmp	r2, #8
 8004fea:	dde4      	ble.n	8004fb6 <__ieee754_rem_pio2f+0xea>
 8004fec:	eddf 7a43 	vldr	s15, [pc, #268]	; 80050fc <__ieee754_rem_pio2f+0x230>
 8004ff0:	eef0 6a40 	vmov.f32	s13, s0
 8004ff4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004ff8:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004ffc:	eea7 0a27 	vfma.f32	s0, s14, s15
 8005000:	eddf 7a40 	vldr	s15, [pc, #256]	; 8005104 <__ieee754_rem_pio2f+0x238>
 8005004:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8005008:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800500c:	eef0 7a40 	vmov.f32	s15, s0
 8005010:	ee15 3a90 	vmov	r3, s11
 8005014:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005018:	1aa4      	subs	r4, r4, r2
 800501a:	2c19      	cmp	r4, #25
 800501c:	dc04      	bgt.n	8005028 <__ieee754_rem_pio2f+0x15c>
 800501e:	edc5 5a00 	vstr	s11, [r5]
 8005022:	eeb0 0a66 	vmov.f32	s0, s13
 8005026:	e7c7      	b.n	8004fb8 <__ieee754_rem_pio2f+0xec>
 8005028:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8005114 <__ieee754_rem_pio2f+0x248>
 800502c:	eeb0 0a66 	vmov.f32	s0, s13
 8005030:	eea7 0a25 	vfma.f32	s0, s14, s11
 8005034:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005038:	eee7 7a25 	vfma.f32	s15, s14, s11
 800503c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005118 <__ieee754_rem_pio2f+0x24c>
 8005040:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8005044:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005048:	ed85 7a00 	vstr	s14, [r5]
 800504c:	e7b4      	b.n	8004fb8 <__ieee754_rem_pio2f+0xec>
 800504e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005052:	db06      	blt.n	8005062 <__ieee754_rem_pio2f+0x196>
 8005054:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005058:	edc0 7a01 	vstr	s15, [r0, #4]
 800505c:	edc0 7a00 	vstr	s15, [r0]
 8005060:	e742      	b.n	8004ee8 <__ieee754_rem_pio2f+0x1c>
 8005062:	15e2      	asrs	r2, r4, #23
 8005064:	3a86      	subs	r2, #134	; 0x86
 8005066:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005072:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800511c <__ieee754_rem_pio2f+0x250>
 8005076:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800507a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800507e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005082:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005086:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800508a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800508e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005092:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005096:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800509a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800509e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a2:	edcd 7a05 	vstr	s15, [sp, #20]
 80050a6:	d11e      	bne.n	80050e6 <__ieee754_rem_pio2f+0x21a>
 80050a8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80050ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b0:	bf0c      	ite	eq
 80050b2:	2301      	moveq	r3, #1
 80050b4:	2302      	movne	r3, #2
 80050b6:	491a      	ldr	r1, [pc, #104]	; (8005120 <__ieee754_rem_pio2f+0x254>)
 80050b8:	9101      	str	r1, [sp, #4]
 80050ba:	2102      	movs	r1, #2
 80050bc:	9100      	str	r1, [sp, #0]
 80050be:	a803      	add	r0, sp, #12
 80050c0:	4629      	mov	r1, r5
 80050c2:	f000 f88d 	bl	80051e0 <__kernel_rem_pio2f>
 80050c6:	2e00      	cmp	r6, #0
 80050c8:	f6bf af31 	bge.w	8004f2e <__ieee754_rem_pio2f+0x62>
 80050cc:	edd5 7a00 	vldr	s15, [r5]
 80050d0:	eef1 7a67 	vneg.f32	s15, s15
 80050d4:	edc5 7a00 	vstr	s15, [r5]
 80050d8:	edd5 7a01 	vldr	s15, [r5, #4]
 80050dc:	eef1 7a67 	vneg.f32	s15, s15
 80050e0:	edc5 7a01 	vstr	s15, [r5, #4]
 80050e4:	e77a      	b.n	8004fdc <__ieee754_rem_pio2f+0x110>
 80050e6:	2303      	movs	r3, #3
 80050e8:	e7e5      	b.n	80050b6 <__ieee754_rem_pio2f+0x1ea>
 80050ea:	bf00      	nop
 80050ec:	3f490fd8 	.word	0x3f490fd8
 80050f0:	4016cbe3 	.word	0x4016cbe3
 80050f4:	3fc90f80 	.word	0x3fc90f80
 80050f8:	3fc90fd0 	.word	0x3fc90fd0
 80050fc:	37354400 	.word	0x37354400
 8005100:	37354443 	.word	0x37354443
 8005104:	2e85a308 	.word	0x2e85a308
 8005108:	43490f80 	.word	0x43490f80
 800510c:	3f22f984 	.word	0x3f22f984
 8005110:	08005978 	.word	0x08005978
 8005114:	2e85a300 	.word	0x2e85a300
 8005118:	248d3132 	.word	0x248d3132
 800511c:	43800000 	.word	0x43800000
 8005120:	080059f8 	.word	0x080059f8

08005124 <__kernel_cosf>:
 8005124:	ee10 3a10 	vmov	r3, s0
 8005128:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800512c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005134:	da05      	bge.n	8005142 <__kernel_cosf+0x1e>
 8005136:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800513a:	ee17 2a90 	vmov	r2, s15
 800513e:	2a00      	cmp	r2, #0
 8005140:	d03b      	beq.n	80051ba <__kernel_cosf+0x96>
 8005142:	ee20 6a00 	vmul.f32	s12, s0, s0
 8005146:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800514a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80051c0 <__kernel_cosf+0x9c>
 800514e:	4a1d      	ldr	r2, [pc, #116]	; (80051c4 <__kernel_cosf+0xa0>)
 8005150:	ee66 7a07 	vmul.f32	s15, s12, s14
 8005154:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80051c8 <__kernel_cosf+0xa4>
 8005158:	eea6 7a25 	vfma.f32	s14, s12, s11
 800515c:	4293      	cmp	r3, r2
 800515e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80051cc <__kernel_cosf+0xa8>
 8005162:	eee7 5a06 	vfma.f32	s11, s14, s12
 8005166:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80051d0 <__kernel_cosf+0xac>
 800516a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800516e:	eddf 5a19 	vldr	s11, [pc, #100]	; 80051d4 <__kernel_cosf+0xb0>
 8005172:	eee7 5a06 	vfma.f32	s11, s14, s12
 8005176:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80051d8 <__kernel_cosf+0xb4>
 800517a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800517e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8005182:	ee27 7a06 	vmul.f32	s14, s14, s12
 8005186:	eee6 0a07 	vfma.f32	s1, s12, s14
 800518a:	dc04      	bgt.n	8005196 <__kernel_cosf+0x72>
 800518c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8005190:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8005194:	4770      	bx	lr
 8005196:	4a11      	ldr	r2, [pc, #68]	; (80051dc <__kernel_cosf+0xb8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	bfda      	itte	le
 800519c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80051a0:	ee07 3a10 	vmovle	s14, r3
 80051a4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80051a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051ac:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80051b0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80051b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80051b8:	4770      	bx	lr
 80051ba:	eeb0 0a66 	vmov.f32	s0, s13
 80051be:	4770      	bx	lr
 80051c0:	ad47d74e 	.word	0xad47d74e
 80051c4:	3e999999 	.word	0x3e999999
 80051c8:	310f74f6 	.word	0x310f74f6
 80051cc:	b493f27c 	.word	0xb493f27c
 80051d0:	37d00d01 	.word	0x37d00d01
 80051d4:	bab60b61 	.word	0xbab60b61
 80051d8:	3d2aaaab 	.word	0x3d2aaaab
 80051dc:	3f480000 	.word	0x3f480000

080051e0 <__kernel_rem_pio2f>:
 80051e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e4:	ed2d 8b04 	vpush	{d8-d9}
 80051e8:	b0d7      	sub	sp, #348	; 0x15c
 80051ea:	469b      	mov	fp, r3
 80051ec:	460e      	mov	r6, r1
 80051ee:	4bbe      	ldr	r3, [pc, #760]	; (80054e8 <__kernel_rem_pio2f+0x308>)
 80051f0:	9964      	ldr	r1, [sp, #400]	; 0x190
 80051f2:	9002      	str	r0, [sp, #8]
 80051f4:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80051f8:	9865      	ldr	r0, [sp, #404]	; 0x194
 80051fa:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80054f8 <__kernel_rem_pio2f+0x318>
 80051fe:	1ed1      	subs	r1, r2, #3
 8005200:	2308      	movs	r3, #8
 8005202:	fb91 f1f3 	sdiv	r1, r1, r3
 8005206:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800520a:	f10b 3aff 	add.w	sl, fp, #4294967295
 800520e:	1c4c      	adds	r4, r1, #1
 8005210:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8005214:	eba1 050a 	sub.w	r5, r1, sl
 8005218:	aa1a      	add	r2, sp, #104	; 0x68
 800521a:	eb09 070a 	add.w	r7, r9, sl
 800521e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8005222:	4696      	mov	lr, r2
 8005224:	2300      	movs	r3, #0
 8005226:	42bb      	cmp	r3, r7
 8005228:	dd0f      	ble.n	800524a <__kernel_rem_pio2f+0x6a>
 800522a:	af42      	add	r7, sp, #264	; 0x108
 800522c:	2200      	movs	r2, #0
 800522e:	454a      	cmp	r2, r9
 8005230:	dc27      	bgt.n	8005282 <__kernel_rem_pio2f+0xa2>
 8005232:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8005236:	eb0b 0302 	add.w	r3, fp, r2
 800523a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800523e:	9d02      	ldr	r5, [sp, #8]
 8005240:	eddf 7aad 	vldr	s15, [pc, #692]	; 80054f8 <__kernel_rem_pio2f+0x318>
 8005244:	f04f 0c00 	mov.w	ip, #0
 8005248:	e015      	b.n	8005276 <__kernel_rem_pio2f+0x96>
 800524a:	42dd      	cmn	r5, r3
 800524c:	bf5d      	ittte	pl
 800524e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8005252:	ee07 2a90 	vmovpl	s15, r2
 8005256:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800525a:	eef0 7a47 	vmovmi.f32	s15, s14
 800525e:	ecee 7a01 	vstmia	lr!, {s15}
 8005262:	3301      	adds	r3, #1
 8005264:	e7df      	b.n	8005226 <__kernel_rem_pio2f+0x46>
 8005266:	ecf5 6a01 	vldmia	r5!, {s13}
 800526a:	ed33 7a01 	vldmdb	r3!, {s14}
 800526e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005272:	f10c 0c01 	add.w	ip, ip, #1
 8005276:	45d4      	cmp	ip, sl
 8005278:	ddf5      	ble.n	8005266 <__kernel_rem_pio2f+0x86>
 800527a:	ece7 7a01 	vstmia	r7!, {s15}
 800527e:	3201      	adds	r2, #1
 8005280:	e7d5      	b.n	800522e <__kernel_rem_pio2f+0x4e>
 8005282:	ab06      	add	r3, sp, #24
 8005284:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8005288:	9304      	str	r3, [sp, #16]
 800528a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80054f4 <__kernel_rem_pio2f+0x314>
 800528e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80054f0 <__kernel_rem_pio2f+0x310>
 8005292:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8005296:	9303      	str	r3, [sp, #12]
 8005298:	464d      	mov	r5, r9
 800529a:	ab56      	add	r3, sp, #344	; 0x158
 800529c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80052a0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80052a4:	3f01      	subs	r7, #1
 80052a6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80052aa:	00bf      	lsls	r7, r7, #2
 80052ac:	ab56      	add	r3, sp, #344	; 0x158
 80052ae:	19da      	adds	r2, r3, r7
 80052b0:	3a4c      	subs	r2, #76	; 0x4c
 80052b2:	2300      	movs	r3, #0
 80052b4:	1ae9      	subs	r1, r5, r3
 80052b6:	2900      	cmp	r1, #0
 80052b8:	dc4c      	bgt.n	8005354 <__kernel_rem_pio2f+0x174>
 80052ba:	4620      	mov	r0, r4
 80052bc:	f000 faa4 	bl	8005808 <scalbnf>
 80052c0:	eeb0 8a40 	vmov.f32	s16, s0
 80052c4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80052c8:	ee28 0a00 	vmul.f32	s0, s16, s0
 80052cc:	f000 fa5a 	bl	8005784 <floorf>
 80052d0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80052d4:	eea0 8a67 	vfms.f32	s16, s0, s15
 80052d8:	2c00      	cmp	r4, #0
 80052da:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80052de:	edcd 7a01 	vstr	s15, [sp, #4]
 80052e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052e6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80052ea:	dd48      	ble.n	800537e <__kernel_rem_pio2f+0x19e>
 80052ec:	1e69      	subs	r1, r5, #1
 80052ee:	ab06      	add	r3, sp, #24
 80052f0:	f1c4 0008 	rsb	r0, r4, #8
 80052f4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80052f8:	9a01      	ldr	r2, [sp, #4]
 80052fa:	fa4c f300 	asr.w	r3, ip, r0
 80052fe:	441a      	add	r2, r3
 8005300:	4083      	lsls	r3, r0
 8005302:	9201      	str	r2, [sp, #4]
 8005304:	ebac 0203 	sub.w	r2, ip, r3
 8005308:	ab06      	add	r3, sp, #24
 800530a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800530e:	f1c4 0307 	rsb	r3, r4, #7
 8005312:	fa42 f803 	asr.w	r8, r2, r3
 8005316:	f1b8 0f00 	cmp.w	r8, #0
 800531a:	dd41      	ble.n	80053a0 <__kernel_rem_pio2f+0x1c0>
 800531c:	9b01      	ldr	r3, [sp, #4]
 800531e:	2000      	movs	r0, #0
 8005320:	3301      	adds	r3, #1
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	4601      	mov	r1, r0
 8005326:	4285      	cmp	r5, r0
 8005328:	dc6d      	bgt.n	8005406 <__kernel_rem_pio2f+0x226>
 800532a:	2c00      	cmp	r4, #0
 800532c:	dd04      	ble.n	8005338 <__kernel_rem_pio2f+0x158>
 800532e:	2c01      	cmp	r4, #1
 8005330:	d07e      	beq.n	8005430 <__kernel_rem_pio2f+0x250>
 8005332:	2c02      	cmp	r4, #2
 8005334:	f000 8086 	beq.w	8005444 <__kernel_rem_pio2f+0x264>
 8005338:	f1b8 0f02 	cmp.w	r8, #2
 800533c:	d130      	bne.n	80053a0 <__kernel_rem_pio2f+0x1c0>
 800533e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005342:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005346:	b359      	cbz	r1, 80053a0 <__kernel_rem_pio2f+0x1c0>
 8005348:	4620      	mov	r0, r4
 800534a:	f000 fa5d 	bl	8005808 <scalbnf>
 800534e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005352:	e025      	b.n	80053a0 <__kernel_rem_pio2f+0x1c0>
 8005354:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005358:	a806      	add	r0, sp, #24
 800535a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800535e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005362:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005366:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800536a:	ee10 1a10 	vmov	r1, s0
 800536e:	ed32 0a01 	vldmdb	r2!, {s0}
 8005372:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8005376:	ee37 0a80 	vadd.f32	s0, s15, s0
 800537a:	3301      	adds	r3, #1
 800537c:	e79a      	b.n	80052b4 <__kernel_rem_pio2f+0xd4>
 800537e:	d106      	bne.n	800538e <__kernel_rem_pio2f+0x1ae>
 8005380:	1e6b      	subs	r3, r5, #1
 8005382:	aa06      	add	r2, sp, #24
 8005384:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005388:	ea4f 2822 	mov.w	r8, r2, asr #8
 800538c:	e7c3      	b.n	8005316 <__kernel_rem_pio2f+0x136>
 800538e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005392:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800539a:	da31      	bge.n	8005400 <__kernel_rem_pio2f+0x220>
 800539c:	f04f 0800 	mov.w	r8, #0
 80053a0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80053a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a8:	f040 80a8 	bne.w	80054fc <__kernel_rem_pio2f+0x31c>
 80053ac:	1e6b      	subs	r3, r5, #1
 80053ae:	4618      	mov	r0, r3
 80053b0:	2200      	movs	r2, #0
 80053b2:	4548      	cmp	r0, r9
 80053b4:	da4d      	bge.n	8005452 <__kernel_rem_pio2f+0x272>
 80053b6:	2a00      	cmp	r2, #0
 80053b8:	f000 8087 	beq.w	80054ca <__kernel_rem_pio2f+0x2ea>
 80053bc:	aa06      	add	r2, sp, #24
 80053be:	3c08      	subs	r4, #8
 80053c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80053c4:	2900      	cmp	r1, #0
 80053c6:	f000 808d 	beq.w	80054e4 <__kernel_rem_pio2f+0x304>
 80053ca:	4620      	mov	r0, r4
 80053cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80053d0:	9302      	str	r3, [sp, #8]
 80053d2:	f000 fa19 	bl	8005808 <scalbnf>
 80053d6:	9b02      	ldr	r3, [sp, #8]
 80053d8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80054f4 <__kernel_rem_pio2f+0x314>
 80053dc:	0099      	lsls	r1, r3, #2
 80053de:	aa42      	add	r2, sp, #264	; 0x108
 80053e0:	1850      	adds	r0, r2, r1
 80053e2:	1d05      	adds	r5, r0, #4
 80053e4:	461c      	mov	r4, r3
 80053e6:	2c00      	cmp	r4, #0
 80053e8:	f280 80b8 	bge.w	800555c <__kernel_rem_pio2f+0x37c>
 80053ec:	2500      	movs	r5, #0
 80053ee:	1b5c      	subs	r4, r3, r5
 80053f0:	2c00      	cmp	r4, #0
 80053f2:	f2c0 80d8 	blt.w	80055a6 <__kernel_rem_pio2f+0x3c6>
 80053f6:	4f3d      	ldr	r7, [pc, #244]	; (80054ec <__kernel_rem_pio2f+0x30c>)
 80053f8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80054f8 <__kernel_rem_pio2f+0x318>
 80053fc:	2400      	movs	r4, #0
 80053fe:	e0c6      	b.n	800558e <__kernel_rem_pio2f+0x3ae>
 8005400:	f04f 0802 	mov.w	r8, #2
 8005404:	e78a      	b.n	800531c <__kernel_rem_pio2f+0x13c>
 8005406:	ab06      	add	r3, sp, #24
 8005408:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800540c:	b949      	cbnz	r1, 8005422 <__kernel_rem_pio2f+0x242>
 800540e:	b12b      	cbz	r3, 800541c <__kernel_rem_pio2f+0x23c>
 8005410:	aa06      	add	r2, sp, #24
 8005412:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005416:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800541a:	2301      	movs	r3, #1
 800541c:	3001      	adds	r0, #1
 800541e:	4619      	mov	r1, r3
 8005420:	e781      	b.n	8005326 <__kernel_rem_pio2f+0x146>
 8005422:	aa06      	add	r2, sp, #24
 8005424:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005428:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800542c:	460b      	mov	r3, r1
 800542e:	e7f5      	b.n	800541c <__kernel_rem_pio2f+0x23c>
 8005430:	1e68      	subs	r0, r5, #1
 8005432:	ab06      	add	r3, sp, #24
 8005434:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800543c:	aa06      	add	r2, sp, #24
 800543e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8005442:	e779      	b.n	8005338 <__kernel_rem_pio2f+0x158>
 8005444:	1e68      	subs	r0, r5, #1
 8005446:	ab06      	add	r3, sp, #24
 8005448:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800544c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005450:	e7f4      	b.n	800543c <__kernel_rem_pio2f+0x25c>
 8005452:	a906      	add	r1, sp, #24
 8005454:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005458:	3801      	subs	r0, #1
 800545a:	430a      	orrs	r2, r1
 800545c:	e7a9      	b.n	80053b2 <__kernel_rem_pio2f+0x1d2>
 800545e:	f10c 0c01 	add.w	ip, ip, #1
 8005462:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005466:	2a00      	cmp	r2, #0
 8005468:	d0f9      	beq.n	800545e <__kernel_rem_pio2f+0x27e>
 800546a:	eb0b 0305 	add.w	r3, fp, r5
 800546e:	aa1a      	add	r2, sp, #104	; 0x68
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	1898      	adds	r0, r3, r2
 8005474:	3004      	adds	r0, #4
 8005476:	1c69      	adds	r1, r5, #1
 8005478:	3704      	adds	r7, #4
 800547a:	2200      	movs	r2, #0
 800547c:	4465      	add	r5, ip
 800547e:	9005      	str	r0, [sp, #20]
 8005480:	428d      	cmp	r5, r1
 8005482:	f6ff af0a 	blt.w	800529a <__kernel_rem_pio2f+0xba>
 8005486:	a81a      	add	r0, sp, #104	; 0x68
 8005488:	eb02 0c03 	add.w	ip, r2, r3
 800548c:	4484      	add	ip, r0
 800548e:	9803      	ldr	r0, [sp, #12]
 8005490:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005494:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8005498:	9001      	str	r0, [sp, #4]
 800549a:	ee07 0a90 	vmov	s15, r0
 800549e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054a2:	9805      	ldr	r0, [sp, #20]
 80054a4:	edcc 7a00 	vstr	s15, [ip]
 80054a8:	eddf 7a13 	vldr	s15, [pc, #76]	; 80054f8 <__kernel_rem_pio2f+0x318>
 80054ac:	eb00 0802 	add.w	r8, r0, r2
 80054b0:	f04f 0c00 	mov.w	ip, #0
 80054b4:	45d4      	cmp	ip, sl
 80054b6:	dd0c      	ble.n	80054d2 <__kernel_rem_pio2f+0x2f2>
 80054b8:	eb02 0c07 	add.w	ip, r2, r7
 80054bc:	a842      	add	r0, sp, #264	; 0x108
 80054be:	4484      	add	ip, r0
 80054c0:	edcc 7a01 	vstr	s15, [ip, #4]
 80054c4:	3101      	adds	r1, #1
 80054c6:	3204      	adds	r2, #4
 80054c8:	e7da      	b.n	8005480 <__kernel_rem_pio2f+0x2a0>
 80054ca:	9b04      	ldr	r3, [sp, #16]
 80054cc:	f04f 0c01 	mov.w	ip, #1
 80054d0:	e7c7      	b.n	8005462 <__kernel_rem_pio2f+0x282>
 80054d2:	ecfe 6a01 	vldmia	lr!, {s13}
 80054d6:	ed38 7a01 	vldmdb	r8!, {s14}
 80054da:	f10c 0c01 	add.w	ip, ip, #1
 80054de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80054e2:	e7e7      	b.n	80054b4 <__kernel_rem_pio2f+0x2d4>
 80054e4:	3b01      	subs	r3, #1
 80054e6:	e769      	b.n	80053bc <__kernel_rem_pio2f+0x1dc>
 80054e8:	08005d3c 	.word	0x08005d3c
 80054ec:	08005d10 	.word	0x08005d10
 80054f0:	43800000 	.word	0x43800000
 80054f4:	3b800000 	.word	0x3b800000
 80054f8:	00000000 	.word	0x00000000
 80054fc:	4260      	negs	r0, r4
 80054fe:	eeb0 0a48 	vmov.f32	s0, s16
 8005502:	f000 f981 	bl	8005808 <scalbnf>
 8005506:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80054f0 <__kernel_rem_pio2f+0x310>
 800550a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800550e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005512:	db1a      	blt.n	800554a <__kernel_rem_pio2f+0x36a>
 8005514:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80054f4 <__kernel_rem_pio2f+0x314>
 8005518:	ee60 7a27 	vmul.f32	s15, s0, s15
 800551c:	aa06      	add	r2, sp, #24
 800551e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005522:	a906      	add	r1, sp, #24
 8005524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005528:	3408      	adds	r4, #8
 800552a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800552e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005532:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005536:	ee10 3a10 	vmov	r3, s0
 800553a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800553e:	1c6b      	adds	r3, r5, #1
 8005540:	ee17 2a90 	vmov	r2, s15
 8005544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005548:	e73f      	b.n	80053ca <__kernel_rem_pio2f+0x1ea>
 800554a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800554e:	aa06      	add	r2, sp, #24
 8005550:	ee10 3a10 	vmov	r3, s0
 8005554:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8005558:	462b      	mov	r3, r5
 800555a:	e736      	b.n	80053ca <__kernel_rem_pio2f+0x1ea>
 800555c:	aa06      	add	r2, sp, #24
 800555e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8005562:	9202      	str	r2, [sp, #8]
 8005564:	ee07 2a90 	vmov	s15, r2
 8005568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800556c:	3c01      	subs	r4, #1
 800556e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005572:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005576:	ed65 7a01 	vstmdb	r5!, {s15}
 800557a:	e734      	b.n	80053e6 <__kernel_rem_pio2f+0x206>
 800557c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8005580:	ecf7 6a01 	vldmia	r7!, {s13}
 8005584:	ed9c 7a00 	vldr	s14, [ip]
 8005588:	eee6 7a87 	vfma.f32	s15, s13, s14
 800558c:	3401      	adds	r4, #1
 800558e:	454c      	cmp	r4, r9
 8005590:	dc01      	bgt.n	8005596 <__kernel_rem_pio2f+0x3b6>
 8005592:	42a5      	cmp	r5, r4
 8005594:	daf2      	bge.n	800557c <__kernel_rem_pio2f+0x39c>
 8005596:	aa56      	add	r2, sp, #344	; 0x158
 8005598:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800559c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80055a0:	3501      	adds	r5, #1
 80055a2:	3804      	subs	r0, #4
 80055a4:	e723      	b.n	80053ee <__kernel_rem_pio2f+0x20e>
 80055a6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80055a8:	2a03      	cmp	r2, #3
 80055aa:	d84d      	bhi.n	8005648 <__kernel_rem_pio2f+0x468>
 80055ac:	e8df f002 	tbb	[pc, r2]
 80055b0:	021f1f3e 	.word	0x021f1f3e
 80055b4:	aa56      	add	r2, sp, #344	; 0x158
 80055b6:	4411      	add	r1, r2
 80055b8:	399c      	subs	r1, #156	; 0x9c
 80055ba:	4608      	mov	r0, r1
 80055bc:	461c      	mov	r4, r3
 80055be:	2c00      	cmp	r4, #0
 80055c0:	dc5f      	bgt.n	8005682 <__kernel_rem_pio2f+0x4a2>
 80055c2:	4608      	mov	r0, r1
 80055c4:	461c      	mov	r4, r3
 80055c6:	2c01      	cmp	r4, #1
 80055c8:	dc6b      	bgt.n	80056a2 <__kernel_rem_pio2f+0x4c2>
 80055ca:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80054f8 <__kernel_rem_pio2f+0x318>
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	dc77      	bgt.n	80056c2 <__kernel_rem_pio2f+0x4e2>
 80055d2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80055d6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80055da:	f1b8 0f00 	cmp.w	r8, #0
 80055de:	d176      	bne.n	80056ce <__kernel_rem_pio2f+0x4ee>
 80055e0:	edc6 6a00 	vstr	s13, [r6]
 80055e4:	ed86 7a01 	vstr	s14, [r6, #4]
 80055e8:	edc6 7a02 	vstr	s15, [r6, #8]
 80055ec:	e02c      	b.n	8005648 <__kernel_rem_pio2f+0x468>
 80055ee:	aa56      	add	r2, sp, #344	; 0x158
 80055f0:	4411      	add	r1, r2
 80055f2:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80054f8 <__kernel_rem_pio2f+0x318>
 80055f6:	399c      	subs	r1, #156	; 0x9c
 80055f8:	4618      	mov	r0, r3
 80055fa:	2800      	cmp	r0, #0
 80055fc:	da32      	bge.n	8005664 <__kernel_rem_pio2f+0x484>
 80055fe:	f1b8 0f00 	cmp.w	r8, #0
 8005602:	d035      	beq.n	8005670 <__kernel_rem_pio2f+0x490>
 8005604:	eef1 7a47 	vneg.f32	s15, s14
 8005608:	edc6 7a00 	vstr	s15, [r6]
 800560c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8005610:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005614:	a82f      	add	r0, sp, #188	; 0xbc
 8005616:	2101      	movs	r1, #1
 8005618:	428b      	cmp	r3, r1
 800561a:	da2c      	bge.n	8005676 <__kernel_rem_pio2f+0x496>
 800561c:	f1b8 0f00 	cmp.w	r8, #0
 8005620:	d001      	beq.n	8005626 <__kernel_rem_pio2f+0x446>
 8005622:	eef1 7a67 	vneg.f32	s15, s15
 8005626:	edc6 7a01 	vstr	s15, [r6, #4]
 800562a:	e00d      	b.n	8005648 <__kernel_rem_pio2f+0x468>
 800562c:	aa56      	add	r2, sp, #344	; 0x158
 800562e:	4411      	add	r1, r2
 8005630:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80054f8 <__kernel_rem_pio2f+0x318>
 8005634:	399c      	subs	r1, #156	; 0x9c
 8005636:	2b00      	cmp	r3, #0
 8005638:	da0e      	bge.n	8005658 <__kernel_rem_pio2f+0x478>
 800563a:	f1b8 0f00 	cmp.w	r8, #0
 800563e:	d001      	beq.n	8005644 <__kernel_rem_pio2f+0x464>
 8005640:	eef1 7a67 	vneg.f32	s15, s15
 8005644:	edc6 7a00 	vstr	s15, [r6]
 8005648:	9b01      	ldr	r3, [sp, #4]
 800564a:	f003 0007 	and.w	r0, r3, #7
 800564e:	b057      	add	sp, #348	; 0x15c
 8005650:	ecbd 8b04 	vpop	{d8-d9}
 8005654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005658:	ed31 7a01 	vldmdb	r1!, {s14}
 800565c:	3b01      	subs	r3, #1
 800565e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005662:	e7e8      	b.n	8005636 <__kernel_rem_pio2f+0x456>
 8005664:	ed71 7a01 	vldmdb	r1!, {s15}
 8005668:	3801      	subs	r0, #1
 800566a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800566e:	e7c4      	b.n	80055fa <__kernel_rem_pio2f+0x41a>
 8005670:	eef0 7a47 	vmov.f32	s15, s14
 8005674:	e7c8      	b.n	8005608 <__kernel_rem_pio2f+0x428>
 8005676:	ecb0 7a01 	vldmia	r0!, {s14}
 800567a:	3101      	adds	r1, #1
 800567c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005680:	e7ca      	b.n	8005618 <__kernel_rem_pio2f+0x438>
 8005682:	ed50 7a02 	vldr	s15, [r0, #-8]
 8005686:	ed70 6a01 	vldmdb	r0!, {s13}
 800568a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800568e:	3c01      	subs	r4, #1
 8005690:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005694:	ed00 7a01 	vstr	s14, [r0, #-4]
 8005698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800569c:	edc0 7a00 	vstr	s15, [r0]
 80056a0:	e78d      	b.n	80055be <__kernel_rem_pio2f+0x3de>
 80056a2:	ed50 7a02 	vldr	s15, [r0, #-8]
 80056a6:	ed70 6a01 	vldmdb	r0!, {s13}
 80056aa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80056ae:	3c01      	subs	r4, #1
 80056b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80056b4:	ed00 7a01 	vstr	s14, [r0, #-4]
 80056b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056bc:	edc0 7a00 	vstr	s15, [r0]
 80056c0:	e781      	b.n	80055c6 <__kernel_rem_pio2f+0x3e6>
 80056c2:	ed31 7a01 	vldmdb	r1!, {s14}
 80056c6:	3b01      	subs	r3, #1
 80056c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056cc:	e77f      	b.n	80055ce <__kernel_rem_pio2f+0x3ee>
 80056ce:	eef1 6a66 	vneg.f32	s13, s13
 80056d2:	eeb1 7a47 	vneg.f32	s14, s14
 80056d6:	edc6 6a00 	vstr	s13, [r6]
 80056da:	ed86 7a01 	vstr	s14, [r6, #4]
 80056de:	eef1 7a67 	vneg.f32	s15, s15
 80056e2:	e781      	b.n	80055e8 <__kernel_rem_pio2f+0x408>

080056e4 <__kernel_sinf>:
 80056e4:	ee10 3a10 	vmov	r3, s0
 80056e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056ec:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80056f0:	da04      	bge.n	80056fc <__kernel_sinf+0x18>
 80056f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80056f6:	ee17 3a90 	vmov	r3, s15
 80056fa:	b35b      	cbz	r3, 8005754 <__kernel_sinf+0x70>
 80056fc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005700:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005758 <__kernel_sinf+0x74>
 8005704:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800575c <__kernel_sinf+0x78>
 8005708:	eea7 6a27 	vfma.f32	s12, s14, s15
 800570c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005760 <__kernel_sinf+0x7c>
 8005710:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005714:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005764 <__kernel_sinf+0x80>
 8005718:	eea7 6a87 	vfma.f32	s12, s15, s14
 800571c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005768 <__kernel_sinf+0x84>
 8005720:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005724:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005728:	b930      	cbnz	r0, 8005738 <__kernel_sinf+0x54>
 800572a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800576c <__kernel_sinf+0x88>
 800572e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005732:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005736:	4770      	bx	lr
 8005738:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800573c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005740:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005744:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005748:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005770 <__kernel_sinf+0x8c>
 800574c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005750:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	2f2ec9d3 	.word	0x2f2ec9d3
 800575c:	b2d72f34 	.word	0xb2d72f34
 8005760:	3638ef1b 	.word	0x3638ef1b
 8005764:	b9500d01 	.word	0xb9500d01
 8005768:	3c088889 	.word	0x3c088889
 800576c:	be2aaaab 	.word	0xbe2aaaab
 8005770:	3e2aaaab 	.word	0x3e2aaaab

08005774 <fabsf>:
 8005774:	ee10 3a10 	vmov	r3, s0
 8005778:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800577c:	ee00 3a10 	vmov	s0, r3
 8005780:	4770      	bx	lr
	...

08005784 <floorf>:
 8005784:	ee10 3a10 	vmov	r3, s0
 8005788:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800578c:	0dca      	lsrs	r2, r1, #23
 800578e:	3a7f      	subs	r2, #127	; 0x7f
 8005790:	2a16      	cmp	r2, #22
 8005792:	dc2a      	bgt.n	80057ea <floorf+0x66>
 8005794:	2a00      	cmp	r2, #0
 8005796:	da11      	bge.n	80057bc <floorf+0x38>
 8005798:	eddf 7a18 	vldr	s15, [pc, #96]	; 80057fc <floorf+0x78>
 800579c:	ee30 0a27 	vadd.f32	s0, s0, s15
 80057a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80057a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a8:	dd05      	ble.n	80057b6 <floorf+0x32>
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	da23      	bge.n	80057f6 <floorf+0x72>
 80057ae:	4a14      	ldr	r2, [pc, #80]	; (8005800 <floorf+0x7c>)
 80057b0:	2900      	cmp	r1, #0
 80057b2:	bf18      	it	ne
 80057b4:	4613      	movne	r3, r2
 80057b6:	ee00 3a10 	vmov	s0, r3
 80057ba:	4770      	bx	lr
 80057bc:	4911      	ldr	r1, [pc, #68]	; (8005804 <floorf+0x80>)
 80057be:	4111      	asrs	r1, r2
 80057c0:	420b      	tst	r3, r1
 80057c2:	d0fa      	beq.n	80057ba <floorf+0x36>
 80057c4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80057fc <floorf+0x78>
 80057c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80057cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80057d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d4:	ddef      	ble.n	80057b6 <floorf+0x32>
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	bfbe      	ittt	lt
 80057da:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80057de:	fa40 f202 	asrlt.w	r2, r0, r2
 80057e2:	189b      	addlt	r3, r3, r2
 80057e4:	ea23 0301 	bic.w	r3, r3, r1
 80057e8:	e7e5      	b.n	80057b6 <floorf+0x32>
 80057ea:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80057ee:	d3e4      	bcc.n	80057ba <floorf+0x36>
 80057f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80057f4:	4770      	bx	lr
 80057f6:	2300      	movs	r3, #0
 80057f8:	e7dd      	b.n	80057b6 <floorf+0x32>
 80057fa:	bf00      	nop
 80057fc:	7149f2ca 	.word	0x7149f2ca
 8005800:	bf800000 	.word	0xbf800000
 8005804:	007fffff 	.word	0x007fffff

08005808 <scalbnf>:
 8005808:	b508      	push	{r3, lr}
 800580a:	ee10 2a10 	vmov	r2, s0
 800580e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8005812:	ed2d 8b02 	vpush	{d8}
 8005816:	eef0 0a40 	vmov.f32	s1, s0
 800581a:	d004      	beq.n	8005826 <scalbnf+0x1e>
 800581c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005820:	d306      	bcc.n	8005830 <scalbnf+0x28>
 8005822:	ee70 0a00 	vadd.f32	s1, s0, s0
 8005826:	ecbd 8b02 	vpop	{d8}
 800582a:	eeb0 0a60 	vmov.f32	s0, s1
 800582e:	bd08      	pop	{r3, pc}
 8005830:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005834:	d21c      	bcs.n	8005870 <scalbnf+0x68>
 8005836:	4b1f      	ldr	r3, [pc, #124]	; (80058b4 <scalbnf+0xac>)
 8005838:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80058b8 <scalbnf+0xb0>
 800583c:	4298      	cmp	r0, r3
 800583e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8005842:	db10      	blt.n	8005866 <scalbnf+0x5e>
 8005844:	ee10 2a90 	vmov	r2, s1
 8005848:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800584c:	3b19      	subs	r3, #25
 800584e:	4403      	add	r3, r0
 8005850:	2bfe      	cmp	r3, #254	; 0xfe
 8005852:	dd0f      	ble.n	8005874 <scalbnf+0x6c>
 8005854:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80058bc <scalbnf+0xb4>
 8005858:	eeb0 0a48 	vmov.f32	s0, s16
 800585c:	f000 f834 	bl	80058c8 <copysignf>
 8005860:	ee60 0a08 	vmul.f32	s1, s0, s16
 8005864:	e7df      	b.n	8005826 <scalbnf+0x1e>
 8005866:	eddf 7a16 	vldr	s15, [pc, #88]	; 80058c0 <scalbnf+0xb8>
 800586a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800586e:	e7da      	b.n	8005826 <scalbnf+0x1e>
 8005870:	0ddb      	lsrs	r3, r3, #23
 8005872:	e7ec      	b.n	800584e <scalbnf+0x46>
 8005874:	2b00      	cmp	r3, #0
 8005876:	dd06      	ble.n	8005886 <scalbnf+0x7e>
 8005878:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800587c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005880:	ee00 3a90 	vmov	s1, r3
 8005884:	e7cf      	b.n	8005826 <scalbnf+0x1e>
 8005886:	f113 0f16 	cmn.w	r3, #22
 800588a:	da06      	bge.n	800589a <scalbnf+0x92>
 800588c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005890:	4298      	cmp	r0, r3
 8005892:	dcdf      	bgt.n	8005854 <scalbnf+0x4c>
 8005894:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80058c0 <scalbnf+0xb8>
 8005898:	e7de      	b.n	8005858 <scalbnf+0x50>
 800589a:	3319      	adds	r3, #25
 800589c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80058a0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80058a4:	eddf 7a07 	vldr	s15, [pc, #28]	; 80058c4 <scalbnf+0xbc>
 80058a8:	ee07 3a10 	vmov	s14, r3
 80058ac:	ee67 0a27 	vmul.f32	s1, s14, s15
 80058b0:	e7b9      	b.n	8005826 <scalbnf+0x1e>
 80058b2:	bf00      	nop
 80058b4:	ffff3cb0 	.word	0xffff3cb0
 80058b8:	4c000000 	.word	0x4c000000
 80058bc:	7149f2ca 	.word	0x7149f2ca
 80058c0:	0da24260 	.word	0x0da24260
 80058c4:	33000000 	.word	0x33000000

080058c8 <copysignf>:
 80058c8:	ee10 3a10 	vmov	r3, s0
 80058cc:	ee10 2a90 	vmov	r2, s1
 80058d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058d4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80058d8:	4313      	orrs	r3, r2
 80058da:	ee00 3a10 	vmov	s0, r3
 80058de:	4770      	bx	lr

080058e0 <_init>:
 80058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e2:	bf00      	nop
 80058e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e6:	bc08      	pop	{r3}
 80058e8:	469e      	mov	lr, r3
 80058ea:	4770      	bx	lr

080058ec <_fini>:
 80058ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ee:	bf00      	nop
 80058f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f2:	bc08      	pop	{r3}
 80058f4:	469e      	mov	lr, r3
 80058f6:	4770      	bx	lr
